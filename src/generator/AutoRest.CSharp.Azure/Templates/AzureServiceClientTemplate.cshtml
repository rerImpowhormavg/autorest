@using System
@using AutoRest.CSharp.Azure.Templates
@using System.Linq
@using AutoRest.Core.Utilities
@using AutoRest.CSharp.Azure.TemplateModels
@using AutoRest.CSharp.TemplateModels
@using AutoRest.CSharp.Templates
@inherits AutoRest.Core.Template<AutoRest.CSharp.Azure.TemplateModels.AzureServiceClientTemplateModel>
@Header("// ")
@EmptyLine
namespace @Settings.Namespace
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.Net;
    using System.Net.Http;
    using System.Net.Http.Headers;
    using System.Text;
    using System.Text.RegularExpressions;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
@foreach (var usingString in Model.Usings) {
@:    using @usingString;
}
@EmptyLine
    @if (!string.IsNullOrWhiteSpace(Model.Documentation))
    {
    @:/// <summary>
    @:@WrapComment("/// ", Model.Documentation.EscapeXmlComment())
    @:/// </summary>
    }
    public partial class @Model.Name : ServiceClient<@Model.Name>, I@(Model.Name), IAzureClient
    {
        @(Include(new ServiceClientBodyTemplate(), (ServiceClientTemplateModel)Model))
    
        /// <summary>
        /// An optional partial-method to perform custom initialization.
        /// </summary>
        partial void CustomInitialize();

        /// <summary>
        /// Initializes client properties.
        /// </summary>
        private void Initialize()
        {
        @foreach (var operation in Model.Operations) 
        {
            @:this.@(operation.MethodGroupName) = new @(operation.MethodGroupType)(this);
        }

        @if (Model.IsCustomBaseUri)
        {
            @:this.BaseUri = "@Model.BaseUrl";
        }
        else
        {
            @:this.BaseUri = new Uri("@Model.BaseUrl");
        }

        @foreach (var property in Model.Properties.Where(p => p.DefaultValue != null))
        {
            @:this.@(property.Name) = @(property.DefaultValue);
        }

            SerializationSettings = new JsonSerializerSettings
            {
                Formatting = Formatting.Indented,
                DateFormatHandling = DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = DateTimeZoneHandling.Utc,
                NullValueHandling = NullValueHandling.Ignore,
                ReferenceLoopHandling = ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            @if (Model.NeedsTransformationConverter)
            {
            @:SerializationSettings.Converters.Add(new TransformationJsonConverter());
            }
            DeserializationSettings = new JsonSerializerSettings
            {
                DateFormatHandling = DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = DateTimeZoneHandling.Utc,
                NullValueHandling = NullValueHandling.Ignore,
                ReferenceLoopHandling = ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            @foreach (var polymorphicType in Model.ModelTypes.Where(t => t.PolymorphicDiscriminator != null))
            {
            @:SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<@(polymorphicType.Name)>("@(polymorphicType.PolymorphicDiscriminator)"));
            @:DeserializationSettings.Converters.Add(new PolymorphicDeserializeJsonConverter<@(polymorphicType.Name)>("@(polymorphicType.PolymorphicDiscriminator)"));
            }

            CustomInitialize();

            @if (Model.NeedsTransformationConverter)
            {
            @:DeserializationSettings.Converters.Add(new TransformationJsonConverter());
            }

            DeserializationSettings.Converters.Add(new CloudErrorJsonConverter()); 
        }    
    
        @foreach (var method in Model.MethodTemplateModels)
        {
        @:@(Include(new AzureMethodTemplate(), (AzureMethodTemplateModel)method))
        @EmptyLine
        @:
        }
    }
}
