@using System.Globalization
@using System.Linq;
@using System
@using AutoRest.Core.Model
@using AutoRest.Core.Utilities
@using AutoRest.CSharp
@using AutoRest.CSharp.Model
@inherits AutoRest.Core.Template<AutoRest.CSharp.Model.MethodCs>

@if (!string.IsNullOrWhiteSpace(Model.Description) || !string.IsNullOrEmpty(Model.Summary))
{
@:/// <summary>
@:@WrapComment("/// ", String.IsNullOrEmpty(Model.Summary) ? Model.Description.EscapeXmlComment() : Model.Summary.EscapeXmlComment())
    if (!string.IsNullOrEmpty(Model.ExternalDocsUrl))
    {
@:/// <see href="@Model.ExternalDocsUrl" />
    }
@:/// </summary>
}
@if (!String.IsNullOrEmpty(Model.Description) && !String.IsNullOrEmpty(Model.Summary))
{
@:/// <remarks>
@:@WrapComment("/// ", Model.Description.EscapeXmlComment())
@:/// </remarks>
}
@foreach (var parameter in Model.LocalParameters)
{
@:/// <param name='@parameter.Name'>
@WrapComment("/// ", parameter.Documentation.EscapeXmlComment())@:
@:/// </param>
}
/// <param name='customHeaders'>
/// Headers that will be added to request.
/// </param>
/// <param name='cancellationToken'>
/// The cancellation token.
/// </param>
/// <exception cref="@(Model.OperationExceptionTypeString)">
/// Thrown when the operation returned an invalid status code
/// </exception>
@if (Model.Responses.Where(r => r.Value.Body != null).Any())
{
@:/// <exception cref="Microsoft.Rest.SerializationException">
@:/// Thrown when unable to deserialize the response
@:/// </exception>
}
@if (Model.Parameters.Cast<ParameterCs>().Any(p => !p.IsConstant && p.IsRequired &&p.IsNullable()))
{
@:/// <exception cref="Microsoft.Rest.ValidationException">
@:/// Thrown when a required parameter is null
@:/// </exception>
    }
/// <return>
/// A response object containing the response body and response headers.
/// </return>
@if (Model.Deprecated)
{
@:[System.Obsolete()]
}
public async System.Threading.Tasks.Task<@(Model.OperationResponseReturnTypeString)> @(Model.Name)WithHttpMessagesAsync(@(Model.GetAsyncMethodParameterDeclaration(true)))
{
    @foreach (ParameterCs parameter in Model.Parameters.Where(p => !p.IsConstant))
    {
        if (parameter.IsRequired && parameter.IsNullable())
        {
    @:if (@(parameter.Name) == null)
    @:{
        @:throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "@(parameter.Name)");
    @:}
@:
        }
        if(parameter.CanBeValidated  && (Model.HttpMethod != HttpMethod.Patch || parameter.Location != ParameterLocation.Body))
        {
    @:@(parameter.ModelType.ValidateType(Model, parameter.Name, parameter.Constraints))
        }
    }

    @foreach (ParameterCs parameter in Model.Parameters)
    {
        if (parameter.IsConstant && !parameter.IsClientProperty)
        {
    @:@(parameter.ModelTypeName) @(parameter.Name) = @(parameter.DefaultValue);
        }

        if (parameter.ModelType is CompositeType
            && !parameter.IsConstant
            && parameter.IsRequired
            && !parameter.IsClientProperty
            && ((CompositeType)parameter.ModelType).ContainsConstantProperties)
        {
    @:if (@(parameter.Name) == null)
    @:{
    @:    @(parameter.Name) = new @(parameter.ModelTypeName)();
    @:}
        }

    }
    @Model.BuildInputMappings()
    // Tracing
    bool _shouldTrace = Microsoft.Rest.ServiceClientTracing.IsEnabled;
    string _invocationId = null;
    if (_shouldTrace)
    {
        _invocationId = Microsoft.Rest.ServiceClientTracing.NextInvocationId.ToString();
        System.Collections.Generic.Dictionary<string, object> tracingParameters = new System.Collections.Generic.Dictionary<string, object>();
    @foreach (var parameter in Model.LogicalParameters.Where(p => !p.IsClientProperty))
    {
        @:tracingParameters.Add("@(parameter.Name)", @(parameter.Name));
    }
        tracingParameters.Add("cancellationToken", cancellationToken);
        Microsoft.Rest.ServiceClientTracing.Enter(_invocationId, this, "@(Model.Name)", tracingParameters);
    }

    // Construct URL
@if (Model.IsAbsoluteUrl)
{
    @:string _url = "@(Model.Url)";
}
else
{
if (Model.IsCustomBaseUri)
{
    @:var _baseUrl = @(Model.ClientReference).BaseUri;
    @:var _url = _baseUrl + (_baseUrl.EndsWith("/") ? "" : "/") + "@(Model.Url.TrimStart('/'))";
}
else
{
    @:var _baseUrl = @(Model.ClientReference).BaseUri.AbsoluteUri;
    @:var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "@(Model.Url.TrimStart('/'))").ToString();
}    
}
    @(Model.BuildUrl("_url"))
    // Create HTTP transport objects
    var _httpRequest = new System.Net.Http.HttpRequestMessage();
    System.Net.Http.HttpResponseMessage _httpResponse = null;

    _httpRequest.Method = new System.Net.Http.HttpMethod("@(Model.HttpMethod.ToString().ToUpper())");
    _httpRequest.RequestUri = new System.Uri(_url);
    // Set Headers
    @(Model.SetDefaultHeaders)
    @foreach (ParameterCs parameter in Model.LogicalParameters.Where(p => p.Location == ParameterLocation.Header))
    {
        if (!parameter.IsNullable())
        {
    @:if (_httpRequest.Headers.Contains("@(parameter.SerializedName)"))
    @:{
    @:    _httpRequest.Headers.Remove("@(parameter.SerializedName)");
    @:}
    @:_httpRequest.Headers.TryAddWithoutValidation("@(parameter.SerializedName)", @parameter.ModelType.ToString(Model.ClientReference, parameter.Name));
        }
        else
        {
    @:if (@(parameter.Name) != null)
    @:{
    @:    if (_httpRequest.Headers.Contains("@(parameter.SerializedName)"))
    @:    {
    @:        _httpRequest.Headers.Remove("@(parameter.SerializedName)");
    @:    }
    @:    _httpRequest.Headers.TryAddWithoutValidation("@(parameter.SerializedName)", @parameter.ModelType.ToString(Model.ClientReference, parameter.Name));
    @:}
        }
    }
    if (customHeaders != null)
    {
        foreach(var _header in customHeaders)
        {
            if (_httpRequest.Headers.Contains(_header.Key))
            {
                _httpRequest.Headers.Remove(_header.Key);
            }
            _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
        }
    }
    @EmptyLine

    // Serialize Request
    string _requestContent = null;
    @if (Model.RequestBody != null)
    {
        if (Model.RequestBody.ModelType.IsPrimaryType(KnownPrimaryType.Stream))
        {
        <text>
     System.Net.Http.StreamContent _fileStreamContent = new System.Net.Http.StreamContent(@(Model.RequestBody.Name));
    _httpRequest.Content = _fileStreamContent;
    _httpRequest.Content.Headers.ContentType =System.Net.Http.Headers.MediaTypeHeaderValue.Parse("@(Model.RequestContentType)");
        </text>
        }
        else
        {
            if (!Model.RequestBody.IsNullable())
            {
    @:_requestContent = Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(@(Model.RequestBody.Name), @(Model.GetSerializationSettingsReference(Model.RequestBody.ModelType)));
    @:_httpRequest.Content = new System.Net.Http.StringContent(_requestContent, System.Text.Encoding.UTF8);
    @:_httpRequest.Content.Headers.ContentType =System.Net.Http.Headers.MediaTypeHeaderValue.Parse("@(Model.RequestContentType)");
            }
            else
            {
    @:if(@(Model.RequestBody.Name) != null)
    @:{
    @:    _requestContent = Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(@(Model.RequestBody.Name), @(Model.GetSerializationSettingsReference(Model.RequestBody.ModelType)));
    @:    _httpRequest.Content = new System.Net.Http.StringContent(_requestContent, System.Text.Encoding.UTF8);
    @:    _httpRequest.Content.Headers.ContentType =System.Net.Http.Headers.MediaTypeHeaderValue.Parse("@(Model.RequestContentType)");
    @:}
            }
        }
    }
    else if (Model.LogicalParameters.Where(p => p.Location == ParameterLocation.FormData).Any())
    {
        <text>
    System.Net.Http.MultipartFormDataContent _multiPartContent = new System.Net.Http.MultipartFormDataContent();
        </text>
        foreach (ParameterCs parameter in Model.LogicalParameters.Where(p => p.Location == ParameterLocation.FormData))
        {
    @:if (@(parameter.Name) != null)
    @:{
        @{ string localParam = "_"+ @parameter.Name.Value.Replace("this.", ""); }
        if (parameter.ModelType.IsPrimaryType(KnownPrimaryType.Stream))
        {
        <text>        
         System.Net.Http.StreamContent _@parameter.Name = new System.Net.Http.StreamContent(@parameter.Name);
        @(localParam).Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/octet-stream");
        System.IO.FileStream @(localParam)AsFileStream = @parameter.Name as System.IO.FileStream;
        if (@(localParam)AsFileStream != null)
        {
            System.Net.Http.Headers.ContentDispositionHeaderValue _contentDispositionHeaderValue = new System.Net.Http.Headers.ContentDispositionHeaderValue("form-data");
            _contentDispositionHeaderValue.Name = "@(parameter.SerializedName)";
            _contentDispositionHeaderValue.FileName = @(localParam)AsFileStream.Name;
            @(localParam).Headers.ContentDisposition = _contentDispositionHeaderValue;        
        }    
        </text>
            }
            else
            {
        @:System.Net.Http.StringContent @(localParam) = new System.Net.Http.StringContent(@(parameter.ModelType.ToString(Model.ClientReference, parameter.Name)), System.Text.Encoding.UTF8);
            }
        @:_multiPartContent.Add(@(localParam), "@(parameter.SerializedName)");
    @:}
        }
    @:_httpRequest.Content = _multiPartContent;
    }

    @if (Settings.AddCredentials)
    {
        <text>
    // Set Credentials
    if (@(Model.ClientReference).Credentials != null)
    {
        cancellationToken.ThrowIfCancellationRequested();
        await @(Model.ClientReference).Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
    }
        </text>
    }
    
    // Send Request
    if (_shouldTrace)
    {
        Microsoft.Rest.ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
    }

    cancellationToken.ThrowIfCancellationRequested();
    @if (Model.ReturnType.Body.IsPrimaryType(KnownPrimaryType.Stream) || Model.HttpMethod == HttpMethod.Head)
    {
    @:_httpResponse = await @(Model.ClientReference).HttpClient.SendAsync(_httpRequest, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
    }
    else
    {
    @:_httpResponse = await @(Model.ClientReference).HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
    }
    if (_shouldTrace)
    {
        Microsoft.Rest.ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
    }

    System.Net.HttpStatusCode _statusCode = _httpResponse.StatusCode;
    cancellationToken.ThrowIfCancellationRequested();
    string _responseContent = null;

    if (@(Model.FailureStatusCodePredicate))
    {
        var ex = new @(Model.OperationExceptionTypeString)(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
    @if (Model.DefaultResponse.Body != null)
    {
        @:try
        @:{
            if (Model.DefaultResponse.Body.IsPrimaryType(KnownPrimaryType.Stream))
            {
            @:@(Model.DefaultResponse.Body.AsNullableType()) _errorBody = await _httpResponse.Content.ReadAsStreamAsync().ConfigureAwait(false);
            }
            else
            {
            @:_responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
            @:@(Model.DefaultResponse.Body.AsNullableType()) _errorBody =  Microsoft.Rest.Serialization.SafeJsonConvert.DeserializeObject<@(Model.DefaultResponse.Body.AsNullableType())>(_responseContent, @(Model.GetDeserializationSettingsReference(Model.DefaultResponse.Body)));
            }
            @:if (_errorBody != null)
            @:{
                @:@(Model.InitializeExceptionWithMessage)
                @:ex.Body = _errorBody;
            @:}
        @:}
        @:catch (Newtonsoft.Json.JsonException)
        @:{
        @:    // Ignore the exception
        @:}
    }
    else
    {
        //If not defined by default model, read content as string
        @:if (_httpResponse.Content != null) {
            @:_responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
        @:}
        @:else {
            @:_responseContent = string.Empty;
        @:}
    }

        ex.Request = new Microsoft.Rest.HttpRequestMessageWrapper(_httpRequest, _requestContent);
        ex.Response = new Microsoft.Rest.HttpResponseMessageWrapper(_httpResponse, _responseContent);
        @(Model.InitializeException)
        if (_shouldTrace)
        {
            Microsoft.Rest.ServiceClientTracing.Error(_invocationId, ex);
        }

        _httpRequest.Dispose();
        if (_httpResponse != null)
        {
            _httpResponse.Dispose();
        }
        throw ex;
    }

    // Create Result
    var _result = new @(Model.OperationResponseReturnTypeString)();
    _result.Request = _httpRequest;
    _result.Response = _httpResponse;
    @(Model.InitializeResponseBody)

    @foreach (var responsePair in Model.Responses.Where(r => r.Value.Body != null))
    {
    <text>
    // Deserialize Response
    if ((int)_statusCode == @MethodCs.GetStatusCodeReference(responsePair.Key))
    {
        @if (responsePair.Value.Body.IsPrimaryType(KnownPrimaryType.Stream))
        {
        @:_result.Body = await _httpResponse.Content.ReadAsStreamAsync().ConfigureAwait(false);
        }
        else
        {

        @:_responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
        @:try
        @:{
            @:_result.Body = Microsoft.Rest.Serialization.SafeJsonConvert.DeserializeObject<@(responsePair.Value.Body.AsNullableType())>(_responseContent, @(Model.GetDeserializationSettingsReference(responsePair.Value.Body)));
        @:}
        @:catch (Newtonsoft.Json.JsonException ex)
        @:{
        @:    _httpRequest.Dispose();
        @:    if (_httpResponse != null)
        @:    {
        @:        _httpResponse.Dispose();
        @:    }
        @:    throw new Microsoft.Rest.SerializationException("Unable to deserialize the response.", _responseContent, ex);
        @:}
        }
    }
    </text>
    }

    @if (Model.ReturnType.Body != null && Model.DefaultResponse.Body != null && !Model.Responses.Any())
    {
        if (Model.DefaultResponse.Body.IsPrimaryType(KnownPrimaryType.Stream))
        {
    @:_result.Body = await _httpResponse.Content.ReadAsStreamAsync().ConfigureAwait(false);
        }
        else
        {
    @:string _defaultResponseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
    @:try
    @:{
        @:_result.Body = Microsoft.Rest.Serialization.SafeJsonConvert.DeserializeObject<@(Model.DefaultResponse.Body.AsNullableType())>(_defaultResponseContent, @(Model.GetDeserializationSettingsReference(Model.DefaultResponse.Body)));
    @:}
    @:catch (Newtonsoft.Json.JsonException ex)
    @:{
    @:    _httpRequest.Dispose();
    @:    if (_httpResponse != null)
    @:    {
    @:        _httpResponse.Dispose();
    @:    }
    @:    throw new Microsoft.Rest.SerializationException("Unable to deserialize the response.", _defaultResponseContent, ex);
    @:}
        }
    }

    @if (Model.ReturnType.Headers != null)
    {

    @:try
    @:{
        @:_result.Headers = _httpResponse.GetHeadersAsJson().ToObject<@(Model.ReturnType.Headers.Name)>(Newtonsoft.Json.JsonSerializer.Create(@(Model.GetDeserializationSettingsReference(Model.DefaultResponse.Body))));
    @:}
    @:catch (Newtonsoft.Json.JsonException ex)
    @:{
    @:    _httpRequest.Dispose();
    @:    if (_httpResponse != null)
    @:    {
    @:        _httpResponse.Dispose();
    @:    }
    @:    throw new Microsoft.Rest.SerializationException("Unable to deserialize the headers.", _httpResponse.GetHeadersAsJson().ToString(), ex);
    @:}
    }

    if (_shouldTrace)
    {
        Microsoft.Rest.ServiceClientTracing.Exit(_invocationId, _result);
    }

    return _result;
}
