package complexgroup

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

import (
    "github.com/Azure/go-autorest/autorest"
    "github.com/Azure/go-autorest/autorest/date"
)    

// CMYKColors enumerates the values for cmyk colors.
type CMYKColors string

const (
    // BlacK specifies the blac k state for cmyk colors.
    BlacK CMYKColors = "blacK"
    // Cyan specifies the cyan state for cmyk colors.
    Cyan CMYKColors = "cyan"
    // Magenta specifies the magenta state for cmyk colors.
    Magenta CMYKColors = "Magenta"
    // YELLOW specifies the yellow state for cmyk colors.
    YELLOW CMYKColors = "YELLOW"
)


// ArrayWrapper is
type ArrayWrapper struct {
    autorest.Response `json:"-"`
    Array *[]string `json:"array,omitempty"`
}

// Basic is
type Basic struct {
    autorest.Response `json:"-"`
    ID *int32 `json:"id,omitempty"`
    Name *string `json:"name,omitempty"`
    Color CMYKColors `json:"color,omitempty"`
}

// BooleanWrapper is
type BooleanWrapper struct {
    autorest.Response `json:"-"`
    FieldTrue *bool `json:"field_true,omitempty"`
    FieldFalse *bool `json:"field_false,omitempty"`
}

// ByteWrapper is
type ByteWrapper struct {
    autorest.Response `json:"-"`
    Field *[]byte `json:"field,omitempty"`
}

// Cat is
type Cat struct {
    ID *int32 `json:"id,omitempty"`
    Name *string `json:"name,omitempty"`
    Color *string `json:"color,omitempty"`
    Hates *[]Dog `json:"hates,omitempty"`
}

// Cookiecuttershark is
type Cookiecuttershark struct {
    Species *string `json:"species,omitempty"`
    Length *float64 `json:"length,omitempty"`
    Siblings *[]Fish `json:"siblings,omitempty"`
    Age *int32 `json:"age,omitempty"`
    Birthday *date.Time `json:"birthday,omitempty"`
}

// Datetimerfc1123Wrapper is
type Datetimerfc1123Wrapper struct {
    autorest.Response `json:"-"`
    Field *date.TimeRFC1123 `json:"field,omitempty"`
    Now *date.TimeRFC1123 `json:"now,omitempty"`
}

// DatetimeWrapper is
type DatetimeWrapper struct {
    autorest.Response `json:"-"`
    Field *date.Time `json:"field,omitempty"`
    Now *date.Time `json:"now,omitempty"`
}

// DateWrapper is
type DateWrapper struct {
    autorest.Response `json:"-"`
    Field *date.Date `json:"field,omitempty"`
    Leap *date.Date `json:"leap,omitempty"`
}

// DictionaryWrapper is
type DictionaryWrapper struct {
    autorest.Response `json:"-"`
    DefaultProgram *map[string]*string `json:"defaultProgram,omitempty"`
}

// Dog is
type Dog struct {
    ID *int32 `json:"id,omitempty"`
    Name *string `json:"name,omitempty"`
    Food *string `json:"food,omitempty"`
}

// DoubleWrapper is
type DoubleWrapper struct {
    autorest.Response `json:"-"`
    Field1 *float64 `json:"field1,omitempty"`
    Field56ZerosAfterTheDotAndNegativeZeroBeforeDotAndThisIsALongFieldNameOnPurpose *float64 `json:"field_56_zeros_after_the_dot_and_negative_zero_before_dot_and_this_is_a_long_field_name_on_purpose,omitempty"`
}

// DurationWrapper is
type DurationWrapper struct {
    autorest.Response `json:"-"`
    Field *string `json:"field,omitempty"`
}

// Error is
type Error struct {
    Status *int32 `json:"status,omitempty"`
    Message *string `json:"message,omitempty"`
}

// Fish is
type Fish struct {
    autorest.Response `json:"-"`
    Species *string `json:"species,omitempty"`
    Length *float64 `json:"length,omitempty"`
    Siblings *[]Fish `json:"siblings,omitempty"`
}

// FloatWrapper is
type FloatWrapper struct {
    autorest.Response `json:"-"`
    Field1 *float64 `json:"field1,omitempty"`
    Field2 *float64 `json:"field2,omitempty"`
}

// Goblinshark is
type Goblinshark struct {
    Species *string `json:"species,omitempty"`
    Length *float64 `json:"length,omitempty"`
    Siblings *[]Fish `json:"siblings,omitempty"`
    Age *int32 `json:"age,omitempty"`
    Birthday *date.Time `json:"birthday,omitempty"`
    Jawsize *int32 `json:"jawsize,omitempty"`
}

// IntWrapper is
type IntWrapper struct {
    autorest.Response `json:"-"`
    Field1 *int32 `json:"field1,omitempty"`
    Field2 *int32 `json:"field2,omitempty"`
}

// LongWrapper is
type LongWrapper struct {
    autorest.Response `json:"-"`
    Field1 *int64 `json:"field1,omitempty"`
    Field2 *int64 `json:"field2,omitempty"`
}

// Pet is
type Pet struct {
    ID *int32 `json:"id,omitempty"`
    Name *string `json:"name,omitempty"`
}

// ReadonlyObj is
type ReadonlyObj struct {
    autorest.Response `json:"-"`
    ID *string `json:"id,omitempty"`
    Size *int32 `json:"size,omitempty"`
}

// Salmon is
type Salmon struct {
    Species *string `json:"species,omitempty"`
    Length *float64 `json:"length,omitempty"`
    Siblings *[]Fish `json:"siblings,omitempty"`
    Location *string `json:"location,omitempty"`
    Iswild *bool `json:"iswild,omitempty"`
}

// Sawshark is
type Sawshark struct {
    Species *string `json:"species,omitempty"`
    Length *float64 `json:"length,omitempty"`
    Siblings *[]Fish `json:"siblings,omitempty"`
    Age *int32 `json:"age,omitempty"`
    Birthday *date.Time `json:"birthday,omitempty"`
    Picture *[]byte `json:"picture,omitempty"`
}

// Shark is
type Shark struct {
    Species *string `json:"species,omitempty"`
    Length *float64 `json:"length,omitempty"`
    Siblings *[]Fish `json:"siblings,omitempty"`
    Age *int32 `json:"age,omitempty"`
    Birthday *date.Time `json:"birthday,omitempty"`
}

// Siamese is
type Siamese struct {
    autorest.Response `json:"-"`
    ID *int32 `json:"id,omitempty"`
    Name *string `json:"name,omitempty"`
    Color *string `json:"color,omitempty"`
    Hates *[]Dog `json:"hates,omitempty"`
    Breed *string `json:"breed,omitempty"`
}

// StringWrapper is
type StringWrapper struct {
    autorest.Response `json:"-"`
    Field *string `json:"field,omitempty"`
    Empty *string `json:"empty,omitempty"`
    Null *string `json:"null,omitempty"`
}

