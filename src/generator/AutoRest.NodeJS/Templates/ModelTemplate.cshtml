@using System
@using System.Linq
@using System.Collections.Generic
@using AutoRest.NodeJS.Model
@inherits AutoRest.Core.Template<AutoRest.NodeJS.Model.CompositeTypeJs>
/*
@Header(" * ")
 */
@EmptyLine
'use strict';
@EmptyLine
@if (Model.ContainsPropertiesInCompositeType() || Model.BaseModelType != null)
{
@:const models = require('./index');
@EmptyLine
}
/**
 * @@class
 * Initializes a new instance of the @(Model.Name) class.
 * @@constructor
@if (!String.IsNullOrEmpty(Model.Summary))
{
  @WrapComment(" * ", "@summary " + Model.Summary)@:
@: *
}
@if (!String.IsNullOrEmpty(Model.Documentation))
{
  @WrapComment(" * ", Model.Documentation)@:
@: *
}
@foreach (var property in Model.DocumentationPropertyList)
{
    @CompositeTypeJs.ConstructPropertyDocumentation(
                      WrapComment(" * ", "@member {" + CompositeTypeJs.GetPropertyDocumentationType(property)
                                                     + "} " + CompositeTypeJs.GetPropertyDocumentationName(property)
                                                     + " " + CompositeTypeJs.GetPropertyDocumentationString(property)))
}
 */
@{
    if (Model.BaseModelType != null)
    {
@:class @(Model.Name) extends models['@(Model.BaseModelType.Name)'] {
    }
    else
    {
@:class @(Model.Name) {
    }
  @:constructor() {
    if (Model.BaseModelType != null)
    {
    @:super();
    }
  @:}
}
@EmptyLine
  /**
   * Defines the metadata of @Model.Name
   *
   * @@returns {object} metadata of @Model.Name
   *
   */
  mapper() {
    @(Model.ConstructModelMapper())
  }
}
@EmptyLine
module.exports = @(Model.Name);