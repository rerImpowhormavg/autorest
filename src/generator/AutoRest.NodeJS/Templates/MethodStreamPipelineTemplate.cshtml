@using System.Linq;
@inherits AutoRest.Core.Template<AutoRest.NodeJS.Model.MethodJs>
// Send Request
httpRequest.streamedResponse = true;
return client.pipeline(httpRequest, function (err, response, responseBody) {
  if (err) {
    return callback(err);
  }
@EmptyLine

  var statusCode = response.statusCode;
  if (@(Model.FailureStatusCodePredicate)) {
    var error = new Error(util.format('Unexpected status code: %s', statusCode));
    error.statusCode = response.statusCode;
    error.request = msRest.stripRequest(httpRequest);
    error.response = msRest.stripResponse(response);
    if (responseBody === '') responseBody = null;
    var parsedErrorResponse;
    try {
      if (responseBody !== undefined) parsedErrorResponse = JSON.parse(responseBody);
      if (parsedErrorResponse) {
        @(Model.PopulateErrorCodeAndMessage())
      }
  @if (Model.DefaultResponse.Body != null)
  {
      var deserializeErrorBody = Model.GetDeserializationString(Model.DefaultResponse.Body, "error.body", "parsedErrorResponse");
      if (!string.IsNullOrWhiteSpace(deserializeErrorBody))
      {
@:      if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
@:        @(deserializeErrorBody)
@:      }
      }
  }
    } catch (defaultError) {
      error.message = util.format('Error "%s" occurred in deserializing the responseBody ' + 
                       '- "%s" for the default response.', defaultError.message, responseBody);
      return callback(error);
    }
    return callback(error);
  }
@EmptyLine

  // Create Result
  var result = response;
  return callback(null, result, httpRequest, response);
});