@using System
@using System.Linq
@using AutoRest.Core.Utilities
@using AutoRest.NodeJS.Model
@using AutoRest.NodeJS.Templates
@using AutoRest.NodeJS.Azure.Model
@inherits AutoRest.Core.Template<MethodJsa>

@if (!Model.IsLongRunningOperation)
{
@:@(Include( new MethodTemplate(), Model as MethodJs))
}
else
{
    <text>
/**
 *
@if (!String.IsNullOrEmpty(Model.Summary))
{
 @WrapComment(" * ", "@summary " + Model.Summary)@:
@: *
}
@if (!String.IsNullOrEmpty(Model.Description))
{
 @WrapComment(" * ", Model.Description)@:
@: *
}
@foreach (var parameter in Model.DocumentationParameters)
{
 @MethodJs.ConstructParameterDocumentation(
                      WrapComment(" * ", "@param {"
                                        + MethodJs.GetParameterDocumentationType(parameter)
                                        + "} " + MethodJs.GetParameterDocumentationName(parameter)
                                        + " " + parameter.Documentation))
}
@WrapComment(" * ", " @param {function} callback")
 *
@WrapComment(" * ", " @returns {function} callback(err, result, request, response)")
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {@Model.DocumentReturnTypeString} [result]   - The deserialized result object.
@WrapComment(" *                      ", Model.ReturnTypeInfo)
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
@(Model.MethodGroup.TypeName).prototype.@(Model.Name) = function (@(Model.MethodParameterDeclarationWithCallback)) {
  var client = @(Model.ClientReference);
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  @EmptyLine
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  @EmptyLine
  // Send request
  this.begin@(Model.Name.ToPascalCase())(@(Model.MethodParameterDeclaration)function (err, parsedResult, httpRequest, response){
    if (err) return callback(err);
    @EmptyLine
    var initialResult = new msRest.HttpOperationResponse();
    initialResult.request = httpRequest;
    initialResult.response = response;
    initialResult.body = response.body;
    client.@(Model.LongRunningOperationMethodNameInRuntime)(initialResult, options, function (err, pollingResult) {
      if (err) return callback(err);
      @EmptyLine
      // Create Result
      var result = null;
      httpRequest = pollingResult.request;
      response = pollingResult.response;
      var responseBody = pollingResult.body;
      if (responseBody === '') responseBody = null;
      @EmptyLine
      // Deserialize Response
      @if (Model.ReturnType.Body != null)
      {
      @:@(Model.DeserializeResponse(Model.ReturnType.Body))
      }

      @if (Model.ReturnType.Body != null && Model.DefaultResponse.Body != null && !Model.Responses.Any())
      {
      @:@(Model.DeserializeResponse(Model.DefaultResponse.Body))
      }
      @EmptyLine
      return callback(null, result, httpRequest, response);
    });
  });
};
    </text>
}
