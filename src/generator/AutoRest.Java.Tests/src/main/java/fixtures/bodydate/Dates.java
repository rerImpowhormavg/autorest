/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.bodydate;

import com.microsoft.rest.ServiceCall;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceResponse;
import fixtures.bodydate.models.ErrorException;
import java.io.IOException;
import org.joda.time.LocalDate;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Dates.
 */
public interface Dates {
    /**
     * Get null date value.
     *
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the LocalDate object if successful.
     */
    LocalDate getNull() throws ErrorException, IOException;

    /**
     * Get null date value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<LocalDate> getNullAsync(final ServiceCallback<LocalDate> serviceCallback);

    /**
     * Get null date value.
     *
     * @return the observable to the LocalDate object
     */
    Observable<LocalDate> getNullAsync();

    /**
     * Get null date value.
     *
     * @return the observable to the LocalDate object
     */
    Observable<ServiceResponse<LocalDate>> getNullWithServiceResponseAsync();

    /**
     * Get invalid date value.
     *
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the LocalDate object if successful.
     */
    LocalDate getInvalidDate() throws ErrorException, IOException;

    /**
     * Get invalid date value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<LocalDate> getInvalidDateAsync(final ServiceCallback<LocalDate> serviceCallback);

    /**
     * Get invalid date value.
     *
     * @return the observable to the LocalDate object
     */
    Observable<LocalDate> getInvalidDateAsync();

    /**
     * Get invalid date value.
     *
     * @return the observable to the LocalDate object
     */
    Observable<ServiceResponse<LocalDate>> getInvalidDateWithServiceResponseAsync();

    /**
     * Get overflow date value.
     *
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the LocalDate object if successful.
     */
    LocalDate getOverflowDate() throws ErrorException, IOException;

    /**
     * Get overflow date value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<LocalDate> getOverflowDateAsync(final ServiceCallback<LocalDate> serviceCallback);

    /**
     * Get overflow date value.
     *
     * @return the observable to the LocalDate object
     */
    Observable<LocalDate> getOverflowDateAsync();

    /**
     * Get overflow date value.
     *
     * @return the observable to the LocalDate object
     */
    Observable<ServiceResponse<LocalDate>> getOverflowDateWithServiceResponseAsync();

    /**
     * Get underflow date value.
     *
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the LocalDate object if successful.
     */
    LocalDate getUnderflowDate() throws ErrorException, IOException;

    /**
     * Get underflow date value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<LocalDate> getUnderflowDateAsync(final ServiceCallback<LocalDate> serviceCallback);

    /**
     * Get underflow date value.
     *
     * @return the observable to the LocalDate object
     */
    Observable<LocalDate> getUnderflowDateAsync();

    /**
     * Get underflow date value.
     *
     * @return the observable to the LocalDate object
     */
    Observable<ServiceResponse<LocalDate>> getUnderflowDateWithServiceResponseAsync();

    /**
     * Put max date value 9999-12-31.
     *
     * @param dateBody the LocalDate value
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     */
    void putMaxDate(LocalDate dateBody) throws ErrorException, IOException, IllegalArgumentException;

    /**
     * Put max date value 9999-12-31.
     *
     * @param dateBody the LocalDate value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> putMaxDateAsync(LocalDate dateBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Put max date value 9999-12-31.
     *
     * @param dateBody the LocalDate value
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> putMaxDateAsync(LocalDate dateBody);

    /**
     * Put max date value 9999-12-31.
     *
     * @param dateBody the LocalDate value
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> putMaxDateWithServiceResponseAsync(LocalDate dateBody);

    /**
     * Get max date value 9999-12-31.
     *
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the LocalDate object if successful.
     */
    LocalDate getMaxDate() throws ErrorException, IOException;

    /**
     * Get max date value 9999-12-31.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<LocalDate> getMaxDateAsync(final ServiceCallback<LocalDate> serviceCallback);

    /**
     * Get max date value 9999-12-31.
     *
     * @return the observable to the LocalDate object
     */
    Observable<LocalDate> getMaxDateAsync();

    /**
     * Get max date value 9999-12-31.
     *
     * @return the observable to the LocalDate object
     */
    Observable<ServiceResponse<LocalDate>> getMaxDateWithServiceResponseAsync();

    /**
     * Put min date value 0000-01-01.
     *
     * @param dateBody the LocalDate value
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     */
    void putMinDate(LocalDate dateBody) throws ErrorException, IOException, IllegalArgumentException;

    /**
     * Put min date value 0000-01-01.
     *
     * @param dateBody the LocalDate value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> putMinDateAsync(LocalDate dateBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Put min date value 0000-01-01.
     *
     * @param dateBody the LocalDate value
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> putMinDateAsync(LocalDate dateBody);

    /**
     * Put min date value 0000-01-01.
     *
     * @param dateBody the LocalDate value
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> putMinDateWithServiceResponseAsync(LocalDate dateBody);

    /**
     * Get min date value 0000-01-01.
     *
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the LocalDate object if successful.
     */
    LocalDate getMinDate() throws ErrorException, IOException;

    /**
     * Get min date value 0000-01-01.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<LocalDate> getMinDateAsync(final ServiceCallback<LocalDate> serviceCallback);

    /**
     * Get min date value 0000-01-01.
     *
     * @return the observable to the LocalDate object
     */
    Observable<LocalDate> getMinDateAsync();

    /**
     * Get min date value 0000-01-01.
     *
     * @return the observable to the LocalDate object
     */
    Observable<ServiceResponse<LocalDate>> getMinDateWithServiceResponseAsync();

}
