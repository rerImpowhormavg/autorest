# encoding: utf-8
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
# 
# Code generated by Microsoft (R) AutoRest Code Generator 0.13.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module ResourceFlatteningModule
  module Models
    #
    # Model object.
    #
    class ResourceCollection

      include MsRestAzure

      # @return [FlattenedProduct]
      attr_accessor :productresource

      # @return [Array<FlattenedProduct>]
      attr_accessor :arrayofresources

      # @return [Hash{String => FlattenedProduct}]
      attr_accessor :dictionaryofresources

      #
      # Validate the object. Throws ValidationError if validation fails.
      #
      def validate
        @productresource.validate unless @productresource.nil?
        @arrayofresources.each{ |e| e.validate if e.respond_to?(:validate) } unless @arrayofresources.nil?
        @dictionaryofresources.each{ |e| e.validate if e.respond_to?(:validate) } unless @dictionaryofresources.nil?
      end

      #
      # Serializes given Model object into Ruby Hash.
      # @param object Model object to serialize.
      # @return [Hash] Serialized object in form of Ruby Hash.
      #
      def self.serialize_object(object)
        object.validate
        output_object = {}

        serialized_property = object.productresource
        unless serialized_property.nil?
          serialized_property = FlattenedProduct.serialize_object(serialized_property)
        end
        output_object['productresource'] = serialized_property unless serialized_property.nil?

        serialized_property = object.arrayofresources
        unless serialized_property.nil?
          serializedArray = []
          serialized_property.each do |element|
            unless element.nil?
              element = FlattenedProduct.serialize_object(element)
            end
            serializedArray.push(element)
          end
          serialized_property = serializedArray
        end
        output_object['arrayofresources'] = serialized_property unless serialized_property.nil?

        serialized_property = object.dictionaryofresources
        unless serialized_property.nil?
          serialized_property.each { |key, valueElement|
            unless valueElement.nil?
              valueElement = FlattenedProduct.serialize_object(valueElement)
            end
            serialized_property[key] = valueElement
          }
        end
        output_object['dictionaryofresources'] = serialized_property unless serialized_property.nil?

        output_object
      end

      #
      # Deserializes given Ruby Hash into Model object.
      # @param object [Hash] Ruby Hash object to deserialize.
      # @return [ResourceCollection] Deserialized object.
      #
      def self.deserialize_object(object)
        return if object.nil?
        output_object = ResourceCollection.new

        deserialized_property = object['productresource']
        unless deserialized_property.nil?
          deserialized_property = FlattenedProduct.deserialize_object(deserialized_property)
        end
        output_object.productresource = deserialized_property

        deserialized_property = object['arrayofresources']
        unless deserialized_property.nil?
          deserializedArray = [];
          deserialized_property.each do |element1|
            unless element1.nil?
              element1 = FlattenedProduct.deserialize_object(element1)
            end
            deserializedArray.push(element1);
          end
          deserialized_property = deserializedArray;
        end
        output_object.arrayofresources = deserialized_property

        deserialized_property = object['dictionaryofresources']
        unless deserialized_property.nil?
          deserialized_property.each do |key, valueElement1|
            unless valueElement1.nil?
              valueElement1 = FlattenedProduct.deserialize_object(valueElement1)
            end
            deserialized_property[key] = valueElement1
          end
        end
        output_object.dictionaryofresources = deserialized_property

        output_object.validate

        output_object
      end
    end
  end
end
