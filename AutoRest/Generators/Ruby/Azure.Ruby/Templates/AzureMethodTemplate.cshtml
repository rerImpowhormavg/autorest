@using Microsoft.Rest.Generator.ClientModel
@using Microsoft.Rest.Generator.Ruby
@using Microsoft.Rest.Generator.Ruby.TemplateModels
@using Microsoft.Rest.Generator.Ruby.Templates
@inherits Microsoft.Rest.Generator.Template<Microsoft.Rest.Generator.Azure.Ruby.AzureMethodTemplateModel>

@if (!Model.IsLongRunningOperation)
{
    @:@(Include(new MethodTemplate(), (MethodTemplateModel)Model))
}
else if (Model.HttpMethod == HttpMethod.Post || Model.HttpMethod == HttpMethod.Delete)
{
    <text>
    #
    # @WrapComment("# ", Model.Documentation)
    @foreach (var parameter in Model.Parameters)
    {
        @:@WrapComment("# ", string.Format("@param {0} {1}{2}", parameter.Name, parameter.Type.GetYardDocumentation(), parameter.Documentation))
    }
    @WrapComment("# ", string.Format("@return [{0}] TODO: add text", "TODO: add type"))
    #
    def @(Model.Name)(@(Model.MethodParameterDeclaration))
      // Send request
      response = begin@(Model.Name)(@(Model.MethodParameterDeclaration)).value!
      return @(Model.ClientReference).get_post_or_delete_operation_result_async(response).value!
    end
    </text>
}
else
{
    <text>
    #
    # @WrapComment("# ", Model.Documentation)
    @foreach (var parameter in Model.Parameters)
    {
      @:@WrapComment("# ", string.Format("@param {0} {1}{2}", parameter.Name, parameter.Type.GetYardDocumentation(), parameter.Documentation))
    }
    @WrapComment("# ", string.Format("@return [{0}] TODO: add text", "TODO: add type"))
    #
    def @(Model.Name)(@(Model.MethodParameterDeclaration))
      # Send request
      response = begin_@(Model.Name)(@(Model.MethodParameterDeclaration)).value!

      # Defining polling method.
      get_method = lambda { self.@(Model.GetMethod.Name)(@(Model.GetMethod.MethodParameterDeclaration)) }

      # Waiting for response.
      return @(Model.ClientReference).get_put_operation_result(response, get_method)
    end
    </text>
}