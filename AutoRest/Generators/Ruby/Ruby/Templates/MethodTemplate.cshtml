@using System
@using System.Linq;
@using Microsoft.Rest.Generator.ClientModel
@using Microsoft.Rest.Generator.Ruby.TemplateModels
@inherits Microsoft.Rest.Generator.Template<Microsoft.Rest.Generator.Ruby.MethodTemplateModel>

#
@if (!String.IsNullOrEmpty(Model.Summary))
{
  @WrapComment("# ", Model.Summary)@:
@:#
}
@if (!String.IsNullOrEmpty(Model.Description))
{
  @WrapComment("# ", Model.Description)@:
@:#
}
@foreach (var parameter in Model.LocalParameters.Where(p => !p.IsConstant))
{
@:@WrapComment("# ", string.Format("@param {0} {1}{2}", parameter.Name, parameter.Type.GetYardDocumentation(), parameter.Documentation))
}
@WrapComment("# ", string.Format("@param [{0}] The hash of custom headers need to be applied to HTTP request.", "Hash{String => String}"))
#
@WrapComment("# ", string.Format("@return [{0}] Promise object which allows to get HTTP response.", "Concurrent::Promise"))
#
def @(Model.Name)(@(Model.MethodParameterDeclaration))
  @foreach (var parameter in Model.ParameterTemplateModels)
  {
    if (parameter.IsRequired && !parameter.IsConstant)
    {
  @:fail ArgumentError, '@parameter.Name is nil' if @(parameter.Name).nil?
  @:
    }
      if (parameter.IsConstant)
      {
  @:@(parameter.Name) = @(parameter.DefaultValue)
      }
      else
      {
  @:@(parameter.Type.ValidateType(Model.Scope, parameter.Name))
      }
}

  request_headers = {}
@if (Model.Parameters.Any(p => p.Location == ParameterLocation.Header))
{
  @EmptyLine
  @:# Set Headers
  @:@(Model.SetDefaultHeaders)
  foreach (var parameter in Model.Parameters.Where(p => p.Location == ParameterLocation.Header))
  {
    if (parameter.SerializedName.ToLower() == "Content-Type".ToLower())
    {
  @:fail RuntimeError, 'Header Content-Type is forbidden to change'
    }
  @:request_headers['@(parameter.SerializedName)'] = @(parameter.Type.ToString(parameter.Name)) unless @(parameter.Type.ToString(parameter.Name)).nil?
  }
}

@if (Model.RequestBody != null)
{
  @EmptyLine
  @:# Serialize Request
  @:request_headers['Content-Type'] = '@(Model.RequestContentType)'
  @:@Model.CreateSerializationString(Model.RequestBody.Name, Model.RequestBody.Type, "request_content")
}

  path_template = '@Model.Url'
  options = {
      middlewares: [@string.Join(", ", Model.FaradayMiddlewares)],
@if (Model.EncodingPathParams.Any())
{
      @:path_params: @(Model.PathParamsRbDict),
}
@if (Model.SkipEncodingPathParams.Any())
{
      @:skip_encoding_path_params: @(Model.SkipEncodingPathParamsRbDict),
}
@if (Model.EncodingQueryParams.Any())
{
      @:query_params: @(Model.QueryParamsRbDict),
}
@if (Model.SkipEncodingQueryParams.Any())
{
      @:skip_encoding_query_params: @(Model.SkipEncodingQueryParamsRbDict),
}
@if (Model.RequestBody != null)
{
      @:body: request_content,
}
      headers: request_headers.merge(custom_headers || {})
  }
  
  request = MsRest::HttpOperationRequest.new(@@base_url || @(Model.ClientReference).base_url, path_template, :@Model.HttpMethod.ToString().ToLower(), options)
  promise = request.run_promise do |req|
    @(Model.ClientReference).credentials.sign_request(req) unless @(Model.ClientReference).credentials.nil?
  end

  @EmptyLine
  promise = promise.then do |http_response|
    status_code = http_response.status
    response_content = http_response.body
    unless @Model.SuccessStatusCodePredicate
      error_model = JSON.load(response_content)
      fail @(Model.OperationExceptionTypeString).new(request, http_response, error_model)
    end

    @EmptyLine
    # Create Result
    result = @(Model.OperationResponseReturnTypeString).new(request, http_response)
    @Model.InitializeResponseBody

    @foreach (var responsePair in Model.Responses.Where(r => r.Value.Body != null && r.Value.Body.IsSerializable()))
    {
    <text>
    # Deserialize Response
    if status_code == @Model.GetStatusCodeReference(responsePair.Key)
      begin
        @(Model.CreateDeserializationString("response_content", responsePair.Value.Body, "result.body"))
      rescue Exception => e
        fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
      end
    end
    </text>
    }

    @if (Model.ReturnType.Body != null && Model.DefaultResponse.Body != null && !Model.Responses.Any() && Model.DefaultResponse.Body.IsSerializable())
    {
    <text>
    begin
      @(Model.CreateDeserializationString("response_content", Model.ReturnType.Body, "result.body"))
    rescue Exception => e
      fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
    end
    </text>
    }

    @EmptyLine
    result
  end

  @EmptyLine
  promise.execute
end
