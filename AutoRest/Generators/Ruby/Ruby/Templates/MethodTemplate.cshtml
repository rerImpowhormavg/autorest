@using System.Linq;
@using Microsoft.Rest.Generator.ClientModel
@using Microsoft.Rest.Generator.Ruby.TemplateModels
@inherits Microsoft.Rest.Generator.Template<Microsoft.Rest.Generator.Ruby.MethodTemplateModel>

#
@WrapComment("# ", Model.Documentation)
@foreach (var parameter in Model.Parameters)
{
@:@WrapComment("# ", string.Format("@param {0} {1}{2}", parameter.Name, parameter.Type.GetYardDocumentation(), parameter.Documentation))
}
@WrapComment("# ", string.Format("@return [{0}] Promise object which allows to get HTTP response.", "Concurrent::Promise"))
#
def @(Model.Name)(@(Model.MethodParameterDeclaration))
  @foreach (var parameter in Model.LocalParameters)
  {
    if (parameter.IsRequired && parameter.Type.IsNullable())
    {
  @:# fail ArgumentError, '@parameter.Name is nil' if @(parameter.Name).nil?
  @:
    }
  @:@(parameter.Type.ValidateType(Model.Scope, parameter.Name))
  }
  @if (Model.LocalParameters.Any(p => p.IsRequired))
  {
  @EmptyLine
  }

  # Construct URL
  path = "@Model.Url"
  @(Model.BuildUrl("path", "url"))
  @(Model.RemoveDuplicateForwardSlashes("url"))

  @EmptyLine
  # Create HTTP transport objects
  http_request = Net::HTTP::@(Model.HttpMethod.ToString()).new(url.request_uri)

  @if (Model.Parameters.Any(p => p.Location == ParameterLocation.Header))
  {
  @EmptyLine
  @:# Set Headers
    foreach (var parameter in Model.Parameters.Where(p => p.Location == ParameterLocation.Header))
    {
        if (parameter.SerializedName.ToLower() == "Content-Type".ToLower())
        {
  @:fail RuntimeError, 'Header Content-Type is forbidden to change'
        }
  @:http_request["@(parameter.SerializedName)"] = @parameter.Type.ToString(parameter.Name)
    }
  }

  @if (Model.RequestBody != null)
  {
  @EmptyLine
  @:# Serialize Request
  @:http_request.add_field('Content-Type', 'application/json')
  @:@Model.CreateSerializationString(Model.RequestBody.Name, Model.RequestBody.Type, "http_request.body", Settings.Namespace)
  }

  @EmptyLine
  # Send Request
  promise = Concurrent::Promise.new { @(Model.MakeRequestMethodReference)(http_request, url) }

  @EmptyLine
  promise = promise.then do |http_response|
    status_code = http_response.code.to_i
    response_content = http_response.body
    unless (@Model.SuccessStatusCodePredicate)
      @if (Model.DefaultResponse != null)
      {
      @:error_model = JSON.parse(response_content)
      @:fail ClientRuntime::HttpOperationException.new(http_request, http_response, error_model)
      }
      else
      {
      @:fail ClientRuntime::HttpOperationException.new(http_request, http_response)
      }
    end

    @EmptyLine
    # Create Result
    result = ClientRuntime::HttpOperationResponse.new(http_request, http_response)
    @Model.InitializeResponseBody

    @foreach (var responsePair in Model.Responses.Where(r => r.Value != null && r.Value.IsSerializable()))
    {
    <text>
    # Deserialize Response
    if status_code == @Model.GetStatusCodeReference(responsePair.Key)
      begin
        @(Model.CreateDeserializationString("response_content", Model.ReturnType, "result.body", Settings.Namespace))
      rescue Exception => e
        fail ClientRuntime::DeserializationError.new("Error occured in deserializing the response", e.message, e.backtrace, response_content)
      end
    end
    </text>
    }

    @if (Model.ReturnType != null && Model.DefaultResponse != null && !Model.Responses.Any() && Model.DefaultResponse.IsSerializable())
    {
    <text>
    begin
      @(Model.CreateDeserializationString("response_content", Model.ReturnType, "result.body", Settings.Namespace))
    rescue Exception => e
      fail ClientRuntime::DeserializationError.new("Error occured in deserializing the response", e.message, e.backtrace, response_content)
    end
    </text>
    }

    @EmptyLine
    result
  end

  @EmptyLine
  promise.execute
end
