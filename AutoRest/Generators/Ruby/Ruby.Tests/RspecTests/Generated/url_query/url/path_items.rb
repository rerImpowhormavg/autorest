# encoding: utf-8
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
# 
# Code generated by Microsoft (R) AutoRest Code Generator 0.13.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module UrlModule
  #
  # Test Infrastructure for AutoRest
  #
  class PathItems
    include UrlModule::Models

    #
    # Creates and initializes a new instance of the PathItems class.
    # @param client service class for accessing basic functionality.
    #
    def initialize(client)
      @client = client
    end

    # @return reference to the AutoRestUrlTestService
    attr_reader :client

    #
    # send globalStringPath='globalStringPath',
    # pathItemStringPath='pathItemStringPath', localStringPath='localStringPath',
    # globalStringQuery='globalStringQuery',
    # pathItemStringQuery='pathItemStringQuery',
    # localStringQuery='localStringQuery'
    #
    # @param local_string_path [String] should contain value 'localStringPath'
    # @param path_item_string_path [String] A string value 'pathItemStringPath'
    # that appears in the path
    # @param local_string_query [String] should contain value 'localStringQuery'
    # @param path_item_string_query [String] A string value 'pathItemStringQuery'
    # that appears as a query parameter
    # @param [Hash{String => String}] The hash of custom headers need to be
    # applied to HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which allows to get HTTP
    # response.
    #
    def get_all_with_values(local_string_path, path_item_string_path, local_string_query = nil, path_item_string_query = nil, custom_headers = nil)
      fail ArgumentError, 'local_string_path is nil' if local_string_path.nil?
      fail ArgumentError, 'path_item_string_path is nil' if path_item_string_path.nil?
      fail ArgumentError, '@client.global_string_path is nil' if @client.global_string_path.nil?
      # Construct URL
      path = "/pathitem/nullable/globalStringPath/{globalStringPath}/pathItemStringPath/{pathItemStringPath}/localStringPath/{localStringPath}/globalStringQuery/pathItemStringQuery/localStringQuery"
      path['{localStringPath}'] = ERB::Util.url_encode(local_string_path) if path.include?('{localStringPath}')
      path['{pathItemStringPath}'] = ERB::Util.url_encode(path_item_string_path) if path.include?('{pathItemStringPath}')
      path['{globalStringPath}'] = ERB::Util.url_encode(@client.global_string_path) if path.include?('{globalStringPath}')
      url = URI.join(@client.base_url, path)
      properties = { 'localStringQuery' => local_string_query, 'pathItemStringQuery' => path_item_string_query, 'globalStringQuery' => @client.global_string_query }
      unless url.query.nil?
        url.query.split('&').each do |url_item|
          url_items_parts = url_item.split('=')
          properties[url_items_parts[0]] = url_items_parts[1]
        end
      end
      properties.reject!{ |key, value| value.nil? }
      url.query = properties.map{ |key, value| "#{key}=#{ERB::Util.url_encode(value.to_s)}" }.compact.join('&')
      fail URI::Error unless url.to_s =~ /\A#{URI::regexp}\z/
      corrected_url = url.to_s.gsub(/([^:])\/\//, '\1/')
      url = URI.parse(corrected_url)

      connection = Faraday.new(:url => url) do |faraday|
        faraday.use MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02
        faraday.use :cookie_jar
        faraday.adapter Faraday.default_adapter
      end
      request_headers = Hash.new

      unless custom_headers.nil?
        custom_headers.each do |key, value|
          request_headers[key] = value
        end
      end

      # Send Request
      promise = Concurrent::Promise.new do
        connection.get do |request|
          request.headers = request_headers
          @client.credentials.sign_request(request) unless @client.credentials.nil?
        end
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless (status_code == 200)
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(connection, http_response, error_model)
        end

        # Create Result
        result = MsRest::HttpOperationResponse.new(connection, http_response)

        result
      end

      promise.execute
    end

    #
    # send globalStringPath='globalStringPath',
    # pathItemStringPath='pathItemStringPath', localStringPath='localStringPath',
    # globalStringQuery=null, pathItemStringQuery='pathItemStringQuery',
    # localStringQuery='localStringQuery'
    #
    # @param local_string_path [String] should contain value 'localStringPath'
    # @param path_item_string_path [String] A string value 'pathItemStringPath'
    # that appears in the path
    # @param local_string_query [String] should contain value 'localStringQuery'
    # @param path_item_string_query [String] A string value 'pathItemStringQuery'
    # that appears as a query parameter
    # @param [Hash{String => String}] The hash of custom headers need to be
    # applied to HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which allows to get HTTP
    # response.
    #
    def get_global_query_null(local_string_path, path_item_string_path, local_string_query = nil, path_item_string_query = nil, custom_headers = nil)
      fail ArgumentError, 'local_string_path is nil' if local_string_path.nil?
      fail ArgumentError, 'path_item_string_path is nil' if path_item_string_path.nil?
      fail ArgumentError, '@client.global_string_path is nil' if @client.global_string_path.nil?
      # Construct URL
      path = "/pathitem/nullable/globalStringPath/{globalStringPath}/pathItemStringPath/{pathItemStringPath}/localStringPath/{localStringPath}/null/pathItemStringQuery/localStringQuery"
      path['{localStringPath}'] = ERB::Util.url_encode(local_string_path) if path.include?('{localStringPath}')
      path['{pathItemStringPath}'] = ERB::Util.url_encode(path_item_string_path) if path.include?('{pathItemStringPath}')
      path['{globalStringPath}'] = ERB::Util.url_encode(@client.global_string_path) if path.include?('{globalStringPath}')
      url = URI.join(@client.base_url, path)
      properties = { 'localStringQuery' => local_string_query, 'pathItemStringQuery' => path_item_string_query, 'globalStringQuery' => @client.global_string_query }
      unless url.query.nil?
        url.query.split('&').each do |url_item|
          url_items_parts = url_item.split('=')
          properties[url_items_parts[0]] = url_items_parts[1]
        end
      end
      properties.reject!{ |key, value| value.nil? }
      url.query = properties.map{ |key, value| "#{key}=#{ERB::Util.url_encode(value.to_s)}" }.compact.join('&')
      fail URI::Error unless url.to_s =~ /\A#{URI::regexp}\z/
      corrected_url = url.to_s.gsub(/([^:])\/\//, '\1/')
      url = URI.parse(corrected_url)

      connection = Faraday.new(:url => url) do |faraday|
        faraday.use MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02
        faraday.use :cookie_jar
        faraday.adapter Faraday.default_adapter
      end
      request_headers = Hash.new

      unless custom_headers.nil?
        custom_headers.each do |key, value|
          request_headers[key] = value
        end
      end

      # Send Request
      promise = Concurrent::Promise.new do
        connection.get do |request|
          request.headers = request_headers
          @client.credentials.sign_request(request) unless @client.credentials.nil?
        end
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless (status_code == 200)
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(connection, http_response, error_model)
        end

        # Create Result
        result = MsRest::HttpOperationResponse.new(connection, http_response)

        result
      end

      promise.execute
    end

    #
    # send globalStringPath=globalStringPath,
    # pathItemStringPath='pathItemStringPath', localStringPath='localStringPath',
    # globalStringQuery=null, pathItemStringQuery='pathItemStringQuery',
    # localStringQuery=null
    #
    # @param local_string_path [String] should contain value 'localStringPath'
    # @param path_item_string_path [String] A string value 'pathItemStringPath'
    # that appears in the path
    # @param local_string_query [String] should contain null value
    # @param path_item_string_query [String] A string value 'pathItemStringQuery'
    # that appears as a query parameter
    # @param [Hash{String => String}] The hash of custom headers need to be
    # applied to HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which allows to get HTTP
    # response.
    #
    def get_global_and_local_query_null(local_string_path, path_item_string_path, local_string_query = nil, path_item_string_query = nil, custom_headers = nil)
      fail ArgumentError, 'local_string_path is nil' if local_string_path.nil?
      fail ArgumentError, 'path_item_string_path is nil' if path_item_string_path.nil?
      fail ArgumentError, '@client.global_string_path is nil' if @client.global_string_path.nil?
      # Construct URL
      path = "/pathitem/nullable/globalStringPath/{globalStringPath}/pathItemStringPath/{pathItemStringPath}/localStringPath/{localStringPath}/null/pathItemStringQuery/null"
      path['{localStringPath}'] = ERB::Util.url_encode(local_string_path) if path.include?('{localStringPath}')
      path['{pathItemStringPath}'] = ERB::Util.url_encode(path_item_string_path) if path.include?('{pathItemStringPath}')
      path['{globalStringPath}'] = ERB::Util.url_encode(@client.global_string_path) if path.include?('{globalStringPath}')
      url = URI.join(@client.base_url, path)
      properties = { 'localStringQuery' => local_string_query, 'pathItemStringQuery' => path_item_string_query, 'globalStringQuery' => @client.global_string_query }
      unless url.query.nil?
        url.query.split('&').each do |url_item|
          url_items_parts = url_item.split('=')
          properties[url_items_parts[0]] = url_items_parts[1]
        end
      end
      properties.reject!{ |key, value| value.nil? }
      url.query = properties.map{ |key, value| "#{key}=#{ERB::Util.url_encode(value.to_s)}" }.compact.join('&')
      fail URI::Error unless url.to_s =~ /\A#{URI::regexp}\z/
      corrected_url = url.to_s.gsub(/([^:])\/\//, '\1/')
      url = URI.parse(corrected_url)

      connection = Faraday.new(:url => url) do |faraday|
        faraday.use MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02
        faraday.use :cookie_jar
        faraday.adapter Faraday.default_adapter
      end
      request_headers = Hash.new

      unless custom_headers.nil?
        custom_headers.each do |key, value|
          request_headers[key] = value
        end
      end

      # Send Request
      promise = Concurrent::Promise.new do
        connection.get do |request|
          request.headers = request_headers
          @client.credentials.sign_request(request) unless @client.credentials.nil?
        end
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless (status_code == 200)
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(connection, http_response, error_model)
        end

        # Create Result
        result = MsRest::HttpOperationResponse.new(connection, http_response)

        result
      end

      promise.execute
    end

    #
    # send globalStringPath='globalStringPath',
    # pathItemStringPath='pathItemStringPath', localStringPath='localStringPath',
    # globalStringQuery='globalStringQuery', pathItemStringQuery=null,
    # localStringQuery=null
    #
    # @param local_string_path [String] should contain value 'localStringPath'
    # @param path_item_string_path [String] A string value 'pathItemStringPath'
    # that appears in the path
    # @param local_string_query [String] should contain value null
    # @param path_item_string_query [String] should contain value null
    # @param [Hash{String => String}] The hash of custom headers need to be
    # applied to HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which allows to get HTTP
    # response.
    #
    def get_local_path_item_query_null(local_string_path, path_item_string_path, local_string_query = nil, path_item_string_query = nil, custom_headers = nil)
      fail ArgumentError, 'local_string_path is nil' if local_string_path.nil?
      fail ArgumentError, 'path_item_string_path is nil' if path_item_string_path.nil?
      fail ArgumentError, '@client.global_string_path is nil' if @client.global_string_path.nil?
      # Construct URL
      path = "/pathitem/nullable/globalStringPath/{globalStringPath}/pathItemStringPath/{pathItemStringPath}/localStringPath/{localStringPath}/globalStringQuery/null/null"
      path['{localStringPath}'] = ERB::Util.url_encode(local_string_path) if path.include?('{localStringPath}')
      path['{pathItemStringPath}'] = ERB::Util.url_encode(path_item_string_path) if path.include?('{pathItemStringPath}')
      path['{globalStringPath}'] = ERB::Util.url_encode(@client.global_string_path) if path.include?('{globalStringPath}')
      url = URI.join(@client.base_url, path)
      properties = { 'localStringQuery' => local_string_query, 'pathItemStringQuery' => path_item_string_query, 'globalStringQuery' => @client.global_string_query }
      unless url.query.nil?
        url.query.split('&').each do |url_item|
          url_items_parts = url_item.split('=')
          properties[url_items_parts[0]] = url_items_parts[1]
        end
      end
      properties.reject!{ |key, value| value.nil? }
      url.query = properties.map{ |key, value| "#{key}=#{ERB::Util.url_encode(value.to_s)}" }.compact.join('&')
      fail URI::Error unless url.to_s =~ /\A#{URI::regexp}\z/
      corrected_url = url.to_s.gsub(/([^:])\/\//, '\1/')
      url = URI.parse(corrected_url)

      connection = Faraday.new(:url => url) do |faraday|
        faraday.use MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02
        faraday.use :cookie_jar
        faraday.adapter Faraday.default_adapter
      end
      request_headers = Hash.new

      unless custom_headers.nil?
        custom_headers.each do |key, value|
          request_headers[key] = value
        end
      end

      # Send Request
      promise = Concurrent::Promise.new do
        connection.get do |request|
          request.headers = request_headers
          @client.credentials.sign_request(request) unless @client.credentials.nil?
        end
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless (status_code == 200)
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(connection, http_response, error_model)
        end

        # Create Result
        result = MsRest::HttpOperationResponse.new(connection, http_response)

        result
      end

      promise.execute
    end

  end
end
