# encoding: utf-8
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
# 
# Code generated by Microsoft (R) AutoRest Code Generator 0.13.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module RequiredOptionalModule
  #
  # Test Infrastructure for AutoRest
  #
  class Explicit
    include RequiredOptionalModule::Models

    #
    # Creates and initializes a new instance of the Explicit class.
    # @param client service class for accessing basic functionality.
    #
    def initialize(client)
      @client = client
    end

    # @return reference to the AutoRestRequiredOptionalTestService
    attr_reader :client

    #
    # Test explicitly required integer. Please put null and the client library
    # should throw before the request is sent.
    #
    # @param body_parameter [Integer]
    # @param [Hash{String => String}] The hash of custom headers need to be
    # applied to HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which allows to get HTTP
    # response.
    #
    def post_required_integer_parameter(body_parameter, custom_headers = nil)
      fail ArgumentError, 'body_parameter is nil' if body_parameter.nil?
      # Construct URL
      path = "/reqopt/requied/integer/parameter"
      url = URI.join(@client.base_url, path)
      fail URI::Error unless url.to_s =~ /\A#{URI::regexp}\z/
      corrected_url = url.to_s.gsub(/([^:])\/\//, '\1/')
      url = URI.parse(corrected_url)

      connection = Faraday.new(:url => url) do |faraday|
        faraday.use MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02
        faraday.use :cookie_jar
        faraday.adapter Faraday.default_adapter
      end
      request_headers = Hash.new

      unless custom_headers.nil?
        custom_headers.each do |key, value|
          request_headers[key] = value
        end
      end

      # Serialize Request
      request_headers['Content-Type'] = 'application/json; charset=utf-8'
      request_content = JSON.generate(body_parameter, quirks_mode: true)

      # Send Request
      promise = Concurrent::Promise.new do
        connection.post do |request|
          request.headers = request_headers
          request.body = request_content
          @client.credentials.sign_request(request) unless @client.credentials.nil?
        end
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless (status_code >= 200 && status_code < 300)
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(connection, http_response, error_model)
        end

        # Create Result
        result = MsRest::HttpOperationResponse.new(connection, http_response)
        begin
          parsed_response = JSON.load(response_content) unless response_content.to_s.empty?
          unless parsed_response.nil?
            parsed_response = Error.deserialize_object(parsed_response)
          end
          result.body = parsed_response
        rescue Exception => e
          fail MsRest::DeserializationError.new("Error occured in deserializing the response", e.message, e.backtrace, response_content)
        end

        result
      end

      promise.execute
    end

    #
    # Test explicitly optional integer. Please put null.
    #
    # @param body_parameter [Integer]
    # @param [Hash{String => String}] The hash of custom headers need to be
    # applied to HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which allows to get HTTP
    # response.
    #
    def post_optional_integer_parameter(body_parameter = nil, custom_headers = nil)
      # Construct URL
      path = "/reqopt/optional/integer/parameter"
      url = URI.join(@client.base_url, path)
      fail URI::Error unless url.to_s =~ /\A#{URI::regexp}\z/
      corrected_url = url.to_s.gsub(/([^:])\/\//, '\1/')
      url = URI.parse(corrected_url)

      connection = Faraday.new(:url => url) do |faraday|
        faraday.use MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02
        faraday.use :cookie_jar
        faraday.adapter Faraday.default_adapter
      end
      request_headers = Hash.new

      unless custom_headers.nil?
        custom_headers.each do |key, value|
          request_headers[key] = value
        end
      end

      # Serialize Request
      request_headers['Content-Type'] = 'application/json; charset=utf-8'
      request_content = JSON.generate(body_parameter, quirks_mode: true)

      # Send Request
      promise = Concurrent::Promise.new do
        connection.post do |request|
          request.headers = request_headers
          request.body = request_content
          @client.credentials.sign_request(request) unless @client.credentials.nil?
        end
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless (status_code == 200)
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(connection, http_response, error_model)
        end

        # Create Result
        result = MsRest::HttpOperationResponse.new(connection, http_response)

        result
      end

      promise.execute
    end

    #
    # Test explicitly required integer. Please put a valid int-wrapper with
    # 'value' = null and the client library should throw before the request is
    # sent.
    #
    # @param body_parameter [IntWrapper]
    # @param [Hash{String => String}] The hash of custom headers need to be
    # applied to HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which allows to get HTTP
    # response.
    #
    def post_required_integer_property(body_parameter, custom_headers = nil)
      fail ArgumentError, 'body_parameter is nil' if body_parameter.nil?
      body_parameter.validate unless body_parameter.nil?
      # Construct URL
      path = "/reqopt/requied/integer/property"
      url = URI.join(@client.base_url, path)
      fail URI::Error unless url.to_s =~ /\A#{URI::regexp}\z/
      corrected_url = url.to_s.gsub(/([^:])\/\//, '\1/')
      url = URI.parse(corrected_url)

      connection = Faraday.new(:url => url) do |faraday|
        faraday.use MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02
        faraday.use :cookie_jar
        faraday.adapter Faraday.default_adapter
      end
      request_headers = Hash.new

      unless custom_headers.nil?
        custom_headers.each do |key, value|
          request_headers[key] = value
        end
      end

      # Serialize Request
      request_headers['Content-Type'] = 'application/json; charset=utf-8'
      unless body_parameter.nil?
        body_parameter = IntWrapper.serialize_object(body_parameter)
      end
      request_content = JSON.generate(body_parameter, quirks_mode: true)

      # Send Request
      promise = Concurrent::Promise.new do
        connection.post do |request|
          request.headers = request_headers
          request.body = request_content
          @client.credentials.sign_request(request) unless @client.credentials.nil?
        end
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless (status_code >= 200 && status_code < 300)
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(connection, http_response, error_model)
        end

        # Create Result
        result = MsRest::HttpOperationResponse.new(connection, http_response)
        begin
          parsed_response = JSON.load(response_content) unless response_content.to_s.empty?
          unless parsed_response.nil?
            parsed_response = Error.deserialize_object(parsed_response)
          end
          result.body = parsed_response
        rescue Exception => e
          fail MsRest::DeserializationError.new("Error occured in deserializing the response", e.message, e.backtrace, response_content)
        end

        result
      end

      promise.execute
    end

    #
    # Test explicitly optional integer. Please put a valid int-wrapper with
    # 'value' = null.
    #
    # @param body_parameter [IntOptionalWrapper]
    # @param [Hash{String => String}] The hash of custom headers need to be
    # applied to HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which allows to get HTTP
    # response.
    #
    def post_optional_integer_property(body_parameter = nil, custom_headers = nil)
      body_parameter.validate unless body_parameter.nil?
      # Construct URL
      path = "/reqopt/optional/integer/property"
      url = URI.join(@client.base_url, path)
      fail URI::Error unless url.to_s =~ /\A#{URI::regexp}\z/
      corrected_url = url.to_s.gsub(/([^:])\/\//, '\1/')
      url = URI.parse(corrected_url)

      connection = Faraday.new(:url => url) do |faraday|
        faraday.use MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02
        faraday.use :cookie_jar
        faraday.adapter Faraday.default_adapter
      end
      request_headers = Hash.new

      unless custom_headers.nil?
        custom_headers.each do |key, value|
          request_headers[key] = value
        end
      end

      # Serialize Request
      request_headers['Content-Type'] = 'application/json; charset=utf-8'
      unless body_parameter.nil?
        body_parameter = IntOptionalWrapper.serialize_object(body_parameter)
      end
      request_content = JSON.generate(body_parameter, quirks_mode: true)

      # Send Request
      promise = Concurrent::Promise.new do
        connection.post do |request|
          request.headers = request_headers
          request.body = request_content
          @client.credentials.sign_request(request) unless @client.credentials.nil?
        end
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless (status_code == 200)
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(connection, http_response, error_model)
        end

        # Create Result
        result = MsRest::HttpOperationResponse.new(connection, http_response)

        result
      end

      promise.execute
    end

    #
    # Test explicitly required integer. Please put a header 'headerParameter' =>
    # null and the client library should throw before the request is sent.
    #
    # @param header_parameter [Integer]
    # @param [Hash{String => String}] The hash of custom headers need to be
    # applied to HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which allows to get HTTP
    # response.
    #
    def post_required_integer_header(header_parameter, custom_headers = nil)
      fail ArgumentError, 'header_parameter is nil' if header_parameter.nil?
      # Construct URL
      path = "/reqopt/requied/integer/header"
      url = URI.join(@client.base_url, path)
      fail URI::Error unless url.to_s =~ /\A#{URI::regexp}\z/
      corrected_url = url.to_s.gsub(/([^:])\/\//, '\1/')
      url = URI.parse(corrected_url)

      connection = Faraday.new(:url => url) do |faraday|
        faraday.use MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02
        faraday.use :cookie_jar
        faraday.adapter Faraday.default_adapter
      end
      request_headers = Hash.new

      # Set Headers
      request_headers["headerParameter"] = header_parameter.to_s unless header_parameter.to_s.nil?

      unless custom_headers.nil?
        custom_headers.each do |key, value|
          request_headers[key] = value
        end
      end

      # Send Request
      promise = Concurrent::Promise.new do
        connection.post do |request|
          request.headers = request_headers
          @client.credentials.sign_request(request) unless @client.credentials.nil?
        end
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless (status_code >= 200 && status_code < 300)
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(connection, http_response, error_model)
        end

        # Create Result
        result = MsRest::HttpOperationResponse.new(connection, http_response)
        begin
          parsed_response = JSON.load(response_content) unless response_content.to_s.empty?
          unless parsed_response.nil?
            parsed_response = Error.deserialize_object(parsed_response)
          end
          result.body = parsed_response
        rescue Exception => e
          fail MsRest::DeserializationError.new("Error occured in deserializing the response", e.message, e.backtrace, response_content)
        end

        result
      end

      promise.execute
    end

    #
    # Test explicitly optional integer. Please put a header 'headerParameter' =>
    # null.
    #
    # @param header_parameter [Integer]
    # @param [Hash{String => String}] The hash of custom headers need to be
    # applied to HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which allows to get HTTP
    # response.
    #
    def post_optional_integer_header(header_parameter = nil, custom_headers = nil)
      # Construct URL
      path = "/reqopt/optional/integer/header"
      url = URI.join(@client.base_url, path)
      fail URI::Error unless url.to_s =~ /\A#{URI::regexp}\z/
      corrected_url = url.to_s.gsub(/([^:])\/\//, '\1/')
      url = URI.parse(corrected_url)

      connection = Faraday.new(:url => url) do |faraday|
        faraday.use MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02
        faraday.use :cookie_jar
        faraday.adapter Faraday.default_adapter
      end
      request_headers = Hash.new

      # Set Headers
      request_headers["headerParameter"] = header_parameter.to_s unless header_parameter.to_s.nil?

      unless custom_headers.nil?
        custom_headers.each do |key, value|
          request_headers[key] = value
        end
      end

      # Send Request
      promise = Concurrent::Promise.new do
        connection.post do |request|
          request.headers = request_headers
          @client.credentials.sign_request(request) unless @client.credentials.nil?
        end
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless (status_code == 200)
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(connection, http_response, error_model)
        end

        # Create Result
        result = MsRest::HttpOperationResponse.new(connection, http_response)

        result
      end

      promise.execute
    end

    #
    # Test explicitly required string. Please put null and the client library
    # should throw before the request is sent.
    #
    # @param body_parameter [String]
    # @param [Hash{String => String}] The hash of custom headers need to be
    # applied to HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which allows to get HTTP
    # response.
    #
    def post_required_string_parameter(body_parameter, custom_headers = nil)
      fail ArgumentError, 'body_parameter is nil' if body_parameter.nil?
      # Construct URL
      path = "/reqopt/requied/string/parameter"
      url = URI.join(@client.base_url, path)
      fail URI::Error unless url.to_s =~ /\A#{URI::regexp}\z/
      corrected_url = url.to_s.gsub(/([^:])\/\//, '\1/')
      url = URI.parse(corrected_url)

      connection = Faraday.new(:url => url) do |faraday|
        faraday.use MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02
        faraday.use :cookie_jar
        faraday.adapter Faraday.default_adapter
      end
      request_headers = Hash.new

      unless custom_headers.nil?
        custom_headers.each do |key, value|
          request_headers[key] = value
        end
      end

      # Serialize Request
      request_headers['Content-Type'] = 'application/json; charset=utf-8'
      request_content = JSON.generate(body_parameter, quirks_mode: true)

      # Send Request
      promise = Concurrent::Promise.new do
        connection.post do |request|
          request.headers = request_headers
          request.body = request_content
          @client.credentials.sign_request(request) unless @client.credentials.nil?
        end
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless (status_code >= 200 && status_code < 300)
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(connection, http_response, error_model)
        end

        # Create Result
        result = MsRest::HttpOperationResponse.new(connection, http_response)
        begin
          parsed_response = JSON.load(response_content) unless response_content.to_s.empty?
          unless parsed_response.nil?
            parsed_response = Error.deserialize_object(parsed_response)
          end
          result.body = parsed_response
        rescue Exception => e
          fail MsRest::DeserializationError.new("Error occured in deserializing the response", e.message, e.backtrace, response_content)
        end

        result
      end

      promise.execute
    end

    #
    # Test explicitly optional string. Please put null.
    #
    # @param body_parameter [String]
    # @param [Hash{String => String}] The hash of custom headers need to be
    # applied to HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which allows to get HTTP
    # response.
    #
    def post_optional_string_parameter(body_parameter = nil, custom_headers = nil)
      # Construct URL
      path = "/reqopt/optional/string/parameter"
      url = URI.join(@client.base_url, path)
      fail URI::Error unless url.to_s =~ /\A#{URI::regexp}\z/
      corrected_url = url.to_s.gsub(/([^:])\/\//, '\1/')
      url = URI.parse(corrected_url)

      connection = Faraday.new(:url => url) do |faraday|
        faraday.use MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02
        faraday.use :cookie_jar
        faraday.adapter Faraday.default_adapter
      end
      request_headers = Hash.new

      unless custom_headers.nil?
        custom_headers.each do |key, value|
          request_headers[key] = value
        end
      end

      # Serialize Request
      request_headers['Content-Type'] = 'application/json; charset=utf-8'
      request_content = JSON.generate(body_parameter, quirks_mode: true)

      # Send Request
      promise = Concurrent::Promise.new do
        connection.post do |request|
          request.headers = request_headers
          request.body = request_content
          @client.credentials.sign_request(request) unless @client.credentials.nil?
        end
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless (status_code == 200)
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(connection, http_response, error_model)
        end

        # Create Result
        result = MsRest::HttpOperationResponse.new(connection, http_response)

        result
      end

      promise.execute
    end

    #
    # Test explicitly required string. Please put a valid string-wrapper with
    # 'value' = null and the client library should throw before the request is
    # sent.
    #
    # @param body_parameter [StringWrapper]
    # @param [Hash{String => String}] The hash of custom headers need to be
    # applied to HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which allows to get HTTP
    # response.
    #
    def post_required_string_property(body_parameter, custom_headers = nil)
      fail ArgumentError, 'body_parameter is nil' if body_parameter.nil?
      body_parameter.validate unless body_parameter.nil?
      # Construct URL
      path = "/reqopt/requied/string/property"
      url = URI.join(@client.base_url, path)
      fail URI::Error unless url.to_s =~ /\A#{URI::regexp}\z/
      corrected_url = url.to_s.gsub(/([^:])\/\//, '\1/')
      url = URI.parse(corrected_url)

      connection = Faraday.new(:url => url) do |faraday|
        faraday.use MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02
        faraday.use :cookie_jar
        faraday.adapter Faraday.default_adapter
      end
      request_headers = Hash.new

      unless custom_headers.nil?
        custom_headers.each do |key, value|
          request_headers[key] = value
        end
      end

      # Serialize Request
      request_headers['Content-Type'] = 'application/json; charset=utf-8'
      unless body_parameter.nil?
        body_parameter = StringWrapper.serialize_object(body_parameter)
      end
      request_content = JSON.generate(body_parameter, quirks_mode: true)

      # Send Request
      promise = Concurrent::Promise.new do
        connection.post do |request|
          request.headers = request_headers
          request.body = request_content
          @client.credentials.sign_request(request) unless @client.credentials.nil?
        end
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless (status_code >= 200 && status_code < 300)
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(connection, http_response, error_model)
        end

        # Create Result
        result = MsRest::HttpOperationResponse.new(connection, http_response)
        begin
          parsed_response = JSON.load(response_content) unless response_content.to_s.empty?
          unless parsed_response.nil?
            parsed_response = Error.deserialize_object(parsed_response)
          end
          result.body = parsed_response
        rescue Exception => e
          fail MsRest::DeserializationError.new("Error occured in deserializing the response", e.message, e.backtrace, response_content)
        end

        result
      end

      promise.execute
    end

    #
    # Test explicitly optional integer. Please put a valid string-wrapper with
    # 'value' = null.
    #
    # @param body_parameter [StringOptionalWrapper]
    # @param [Hash{String => String}] The hash of custom headers need to be
    # applied to HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which allows to get HTTP
    # response.
    #
    def post_optional_string_property(body_parameter = nil, custom_headers = nil)
      body_parameter.validate unless body_parameter.nil?
      # Construct URL
      path = "/reqopt/optional/string/property"
      url = URI.join(@client.base_url, path)
      fail URI::Error unless url.to_s =~ /\A#{URI::regexp}\z/
      corrected_url = url.to_s.gsub(/([^:])\/\//, '\1/')
      url = URI.parse(corrected_url)

      connection = Faraday.new(:url => url) do |faraday|
        faraday.use MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02
        faraday.use :cookie_jar
        faraday.adapter Faraday.default_adapter
      end
      request_headers = Hash.new

      unless custom_headers.nil?
        custom_headers.each do |key, value|
          request_headers[key] = value
        end
      end

      # Serialize Request
      request_headers['Content-Type'] = 'application/json; charset=utf-8'
      unless body_parameter.nil?
        body_parameter = StringOptionalWrapper.serialize_object(body_parameter)
      end
      request_content = JSON.generate(body_parameter, quirks_mode: true)

      # Send Request
      promise = Concurrent::Promise.new do
        connection.post do |request|
          request.headers = request_headers
          request.body = request_content
          @client.credentials.sign_request(request) unless @client.credentials.nil?
        end
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless (status_code == 200)
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(connection, http_response, error_model)
        end

        # Create Result
        result = MsRest::HttpOperationResponse.new(connection, http_response)

        result
      end

      promise.execute
    end

    #
    # Test explicitly required string. Please put a header 'headerParameter' =>
    # null and the client library should throw before the request is sent.
    #
    # @param header_parameter [String]
    # @param [Hash{String => String}] The hash of custom headers need to be
    # applied to HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which allows to get HTTP
    # response.
    #
    def post_required_string_header(header_parameter, custom_headers = nil)
      fail ArgumentError, 'header_parameter is nil' if header_parameter.nil?
      # Construct URL
      path = "/reqopt/requied/string/header"
      url = URI.join(@client.base_url, path)
      fail URI::Error unless url.to_s =~ /\A#{URI::regexp}\z/
      corrected_url = url.to_s.gsub(/([^:])\/\//, '\1/')
      url = URI.parse(corrected_url)

      connection = Faraday.new(:url => url) do |faraday|
        faraday.use MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02
        faraday.use :cookie_jar
        faraday.adapter Faraday.default_adapter
      end
      request_headers = Hash.new

      # Set Headers
      request_headers["headerParameter"] = header_parameter unless header_parameter.nil?

      unless custom_headers.nil?
        custom_headers.each do |key, value|
          request_headers[key] = value
        end
      end

      # Send Request
      promise = Concurrent::Promise.new do
        connection.post do |request|
          request.headers = request_headers
          @client.credentials.sign_request(request) unless @client.credentials.nil?
        end
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless (status_code >= 200 && status_code < 300)
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(connection, http_response, error_model)
        end

        # Create Result
        result = MsRest::HttpOperationResponse.new(connection, http_response)
        begin
          parsed_response = JSON.load(response_content) unless response_content.to_s.empty?
          unless parsed_response.nil?
            parsed_response = Error.deserialize_object(parsed_response)
          end
          result.body = parsed_response
        rescue Exception => e
          fail MsRest::DeserializationError.new("Error occured in deserializing the response", e.message, e.backtrace, response_content)
        end

        result
      end

      promise.execute
    end

    #
    # Test explicitly optional string. Please put a header 'headerParameter' =>
    # null.
    #
    # @param body_parameter [String]
    # @param [Hash{String => String}] The hash of custom headers need to be
    # applied to HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which allows to get HTTP
    # response.
    #
    def post_optional_string_header(body_parameter = nil, custom_headers = nil)
      # Construct URL
      path = "/reqopt/optional/string/header"
      url = URI.join(@client.base_url, path)
      fail URI::Error unless url.to_s =~ /\A#{URI::regexp}\z/
      corrected_url = url.to_s.gsub(/([^:])\/\//, '\1/')
      url = URI.parse(corrected_url)

      connection = Faraday.new(:url => url) do |faraday|
        faraday.use MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02
        faraday.use :cookie_jar
        faraday.adapter Faraday.default_adapter
      end
      request_headers = Hash.new

      # Set Headers
      request_headers["bodyParameter"] = body_parameter unless body_parameter.nil?

      unless custom_headers.nil?
        custom_headers.each do |key, value|
          request_headers[key] = value
        end
      end

      # Send Request
      promise = Concurrent::Promise.new do
        connection.post do |request|
          request.headers = request_headers
          @client.credentials.sign_request(request) unless @client.credentials.nil?
        end
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless (status_code == 200)
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(connection, http_response, error_model)
        end

        # Create Result
        result = MsRest::HttpOperationResponse.new(connection, http_response)

        result
      end

      promise.execute
    end

    #
    # Test explicitly required complex object. Please put null and the client
    # library should throw before the request is sent.
    #
    # @param body_parameter [Product]
    # @param [Hash{String => String}] The hash of custom headers need to be
    # applied to HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which allows to get HTTP
    # response.
    #
    def post_required_class_parameter(body_parameter, custom_headers = nil)
      fail ArgumentError, 'body_parameter is nil' if body_parameter.nil?
      body_parameter.validate unless body_parameter.nil?
      # Construct URL
      path = "/reqopt/requied/class/parameter"
      url = URI.join(@client.base_url, path)
      fail URI::Error unless url.to_s =~ /\A#{URI::regexp}\z/
      corrected_url = url.to_s.gsub(/([^:])\/\//, '\1/')
      url = URI.parse(corrected_url)

      connection = Faraday.new(:url => url) do |faraday|
        faraday.use MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02
        faraday.use :cookie_jar
        faraday.adapter Faraday.default_adapter
      end
      request_headers = Hash.new

      unless custom_headers.nil?
        custom_headers.each do |key, value|
          request_headers[key] = value
        end
      end

      # Serialize Request
      request_headers['Content-Type'] = 'application/json; charset=utf-8'
      unless body_parameter.nil?
        body_parameter = Product.serialize_object(body_parameter)
      end
      request_content = JSON.generate(body_parameter, quirks_mode: true)

      # Send Request
      promise = Concurrent::Promise.new do
        connection.post do |request|
          request.headers = request_headers
          request.body = request_content
          @client.credentials.sign_request(request) unless @client.credentials.nil?
        end
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless (status_code >= 200 && status_code < 300)
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(connection, http_response, error_model)
        end

        # Create Result
        result = MsRest::HttpOperationResponse.new(connection, http_response)
        begin
          parsed_response = JSON.load(response_content) unless response_content.to_s.empty?
          unless parsed_response.nil?
            parsed_response = Error.deserialize_object(parsed_response)
          end
          result.body = parsed_response
        rescue Exception => e
          fail MsRest::DeserializationError.new("Error occured in deserializing the response", e.message, e.backtrace, response_content)
        end

        result
      end

      promise.execute
    end

    #
    # Test explicitly optional complex object. Please put null.
    #
    # @param body_parameter [Product]
    # @param [Hash{String => String}] The hash of custom headers need to be
    # applied to HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which allows to get HTTP
    # response.
    #
    def post_optional_class_parameter(body_parameter = nil, custom_headers = nil)
      body_parameter.validate unless body_parameter.nil?
      # Construct URL
      path = "/reqopt/optional/class/parameter"
      url = URI.join(@client.base_url, path)
      fail URI::Error unless url.to_s =~ /\A#{URI::regexp}\z/
      corrected_url = url.to_s.gsub(/([^:])\/\//, '\1/')
      url = URI.parse(corrected_url)

      connection = Faraday.new(:url => url) do |faraday|
        faraday.use MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02
        faraday.use :cookie_jar
        faraday.adapter Faraday.default_adapter
      end
      request_headers = Hash.new

      unless custom_headers.nil?
        custom_headers.each do |key, value|
          request_headers[key] = value
        end
      end

      # Serialize Request
      request_headers['Content-Type'] = 'application/json; charset=utf-8'
      unless body_parameter.nil?
        body_parameter = Product.serialize_object(body_parameter)
      end
      request_content = JSON.generate(body_parameter, quirks_mode: true)

      # Send Request
      promise = Concurrent::Promise.new do
        connection.post do |request|
          request.headers = request_headers
          request.body = request_content
          @client.credentials.sign_request(request) unless @client.credentials.nil?
        end
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless (status_code == 200)
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(connection, http_response, error_model)
        end

        # Create Result
        result = MsRest::HttpOperationResponse.new(connection, http_response)

        result
      end

      promise.execute
    end

    #
    # Test explicitly required complex object. Please put a valid class-wrapper
    # with 'value' = null and the client library should throw before the request
    # is sent.
    #
    # @param body_parameter [ClassWrapper]
    # @param [Hash{String => String}] The hash of custom headers need to be
    # applied to HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which allows to get HTTP
    # response.
    #
    def post_required_class_property(body_parameter, custom_headers = nil)
      fail ArgumentError, 'body_parameter is nil' if body_parameter.nil?
      body_parameter.validate unless body_parameter.nil?
      # Construct URL
      path = "/reqopt/requied/class/property"
      url = URI.join(@client.base_url, path)
      fail URI::Error unless url.to_s =~ /\A#{URI::regexp}\z/
      corrected_url = url.to_s.gsub(/([^:])\/\//, '\1/')
      url = URI.parse(corrected_url)

      connection = Faraday.new(:url => url) do |faraday|
        faraday.use MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02
        faraday.use :cookie_jar
        faraday.adapter Faraday.default_adapter
      end
      request_headers = Hash.new

      unless custom_headers.nil?
        custom_headers.each do |key, value|
          request_headers[key] = value
        end
      end

      # Serialize Request
      request_headers['Content-Type'] = 'application/json; charset=utf-8'
      unless body_parameter.nil?
        body_parameter = ClassWrapper.serialize_object(body_parameter)
      end
      request_content = JSON.generate(body_parameter, quirks_mode: true)

      # Send Request
      promise = Concurrent::Promise.new do
        connection.post do |request|
          request.headers = request_headers
          request.body = request_content
          @client.credentials.sign_request(request) unless @client.credentials.nil?
        end
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless (status_code >= 200 && status_code < 300)
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(connection, http_response, error_model)
        end

        # Create Result
        result = MsRest::HttpOperationResponse.new(connection, http_response)
        begin
          parsed_response = JSON.load(response_content) unless response_content.to_s.empty?
          unless parsed_response.nil?
            parsed_response = Error.deserialize_object(parsed_response)
          end
          result.body = parsed_response
        rescue Exception => e
          fail MsRest::DeserializationError.new("Error occured in deserializing the response", e.message, e.backtrace, response_content)
        end

        result
      end

      promise.execute
    end

    #
    # Test explicitly optional complex object. Please put a valid class-wrapper
    # with 'value' = null.
    #
    # @param body_parameter [ClassOptionalWrapper]
    # @param [Hash{String => String}] The hash of custom headers need to be
    # applied to HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which allows to get HTTP
    # response.
    #
    def post_optional_class_property(body_parameter = nil, custom_headers = nil)
      body_parameter.validate unless body_parameter.nil?
      # Construct URL
      path = "/reqopt/optional/class/property"
      url = URI.join(@client.base_url, path)
      fail URI::Error unless url.to_s =~ /\A#{URI::regexp}\z/
      corrected_url = url.to_s.gsub(/([^:])\/\//, '\1/')
      url = URI.parse(corrected_url)

      connection = Faraday.new(:url => url) do |faraday|
        faraday.use MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02
        faraday.use :cookie_jar
        faraday.adapter Faraday.default_adapter
      end
      request_headers = Hash.new

      unless custom_headers.nil?
        custom_headers.each do |key, value|
          request_headers[key] = value
        end
      end

      # Serialize Request
      request_headers['Content-Type'] = 'application/json; charset=utf-8'
      unless body_parameter.nil?
        body_parameter = ClassOptionalWrapper.serialize_object(body_parameter)
      end
      request_content = JSON.generate(body_parameter, quirks_mode: true)

      # Send Request
      promise = Concurrent::Promise.new do
        connection.post do |request|
          request.headers = request_headers
          request.body = request_content
          @client.credentials.sign_request(request) unless @client.credentials.nil?
        end
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless (status_code == 200)
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(connection, http_response, error_model)
        end

        # Create Result
        result = MsRest::HttpOperationResponse.new(connection, http_response)

        result
      end

      promise.execute
    end

    #
    # Test explicitly required array. Please put null and the client library
    # should throw before the request is sent.
    #
    # @param body_parameter [Array<String>]
    # @param [Hash{String => String}] The hash of custom headers need to be
    # applied to HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which allows to get HTTP
    # response.
    #
    def post_required_array_parameter(body_parameter, custom_headers = nil)
      fail ArgumentError, 'body_parameter is nil' if body_parameter.nil?
      body_parameter.each{ |e| e.validate if e.respond_to?(:validate) } unless body_parameter.nil?
      # Construct URL
      path = "/reqopt/requied/array/parameter"
      url = URI.join(@client.base_url, path)
      fail URI::Error unless url.to_s =~ /\A#{URI::regexp}\z/
      corrected_url = url.to_s.gsub(/([^:])\/\//, '\1/')
      url = URI.parse(corrected_url)

      connection = Faraday.new(:url => url) do |faraday|
        faraday.use MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02
        faraday.use :cookie_jar
        faraday.adapter Faraday.default_adapter
      end
      request_headers = Hash.new

      unless custom_headers.nil?
        custom_headers.each do |key, value|
          request_headers[key] = value
        end
      end

      # Serialize Request
      request_headers['Content-Type'] = 'application/json; charset=utf-8'
      request_content = JSON.generate(body_parameter, quirks_mode: true)

      # Send Request
      promise = Concurrent::Promise.new do
        connection.post do |request|
          request.headers = request_headers
          request.body = request_content
          @client.credentials.sign_request(request) unless @client.credentials.nil?
        end
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless (status_code >= 200 && status_code < 300)
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(connection, http_response, error_model)
        end

        # Create Result
        result = MsRest::HttpOperationResponse.new(connection, http_response)
        begin
          parsed_response = JSON.load(response_content) unless response_content.to_s.empty?
          unless parsed_response.nil?
            parsed_response = Error.deserialize_object(parsed_response)
          end
          result.body = parsed_response
        rescue Exception => e
          fail MsRest::DeserializationError.new("Error occured in deserializing the response", e.message, e.backtrace, response_content)
        end

        result
      end

      promise.execute
    end

    #
    # Test explicitly optional array. Please put null.
    #
    # @param body_parameter [Array<String>]
    # @param [Hash{String => String}] The hash of custom headers need to be
    # applied to HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which allows to get HTTP
    # response.
    #
    def post_optional_array_parameter(body_parameter = nil, custom_headers = nil)
      body_parameter.each{ |e| e.validate if e.respond_to?(:validate) } unless body_parameter.nil?
      # Construct URL
      path = "/reqopt/optional/array/parameter"
      url = URI.join(@client.base_url, path)
      fail URI::Error unless url.to_s =~ /\A#{URI::regexp}\z/
      corrected_url = url.to_s.gsub(/([^:])\/\//, '\1/')
      url = URI.parse(corrected_url)

      connection = Faraday.new(:url => url) do |faraday|
        faraday.use MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02
        faraday.use :cookie_jar
        faraday.adapter Faraday.default_adapter
      end
      request_headers = Hash.new

      unless custom_headers.nil?
        custom_headers.each do |key, value|
          request_headers[key] = value
        end
      end

      # Serialize Request
      request_headers['Content-Type'] = 'application/json; charset=utf-8'
      request_content = JSON.generate(body_parameter, quirks_mode: true)

      # Send Request
      promise = Concurrent::Promise.new do
        connection.post do |request|
          request.headers = request_headers
          request.body = request_content
          @client.credentials.sign_request(request) unless @client.credentials.nil?
        end
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless (status_code == 200)
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(connection, http_response, error_model)
        end

        # Create Result
        result = MsRest::HttpOperationResponse.new(connection, http_response)

        result
      end

      promise.execute
    end

    #
    # Test explicitly required array. Please put a valid array-wrapper with
    # 'value' = null and the client library should throw before the request is
    # sent.
    #
    # @param body_parameter [ArrayWrapper]
    # @param [Hash{String => String}] The hash of custom headers need to be
    # applied to HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which allows to get HTTP
    # response.
    #
    def post_required_array_property(body_parameter, custom_headers = nil)
      fail ArgumentError, 'body_parameter is nil' if body_parameter.nil?
      body_parameter.validate unless body_parameter.nil?
      # Construct URL
      path = "/reqopt/requied/array/property"
      url = URI.join(@client.base_url, path)
      fail URI::Error unless url.to_s =~ /\A#{URI::regexp}\z/
      corrected_url = url.to_s.gsub(/([^:])\/\//, '\1/')
      url = URI.parse(corrected_url)

      connection = Faraday.new(:url => url) do |faraday|
        faraday.use MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02
        faraday.use :cookie_jar
        faraday.adapter Faraday.default_adapter
      end
      request_headers = Hash.new

      unless custom_headers.nil?
        custom_headers.each do |key, value|
          request_headers[key] = value
        end
      end

      # Serialize Request
      request_headers['Content-Type'] = 'application/json; charset=utf-8'
      unless body_parameter.nil?
        body_parameter = ArrayWrapper.serialize_object(body_parameter)
      end
      request_content = JSON.generate(body_parameter, quirks_mode: true)

      # Send Request
      promise = Concurrent::Promise.new do
        connection.post do |request|
          request.headers = request_headers
          request.body = request_content
          @client.credentials.sign_request(request) unless @client.credentials.nil?
        end
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless (status_code >= 200 && status_code < 300)
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(connection, http_response, error_model)
        end

        # Create Result
        result = MsRest::HttpOperationResponse.new(connection, http_response)
        begin
          parsed_response = JSON.load(response_content) unless response_content.to_s.empty?
          unless parsed_response.nil?
            parsed_response = Error.deserialize_object(parsed_response)
          end
          result.body = parsed_response
        rescue Exception => e
          fail MsRest::DeserializationError.new("Error occured in deserializing the response", e.message, e.backtrace, response_content)
        end

        result
      end

      promise.execute
    end

    #
    # Test explicitly optional array. Please put a valid array-wrapper with
    # 'value' = null.
    #
    # @param body_parameter [ArrayOptionalWrapper]
    # @param [Hash{String => String}] The hash of custom headers need to be
    # applied to HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which allows to get HTTP
    # response.
    #
    def post_optional_array_property(body_parameter = nil, custom_headers = nil)
      body_parameter.validate unless body_parameter.nil?
      # Construct URL
      path = "/reqopt/optional/array/property"
      url = URI.join(@client.base_url, path)
      fail URI::Error unless url.to_s =~ /\A#{URI::regexp}\z/
      corrected_url = url.to_s.gsub(/([^:])\/\//, '\1/')
      url = URI.parse(corrected_url)

      connection = Faraday.new(:url => url) do |faraday|
        faraday.use MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02
        faraday.use :cookie_jar
        faraday.adapter Faraday.default_adapter
      end
      request_headers = Hash.new

      unless custom_headers.nil?
        custom_headers.each do |key, value|
          request_headers[key] = value
        end
      end

      # Serialize Request
      request_headers['Content-Type'] = 'application/json; charset=utf-8'
      unless body_parameter.nil?
        body_parameter = ArrayOptionalWrapper.serialize_object(body_parameter)
      end
      request_content = JSON.generate(body_parameter, quirks_mode: true)

      # Send Request
      promise = Concurrent::Promise.new do
        connection.post do |request|
          request.headers = request_headers
          request.body = request_content
          @client.credentials.sign_request(request) unless @client.credentials.nil?
        end
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless (status_code == 200)
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(connection, http_response, error_model)
        end

        # Create Result
        result = MsRest::HttpOperationResponse.new(connection, http_response)

        result
      end

      promise.execute
    end

    #
    # Test explicitly required array. Please put a header 'headerParameter' =>
    # null and the client library should throw before the request is sent.
    #
    # @param header_parameter [Array<String>]
    # @param [Hash{String => String}] The hash of custom headers need to be
    # applied to HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which allows to get HTTP
    # response.
    #
    def post_required_array_header(header_parameter, custom_headers = nil)
      fail ArgumentError, 'header_parameter is nil' if header_parameter.nil?
      header_parameter.each{ |e| e.validate if e.respond_to?(:validate) } unless header_parameter.nil?
      # Construct URL
      path = "/reqopt/requied/array/header"
      url = URI.join(@client.base_url, path)
      fail URI::Error unless url.to_s =~ /\A#{URI::regexp}\z/
      corrected_url = url.to_s.gsub(/([^:])\/\//, '\1/')
      url = URI.parse(corrected_url)

      connection = Faraday.new(:url => url) do |faraday|
        faraday.use MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02
        faraday.use :cookie_jar
        faraday.adapter Faraday.default_adapter
      end
      request_headers = Hash.new

      # Set Headers
      request_headers["headerParameter"] = header_parameter.to_s unless header_parameter.to_s.nil?

      unless custom_headers.nil?
        custom_headers.each do |key, value|
          request_headers[key] = value
        end
      end

      # Send Request
      promise = Concurrent::Promise.new do
        connection.post do |request|
          request.headers = request_headers
          @client.credentials.sign_request(request) unless @client.credentials.nil?
        end
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless (status_code >= 200 && status_code < 300)
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(connection, http_response, error_model)
        end

        # Create Result
        result = MsRest::HttpOperationResponse.new(connection, http_response)
        begin
          parsed_response = JSON.load(response_content) unless response_content.to_s.empty?
          unless parsed_response.nil?
            parsed_response = Error.deserialize_object(parsed_response)
          end
          result.body = parsed_response
        rescue Exception => e
          fail MsRest::DeserializationError.new("Error occured in deserializing the response", e.message, e.backtrace, response_content)
        end

        result
      end

      promise.execute
    end

    #
    # Test explicitly optional integer. Please put a header 'headerParameter' =>
    # null.
    #
    # @param header_parameter [Array<String>]
    # @param [Hash{String => String}] The hash of custom headers need to be
    # applied to HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which allows to get HTTP
    # response.
    #
    def post_optional_array_header(header_parameter = nil, custom_headers = nil)
      header_parameter.each{ |e| e.validate if e.respond_to?(:validate) } unless header_parameter.nil?
      # Construct URL
      path = "/reqopt/optional/array/header"
      url = URI.join(@client.base_url, path)
      fail URI::Error unless url.to_s =~ /\A#{URI::regexp}\z/
      corrected_url = url.to_s.gsub(/([^:])\/\//, '\1/')
      url = URI.parse(corrected_url)

      connection = Faraday.new(:url => url) do |faraday|
        faraday.use MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02
        faraday.use :cookie_jar
        faraday.adapter Faraday.default_adapter
      end
      request_headers = Hash.new

      # Set Headers
      request_headers["headerParameter"] = header_parameter.to_s unless header_parameter.to_s.nil?

      unless custom_headers.nil?
        custom_headers.each do |key, value|
          request_headers[key] = value
        end
      end

      # Send Request
      promise = Concurrent::Promise.new do
        connection.post do |request|
          request.headers = request_headers
          @client.credentials.sign_request(request) unless @client.credentials.nil?
        end
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless (status_code == 200)
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(connection, http_response, error_model)
        end

        # Create Result
        result = MsRest::HttpOperationResponse.new(connection, http_response)

        result
      end

      promise.execute
    end

  end
end
