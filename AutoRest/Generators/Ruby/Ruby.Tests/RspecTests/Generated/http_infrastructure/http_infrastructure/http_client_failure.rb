# encoding: utf-8
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
# 
# Code generated by Microsoft (R) AutoRest Code Generator 0.13.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module HttpInfrastructureModule
  #
  # Test Infrastructure for AutoRest
  #
  class HttpClientFailure
    include HttpInfrastructureModule::Models

    #
    # Creates and initializes a new instance of the HttpClientFailure class.
    # @param client service class for accessing basic functionality.
    #
    def initialize(client)
      @client = client
    end

    # @return reference to the AutoRestHttpInfrastructureTestService
    attr_reader :client

    #
    # Return 400 status code - should be represented in the client as an error
    #
    # @param [Hash{String => String}] The hash of custom headers need to be
    # applied to HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which allows to get HTTP
    # response.
    #
    def head400(custom_headers = nil)
      # Construct URL
      path = "/http/failure/client/400"
      url = URI.join(@client.base_url, path)
      fail URI::Error unless url.to_s =~ /\A#{URI::regexp}\z/
      corrected_url = url.to_s.gsub(/([^:])\/\//, '\1/')
      url = URI.parse(corrected_url)

      connection = Faraday.new(:url => url) do |faraday|
        faraday.use MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02
        faraday.use :cookie_jar
        faraday.adapter Faraday.default_adapter
      end
      request_headers = Hash.new

      unless custom_headers.nil?
        custom_headers.each do |key, value|
          request_headers[key] = value
        end
      end

      # Send Request
      promise = Concurrent::Promise.new do
        connection.head do |request|
          request.headers = request_headers
          @client.credentials.sign_request(request) unless @client.credentials.nil?
        end
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless (status_code >= 200 && status_code < 300)
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(connection, http_response, error_model)
        end

        # Create Result
        result = MsRest::HttpOperationResponse.new(connection, http_response)
        begin
          parsed_response = JSON.load(response_content) unless response_content.to_s.empty?
          unless parsed_response.nil?
            parsed_response = Error.deserialize_object(parsed_response)
          end
          result.body = parsed_response
        rescue Exception => e
          fail MsRest::DeserializationError.new("Error occured in deserializing the response", e.message, e.backtrace, response_content)
        end

        result
      end

      promise.execute
    end

    #
    # Return 400 status code - should be represented in the client as an error
    #
    # @param [Hash{String => String}] The hash of custom headers need to be
    # applied to HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which allows to get HTTP
    # response.
    #
    def get400(custom_headers = nil)
      # Construct URL
      path = "/http/failure/client/400"
      url = URI.join(@client.base_url, path)
      fail URI::Error unless url.to_s =~ /\A#{URI::regexp}\z/
      corrected_url = url.to_s.gsub(/([^:])\/\//, '\1/')
      url = URI.parse(corrected_url)

      connection = Faraday.new(:url => url) do |faraday|
        faraday.use MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02
        faraday.use :cookie_jar
        faraday.adapter Faraday.default_adapter
      end
      request_headers = Hash.new

      unless custom_headers.nil?
        custom_headers.each do |key, value|
          request_headers[key] = value
        end
      end

      # Send Request
      promise = Concurrent::Promise.new do
        connection.get do |request|
          request.headers = request_headers
          @client.credentials.sign_request(request) unless @client.credentials.nil?
        end
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless (status_code >= 200 && status_code < 300)
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(connection, http_response, error_model)
        end

        # Create Result
        result = MsRest::HttpOperationResponse.new(connection, http_response)
        begin
          parsed_response = JSON.load(response_content) unless response_content.to_s.empty?
          unless parsed_response.nil?
            parsed_response = Error.deserialize_object(parsed_response)
          end
          result.body = parsed_response
        rescue Exception => e
          fail MsRest::DeserializationError.new("Error occured in deserializing the response", e.message, e.backtrace, response_content)
        end

        result
      end

      promise.execute
    end

    #
    # Return 400 status code - should be represented in the client as an error
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param [Hash{String => String}] The hash of custom headers need to be
    # applied to HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which allows to get HTTP
    # response.
    #
    def put400(boolean_value = nil, custom_headers = nil)
      # Construct URL
      path = "/http/failure/client/400"
      url = URI.join(@client.base_url, path)
      fail URI::Error unless url.to_s =~ /\A#{URI::regexp}\z/
      corrected_url = url.to_s.gsub(/([^:])\/\//, '\1/')
      url = URI.parse(corrected_url)

      connection = Faraday.new(:url => url) do |faraday|
        faraday.use MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02
        faraday.use :cookie_jar
        faraday.adapter Faraday.default_adapter
      end
      request_headers = Hash.new

      unless custom_headers.nil?
        custom_headers.each do |key, value|
          request_headers[key] = value
        end
      end

      # Serialize Request
      request_headers['Content-Type'] = 'application/json; charset=utf-8'
      request_content = JSON.generate(boolean_value, quirks_mode: true)

      # Send Request
      promise = Concurrent::Promise.new do
        connection.put do |request|
          request.headers = request_headers
          request.body = request_content
          @client.credentials.sign_request(request) unless @client.credentials.nil?
        end
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless (status_code >= 200 && status_code < 300)
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(connection, http_response, error_model)
        end

        # Create Result
        result = MsRest::HttpOperationResponse.new(connection, http_response)
        begin
          parsed_response = JSON.load(response_content) unless response_content.to_s.empty?
          unless parsed_response.nil?
            parsed_response = Error.deserialize_object(parsed_response)
          end
          result.body = parsed_response
        rescue Exception => e
          fail MsRest::DeserializationError.new("Error occured in deserializing the response", e.message, e.backtrace, response_content)
        end

        result
      end

      promise.execute
    end

    #
    # Return 400 status code - should be represented in the client as an error
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param [Hash{String => String}] The hash of custom headers need to be
    # applied to HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which allows to get HTTP
    # response.
    #
    def patch400(boolean_value = nil, custom_headers = nil)
      # Construct URL
      path = "/http/failure/client/400"
      url = URI.join(@client.base_url, path)
      fail URI::Error unless url.to_s =~ /\A#{URI::regexp}\z/
      corrected_url = url.to_s.gsub(/([^:])\/\//, '\1/')
      url = URI.parse(corrected_url)

      connection = Faraday.new(:url => url) do |faraday|
        faraday.use MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02
        faraday.use :cookie_jar
        faraday.adapter Faraday.default_adapter
      end
      request_headers = Hash.new

      unless custom_headers.nil?
        custom_headers.each do |key, value|
          request_headers[key] = value
        end
      end

      # Serialize Request
      request_headers['Content-Type'] = 'application/json; charset=utf-8'
      request_content = JSON.generate(boolean_value, quirks_mode: true)

      # Send Request
      promise = Concurrent::Promise.new do
        connection.patch do |request|
          request.headers = request_headers
          request.body = request_content
          @client.credentials.sign_request(request) unless @client.credentials.nil?
        end
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless (status_code >= 200 && status_code < 300)
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(connection, http_response, error_model)
        end

        # Create Result
        result = MsRest::HttpOperationResponse.new(connection, http_response)
        begin
          parsed_response = JSON.load(response_content) unless response_content.to_s.empty?
          unless parsed_response.nil?
            parsed_response = Error.deserialize_object(parsed_response)
          end
          result.body = parsed_response
        rescue Exception => e
          fail MsRest::DeserializationError.new("Error occured in deserializing the response", e.message, e.backtrace, response_content)
        end

        result
      end

      promise.execute
    end

    #
    # Return 400 status code - should be represented in the client as an error
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param [Hash{String => String}] The hash of custom headers need to be
    # applied to HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which allows to get HTTP
    # response.
    #
    def post400(boolean_value = nil, custom_headers = nil)
      # Construct URL
      path = "/http/failure/client/400"
      url = URI.join(@client.base_url, path)
      fail URI::Error unless url.to_s =~ /\A#{URI::regexp}\z/
      corrected_url = url.to_s.gsub(/([^:])\/\//, '\1/')
      url = URI.parse(corrected_url)

      connection = Faraday.new(:url => url) do |faraday|
        faraday.use MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02
        faraday.use :cookie_jar
        faraday.adapter Faraday.default_adapter
      end
      request_headers = Hash.new

      unless custom_headers.nil?
        custom_headers.each do |key, value|
          request_headers[key] = value
        end
      end

      # Serialize Request
      request_headers['Content-Type'] = 'application/json; charset=utf-8'
      request_content = JSON.generate(boolean_value, quirks_mode: true)

      # Send Request
      promise = Concurrent::Promise.new do
        connection.post do |request|
          request.headers = request_headers
          request.body = request_content
          @client.credentials.sign_request(request) unless @client.credentials.nil?
        end
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless (status_code >= 200 && status_code < 300)
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(connection, http_response, error_model)
        end

        # Create Result
        result = MsRest::HttpOperationResponse.new(connection, http_response)
        begin
          parsed_response = JSON.load(response_content) unless response_content.to_s.empty?
          unless parsed_response.nil?
            parsed_response = Error.deserialize_object(parsed_response)
          end
          result.body = parsed_response
        rescue Exception => e
          fail MsRest::DeserializationError.new("Error occured in deserializing the response", e.message, e.backtrace, response_content)
        end

        result
      end

      promise.execute
    end

    #
    # Return 400 status code - should be represented in the client as an error
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param [Hash{String => String}] The hash of custom headers need to be
    # applied to HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which allows to get HTTP
    # response.
    #
    def delete400(boolean_value = nil, custom_headers = nil)
      # Construct URL
      path = "/http/failure/client/400"
      url = URI.join(@client.base_url, path)
      fail URI::Error unless url.to_s =~ /\A#{URI::regexp}\z/
      corrected_url = url.to_s.gsub(/([^:])\/\//, '\1/')
      url = URI.parse(corrected_url)

      connection = Faraday.new(:url => url) do |faraday|
        faraday.use MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02
        faraday.use :cookie_jar
        faraday.adapter Faraday.default_adapter
      end
      request_headers = Hash.new

      unless custom_headers.nil?
        custom_headers.each do |key, value|
          request_headers[key] = value
        end
      end

      # Serialize Request
      request_headers['Content-Type'] = 'application/json; charset=utf-8'
      request_content = JSON.generate(boolean_value, quirks_mode: true)

      # Send Request
      promise = Concurrent::Promise.new do
        connection.delete do |request|
          request.headers = request_headers
          request.body = request_content
          @client.credentials.sign_request(request) unless @client.credentials.nil?
        end
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless (status_code >= 200 && status_code < 300)
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(connection, http_response, error_model)
        end

        # Create Result
        result = MsRest::HttpOperationResponse.new(connection, http_response)
        begin
          parsed_response = JSON.load(response_content) unless response_content.to_s.empty?
          unless parsed_response.nil?
            parsed_response = Error.deserialize_object(parsed_response)
          end
          result.body = parsed_response
        rescue Exception => e
          fail MsRest::DeserializationError.new("Error occured in deserializing the response", e.message, e.backtrace, response_content)
        end

        result
      end

      promise.execute
    end

    #
    # Return 401 status code - should be represented in the client as an error
    #
    # @param [Hash{String => String}] The hash of custom headers need to be
    # applied to HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which allows to get HTTP
    # response.
    #
    def head401(custom_headers = nil)
      # Construct URL
      path = "/http/failure/client/401"
      url = URI.join(@client.base_url, path)
      fail URI::Error unless url.to_s =~ /\A#{URI::regexp}\z/
      corrected_url = url.to_s.gsub(/([^:])\/\//, '\1/')
      url = URI.parse(corrected_url)

      connection = Faraday.new(:url => url) do |faraday|
        faraday.use MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02
        faraday.use :cookie_jar
        faraday.adapter Faraday.default_adapter
      end
      request_headers = Hash.new

      unless custom_headers.nil?
        custom_headers.each do |key, value|
          request_headers[key] = value
        end
      end

      # Send Request
      promise = Concurrent::Promise.new do
        connection.head do |request|
          request.headers = request_headers
          @client.credentials.sign_request(request) unless @client.credentials.nil?
        end
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless (status_code >= 200 && status_code < 300)
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(connection, http_response, error_model)
        end

        # Create Result
        result = MsRest::HttpOperationResponse.new(connection, http_response)
        begin
          parsed_response = JSON.load(response_content) unless response_content.to_s.empty?
          unless parsed_response.nil?
            parsed_response = Error.deserialize_object(parsed_response)
          end
          result.body = parsed_response
        rescue Exception => e
          fail MsRest::DeserializationError.new("Error occured in deserializing the response", e.message, e.backtrace, response_content)
        end

        result
      end

      promise.execute
    end

    #
    # Return 402 status code - should be represented in the client as an error
    #
    # @param [Hash{String => String}] The hash of custom headers need to be
    # applied to HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which allows to get HTTP
    # response.
    #
    def get402(custom_headers = nil)
      # Construct URL
      path = "/http/failure/client/402"
      url = URI.join(@client.base_url, path)
      fail URI::Error unless url.to_s =~ /\A#{URI::regexp}\z/
      corrected_url = url.to_s.gsub(/([^:])\/\//, '\1/')
      url = URI.parse(corrected_url)

      connection = Faraday.new(:url => url) do |faraday|
        faraday.use MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02
        faraday.use :cookie_jar
        faraday.adapter Faraday.default_adapter
      end
      request_headers = Hash.new

      unless custom_headers.nil?
        custom_headers.each do |key, value|
          request_headers[key] = value
        end
      end

      # Send Request
      promise = Concurrent::Promise.new do
        connection.get do |request|
          request.headers = request_headers
          @client.credentials.sign_request(request) unless @client.credentials.nil?
        end
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless (status_code >= 200 && status_code < 300)
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(connection, http_response, error_model)
        end

        # Create Result
        result = MsRest::HttpOperationResponse.new(connection, http_response)
        begin
          parsed_response = JSON.load(response_content) unless response_content.to_s.empty?
          unless parsed_response.nil?
            parsed_response = Error.deserialize_object(parsed_response)
          end
          result.body = parsed_response
        rescue Exception => e
          fail MsRest::DeserializationError.new("Error occured in deserializing the response", e.message, e.backtrace, response_content)
        end

        result
      end

      promise.execute
    end

    #
    # Return 403 status code - should be represented in the client as an error
    #
    # @param [Hash{String => String}] The hash of custom headers need to be
    # applied to HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which allows to get HTTP
    # response.
    #
    def get403(custom_headers = nil)
      # Construct URL
      path = "/http/failure/client/403"
      url = URI.join(@client.base_url, path)
      fail URI::Error unless url.to_s =~ /\A#{URI::regexp}\z/
      corrected_url = url.to_s.gsub(/([^:])\/\//, '\1/')
      url = URI.parse(corrected_url)

      connection = Faraday.new(:url => url) do |faraday|
        faraday.use MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02
        faraday.use :cookie_jar
        faraday.adapter Faraday.default_adapter
      end
      request_headers = Hash.new

      unless custom_headers.nil?
        custom_headers.each do |key, value|
          request_headers[key] = value
        end
      end

      # Send Request
      promise = Concurrent::Promise.new do
        connection.get do |request|
          request.headers = request_headers
          @client.credentials.sign_request(request) unless @client.credentials.nil?
        end
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless (status_code >= 200 && status_code < 300)
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(connection, http_response, error_model)
        end

        # Create Result
        result = MsRest::HttpOperationResponse.new(connection, http_response)
        begin
          parsed_response = JSON.load(response_content) unless response_content.to_s.empty?
          unless parsed_response.nil?
            parsed_response = Error.deserialize_object(parsed_response)
          end
          result.body = parsed_response
        rescue Exception => e
          fail MsRest::DeserializationError.new("Error occured in deserializing the response", e.message, e.backtrace, response_content)
        end

        result
      end

      promise.execute
    end

    #
    # Return 404 status code - should be represented in the client as an error
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param [Hash{String => String}] The hash of custom headers need to be
    # applied to HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which allows to get HTTP
    # response.
    #
    def put404(boolean_value = nil, custom_headers = nil)
      # Construct URL
      path = "/http/failure/client/404"
      url = URI.join(@client.base_url, path)
      fail URI::Error unless url.to_s =~ /\A#{URI::regexp}\z/
      corrected_url = url.to_s.gsub(/([^:])\/\//, '\1/')
      url = URI.parse(corrected_url)

      connection = Faraday.new(:url => url) do |faraday|
        faraday.use MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02
        faraday.use :cookie_jar
        faraday.adapter Faraday.default_adapter
      end
      request_headers = Hash.new

      unless custom_headers.nil?
        custom_headers.each do |key, value|
          request_headers[key] = value
        end
      end

      # Serialize Request
      request_headers['Content-Type'] = 'application/json; charset=utf-8'
      request_content = JSON.generate(boolean_value, quirks_mode: true)

      # Send Request
      promise = Concurrent::Promise.new do
        connection.put do |request|
          request.headers = request_headers
          request.body = request_content
          @client.credentials.sign_request(request) unless @client.credentials.nil?
        end
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless (status_code >= 200 && status_code < 300)
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(connection, http_response, error_model)
        end

        # Create Result
        result = MsRest::HttpOperationResponse.new(connection, http_response)
        begin
          parsed_response = JSON.load(response_content) unless response_content.to_s.empty?
          unless parsed_response.nil?
            parsed_response = Error.deserialize_object(parsed_response)
          end
          result.body = parsed_response
        rescue Exception => e
          fail MsRest::DeserializationError.new("Error occured in deserializing the response", e.message, e.backtrace, response_content)
        end

        result
      end

      promise.execute
    end

    #
    # Return 405 status code - should be represented in the client as an error
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param [Hash{String => String}] The hash of custom headers need to be
    # applied to HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which allows to get HTTP
    # response.
    #
    def patch405(boolean_value = nil, custom_headers = nil)
      # Construct URL
      path = "/http/failure/client/405"
      url = URI.join(@client.base_url, path)
      fail URI::Error unless url.to_s =~ /\A#{URI::regexp}\z/
      corrected_url = url.to_s.gsub(/([^:])\/\//, '\1/')
      url = URI.parse(corrected_url)

      connection = Faraday.new(:url => url) do |faraday|
        faraday.use MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02
        faraday.use :cookie_jar
        faraday.adapter Faraday.default_adapter
      end
      request_headers = Hash.new

      unless custom_headers.nil?
        custom_headers.each do |key, value|
          request_headers[key] = value
        end
      end

      # Serialize Request
      request_headers['Content-Type'] = 'application/json; charset=utf-8'
      request_content = JSON.generate(boolean_value, quirks_mode: true)

      # Send Request
      promise = Concurrent::Promise.new do
        connection.patch do |request|
          request.headers = request_headers
          request.body = request_content
          @client.credentials.sign_request(request) unless @client.credentials.nil?
        end
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless (status_code >= 200 && status_code < 300)
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(connection, http_response, error_model)
        end

        # Create Result
        result = MsRest::HttpOperationResponse.new(connection, http_response)
        begin
          parsed_response = JSON.load(response_content) unless response_content.to_s.empty?
          unless parsed_response.nil?
            parsed_response = Error.deserialize_object(parsed_response)
          end
          result.body = parsed_response
        rescue Exception => e
          fail MsRest::DeserializationError.new("Error occured in deserializing the response", e.message, e.backtrace, response_content)
        end

        result
      end

      promise.execute
    end

    #
    # Return 406 status code - should be represented in the client as an error
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param [Hash{String => String}] The hash of custom headers need to be
    # applied to HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which allows to get HTTP
    # response.
    #
    def post406(boolean_value = nil, custom_headers = nil)
      # Construct URL
      path = "/http/failure/client/406"
      url = URI.join(@client.base_url, path)
      fail URI::Error unless url.to_s =~ /\A#{URI::regexp}\z/
      corrected_url = url.to_s.gsub(/([^:])\/\//, '\1/')
      url = URI.parse(corrected_url)

      connection = Faraday.new(:url => url) do |faraday|
        faraday.use MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02
        faraday.use :cookie_jar
        faraday.adapter Faraday.default_adapter
      end
      request_headers = Hash.new

      unless custom_headers.nil?
        custom_headers.each do |key, value|
          request_headers[key] = value
        end
      end

      # Serialize Request
      request_headers['Content-Type'] = 'application/json; charset=utf-8'
      request_content = JSON.generate(boolean_value, quirks_mode: true)

      # Send Request
      promise = Concurrent::Promise.new do
        connection.post do |request|
          request.headers = request_headers
          request.body = request_content
          @client.credentials.sign_request(request) unless @client.credentials.nil?
        end
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless (status_code >= 200 && status_code < 300)
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(connection, http_response, error_model)
        end

        # Create Result
        result = MsRest::HttpOperationResponse.new(connection, http_response)
        begin
          parsed_response = JSON.load(response_content) unless response_content.to_s.empty?
          unless parsed_response.nil?
            parsed_response = Error.deserialize_object(parsed_response)
          end
          result.body = parsed_response
        rescue Exception => e
          fail MsRest::DeserializationError.new("Error occured in deserializing the response", e.message, e.backtrace, response_content)
        end

        result
      end

      promise.execute
    end

    #
    # Return 407 status code - should be represented in the client as an error
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param [Hash{String => String}] The hash of custom headers need to be
    # applied to HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which allows to get HTTP
    # response.
    #
    def delete407(boolean_value = nil, custom_headers = nil)
      # Construct URL
      path = "/http/failure/client/407"
      url = URI.join(@client.base_url, path)
      fail URI::Error unless url.to_s =~ /\A#{URI::regexp}\z/
      corrected_url = url.to_s.gsub(/([^:])\/\//, '\1/')
      url = URI.parse(corrected_url)

      connection = Faraday.new(:url => url) do |faraday|
        faraday.use MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02
        faraday.use :cookie_jar
        faraday.adapter Faraday.default_adapter
      end
      request_headers = Hash.new

      unless custom_headers.nil?
        custom_headers.each do |key, value|
          request_headers[key] = value
        end
      end

      # Serialize Request
      request_headers['Content-Type'] = 'application/json; charset=utf-8'
      request_content = JSON.generate(boolean_value, quirks_mode: true)

      # Send Request
      promise = Concurrent::Promise.new do
        connection.delete do |request|
          request.headers = request_headers
          request.body = request_content
          @client.credentials.sign_request(request) unless @client.credentials.nil?
        end
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless (status_code >= 200 && status_code < 300)
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(connection, http_response, error_model)
        end

        # Create Result
        result = MsRest::HttpOperationResponse.new(connection, http_response)
        begin
          parsed_response = JSON.load(response_content) unless response_content.to_s.empty?
          unless parsed_response.nil?
            parsed_response = Error.deserialize_object(parsed_response)
          end
          result.body = parsed_response
        rescue Exception => e
          fail MsRest::DeserializationError.new("Error occured in deserializing the response", e.message, e.backtrace, response_content)
        end

        result
      end

      promise.execute
    end

    #
    # Return 409 status code - should be represented in the client as an error
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param [Hash{String => String}] The hash of custom headers need to be
    # applied to HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which allows to get HTTP
    # response.
    #
    def put409(boolean_value = nil, custom_headers = nil)
      # Construct URL
      path = "/http/failure/client/409"
      url = URI.join(@client.base_url, path)
      fail URI::Error unless url.to_s =~ /\A#{URI::regexp}\z/
      corrected_url = url.to_s.gsub(/([^:])\/\//, '\1/')
      url = URI.parse(corrected_url)

      connection = Faraday.new(:url => url) do |faraday|
        faraday.use MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02
        faraday.use :cookie_jar
        faraday.adapter Faraday.default_adapter
      end
      request_headers = Hash.new

      unless custom_headers.nil?
        custom_headers.each do |key, value|
          request_headers[key] = value
        end
      end

      # Serialize Request
      request_headers['Content-Type'] = 'application/json; charset=utf-8'
      request_content = JSON.generate(boolean_value, quirks_mode: true)

      # Send Request
      promise = Concurrent::Promise.new do
        connection.put do |request|
          request.headers = request_headers
          request.body = request_content
          @client.credentials.sign_request(request) unless @client.credentials.nil?
        end
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless (status_code >= 200 && status_code < 300)
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(connection, http_response, error_model)
        end

        # Create Result
        result = MsRest::HttpOperationResponse.new(connection, http_response)
        begin
          parsed_response = JSON.load(response_content) unless response_content.to_s.empty?
          unless parsed_response.nil?
            parsed_response = Error.deserialize_object(parsed_response)
          end
          result.body = parsed_response
        rescue Exception => e
          fail MsRest::DeserializationError.new("Error occured in deserializing the response", e.message, e.backtrace, response_content)
        end

        result
      end

      promise.execute
    end

    #
    # Return 410 status code - should be represented in the client as an error
    #
    # @param [Hash{String => String}] The hash of custom headers need to be
    # applied to HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which allows to get HTTP
    # response.
    #
    def head410(custom_headers = nil)
      # Construct URL
      path = "/http/failure/client/410"
      url = URI.join(@client.base_url, path)
      fail URI::Error unless url.to_s =~ /\A#{URI::regexp}\z/
      corrected_url = url.to_s.gsub(/([^:])\/\//, '\1/')
      url = URI.parse(corrected_url)

      connection = Faraday.new(:url => url) do |faraday|
        faraday.use MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02
        faraday.use :cookie_jar
        faraday.adapter Faraday.default_adapter
      end
      request_headers = Hash.new

      unless custom_headers.nil?
        custom_headers.each do |key, value|
          request_headers[key] = value
        end
      end

      # Send Request
      promise = Concurrent::Promise.new do
        connection.head do |request|
          request.headers = request_headers
          @client.credentials.sign_request(request) unless @client.credentials.nil?
        end
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless (status_code >= 200 && status_code < 300)
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(connection, http_response, error_model)
        end

        # Create Result
        result = MsRest::HttpOperationResponse.new(connection, http_response)
        begin
          parsed_response = JSON.load(response_content) unless response_content.to_s.empty?
          unless parsed_response.nil?
            parsed_response = Error.deserialize_object(parsed_response)
          end
          result.body = parsed_response
        rescue Exception => e
          fail MsRest::DeserializationError.new("Error occured in deserializing the response", e.message, e.backtrace, response_content)
        end

        result
      end

      promise.execute
    end

    #
    # Return 411 status code - should be represented in the client as an error
    #
    # @param [Hash{String => String}] The hash of custom headers need to be
    # applied to HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which allows to get HTTP
    # response.
    #
    def get411(custom_headers = nil)
      # Construct URL
      path = "/http/failure/client/411"
      url = URI.join(@client.base_url, path)
      fail URI::Error unless url.to_s =~ /\A#{URI::regexp}\z/
      corrected_url = url.to_s.gsub(/([^:])\/\//, '\1/')
      url = URI.parse(corrected_url)

      connection = Faraday.new(:url => url) do |faraday|
        faraday.use MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02
        faraday.use :cookie_jar
        faraday.adapter Faraday.default_adapter
      end
      request_headers = Hash.new

      unless custom_headers.nil?
        custom_headers.each do |key, value|
          request_headers[key] = value
        end
      end

      # Send Request
      promise = Concurrent::Promise.new do
        connection.get do |request|
          request.headers = request_headers
          @client.credentials.sign_request(request) unless @client.credentials.nil?
        end
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless (status_code >= 200 && status_code < 300)
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(connection, http_response, error_model)
        end

        # Create Result
        result = MsRest::HttpOperationResponse.new(connection, http_response)
        begin
          parsed_response = JSON.load(response_content) unless response_content.to_s.empty?
          unless parsed_response.nil?
            parsed_response = Error.deserialize_object(parsed_response)
          end
          result.body = parsed_response
        rescue Exception => e
          fail MsRest::DeserializationError.new("Error occured in deserializing the response", e.message, e.backtrace, response_content)
        end

        result
      end

      promise.execute
    end

    #
    # Return 412 status code - should be represented in the client as an error
    #
    # @param [Hash{String => String}] The hash of custom headers need to be
    # applied to HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which allows to get HTTP
    # response.
    #
    def get412(custom_headers = nil)
      # Construct URL
      path = "/http/failure/client/412"
      url = URI.join(@client.base_url, path)
      fail URI::Error unless url.to_s =~ /\A#{URI::regexp}\z/
      corrected_url = url.to_s.gsub(/([^:])\/\//, '\1/')
      url = URI.parse(corrected_url)

      connection = Faraday.new(:url => url) do |faraday|
        faraday.use MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02
        faraday.use :cookie_jar
        faraday.adapter Faraday.default_adapter
      end
      request_headers = Hash.new

      unless custom_headers.nil?
        custom_headers.each do |key, value|
          request_headers[key] = value
        end
      end

      # Send Request
      promise = Concurrent::Promise.new do
        connection.get do |request|
          request.headers = request_headers
          @client.credentials.sign_request(request) unless @client.credentials.nil?
        end
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless (status_code >= 200 && status_code < 300)
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(connection, http_response, error_model)
        end

        # Create Result
        result = MsRest::HttpOperationResponse.new(connection, http_response)
        begin
          parsed_response = JSON.load(response_content) unless response_content.to_s.empty?
          unless parsed_response.nil?
            parsed_response = Error.deserialize_object(parsed_response)
          end
          result.body = parsed_response
        rescue Exception => e
          fail MsRest::DeserializationError.new("Error occured in deserializing the response", e.message, e.backtrace, response_content)
        end

        result
      end

      promise.execute
    end

    #
    # Return 413 status code - should be represented in the client as an error
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param [Hash{String => String}] The hash of custom headers need to be
    # applied to HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which allows to get HTTP
    # response.
    #
    def put413(boolean_value = nil, custom_headers = nil)
      # Construct URL
      path = "/http/failure/client/413"
      url = URI.join(@client.base_url, path)
      fail URI::Error unless url.to_s =~ /\A#{URI::regexp}\z/
      corrected_url = url.to_s.gsub(/([^:])\/\//, '\1/')
      url = URI.parse(corrected_url)

      connection = Faraday.new(:url => url) do |faraday|
        faraday.use MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02
        faraday.use :cookie_jar
        faraday.adapter Faraday.default_adapter
      end
      request_headers = Hash.new

      unless custom_headers.nil?
        custom_headers.each do |key, value|
          request_headers[key] = value
        end
      end

      # Serialize Request
      request_headers['Content-Type'] = 'application/json; charset=utf-8'
      request_content = JSON.generate(boolean_value, quirks_mode: true)

      # Send Request
      promise = Concurrent::Promise.new do
        connection.put do |request|
          request.headers = request_headers
          request.body = request_content
          @client.credentials.sign_request(request) unless @client.credentials.nil?
        end
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless (status_code >= 200 && status_code < 300)
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(connection, http_response, error_model)
        end

        # Create Result
        result = MsRest::HttpOperationResponse.new(connection, http_response)
        begin
          parsed_response = JSON.load(response_content) unless response_content.to_s.empty?
          unless parsed_response.nil?
            parsed_response = Error.deserialize_object(parsed_response)
          end
          result.body = parsed_response
        rescue Exception => e
          fail MsRest::DeserializationError.new("Error occured in deserializing the response", e.message, e.backtrace, response_content)
        end

        result
      end

      promise.execute
    end

    #
    # Return 414 status code - should be represented in the client as an error
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param [Hash{String => String}] The hash of custom headers need to be
    # applied to HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which allows to get HTTP
    # response.
    #
    def patch414(boolean_value = nil, custom_headers = nil)
      # Construct URL
      path = "/http/failure/client/414"
      url = URI.join(@client.base_url, path)
      fail URI::Error unless url.to_s =~ /\A#{URI::regexp}\z/
      corrected_url = url.to_s.gsub(/([^:])\/\//, '\1/')
      url = URI.parse(corrected_url)

      connection = Faraday.new(:url => url) do |faraday|
        faraday.use MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02
        faraday.use :cookie_jar
        faraday.adapter Faraday.default_adapter
      end
      request_headers = Hash.new

      unless custom_headers.nil?
        custom_headers.each do |key, value|
          request_headers[key] = value
        end
      end

      # Serialize Request
      request_headers['Content-Type'] = 'application/json; charset=utf-8'
      request_content = JSON.generate(boolean_value, quirks_mode: true)

      # Send Request
      promise = Concurrent::Promise.new do
        connection.patch do |request|
          request.headers = request_headers
          request.body = request_content
          @client.credentials.sign_request(request) unless @client.credentials.nil?
        end
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless (status_code >= 200 && status_code < 300)
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(connection, http_response, error_model)
        end

        # Create Result
        result = MsRest::HttpOperationResponse.new(connection, http_response)
        begin
          parsed_response = JSON.load(response_content) unless response_content.to_s.empty?
          unless parsed_response.nil?
            parsed_response = Error.deserialize_object(parsed_response)
          end
          result.body = parsed_response
        rescue Exception => e
          fail MsRest::DeserializationError.new("Error occured in deserializing the response", e.message, e.backtrace, response_content)
        end

        result
      end

      promise.execute
    end

    #
    # Return 415 status code - should be represented in the client as an error
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param [Hash{String => String}] The hash of custom headers need to be
    # applied to HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which allows to get HTTP
    # response.
    #
    def post415(boolean_value = nil, custom_headers = nil)
      # Construct URL
      path = "/http/failure/client/415"
      url = URI.join(@client.base_url, path)
      fail URI::Error unless url.to_s =~ /\A#{URI::regexp}\z/
      corrected_url = url.to_s.gsub(/([^:])\/\//, '\1/')
      url = URI.parse(corrected_url)

      connection = Faraday.new(:url => url) do |faraday|
        faraday.use MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02
        faraday.use :cookie_jar
        faraday.adapter Faraday.default_adapter
      end
      request_headers = Hash.new

      unless custom_headers.nil?
        custom_headers.each do |key, value|
          request_headers[key] = value
        end
      end

      # Serialize Request
      request_headers['Content-Type'] = 'application/json; charset=utf-8'
      request_content = JSON.generate(boolean_value, quirks_mode: true)

      # Send Request
      promise = Concurrent::Promise.new do
        connection.post do |request|
          request.headers = request_headers
          request.body = request_content
          @client.credentials.sign_request(request) unless @client.credentials.nil?
        end
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless (status_code >= 200 && status_code < 300)
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(connection, http_response, error_model)
        end

        # Create Result
        result = MsRest::HttpOperationResponse.new(connection, http_response)
        begin
          parsed_response = JSON.load(response_content) unless response_content.to_s.empty?
          unless parsed_response.nil?
            parsed_response = Error.deserialize_object(parsed_response)
          end
          result.body = parsed_response
        rescue Exception => e
          fail MsRest::DeserializationError.new("Error occured in deserializing the response", e.message, e.backtrace, response_content)
        end

        result
      end

      promise.execute
    end

    #
    # Return 416 status code - should be represented in the client as an error
    #
    # @param [Hash{String => String}] The hash of custom headers need to be
    # applied to HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which allows to get HTTP
    # response.
    #
    def get416(custom_headers = nil)
      # Construct URL
      path = "/http/failure/client/416"
      url = URI.join(@client.base_url, path)
      fail URI::Error unless url.to_s =~ /\A#{URI::regexp}\z/
      corrected_url = url.to_s.gsub(/([^:])\/\//, '\1/')
      url = URI.parse(corrected_url)

      connection = Faraday.new(:url => url) do |faraday|
        faraday.use MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02
        faraday.use :cookie_jar
        faraday.adapter Faraday.default_adapter
      end
      request_headers = Hash.new

      unless custom_headers.nil?
        custom_headers.each do |key, value|
          request_headers[key] = value
        end
      end

      # Send Request
      promise = Concurrent::Promise.new do
        connection.get do |request|
          request.headers = request_headers
          @client.credentials.sign_request(request) unless @client.credentials.nil?
        end
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless (status_code >= 200 && status_code < 300)
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(connection, http_response, error_model)
        end

        # Create Result
        result = MsRest::HttpOperationResponse.new(connection, http_response)
        begin
          parsed_response = JSON.load(response_content) unless response_content.to_s.empty?
          unless parsed_response.nil?
            parsed_response = Error.deserialize_object(parsed_response)
          end
          result.body = parsed_response
        rescue Exception => e
          fail MsRest::DeserializationError.new("Error occured in deserializing the response", e.message, e.backtrace, response_content)
        end

        result
      end

      promise.execute
    end

    #
    # Return 417 status code - should be represented in the client as an error
    #
    # @param boolean_value [Boolean] Simple boolean value true
    # @param [Hash{String => String}] The hash of custom headers need to be
    # applied to HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which allows to get HTTP
    # response.
    #
    def delete417(boolean_value = nil, custom_headers = nil)
      # Construct URL
      path = "/http/failure/client/417"
      url = URI.join(@client.base_url, path)
      fail URI::Error unless url.to_s =~ /\A#{URI::regexp}\z/
      corrected_url = url.to_s.gsub(/([^:])\/\//, '\1/')
      url = URI.parse(corrected_url)

      connection = Faraday.new(:url => url) do |faraday|
        faraday.use MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02
        faraday.use :cookie_jar
        faraday.adapter Faraday.default_adapter
      end
      request_headers = Hash.new

      unless custom_headers.nil?
        custom_headers.each do |key, value|
          request_headers[key] = value
        end
      end

      # Serialize Request
      request_headers['Content-Type'] = 'application/json; charset=utf-8'
      request_content = JSON.generate(boolean_value, quirks_mode: true)

      # Send Request
      promise = Concurrent::Promise.new do
        connection.delete do |request|
          request.headers = request_headers
          request.body = request_content
          @client.credentials.sign_request(request) unless @client.credentials.nil?
        end
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless (status_code >= 200 && status_code < 300)
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(connection, http_response, error_model)
        end

        # Create Result
        result = MsRest::HttpOperationResponse.new(connection, http_response)
        begin
          parsed_response = JSON.load(response_content) unless response_content.to_s.empty?
          unless parsed_response.nil?
            parsed_response = Error.deserialize_object(parsed_response)
          end
          result.body = parsed_response
        rescue Exception => e
          fail MsRest::DeserializationError.new("Error occured in deserializing the response", e.message, e.backtrace, response_content)
        end

        result
      end

      promise.execute
    end

    #
    # Return 429 status code - should be represented in the client as an error
    #
    # @param [Hash{String => String}] The hash of custom headers need to be
    # applied to HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which allows to get HTTP
    # response.
    #
    def head429(custom_headers = nil)
      # Construct URL
      path = "/http/failure/client/429"
      url = URI.join(@client.base_url, path)
      fail URI::Error unless url.to_s =~ /\A#{URI::regexp}\z/
      corrected_url = url.to_s.gsub(/([^:])\/\//, '\1/')
      url = URI.parse(corrected_url)

      connection = Faraday.new(:url => url) do |faraday|
        faraday.use MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02
        faraday.use :cookie_jar
        faraday.adapter Faraday.default_adapter
      end
      request_headers = Hash.new

      unless custom_headers.nil?
        custom_headers.each do |key, value|
          request_headers[key] = value
        end
      end

      # Send Request
      promise = Concurrent::Promise.new do
        connection.head do |request|
          request.headers = request_headers
          @client.credentials.sign_request(request) unless @client.credentials.nil?
        end
      end

      promise = promise.then do |http_response|
        status_code = http_response.status
        response_content = http_response.body
        unless (status_code >= 200 && status_code < 300)
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(connection, http_response, error_model)
        end

        # Create Result
        result = MsRest::HttpOperationResponse.new(connection, http_response)
        begin
          parsed_response = JSON.load(response_content) unless response_content.to_s.empty?
          unless parsed_response.nil?
            parsed_response = Error.deserialize_object(parsed_response)
          end
          result.body = parsed_response
        rescue Exception => e
          fail MsRest::DeserializationError.new("Error occured in deserializing the response", e.message, e.backtrace, response_content)
        end

        result
      end

      promise.execute
    end

  end
end
