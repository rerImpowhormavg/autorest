# encoding: utf-8
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
# 
# Code generated by Microsoft (R) AutoRest Code Generator 0.13.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module ComplexModule
  #
  # A service client - single point of access to the REST API.
  #
  class AutoRestComplexTestService < MsRest::ServiceClient
    include ComplexModule::Models

    # @return [String] the base URI of the service.
    attr_accessor :base_url

    # @return basic_operations
    attr_reader :basic_operations

    # @return primitive
    attr_reader :primitive

    # @return array
    attr_reader :array

    # @return dictionary
    attr_reader :dictionary

    # @return inheritance
    attr_reader :inheritance

    # @return polymorphism
    attr_reader :polymorphism

    # @return polymorphicrecursive
    attr_reader :polymorphicrecursive

    #
    # Creates initializes a new instance of the AutoRestComplexTestService class.
    # @param credentials [MsRest::ServiceClientCredentials] credentials to authorize HTTP requests made by the service client.
    # @param base_url [String] the base URI of the service.
    # @param options [Array] filters to be applied to the HTTP requests.
    #
    def initialize(credentials, base_url = nil, options = nil)
      super(credentials, options)
      @base_url = base_url || 'http://localhost'

      fail ArgumentError, 'credentials is nil' if credentials.nil?
      fail ArgumentError, 'invalid type of credentials input parameter' unless credentials.is_a?(MsRest::ServiceClientCredentials)
      @credentials = credentials

      @basic_operations = BasicOperations.new(self)
      @primitive = Primitive.new(self)
      @array = Array.new(self)
      @dictionary = Dictionary.new(self)
      @inheritance = Inheritance.new(self)
      @polymorphism = Polymorphism.new(self)
      @polymorphicrecursive = Polymorphicrecursive.new(self)
    end

  end
end
