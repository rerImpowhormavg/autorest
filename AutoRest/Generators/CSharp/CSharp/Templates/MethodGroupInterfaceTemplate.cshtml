@using System
@using System.Linq;
@using Microsoft.Rest.Generator.Utilities
@inherits Microsoft.Rest.Generator.Template<Microsoft.Rest.Generator.CSharp.MethodGroupTemplateModel>
@Header("// ")
@EmptyLine
namespace @Settings.Namespace
{
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
@foreach (var usingString in Model.Usings) {
@:    using @usingString;
}
@EmptyLine
    /// <summary>
    /// @(Model.MethodGroupType) operations.
    /// </summary>
    public partial interface I@(Model.MethodGroupType)
    {
    @foreach(var method in Model.MethodTemplateModels)
    {
        if (!String.IsNullOrEmpty(method.Description) || !String.IsNullOrEmpty(method.Summary))
        {
        @:/// <summary>
        @:@WrapComment("/// ", String.IsNullOrEmpty(method.Summary) ? method.Description.EscapeXmlComment() : method.Summary.EscapeXmlComment())
        @:/// </summary>
        }
        if (!String.IsNullOrEmpty(method.Description) && !String.IsNullOrEmpty(method.Summary))
        {
        @:@WrapComment("/// ", method.Description.EscapeXmlComment())
        }
        foreach (var parameter in method.LocalParameters)
        {
        @:/// <param name='@parameter.Name'>
        @:@WrapComment("/// ", parameter.Documentation.EscapeXmlComment())
        @:/// </param>
        }
        @:/// <param name='customHeaders'>
        @:/// The headers that will be added to request.
        @:/// </param>
        @:/// <param name='cancellationToken'>
        @:/// The cancellation token.
        @:/// </param>
        @:/// <exception cref="@(method.OperationExceptionTypeString)">
        @:/// Thrown when the operation returned an invalid status code
        @:/// </exception>
        @if (method.Responses.Where(r => r.Value.Body != null).Any())
        {
        @:/// <exception cref="SerializationException">
        @:/// Thrown when unable to deserialize the response
        @:/// </exception>
        }
        @if (method.ParameterTemplateModels.Where(p => !p.IsConstant && p.IsRequired && !p.Type.IsValueType()).Any())
        {
        @:/// <exception cref="ValidationException">
        @:/// Thrown when a required parameter is null
        @:/// </exception>
        }
        @:Task<@method.OperationResponseReturnTypeString> @(method.Name)WithHttpMessagesAsync(@(method.GetAsyncMethodParameterDeclaration(true)));
    }
    }
}
