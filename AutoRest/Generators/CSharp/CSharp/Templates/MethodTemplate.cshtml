@using System.Globalization
@using System.Linq;
@using System
@using Microsoft.Rest.Generator.ClientModel
@using Microsoft.Rest.Generator.CSharp
@using Microsoft.Rest.Generator.CSharp.TemplateModels
@using Microsoft.Rest.Generator.Utilities
@inherits Microsoft.Rest.Generator.Template<Microsoft.Rest.Generator.CSharp.MethodTemplateModel>

@if (!String.IsNullOrEmpty(Model.Description) || !String.IsNullOrEmpty(Model.Summary))
{
@:/// <summary>
@:@WrapComment("/// ", String.IsNullOrEmpty(Model.Summary) ? Model.Description.EscapeXmlComment() : Model.Summary.EscapeXmlComment())
@:/// </summary>
}
@if (!String.IsNullOrEmpty(Model.Description) && !String.IsNullOrEmpty(Model.Summary))
{
@:@WrapComment("/// ", Model.Description.EscapeXmlComment())
}
@foreach (var parameter in Model.LocalParameters)
{
@:/// <param name='@parameter.Name'>
@WrapComment("/// ", parameter.Documentation.EscapeXmlComment())@:
@:/// </param>
}
/// <param name='customHeaders'>
/// Headers that will be added to request.
/// </param>
/// <param name='cancellationToken'>
/// The cancellation token.
/// </param>
public async Task<@(Model.OperationResponseReturnTypeString)> @(Model.Name)WithHttpMessagesAsync(@(Model.GetAsyncMethodParameterDeclaration(true)))
{
    @foreach (var parameter in Model.ParameterTemplateModels)
    {
        if (parameter.IsRequired)
        {
    @:if (@(parameter.Name) == null)
    @:{
        @:throw new ValidationException(ValidationRules.CannotBeNull, "@(parameter.Name)");
    @:}
@:
        }
        if(parameter.CanBeValidated == true && (Model.HttpMethod != HttpMethod.Patch || parameter.Location != ParameterLocation.Body))
        {
    @:@(parameter.Type.ValidateType(Model.Scope, parameter.Name, parameter.Constraints))
        }
    }
    @Model.BuildInputMappings()
    // Tracing
    bool _shouldTrace = ServiceClientTracing.IsEnabled;
    string _invocationId = null;
    if (_shouldTrace)
    {
        _invocationId = ServiceClientTracing.NextInvocationId.ToString();
        Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
    @foreach (var parameter in Model.LogicalParameterTemplateModels.Where(p => p.ClientProperty == null))
    {
        @:tracingParameters.Add("@(parameter.Name)", @(parameter.Name));
    }
        tracingParameters.Add("cancellationToken", cancellationToken);
        ServiceClientTracing.Enter(_invocationId, this, "@(Model.Name)", tracingParameters);
    }

    // Construct URL
    @if (Model.IsAbsoluteUrl)
    {
    @:string _url = "@(Model.Url)";
    }
    else
    {
    @:var _baseUrl = @(Model.ClientReference).BaseUri.AbsoluteUri;
    @:var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "@(Model.Url.TrimStart('/'))").ToString();
    }
    @(Model.BuildUrl("_url"))
    // Create HTTP transport objects
    HttpRequestMessage _httpRequest = new HttpRequestMessage();
    _httpRequest.Method = new HttpMethod("@(Model.HttpMethod.ToString().ToUpper())");
    _httpRequest.RequestUri = new Uri(_url);
    // Set Headers
    @(Model.SetDefaultHeaders)
    @foreach (var parameter in Model.LogicalParameterTemplateModels.Where(p => p.Location == ParameterLocation.Header))
    {
    @:if (@(parameter.Name) != null)
    @:{
    @:    if (_httpRequest.Headers.Contains("@(parameter.SerializedName)"))
    @:    {
    @:        _httpRequest.Headers.Remove("@(parameter.SerializedName)");
    @:    }
    @:    _httpRequest.Headers.TryAddWithoutValidation("@(parameter.SerializedName)", @parameter.Type.ToString(Model.ClientReference, parameter.Name));
    @:}
    }
    if (customHeaders != null)
    {
        foreach(var _header in customHeaders)
        {
            if (_httpRequest.Headers.Contains(_header.Key))
            {
                _httpRequest.Headers.Remove(_header.Key);
            }
            _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
        }
    }
    @EmptyLine

    @if (Model.RequestBody != null)
    {
        <text>
    // Serialize Request
    string _requestContent = SafeJsonConvert.SerializeObject(@(Model.RequestBody.Name), @(Model.GetSerializationSettingsReference(Model.RequestBody.Type)));
    _httpRequest.Content = new StringContent(_requestContent, Encoding.UTF8);
    _httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("@(Model.ContentType)");
        </text>
    }
    else if (Model.RequestFile != null)
    {
        <text>
    // Serialize Request    
    StreamContent _fileStreamContent = new StreamContent(@(Model.RequestFile.Name));
    @if (Model.RequestFile.Location == ParameterLocation.FormData)
    {
    @:ContentDispositionHeaderValue _contentDispositionHeaderValue = new ContentDispositionHeaderValue("form-data");
    @:_contentDispositionHeaderValue.Name = "\"fileUpload\"";
    }
    else
    {
    @:ContentDispositionHeaderValue _contentDispositionHeaderValue = new ContentDispositionHeaderValue("attachment")
    }
    _contentDispositionHeaderValue.FileName = "\"" + @(Model.RequestFileName) + "\"";
    _fileStreamContent.Headers.ContentType = new MediaTypeHeaderValue("application/octet-stream"); 
    @if (Model.RequestFile.Location == ParameterLocation.FormData)
    {
    @:var _multiPartContent = new MultipartFormDataContent(); 
    @:_multiPartContent.Add(_fileStreamContent);
    @:_httpRequest.Content = _multiPartContent; 
    }
    else
    {
    @:_httpRequest.Content = _fileStreamContent;
    }
        </text>
    }

    @if (Settings.AddCredentials)
    {
        <text>
    // Set Credentials
    if (@(Model.ClientReference).Credentials != null)
    {
        cancellationToken.ThrowIfCancellationRequested();
        await @(Model.ClientReference).Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
    }
        </text>
    }
    
    // Send Request
    if (_shouldTrace)
    {
        ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
    }

    cancellationToken.ThrowIfCancellationRequested();
    HttpResponseMessage _httpResponse = await @(Model.ClientReference).HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
    if (_shouldTrace)
    {
        ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
    }

    HttpStatusCode _statusCode = _httpResponse.StatusCode;
    cancellationToken.ThrowIfCancellationRequested();
    if (@(Model.FailureStatusCodePredicate))
    {
        var ex = new @(Model.OperationExceptionTypeString)(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
    @if (Model.DefaultResponse.Body != null)
    {
        @:try
        @:{
            if (Model.DefaultResponse.Body == PrimaryType.Stream)
            {
            @:@(Model.DefaultResponse.Body.Name) _errorBody = await _httpResponse.Content.ReadAsStreamAsync().ConfigureAwait(false);
            }
            else
            {
            @:string _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
            @:@(Model.DefaultResponse.Body.Name) _errorBody = SafeJsonConvert.DeserializeObject<@(Model.DefaultResponse.Body.Name)>(_responseContent, @(Model.GetDeserializationSettingsReference(Model.DefaultResponse.Body)));
            }
            @:if (_errorBody != null)
            @:{
                @:@(Model.InitializeExceptionWithMessage)
                @:ex.Body = _errorBody;
            @:}
        @:}
        @:catch (JsonException)
        @:{
        @:    // Ignore the exception
        @:}
    }
        ex.Request = _httpRequest;
        ex.Response = _httpResponse;
        if (_shouldTrace)
        {
            ServiceClientTracing.Error(_invocationId, ex);
        }

        throw ex;
    }

    // Create Result
    var _result = new @(Model.OperationResponseReturnTypeString)();
    _result.Request = _httpRequest;
    _result.Response = _httpResponse;
    @(Model.InitializeResponseBody)

    @foreach (var responsePair in Model.Responses.Where(r => r.Value.Body != null))
    {
    <text>
    // Deserialize Response
    if ((int)_statusCode == @MethodTemplateModel.GetStatusCodeReference(responsePair.Key))
    {
        @if (responsePair.Value.Body == PrimaryType.Stream)
        {
        @:_result.Body = await _httpResponse.Content.ReadAsStreamAsync().ConfigureAwait(false);
        }
        else
        {
        @:try
        @:{
            @:string _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
            @:_result.Body = SafeJsonConvert.DeserializeObject<@(responsePair.Value.Body.Name)>(_responseContent, @(Model.GetDeserializationSettingsReference(responsePair.Value.Body)));
        @:}
        @:catch (JsonException ex)
        @:{
        @:    throw new RestException("Unable to deserialize the response.", ex);
        @:}
        }
    }
    </text>
    }
    @if (Model.ReturnType.Body != null && Model.DefaultResponse.Body != null && !Model.Responses.Any())
    {
        if (Model.DefaultResponse.Body == PrimaryType.Stream)
        {
    @:_result.Body = await _httpResponse.Content.ReadAsStreamAsync().ConfigureAwait(false);
        }
        else
        {
    @:try
    @:{
        @:string _defaultResponseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
        @:_result.Body = SafeJsonConvert.DeserializeObject<@(Model.DefaultResponse.Body.Name)>(_defaultResponseContent, @(Model.GetDeserializationSettingsReference(Model.DefaultResponse.Body)));
    @:}
    @:catch (JsonException ex)
    @:{
    @:    throw new RestException("Unable to deserialize the response.", ex);
    @:}
        }
    }

    @if (Model.ReturnType.Headers != null)
    {
    @:try
    @:{
        @:_result.Headers = _httpResponse.GetHeadersAsJson().ToObject<@(Model.ReturnType.Headers.Name)>(JsonSerializer.Create(@(Model.GetDeserializationSettingsReference(Model.DefaultResponse.Body))));
    @:}
    @:catch (JsonException ex)
    @:{
    @:    throw new RestException("Unable to deserialize the headers.", ex);
    @:}
    }

    if (_shouldTrace)
    {
        ServiceClientTracing.Exit(_invocationId, _result);
    }

    return _result;
}
