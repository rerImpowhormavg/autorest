@using System.Linq
@using Microsoft.Rest.Generator.ClientModel
@using Microsoft.Rest.Generator.CSharp.TemplateModels
@inherits Microsoft.Rest.Generator.Template<Microsoft.Rest.Generator.CSharp.ModelTemplateModel>
@Header("// ")
@EmptyLine
namespace @(Settings.Namespace).Models
{
    using Microsoft.Rest;
    using System;
    using System.Net.Http;
    using System.Runtime.Serialization;
#if !PORTABLE && !DNXCORE50
    using System.Security.Permissions;
#endif
@EmptyLine
    /// <summary>
    @WrapComment("/// ", "Exception thrown for an invalid response with " + Model.Name + " information.")
    /// </summary>
#if !PORTABLE && !DNXCORE50
    [Serializable]
#endif
    public class @Model.ExceptionTypeDefinitionName : RestException
    {
        /// <summary>
        /// Gets information about the associated HTTP request.
        /// </summary>
        public HttpRequestMessage Request { get; set; }
@EmptyLine
        /// <summary>
        /// Gets information about the associated HTTP response.
        /// </summary>
        public HttpResponseMessage Response { get; set; }
@EmptyLine
        /// <summary>
        /// Gets or sets the body object.
        /// </summary>
        public @Model.Name Body { get; set; }
@EmptyLine
        /// <summary>
        /// Initializes a new instance of the @Model.ExceptionTypeDefinitionName class.
        /// </summary>
        public @(@Model.ExceptionTypeDefinitionName)()
        {
        }
@EmptyLine
        /// <summary>
        /// Initializes a new instance of the @Model.ExceptionTypeDefinitionName class.
        /// </summary>
        /// <param name="message">The exception message.</param>
        public @(Model.ExceptionTypeDefinitionName)(string message)
            : this(message, null)
        {
        }
@EmptyLine
        /// <summary>
        /// Initializes a new instance of the @Model.ExceptionTypeDefinitionName class.
        /// </summary>
        /// <param name="message">The exception message.</param>
        /// <param name="innerException">Inner exception.</param>
        public @(Model.ExceptionTypeDefinitionName)(string message, Exception innerException)
            : base(message, innerException)
        {
        }
@EmptyLine
#if !PORTABLE && !DNXCORE50
        /// <summary>
        /// Initializes a new instance of the @Model.ExceptionTypeDefinitionName class.
        /// </summary>
        /// <param name="info">Serialization info.</param>
        /// <param name="context">Streaming context.</param>
        protected @(Model.ExceptionTypeDefinitionName)(SerializationInfo info, StreamingContext context)
            : base(info, context)
        {
        }
@EmptyLine
        /// <summary>
        /// Serializes content of the exception.
        /// </summary>
        /// <param name="info">Serialization info.</param>
        /// <param name="context">Streaming context.</param>
        [SecurityPermission(SecurityAction.Demand, SerializationFormatter = true)]
        public override void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            base.GetObjectData(info, context);
            if (info == null)
            {
                throw new ArgumentNullException("info");
            }
@EmptyLine
            info.AddValue("Request", Request);
            info.AddValue("Response", Response);
            info.AddValue("Body", Body);
        }
#endif
    }
}
