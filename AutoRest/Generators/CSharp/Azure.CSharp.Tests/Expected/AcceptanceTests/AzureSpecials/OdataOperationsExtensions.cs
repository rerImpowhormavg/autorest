// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.13.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Fixtures.Azure.AcceptanceTestsAzureSpecials
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure.OData;
    using Microsoft.Rest.Azure;
    using Models;

    public static partial class OdataOperationsExtensions
    {
            /// <summary>
            /// Specify filter parameter with value '$filter=id gt 5 and name eq
            /// 'foo'&amp;$orderby=id&amp;$top=10'
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// The filter parameter with value '$filter=id gt 5 and name eq 'foo''.
            /// </param>
            public static void GetWithFilter(this IOdataOperations operations, ODataQuery<OdataFilter> filter = default(ODataQuery<OdataFilter>))
            {
                Task.Factory.StartNew(s => ((IOdataOperations)s).GetWithFilterAsync(filter), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Specify filter parameter with value '$filter=id gt 5 and name eq
            /// 'foo'&amp;$orderby=id&amp;$top=10'
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// The filter parameter with value '$filter=id gt 5 and name eq 'foo''.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetWithFilterAsync( this IOdataOperations operations, ODataQuery<OdataFilter> filter = default(ODataQuery<OdataFilter>), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.GetWithFilterWithHttpMessagesAsync(filter, null, cancellationToken).ConfigureAwait(false);
            }

    }
}
