#--------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
# 
# Code generated by Microsoft (R) AutoRest Code Generator 0.13.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
#--------------------------------------------------------------------------

import sys

from datetime import *

from msrest.service_client import ServiceClient
from msrest.serialization import Serializer, Deserializer
from msrest.exceptions import (
    SerializationError,
    DeserializationError,
    TokenExpiredError,
    ClientRequestError,
    HttpOperationError)

from ..models import *

class HeaderOperations(object):

    def __init__(self, client, config, serializer, derserializer):

        self._client = client
        self._serialize = serializer
        self._deserialize = derserializer

        self.config = config

    def _parse_url(self, name, value, datatype):

        try:
            value = self._serialize.serialize_data(value, str(datatype))

        except ValueError:
            raise ValueError("{} must not be None.".format(name))

        except DeserializationError:
            raise TypeError("{} must be type {}.".format(name, datatype))

        else:
            return value

    @ServiceClient.async_request
    def param_existing_key(self, user_agent, custom_headers = {}, raw = False, callback = None):
        """

        Send a post request with header value "User-Agent": "overwrite"

        :param user_agent: Send a post request with header value "User-Agent":
        "overwrite"
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type user_agent: str
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/header/param/existingkey'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if user_agent is not None:
            query['User-Agent'] = user_agent
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def response_existing_key(self, custom_headers = {}, raw = False, callback = None):
        """

        Get a response with header value "User-Agent": "overwrite"

        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/header/response/existingkey'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def param_protected_key(self, content_type, custom_headers = {}, raw = False, callback = None):
        """

        Send a post request with header value "Content-Type": "text/html"

        :param content_type: Send a post request with header value
        "Content-Type": "text/html"
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type content_type: str
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/header/param/protectedkey'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if content_type is not None:
            query['Content-Type'] = content_type
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def response_protected_key(self, custom_headers = {}, raw = False, callback = None):
        """

        Get a response with header value "Content-Type": "text/html"

        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/header/response/protectedkey'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def param_integer(self, scenario, value, custom_headers = {}, raw = False, callback = None):
        """

        Send a post request with header values "scenario": "positive",
        "value": 1 or "scenario": "negative", "value": -2

        :param scenario: Send a post request with header values "scenario":
        "positive" or "negative"
        :param value: Send a post request with header values 1 or -2
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type scenario: str
        :type value: int
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/header/param/prim/integer'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if scenario is not None:
            query['scenario'] = scenario
            if value is not None:
                query['value'] = value
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def response_integer(self, scenario, custom_headers = {}, raw = False, callback = None):
        """

        Get a response with header value "value": 1 or -2

        :param scenario: Send a post request with header values "scenario":
        "positive" or "negative"
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type scenario: str
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/header/response/prim/integer'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if scenario is not None:
            query['scenario'] = scenario
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def param_long(self, scenario, value, custom_headers = {}, raw = False, callback = None):
        """

        Send a post request with header values "scenario": "positive",
        "value": 105 or "scenario": "negative", "value": -2

        :param scenario: Send a post request with header values "scenario":
        "positive" or "negative"
        :param value: Send a post request with header values 105 or -2
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type scenario: str
        :type value: long
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/header/param/prim/long'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if scenario is not None:
            query['scenario'] = scenario
            if value is not None:
                query['value'] = value
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def response_long(self, scenario, custom_headers = {}, raw = False, callback = None):
        """

        Get a response with header value "value": 105 or -2

        :param scenario: Send a post request with header values "scenario":
        "positive" or "negative"
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type scenario: str
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/header/response/prim/long'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if scenario is not None:
            query['scenario'] = scenario
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def param_float(self, scenario, value, custom_headers = {}, raw = False, callback = None):
        """

        Send a post request with header values "scenario": "positive",
        "value": 0.07 or "scenario": "negative", "value": -3.0

        :param scenario: Send a post request with header values "scenario":
        "positive" or "negative"
        :param value: Send a post request with header values 0.07 or -3.0
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type scenario: str
        :type value: float
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/header/param/prim/float'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if scenario is not None:
            query['scenario'] = scenario
            if value is not None:
                query['value'] = value
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def response_float(self, scenario, custom_headers = {}, raw = False, callback = None):
        """

        Get a response with header value "value": 0.07 or -3.0

        :param scenario: Send a post request with header values "scenario":
        "positive" or "negative"
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type scenario: str
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/header/response/prim/float'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if scenario is not None:
            query['scenario'] = scenario
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def param_double(self, scenario, value, custom_headers = {}, raw = False, callback = None):
        """

        Send a post request with header values "scenario": "positive",
        "value": 7e120 or "scenario": "negative", "value": -3.0

        :param scenario: Send a post request with header values "scenario":
        "positive" or "negative"
        :param value: Send a post request with header values 7e120 or -3.0
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type scenario: str
        :type value: float
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/header/param/prim/double'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if scenario is not None:
            query['scenario'] = scenario
            if value is not None:
                query['value'] = value
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def response_double(self, scenario, custom_headers = {}, raw = False, callback = None):
        """

        Get a response with header value "value": 7e120 or -3.0

        :param scenario: Send a post request with header values "scenario":
        "positive" or "negative"
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type scenario: str
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/header/response/prim/double'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if scenario is not None:
            query['scenario'] = scenario
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def param_bool(self, scenario, value, custom_headers = {}, raw = False, callback = None):
        """

        Send a post request with header values "scenario": "true", "value":
        true or "scenario": "false", "value": false

        :param scenario: Send a post request with header values "scenario":
        "true" or "false"
        :param value: Send a post request with header values true or false
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type scenario: str
        :type value: bool
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/header/param/prim/bool'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if scenario is not None:
            query['scenario'] = scenario
            if value is not None:
                query['value'] = value
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def response_bool(self, scenario, custom_headers = {}, raw = False, callback = None):
        """

        Get a response with header value "value": true or false

        :param scenario: Send a post request with header values "scenario":
        "true" or "false"
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type scenario: str
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/header/response/prim/bool'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if scenario is not None:
            query['scenario'] = scenario
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def param_string(self, scenario, value, custom_headers = {}, raw = False, callback = None):
        """

        Send a post request with header values "scenario": "valid", "value":
        "The quick brown fox jumps over the lazy dog" or "scenario": "null",
        "value": null or "scenario": "empty", "value": ""

        :param scenario: Send a post request with header values "scenario":
        "valid" or "null" or "empty"
        :param value: Send a post request with header values "The quick brown
        fox jumps over the lazy dog" or null or ""
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type scenario: str
        :type value: str or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/header/param/prim/string'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if scenario is not None:
            query['scenario'] = scenario
            if value is not None:
                query['value'] = value
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def response_string(self, scenario, custom_headers = {}, raw = False, callback = None):
        """

        Get a response with header values "The quick brown fox jumps over the
        lazy dog" or null or ""

        :param scenario: Send a post request with header values "scenario":
        "valid" or "null" or "empty"
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type scenario: str
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/header/response/prim/string'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if scenario is not None:
            query['scenario'] = scenario
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def param_date(self, scenario, value, custom_headers = {}, raw = False, callback = None):
        """

        Send a post request with header values "scenario": "valid", "value":
        "2010-01-01" or "scenario": "min", "value": "0001-01-01"

        :param scenario: Send a post request with header values "scenario":
        "valid" or "min"
        :param value: Send a post request with header values "2010-01-01" or
        "0001-01-01"
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type scenario: str
        :type value: date
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/header/param/prim/date'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if scenario is not None:
            query['scenario'] = scenario
            if value is not None:
                query['value'] = Serialized.serializeObject(value, 'date')
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def response_date(self, scenario, custom_headers = {}, raw = False, callback = None):
        """

        Get a response with header values "2010-01-01" or "0001-01-01"

        :param scenario: Send a post request with header values "scenario":
        "valid" or "min"
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type scenario: str
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/header/response/prim/date'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if scenario is not None:
            query['scenario'] = scenario
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def param_datetime(self, scenario, value, custom_headers = {}, raw = False, callback = None):
        """

        Send a post request with header values "scenario": "valid", "value":
        "2010-01-01T12:34:56Z" or "scenario": "min", "value":
        "0001-01-01T00:00:00Z"

        :param scenario: Send a post request with header values "scenario":
        "valid" or "min"
        :param value: Send a post request with header values
        "2010-01-01T12:34:56Z" or "0001-01-01T00:00:00Z"
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type scenario: str
        :type value: datetime
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/header/param/prim/datetime'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if scenario is not None:
            query['scenario'] = scenario
            if value is not None:
                query['value'] = Serialized.serializeObject(value, 'iso-8601')
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def response_datetime(self, scenario, custom_headers = {}, raw = False, callback = None):
        """

        Get a response with header values "2010-01-01T12:34:56Z" or
        "0001-01-01T00:00:00Z"

        :param scenario: Send a post request with header values "scenario":
        "valid" or "min"
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type scenario: str
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/header/response/prim/datetime'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if scenario is not None:
            query['scenario'] = scenario
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def param_datetime_rfc1123(self, scenario, value, custom_headers = {}, raw = False, callback = None):
        """

        Send a post request with header values "scenario": "valid", "value":
        "Wed, 01 Jan 2010 12:34:56 GMT" or "scenario": "min", "value": "Mon,
        01 Jan 0001 00:00:00 GMT"

        :param scenario: Send a post request with header values "scenario":
        "valid" or "min"
        :param value: Send a post request with header values "Wed, 01 Jan 2010
        12:34:56 GMT" or "Mon, 01 Jan 0001 00:00:00 GMT"
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type scenario: str
        :type value: datetime or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/header/param/prim/datetimerfc1123'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if scenario is not None:
            query['scenario'] = scenario
            if value is not None:
                query['value'] = Serialized.serializeObject(value, 'rfc-1123')
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def response_datetime_rfc1123(self, scenario, custom_headers = {}, raw = False, callback = None):
        """

        Get a response with header values "Wed, 01 Jan 2010 12:34:56 GMT" or
        "Mon, 01 Jan 0001 00:00:00 GMT"

        :param scenario: Send a post request with header values "scenario":
        "valid" or "min"
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type scenario: str
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/header/response/prim/datetimerfc1123'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if scenario is not None:
            query['scenario'] = scenario
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def param_duration(self, scenario, value, custom_headers = {}, raw = False, callback = None):
        """

        Send a post request with header values "scenario": "valid", "value":
        "P123DT22H14M12.011S"

        :param scenario: Send a post request with header values "scenario":
        "valid"
        :param value: Send a post request with header values
        "P123DT22H14M12.011S"
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type scenario: str
        :type value: timedelta
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/header/param/prim/duration'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if scenario is not None:
            query['scenario'] = scenario
            if value is not None:
                query['value'] = Serialized.serializeObject(value, 'duration')
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def response_duration(self, scenario, custom_headers = {}, raw = False, callback = None):
        """

        Get a response with header values "P123DT22H14M12.011S"

        :param scenario: Send a post request with header values "scenario":
        "valid"
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type scenario: str
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/header/response/prim/duration'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if scenario is not None:
            query['scenario'] = scenario
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def param_byte(self, scenario, value, custom_headers = {}, raw = False, callback = None):
        """

        Send a post request with header values "scenario": "valid", "value":
        "啊齄丂狛狜隣郎隣兀﨩"

        :param scenario: Send a post request with header values "scenario":
        "valid"
        :param value: Send a post request with header values "啊齄丂狛狜隣郎隣兀﨩"
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type scenario: str
        :type value: bytearray
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/header/param/prim/byte'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if scenario is not None:
            query['scenario'] = scenario
            if value is not None:
                query['value'] = value
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def response_byte(self, scenario, custom_headers = {}, raw = False, callback = None):
        """

        Get a response with header values "啊齄丂狛狜隣郎隣兀﨩"

        :param scenario: Send a post request with header values "scenario":
        "valid"
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type scenario: str
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/header/response/prim/byte'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if scenario is not None:
            query['scenario'] = scenario
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def param_enum(self, scenario, value, custom_headers = {}, raw = False, callback = None):
        """

        Send a post request with header values "scenario": "valid", "value":
        "GREY" or "scenario": "null", "value": null

        :param scenario: Send a post request with header values "scenario":
        "valid" or "null" or "empty"
        :param value: Send a post request with header values 'GREY' . Possible
        values for this parameter include: 'White', 'black', 'GREY'
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type scenario: str
        :type value: str or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/header/param/prim/enum'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if scenario is not None:
            query['scenario'] = scenario
            if value is not None:
                query['value'] = value
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def response_enum(self, scenario, custom_headers = {}, raw = False, callback = None):
        """

        Get a response with header values "GREY" or null

        :param scenario: Send a post request with header values "scenario":
        "valid" or "null" or "empty"
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type scenario: str
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/header/response/prim/enum'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if scenario is not None:
            query['scenario'] = scenario
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def custom_request_id(self, custom_headers = {}, raw = False, callback = None):
        """

        Send x-ms-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 in
        the header of the request

        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/header/custom/x-ms-client-request-id/9C4D50EE-2D56-4CD3-8152-34347DC9F2B0'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response
