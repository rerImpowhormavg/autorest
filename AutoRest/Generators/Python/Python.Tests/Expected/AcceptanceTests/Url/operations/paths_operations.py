#--------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
# 
# Code generated by Microsoft (R) AutoRest Code Generator 0.13.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
#--------------------------------------------------------------------------

import sys

from datetime import *

from msrest.service_client import ServiceClient
from msrest.serialization import Serializer, Deserializer
from msrest.exceptions import (
    SerializationError,
    DeserializationError,
    TokenExpiredError,
    ClientRequestError,
    HttpOperationError)

from ..models import *

class PathsOperations(object):

    def __init__(self, client, config, serializer, derserializer):

        self._client = client
        self._serialize = serializer
        self._deserialize = derserializer

        self.config = config

    def _parse_url(self, name, value, datatype):

        try:
            value = self._serialize.serialize_data(value, str(datatype))

        except ValueError:
            raise ValueError("{} must not be None.".format(name))

        except DeserializationError:
            raise TypeError("{} must be type {}.".format(name, datatype))

        else:
            return value

    @ServiceClient.async_request
    def get_boolean_true(self, bool_path, custom_headers = {}, raw = False, callback = None):
        """

        Get true Boolean value on path
        """

        # Construct URL
        url = '/paths/bool/true/{boolPath}'
        path_format_arguments = {
            'boolPath' : self._parse_url("bool_path", bool_path, 'bool', False)}
        url = url.format(**path_format_arguments)

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def get_boolean_false(self, bool_path, custom_headers = {}, raw = False, callback = None):
        """

        Get false Boolean value on path
        """

        # Construct URL
        url = '/paths/bool/false/{boolPath}'
        path_format_arguments = {
            'boolPath' : self._parse_url("bool_path", bool_path, 'bool', False)}
        url = url.format(**path_format_arguments)

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def get_int_one_million(self, int_path, custom_headers = {}, raw = False, callback = None):
        """

        Get '1000000' integer value
        """

        # Construct URL
        url = '/paths/int/1000000/{intPath}'
        path_format_arguments = {
            'intPath' : self._parse_url("int_path", int_path, 'int', False)}
        url = url.format(**path_format_arguments)

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def get_int_negative_one_million(self, int_path, custom_headers = {}, raw = False, callback = None):
        """

        Get '-1000000' integer value
        """

        # Construct URL
        url = '/paths/int/-1000000/{intPath}'
        path_format_arguments = {
            'intPath' : self._parse_url("int_path", int_path, 'int', False)}
        url = url.format(**path_format_arguments)

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def get_ten_billion(self, long_path, custom_headers = {}, raw = False, callback = None):
        """

        Get '10000000000' 64 bit integer value
        """

        # Construct URL
        url = '/paths/long/10000000000/{longPath}'
        path_format_arguments = {
            'longPath' : self._parse_url("long_path", long_path, 'long', False)}
        url = url.format(**path_format_arguments)

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def get_negative_ten_billion(self, long_path, custom_headers = {}, raw = False, callback = None):
        """

        Get '-10000000000' 64 bit integer value
        """

        # Construct URL
        url = '/paths/long/-10000000000/{longPath}'
        path_format_arguments = {
            'longPath' : self._parse_url("long_path", long_path, 'long', False)}
        url = url.format(**path_format_arguments)

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def float_scientific_positive(self, float_path, custom_headers = {}, raw = False, callback = None):
        """

        Get '1.034E+20' numeric value
        """

        # Construct URL
        url = '/paths/float/1.034E+20/{floatPath}'
        path_format_arguments = {
            'floatPath' : self._parse_url("float_path", float_path, 'float', False)}
        url = url.format(**path_format_arguments)

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def float_scientific_negative(self, float_path, custom_headers = {}, raw = False, callback = None):
        """

        Get '-1.034E-20' numeric value
        """

        # Construct URL
        url = '/paths/float/-1.034E-20/{floatPath}'
        path_format_arguments = {
            'floatPath' : self._parse_url("float_path", float_path, 'float', False)}
        url = url.format(**path_format_arguments)

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def double_decimal_positive(self, double_path, custom_headers = {}, raw = False, callback = None):
        """

        Get '9999999.999' numeric value
        """

        # Construct URL
        url = '/paths/double/9999999.999/{doublePath}'
        path_format_arguments = {
            'doublePath' : self._parse_url("double_path", double_path, 'float', False)}
        url = url.format(**path_format_arguments)

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def double_decimal_negative(self, double_path, custom_headers = {}, raw = False, callback = None):
        """

        Get '-9999999.999' numeric value
        """

        # Construct URL
        url = '/paths/double/-9999999.999/{doublePath}'
        path_format_arguments = {
            'doublePath' : self._parse_url("double_path", double_path, 'float', False)}
        url = url.format(**path_format_arguments)

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def string_unicode(self, string_path, custom_headers = {}, raw = False, callback = None):
        """

        Get '啊齄丂狛狜隣郎隣兀﨩' multi-byte string value
        """

        # Construct URL
        url = '/paths/string/unicode/{stringPath}'
        path_format_arguments = {
            'stringPath' : self._parse_url("string_path", string_path, 'str', False)}
        url = url.format(**path_format_arguments)

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def string_url_encoded(self, string_path, custom_headers = {}, raw = False, callback = None):
        """

        Get 'begin!*'();:@ &=+$,/?#[]end
        """

        # Construct URL
        url = '/paths/string/begin%21%2A%27%28%29%3B%3A%40%20%26%3D%2B%24%2C%2F%3F%23%5B%5Dend/{stringPath}'
        path_format_arguments = {
            'stringPath' : self._parse_url("string_path", string_path, 'str', False)}
        url = url.format(**path_format_arguments)

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def string_empty(self, string_path, custom_headers = {}, raw = False, callback = None):
        """

        Get ''
        """

        # Construct URL
        url = '/paths/string/empty/{stringPath}'
        path_format_arguments = {
            'stringPath' : self._parse_url("string_path", string_path, 'str', False)}
        url = url.format(**path_format_arguments)

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def string_null(self, string_path, custom_headers = {}, raw = False, callback = None):
        """

        Get null (should throw)
        """

        # Construct URL
        url = '/paths/string/null/{stringPath}'
        path_format_arguments = {
            'stringPath' : self._parse_url("string_path", string_path, 'str', False)}
        url = url.format(**path_format_arguments)

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [400]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def enum_valid(self, enum_path, custom_headers = {}, raw = False, callback = None):
        """

        Get using uri with 'green color' in path parameter
        """

        # Construct URL
        url = '/paths/enum/green%20color/{enumPath}'
        path_format_arguments = {
            'enumPath' : self._parse_url("enum_path", enum_path, 'UriColor', False)}
        url = url.format(**path_format_arguments)

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def enum_null(self, enum_path, custom_headers = {}, raw = False, callback = None):
        """

        Get null (should throw on the client before the request is sent on
        wire)
        """

        # Construct URL
        url = '/paths/string/null/{enumPath}'
        path_format_arguments = {
            'enumPath' : self._parse_url("enum_path", enum_path, 'UriColor', False)}
        url = url.format(**path_format_arguments)

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [400]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def byte_multi_byte(self, byte_path, custom_headers = {}, raw = False, callback = None):
        """

        Get '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array
        """

        # Construct URL
        url = '/paths/byte/multibyte/{bytePath}'
        path_format_arguments = {
            'bytePath' : self._parse_url("byte_path", byte_path, 'bytearray', False)}
        url = url.format(**path_format_arguments)

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def byte_empty(self, byte_path, custom_headers = {}, raw = False, callback = None):
        """

        Get '' as byte array
        """

        # Construct URL
        url = '/paths/byte/empty/{bytePath}'
        path_format_arguments = {
            'bytePath' : self._parse_url("byte_path", byte_path, 'bytearray', False)}
        url = url.format(**path_format_arguments)

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def byte_null(self, byte_path, custom_headers = {}, raw = False, callback = None):
        """

        Get null as byte array (should throw)
        """

        # Construct URL
        url = '/paths/byte/null/{bytePath}'
        path_format_arguments = {
            'bytePath' : self._parse_url("byte_path", byte_path, 'bytearray', False)}
        url = url.format(**path_format_arguments)

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [400]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def date_valid(self, date_path, custom_headers = {}, raw = False, callback = None):
        """

        Get '2012-01-01' as date
        """

        # Construct URL
        url = '/paths/date/2012-01-01/{datePath}'
        path_format_arguments = {
            'datePath' : self._parse_url("date_path", date_path, 'date', False)}
        url = url.format(**path_format_arguments)

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def date_null(self, date_path, custom_headers = {}, raw = False, callback = None):
        """

        Get null as date - this should throw or be unusable on the client
        side, depending on date representation
        """

        # Construct URL
        url = '/paths/date/null/{datePath}'
        path_format_arguments = {
            'datePath' : self._parse_url("date_path", date_path, 'date', False)}
        url = url.format(**path_format_arguments)

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [400]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def date_time_valid(self, date_time_path, custom_headers = {}, raw = False, callback = None):
        """

        Get '2012-01-01T01:01:01Z' as date-time
        """

        # Construct URL
        url = '/paths/datetime/2012-01-01T01%3A01%3A01Z/{dateTimePath}'
        path_format_arguments = {
            'dateTimePath' : self._parse_url("date_time_path", date_time_path, 'iso-date', False)}
        url = url.format(**path_format_arguments)

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def date_time_null(self, date_time_path, custom_headers = {}, raw = False, callback = None):
        """

        Get null as date-time, should be disallowed or throw depending on
        representation of date-time
        """

        # Construct URL
        url = '/paths/datetime/null/{dateTimePath}'
        path_format_arguments = {
            'dateTimePath' : self._parse_url("date_time_path", date_time_path, 'iso-date', False)}
        url = url.format(**path_format_arguments)

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [400]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response
