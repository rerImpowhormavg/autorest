#--------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
# 
# Code generated by Microsoft (R) AutoRest Code Generator 0.13.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
#--------------------------------------------------------------------------

import sys

from datetime import *

from msrest.service_client import ServiceClient
from msrest.serialization import Serializer, Deserializer
from msrest.exceptions import (
    SerializationError,
    DeserializationError,
    TokenExpiredError,
    ClientRequestError,
    HttpOperationError)

from ..models import *

class QueriesOperations(object):

    def __init__(self, client, config, serializer, derserializer):

        self._client = client
        self._serialize = serializer
        self._deserialize = derserializer

        self.config = config

    def _parse_url(self, name, value, datatype):

        try:
            value = self._serialize.serialize_data(value, str(datatype))

        except ValueError:
            raise ValueError("{} must not be None.".format(name))

        except DeserializationError:
            raise TypeError("{} must be type {}.".format(name, datatype))

        else:
            return value

    @ServiceClient.async_request
    def get_boolean_true(self, bool_query, custom_headers = {}, raw = False, callback = None):
        """

        Get true Boolean value on path
        """

        # Construct URL
        url = '/queries/bool/true'

        # Construct parameters
        query = {}
        if bool_query is not None:
            query['boolQuery'] = self._parse_url("bool_query", bool_query, 'bool', False)

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def get_boolean_false(self, bool_query, custom_headers = {}, raw = False, callback = None):
        """

        Get false Boolean value on path
        """

        # Construct URL
        url = '/queries/bool/false'

        # Construct parameters
        query = {}
        if bool_query is not None:
            query['boolQuery'] = self._parse_url("bool_query", bool_query, 'bool', False)

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def get_boolean_null(self, bool_query, custom_headers = {}, raw = False, callback = None):
        """

        Get null Boolean value on query (query string should be absent)
        """

        # Construct URL
        url = '/queries/bool/null'

        # Construct parameters
        query = {}
        if bool_query is not None:
            query['boolQuery'] = self._parse_url("bool_query", bool_query, 'bool', False)

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def get_int_one_million(self, int_query, custom_headers = {}, raw = False, callback = None):
        """

        Get '1000000' integer value
        """

        # Construct URL
        url = '/queries/int/1000000'

        # Construct parameters
        query = {}
        if int_query is not None:
            query['intQuery'] = self._parse_url("int_query", int_query, 'int', False)

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def get_int_negative_one_million(self, int_query, custom_headers = {}, raw = False, callback = None):
        """

        Get '-1000000' integer value
        """

        # Construct URL
        url = '/queries/int/-1000000'

        # Construct parameters
        query = {}
        if int_query is not None:
            query['intQuery'] = self._parse_url("int_query", int_query, 'int', False)

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def get_int_null(self, int_query, custom_headers = {}, raw = False, callback = None):
        """

        Get null integer value (no query parameter)
        """

        # Construct URL
        url = '/queries/int/null'

        # Construct parameters
        query = {}
        if int_query is not None:
            query['intQuery'] = self._parse_url("int_query", int_query, 'int', False)

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def get_ten_billion(self, long_query, custom_headers = {}, raw = False, callback = None):
        """

        Get '10000000000' 64 bit integer value
        """

        # Construct URL
        url = '/queries/long/10000000000'

        # Construct parameters
        query = {}
        if long_query is not None:
            query['longQuery'] = self._parse_url("long_query", long_query, 'long', False)

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def get_negative_ten_billion(self, long_query, custom_headers = {}, raw = False, callback = None):
        """

        Get '-10000000000' 64 bit integer value
        """

        # Construct URL
        url = '/queries/long/-10000000000'

        # Construct parameters
        query = {}
        if long_query is not None:
            query['longQuery'] = self._parse_url("long_query", long_query, 'long', False)

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def get_long_null(self, long_query, custom_headers = {}, raw = False, callback = None):
        """

        Get 'null 64 bit integer value (no query param in uri)
        """

        # Construct URL
        url = '/queries/long/null'

        # Construct parameters
        query = {}
        if long_query is not None:
            query['longQuery'] = self._parse_url("long_query", long_query, 'long', False)

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def float_scientific_positive(self, float_query, custom_headers = {}, raw = False, callback = None):
        """

        Get '1.034E+20' numeric value
        """

        # Construct URL
        url = '/queries/float/1.034E+20'

        # Construct parameters
        query = {}
        if float_query is not None:
            query['floatQuery'] = self._parse_url("float_query", float_query, 'float', False)

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def float_scientific_negative(self, float_query, custom_headers = {}, raw = False, callback = None):
        """

        Get '-1.034E-20' numeric value
        """

        # Construct URL
        url = '/queries/float/-1.034E-20'

        # Construct parameters
        query = {}
        if float_query is not None:
            query['floatQuery'] = self._parse_url("float_query", float_query, 'float', False)

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def float_null(self, float_query, custom_headers = {}, raw = False, callback = None):
        """

        Get null numeric value (no query parameter)
        """

        # Construct URL
        url = '/queries/float/null'

        # Construct parameters
        query = {}
        if float_query is not None:
            query['floatQuery'] = self._parse_url("float_query", float_query, 'float', False)

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def double_decimal_positive(self, double_query, custom_headers = {}, raw = False, callback = None):
        """

        Get '9999999.999' numeric value
        """

        # Construct URL
        url = '/queries/double/9999999.999'

        # Construct parameters
        query = {}
        if double_query is not None:
            query['doubleQuery'] = self._parse_url("double_query", double_query, 'float', False)

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def double_decimal_negative(self, double_query, custom_headers = {}, raw = False, callback = None):
        """

        Get '-9999999.999' numeric value
        """

        # Construct URL
        url = '/queries/double/-9999999.999'

        # Construct parameters
        query = {}
        if double_query is not None:
            query['doubleQuery'] = self._parse_url("double_query", double_query, 'float', False)

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def double_null(self, double_query, custom_headers = {}, raw = False, callback = None):
        """

        Get null numeric value (no query parameter)
        """

        # Construct URL
        url = '/queries/double/null'

        # Construct parameters
        query = {}
        if double_query is not None:
            query['doubleQuery'] = self._parse_url("double_query", double_query, 'float', False)

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def string_unicode(self, string_query, custom_headers = {}, raw = False, callback = None):
        """

        Get '啊齄丂狛狜隣郎隣兀﨩' multi-byte string value
        """

        # Construct URL
        url = '/queries/string/unicode/'

        # Construct parameters
        query = {}
        if string_query is not None:
            query['stringQuery'] = self._parse_url("string_query", string_query, 'str', False)

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def string_url_encoded(self, string_query, custom_headers = {}, raw = False, callback = None):
        """

        Get 'begin!*'();:@ &=+$,/?#[]end
        """

        # Construct URL
        url = '/queries/string/begin%21%2A%27%28%29%3B%3A%40%20%26%3D%2B%24%2C%2F%3F%23%5B%5Dend'

        # Construct parameters
        query = {}
        if string_query is not None:
            query['stringQuery'] = self._parse_url("string_query", string_query, 'str', False)

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def string_empty(self, string_query, custom_headers = {}, raw = False, callback = None):
        """

        Get ''
        """

        # Construct URL
        url = '/queries/string/empty'

        # Construct parameters
        query = {}
        if string_query is not None:
            query['stringQuery'] = self._parse_url("string_query", string_query, 'str', False)

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def string_null(self, string_query, custom_headers = {}, raw = False, callback = None):
        """

        Get null (no query parameter in url)
        """

        # Construct URL
        url = '/queries/string/null'

        # Construct parameters
        query = {}
        if string_query is not None:
            query['stringQuery'] = self._parse_url("string_query", string_query, 'str', False)

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def enum_valid(self, enum_query, custom_headers = {}, raw = False, callback = None):
        """

        Get using uri with query parameter 'green color'
        """

        # Construct URL
        url = '/queries/enum/green%20color'

        # Construct parameters
        query = {}
        if enum_query is not None:
            query['enumQuery'] = self._parse_url("enum_query", enum_query, 'UriColor', False)

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def enum_null(self, enum_query, custom_headers = {}, raw = False, callback = None):
        """

        Get null (no query parameter in url)
        """

        # Construct URL
        url = '/queries/enum/null'

        # Construct parameters
        query = {}
        if enum_query is not None:
            query['enumQuery'] = self._parse_url("enum_query", enum_query, 'UriColor', False)

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def byte_multi_byte(self, byte_query, custom_headers = {}, raw = False, callback = None):
        """

        Get '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array
        """

        # Construct URL
        url = '/queries/byte/multibyte'

        # Construct parameters
        query = {}
        if byte_query is not None:
            query['byteQuery'] = self._parse_url("byte_query", byte_query, 'bytearray', False)

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def byte_empty(self, byte_query, custom_headers = {}, raw = False, callback = None):
        """

        Get '' as byte array
        """

        # Construct URL
        url = '/queries/byte/empty'

        # Construct parameters
        query = {}
        if byte_query is not None:
            query['byteQuery'] = self._parse_url("byte_query", byte_query, 'bytearray', False)

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def byte_null(self, byte_query, custom_headers = {}, raw = False, callback = None):
        """

        Get null as byte array (no query parameters in uri)
        """

        # Construct URL
        url = '/queries/byte/null'

        # Construct parameters
        query = {}
        if byte_query is not None:
            query['byteQuery'] = self._parse_url("byte_query", byte_query, 'bytearray', False)

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def date_valid(self, date_query, custom_headers = {}, raw = False, callback = None):
        """

        Get '2012-01-01' as date
        """

        # Construct URL
        url = '/queries/date/2012-01-01'

        # Construct parameters
        query = {}
        if date_query is not None:
            query['dateQuery'] = self._parse_url("date_query", date_query, 'date', False)

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def date_null(self, date_query, custom_headers = {}, raw = False, callback = None):
        """

        Get null as date - this should result in no query parameters in uri
        """

        # Construct URL
        url = '/queries/date/null'

        # Construct parameters
        query = {}
        if date_query is not None:
            query['dateQuery'] = self._parse_url("date_query", date_query, 'date', False)

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def date_time_valid(self, date_time_query, custom_headers = {}, raw = False, callback = None):
        """

        Get '2012-01-01T01:01:01Z' as date-time
        """

        # Construct URL
        url = '/queries/datetime/2012-01-01T01%3A01%3A01Z'

        # Construct parameters
        query = {}
        if date_time_query is not None:
            query['dateTimeQuery'] = self._parse_url("date_time_query", date_time_query, 'iso-date', False)

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def date_time_null(self, date_time_query, custom_headers = {}, raw = False, callback = None):
        """

        Get null as date-time, should result in no query parameters in uri
        """

        # Construct URL
        url = '/queries/datetime/null'

        # Construct parameters
        query = {}
        if date_time_query is not None:
            query['dateTimeQuery'] = self._parse_url("date_time_query", date_time_query, 'iso-date', False)

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def array_string_csv_valid(self, array_query, custom_headers = {}, raw = False, callback = None):
        """

        Get an array of string ['ArrayQuery1', 'begin!*'();:@ &=+$,/?#[]end' ,
        null, ''] using the csv-array format
        """

        # Construct URL
        url = '/queries/array/csv/string/valid'

        # Construct parameters
        query = {}
        if array_query is not None:
            query['arrayQuery'] = self._parse_url("array_query", array_query, '[str]', False)

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def array_string_csv_null(self, array_query, custom_headers = {}, raw = False, callback = None):
        """

        Get a null array of string using the csv-array format
        """

        # Construct URL
        url = '/queries/array/csv/string/null'

        # Construct parameters
        query = {}
        if array_query is not None:
            query['arrayQuery'] = self._parse_url("array_query", array_query, '[str]', False)

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def array_string_csv_empty(self, array_query, custom_headers = {}, raw = False, callback = None):
        """

        Get an empty array [] of string using the csv-array format
        """

        # Construct URL
        url = '/queries/array/csv/string/empty'

        # Construct parameters
        query = {}
        if array_query is not None:
            query['arrayQuery'] = self._parse_url("array_query", array_query, '[str]', False)

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def array_string_ssv_valid(self, array_query, custom_headers = {}, raw = False, callback = None):
        """

        Get an array of string ['ArrayQuery1', 'begin!*'();:@ &=+$,/?#[]end' ,
        null, ''] using the ssv-array format
        """

        # Construct URL
        url = '/queries/array/ssv/string/valid'

        # Construct parameters
        query = {}
        if array_query is not None:
            query['arrayQuery'] = self._parse_url("array_query", array_query, '[str]', False)

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def array_string_tsv_valid(self, array_query, custom_headers = {}, raw = False, callback = None):
        """

        Get an array of string ['ArrayQuery1', 'begin!*'();:@ &=+$,/?#[]end' ,
        null, ''] using the tsv-array format
        """

        # Construct URL
        url = '/queries/array/tsv/string/valid'

        # Construct parameters
        query = {}
        if array_query is not None:
            query['arrayQuery'] = self._parse_url("array_query", array_query, '[str]', False)

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def array_string_pipes_valid(self, array_query, custom_headers = {}, raw = False, callback = None):
        """

        Get an array of string ['ArrayQuery1', 'begin!*'();:@ &=+$,/?#[]end' ,
        null, ''] using the pipes-array format
        """

        # Construct URL
        url = '/queries/array/pipes/string/valid'

        # Construct parameters
        query = {}
        if array_query is not None:
            query['arrayQuery'] = self._parse_url("array_query", array_query, '[str]', False)

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response
