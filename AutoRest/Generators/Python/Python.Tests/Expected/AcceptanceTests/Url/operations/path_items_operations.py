#--------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
# 
# Code generated by Microsoft (R) AutoRest Code Generator 0.13.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
#--------------------------------------------------------------------------

import sys


from msrest.service_client import ServiceClient
from msrest.serialization import Serializer, Deserializer
from msrest.exceptions import (
    SerializationError,
    DeserializationError,
    TokenExpiredError,
    ClientRequestError,
    HttpOperationError)

from ..models import *

class PathItemsOperations(object):

    def __init__(self, client, config, serializer, derserializer):

        self._client = client
        self._serialize = serializer
        self._deserialize = derserializer

        self.config = config

    def _parse_url(self, name, value, datatype):

        try:
            value = self._serialize.serialize_data(value, str(datatype))

        except ValueError:
            raise ValueError("{} must not be None.".format(name))

        except DeserializationError:
            raise TypeError("{} must be type {}.".format(name, datatype))

        else:
            return value

    @ServiceClient.async_request
    def get_all_with_values(self, local_string_path, path_item_string_path, local_string_query, path_item_string_query, custom_headers = {}, raw = False, callback = None):
        """

        send globalStringPath='globalStringPath',
        pathItemStringPath='pathItemStringPath',
        localStringPath='localStringPath',
        globalStringQuery='globalStringQuery',
        pathItemStringQuery='pathItemStringQuery',
        localStringQuery='localStringQuery'
        """

        # Construct URL
        url = '/pathitem/nullable/globalStringPath/{globalStringPath}/pathItemStringPath/{pathItemStringPath}/localStringPath/{localStringPath}/globalStringQuery/pathItemStringQuery/localStringQuery'
        url = url.format(
            localStringPath = self._parse_url("local_string_path", local_string_path, 'str', False),
            pathItemStringPath = self._parse_url("path_item_string_path", path_item_string_path, 'str', False),
            globalStringPath = self._parse_url("self._client.global_string_path", self._client.global_string_path, 'str', False))

        # Construct parameters
        query = {}
        if local_string_query is not None:
            query['localStringQuery'] = self._parse_url("local_string_query", local_string_query, 'str', False)
        if path_item_string_query is not None:
            query['pathItemStringQuery'] = self._parse_url("path_item_string_query", path_item_string_query, 'str', False)
        if self._client.global_string_query is not None:
            query['globalStringQuery'] = self._parse_url("self._client.global_string_query", self._client.global_string_query, 'str', False)

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def get_global_query_null(self, local_string_path, path_item_string_path, local_string_query, path_item_string_query, custom_headers = {}, raw = False, callback = None):
        """

        send globalStringPath='globalStringPath',
        pathItemStringPath='pathItemStringPath',
        localStringPath='localStringPath', globalStringQuery=null,
        pathItemStringQuery='pathItemStringQuery',
        localStringQuery='localStringQuery'
        """

        # Construct URL
        url = '/pathitem/nullable/globalStringPath/{globalStringPath}/pathItemStringPath/{pathItemStringPath}/localStringPath/{localStringPath}/null/pathItemStringQuery/localStringQuery'
        url = url.format(
            localStringPath = self._parse_url("local_string_path", local_string_path, 'str', False),
            pathItemStringPath = self._parse_url("path_item_string_path", path_item_string_path, 'str', False),
            globalStringPath = self._parse_url("self._client.global_string_path", self._client.global_string_path, 'str', False))

        # Construct parameters
        query = {}
        if local_string_query is not None:
            query['localStringQuery'] = self._parse_url("local_string_query", local_string_query, 'str', False)
        if path_item_string_query is not None:
            query['pathItemStringQuery'] = self._parse_url("path_item_string_query", path_item_string_query, 'str', False)
        if self._client.global_string_query is not None:
            query['globalStringQuery'] = self._parse_url("self._client.global_string_query", self._client.global_string_query, 'str', False)

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def get_global_and_local_query_null(self, local_string_path, path_item_string_path, local_string_query, path_item_string_query, custom_headers = {}, raw = False, callback = None):
        """

        send globalStringPath=globalStringPath,
        pathItemStringPath='pathItemStringPath',
        localStringPath='localStringPath', globalStringQuery=null,
        pathItemStringQuery='pathItemStringQuery', localStringQuery=null
        """

        # Construct URL
        url = '/pathitem/nullable/globalStringPath/{globalStringPath}/pathItemStringPath/{pathItemStringPath}/localStringPath/{localStringPath}/null/pathItemStringQuery/null'
        url = url.format(
            localStringPath = self._parse_url("local_string_path", local_string_path, 'str', False),
            pathItemStringPath = self._parse_url("path_item_string_path", path_item_string_path, 'str', False),
            globalStringPath = self._parse_url("self._client.global_string_path", self._client.global_string_path, 'str', False))

        # Construct parameters
        query = {}
        if local_string_query is not None:
            query['localStringQuery'] = self._parse_url("local_string_query", local_string_query, 'str', False)
        if path_item_string_query is not None:
            query['pathItemStringQuery'] = self._parse_url("path_item_string_query", path_item_string_query, 'str', False)
        if self._client.global_string_query is not None:
            query['globalStringQuery'] = self._parse_url("self._client.global_string_query", self._client.global_string_query, 'str', False)

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def get_local_path_item_query_null(self, local_string_path, path_item_string_path, local_string_query, path_item_string_query, custom_headers = {}, raw = False, callback = None):
        """

        send globalStringPath='globalStringPath',
        pathItemStringPath='pathItemStringPath',
        localStringPath='localStringPath',
        globalStringQuery='globalStringQuery', pathItemStringQuery=null,
        localStringQuery=null
        """

        # Construct URL
        url = '/pathitem/nullable/globalStringPath/{globalStringPath}/pathItemStringPath/{pathItemStringPath}/localStringPath/{localStringPath}/globalStringQuery/null/null'
        url = url.format(
            localStringPath = self._parse_url("local_string_path", local_string_path, 'str', False),
            pathItemStringPath = self._parse_url("path_item_string_path", path_item_string_path, 'str', False),
            globalStringPath = self._parse_url("self._client.global_string_path", self._client.global_string_path, 'str', False))

        # Construct parameters
        query = {}
        if local_string_query is not None:
            query['localStringQuery'] = self._parse_url("local_string_query", local_string_query, 'str', False)
        if path_item_string_query is not None:
            query['pathItemStringQuery'] = self._parse_url("path_item_string_query", path_item_string_query, 'str', False)
        if self._client.global_string_query is not None:
            query['globalStringQuery'] = self._parse_url("self._client.global_string_query", self._client.global_string_query, 'str', False)

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response
