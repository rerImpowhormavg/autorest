#--------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
# 
# Code generated by Microsoft (R) AutoRest Code Generator 0.13.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
#--------------------------------------------------------------------------

import sys


from msrest.service_client import ServiceClient
from msrest.serialization import Serializer, Deserializer
from msrest.exceptions import (
    SerializationError,
    DeserializationError,
    TokenExpiredError,
    ClientRequestError,
    HttpOperationError)

from ..models import *

class ExplicitOperations(object):

    def __init__(self, client, config, serializer, derserializer):

        self._client = client
        self._serialize = serializer
        self._deserialize = derserializer

        self.config = config

    def _parse_url(self, name, value, datatype):

        try:
            value = self._serialize.serialize_data(value, str(datatype))

        except ValueError:
            raise ValueError("{} must not be None.".format(name))

        except DeserializationError:
            raise TypeError("{} must be type {}.".format(name, datatype))

        else:
            return value

    @ServiceClient.async_request
    def post_required_integer_parameter(self, body_parameter, custom_headers = {}, raw = False, callback = None):
        """

        Test explicitly required integer. Please put null and the client
        library should throw before the request is sent.
        """

        # Construct URL
        url = '/reqopt/requied/integer/parameter'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(body_parameter)

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers, content)

        if reponse.status_code < 200 or reponse.status_code >= 300:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def post_optional_integer_parameter(self, body_parameter, custom_headers = {}, raw = False, callback = None):
        """

        Test explicitly optional integer. Please put null.
        """

        # Construct URL
        url = '/reqopt/optional/integer/parameter'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(body_parameter)

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def post_required_integer_property(self, body_parameter, custom_headers = {}, raw = False, callback = None):
        """

        Test explicitly required integer. Please put a valid int-wrapper with
        'value' = null and the client library should throw before the request
        is sent.
        """

        # Construct URL
        url = '/reqopt/requied/integer/property'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(body_parameter)

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers, content)

        if reponse.status_code < 200 or reponse.status_code >= 300:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def post_optional_integer_property(self, body_parameter, custom_headers = {}, raw = False, callback = None):
        """

        Test explicitly optional integer. Please put a valid int-wrapper with
        'value' = null.
        """

        # Construct URL
        url = '/reqopt/optional/integer/property'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(body_parameter)

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def post_required_integer_header(self, header_parameter, custom_headers = {}, raw = False, callback = None):
        """

        Test explicitly required integer. Please put a header
        'headerParameter' => null and the client library should throw before
        the request is sent.
        """

        # Construct URL
        url = '/reqopt/requied/integer/header'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if header_parameter is not None:
            query['headerParameter'] = header_parameter
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers)

        if reponse.status_code < 200 or reponse.status_code >= 300:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def post_optional_integer_header(self, header_parameter, custom_headers = {}, raw = False, callback = None):
        """

        Test explicitly optional integer. Please put a header
        'headerParameter' => null.
        """

        # Construct URL
        url = '/reqopt/optional/integer/header'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if header_parameter is not None:
            query['headerParameter'] = header_parameter
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def post_required_string_parameter(self, body_parameter, custom_headers = {}, raw = False, callback = None):
        """

        Test explicitly required string. Please put null and the client
        library should throw before the request is sent.
        """

        # Construct URL
        url = '/reqopt/requied/string/parameter'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(body_parameter)

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers, content)

        if reponse.status_code < 200 or reponse.status_code >= 300:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def post_optional_string_parameter(self, body_parameter, custom_headers = {}, raw = False, callback = None):
        """

        Test explicitly optional string. Please put null.
        """

        # Construct URL
        url = '/reqopt/optional/string/parameter'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(body_parameter)

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def post_required_string_property(self, body_parameter, custom_headers = {}, raw = False, callback = None):
        """

        Test explicitly required string. Please put a valid string-wrapper
        with 'value' = null and the client library should throw before the
        request is sent.
        """

        # Construct URL
        url = '/reqopt/requied/string/property'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(body_parameter)

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers, content)

        if reponse.status_code < 200 or reponse.status_code >= 300:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def post_optional_string_property(self, body_parameter, custom_headers = {}, raw = False, callback = None):
        """

        Test explicitly optional integer. Please put a valid string-wrapper
        with 'value' = null.
        """

        # Construct URL
        url = '/reqopt/optional/string/property'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(body_parameter)

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def post_required_string_header(self, header_parameter, custom_headers = {}, raw = False, callback = None):
        """

        Test explicitly required string. Please put a header 'headerParameter'
        => null and the client library should throw before the request is
        sent.
        """

        # Construct URL
        url = '/reqopt/requied/string/header'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if header_parameter is not None:
            query['headerParameter'] = header_parameter
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers)

        if reponse.status_code < 200 or reponse.status_code >= 300:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def post_optional_string_header(self, body_parameter, custom_headers = {}, raw = False, callback = None):
        """

        Test explicitly optional string. Please put a header 'headerParameter'
        => null.
        """

        # Construct URL
        url = '/reqopt/optional/string/header'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if body_parameter is not None:
            query['bodyParameter'] = body_parameter
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def post_required_class_parameter(self, body_parameter, custom_headers = {}, raw = False, callback = None):
        """

        Test explicitly required complex object. Please put null and the
        client library should throw before the request is sent.
        """

        # Construct URL
        url = '/reqopt/requied/class/parameter'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(body_parameter)

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers, content)

        if reponse.status_code < 200 or reponse.status_code >= 300:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def post_optional_class_parameter(self, body_parameter, custom_headers = {}, raw = False, callback = None):
        """

        Test explicitly optional complex object. Please put null.
        """

        # Construct URL
        url = '/reqopt/optional/class/parameter'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(body_parameter)

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def post_required_class_property(self, body_parameter, custom_headers = {}, raw = False, callback = None):
        """

        Test explicitly required complex object. Please put a valid
        class-wrapper with 'value' = null and the client library should throw
        before the request is sent.
        """

        # Construct URL
        url = '/reqopt/requied/class/property'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(body_parameter)

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers, content)

        if reponse.status_code < 200 or reponse.status_code >= 300:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def post_optional_class_property(self, body_parameter, custom_headers = {}, raw = False, callback = None):
        """

        Test explicitly optional complex object. Please put a valid
        class-wrapper with 'value' = null.
        """

        # Construct URL
        url = '/reqopt/optional/class/property'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(body_parameter)

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def post_required_array_parameter(self, body_parameter, custom_headers = {}, raw = False, callback = None):
        """

        Test explicitly required array. Please put null and the client library
        should throw before the request is sent.
        """

        # Construct URL
        url = '/reqopt/requied/array/parameter'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(body_parameter)

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers, content)

        if reponse.status_code < 200 or reponse.status_code >= 300:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def post_optional_array_parameter(self, body_parameter, custom_headers = {}, raw = False, callback = None):
        """

        Test explicitly optional array. Please put null.
        """

        # Construct URL
        url = '/reqopt/optional/array/parameter'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(body_parameter)

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def post_required_array_property(self, body_parameter, custom_headers = {}, raw = False, callback = None):
        """

        Test explicitly required array. Please put a valid array-wrapper with
        'value' = null and the client library should throw before the request
        is sent.
        """

        # Construct URL
        url = '/reqopt/requied/array/property'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(body_parameter)

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers, content)

        if reponse.status_code < 200 or reponse.status_code >= 300:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def post_optional_array_property(self, body_parameter, custom_headers = {}, raw = False, callback = None):
        """

        Test explicitly optional array. Please put a valid array-wrapper with
        'value' = null.
        """

        # Construct URL
        url = '/reqopt/optional/array/property'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(body_parameter)

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def post_required_array_header(self, header_parameter, custom_headers = {}, raw = False, callback = None):
        """

        Test explicitly required array. Please put a header 'headerParameter'
        => null and the client library should throw before the request is
        sent.
        """

        # Construct URL
        url = '/reqopt/requied/array/header'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if header_parameter is not None:
            query['headerParameter'] = header_parameter
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers)

        if reponse.status_code < 200 or reponse.status_code >= 300:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def post_optional_array_header(self, header_parameter, custom_headers = {}, raw = False, callback = None):
        """

        Test explicitly optional integer. Please put a header
        'headerParameter' => null.
        """

        # Construct URL
        url = '/reqopt/optional/array/header'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if header_parameter is not None:
            query['headerParameter'] = header_parameter
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response
