# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.pipeline import ClientRawResponse

from .. import models


class Explicit(object):

    def __init__(self, client, config, serializer, deserializer):

        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer

        self.config = config

    def post_required_integer_parameter(
            self, body_parameter, custom_headers={}, raw=False, **operation_config):
        """
        Test explicitly required integer. Please put null and the client
        library should throw before the request is sent.

        :param body_parameter:
        :type body_parameter: int
        :param dict custom_headers: headers that will be added to the request
        :param boolean raw: returns the direct response alongside the
        deserialized response
        :rtype: Error or (Error, requests.response) or
        concurrent.futures.Future
        """
        # Construct URL
        url = '/reqopt/requied/integer/parameter'

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(body_parameter, 'int')

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, **operation_config)

        if response.status_code < 200 or response.status_code >= 300:
            raise models.ErrorException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response

    def post_optional_integer_parameter(
            self, body_parameter=None, custom_headers={}, raw=False, **operation_config):
        """
        Test explicitly optional integer. Please put null.

        :param body_parameter:
        :type body_parameter: int or None
        :param dict custom_headers: headers that will be added to the request
        :param boolean raw: returns the direct response alongside the
        deserialized response
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """
        # Construct URL
        url = '/reqopt/optional/integer/parameter'

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if body_parameter is not None:
            body_content = self._serialize.body(body_parameter, 'int')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response

    def post_required_integer_property(
            self, value, custom_headers={}, raw=False, **operation_config):
        """
        Test explicitly required integer. Please put a valid int-wrapper with
        'value' = null and the client library should throw before the request
        is sent.

        :param value:
        :type value: int
        :param dict custom_headers: headers that will be added to the request
        :param boolean raw: returns the direct response alongside the
        deserialized response
        :rtype: Error or (Error, requests.response) or
        concurrent.futures.Future
        """
        body_parameter = models.IntWrapper()
        if value is not None:
            body_parameter.value = value

        # Construct URL
        url = '/reqopt/requied/integer/property'

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(body_parameter, 'IntWrapper')

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, **operation_config)

        if response.status_code < 200 or response.status_code >= 300:
            raise models.ErrorException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response

    def post_optional_integer_property(
            self, value=None, custom_headers={}, raw=False, **operation_config):
        """
        Test explicitly optional integer. Please put a valid int-wrapper with
        'value' = null.

        :param value:
        :type value: int or None
        :param dict custom_headers: headers that will be added to the request
        :param boolean raw: returns the direct response alongside the
        deserialized response
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """
        body_parameter = models.IntOptionalWrapper()
        if value is not None:
            body_parameter.value = value

        # Construct URL
        url = '/reqopt/optional/integer/property'

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if body_parameter is not None:
            body_content = self._serialize.body(body_parameter, 'IntOptionalWrapper')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response

    def post_required_integer_header(
            self, header_parameter, custom_headers={}, raw=False, **operation_config):
        """
        Test explicitly required integer. Please put a header
        'headerParameter' => null and the client library should throw before
        the request is sent.

        :param header_parameter:
        :type header_parameter: int
        :param dict custom_headers: headers that will be added to the request
        :param boolean raw: returns the direct response alongside the
        deserialized response
        :rtype: Error or (Error, requests.response) or
        concurrent.futures.Future
        """
        # Construct URL
        url = '/reqopt/requied/integer/header'

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['headerParameter'] = self._serialize.header("header_parameter", header_parameter, 'int')

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(request, header_parameters, **operation_config)

        if response.status_code < 200 or response.status_code >= 300:
            raise models.ErrorException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response

    def post_optional_integer_header(
            self, header_parameter=None, custom_headers={}, raw=False, **operation_config):
        """
        Test explicitly optional integer. Please put a header
        'headerParameter' => null.

        :param header_parameter:
        :type header_parameter: int or None
        :param dict custom_headers: headers that will be added to the request
        :param boolean raw: returns the direct response alongside the
        deserialized response
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """
        # Construct URL
        url = '/reqopt/optional/integer/header'

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)
        if header_parameter is not None:
            header_parameters['headerParameter'] = self._serialize.header("header_parameter", header_parameter, 'int')

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(request, header_parameters, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response

    def post_required_string_parameter(
            self, body_parameter, custom_headers={}, raw=False, **operation_config):
        """
        Test explicitly required string. Please put null and the client
        library should throw before the request is sent.

        :param body_parameter:
        :type body_parameter: str
        :param dict custom_headers: headers that will be added to the request
        :param boolean raw: returns the direct response alongside the
        deserialized response
        :rtype: Error or (Error, requests.response) or
        concurrent.futures.Future
        """
        # Construct URL
        url = '/reqopt/requied/string/parameter'

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(body_parameter, 'str')

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, **operation_config)

        if response.status_code < 200 or response.status_code >= 300:
            raise models.ErrorException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response

    def post_optional_string_parameter(
            self, body_parameter=None, custom_headers={}, raw=False, **operation_config):
        """
        Test explicitly optional string. Please put null.

        :param body_parameter:
        :type body_parameter: str or None
        :param dict custom_headers: headers that will be added to the request
        :param boolean raw: returns the direct response alongside the
        deserialized response
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """
        # Construct URL
        url = '/reqopt/optional/string/parameter'

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if body_parameter is not None:
            body_content = self._serialize.body(body_parameter, 'str')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response

    def post_required_string_property(
            self, value, custom_headers={}, raw=False, **operation_config):
        """
        Test explicitly required string. Please put a valid string-wrapper
        with 'value' = null and the client library should throw before the
        request is sent.

        :param value:
        :type value: str
        :param dict custom_headers: headers that will be added to the request
        :param boolean raw: returns the direct response alongside the
        deserialized response
        :rtype: Error or (Error, requests.response) or
        concurrent.futures.Future
        """
        body_parameter = models.StringWrapper()
        if value is not None:
            body_parameter.value = value

        # Construct URL
        url = '/reqopt/requied/string/property'

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(body_parameter, 'StringWrapper')

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, **operation_config)

        if response.status_code < 200 or response.status_code >= 300:
            raise models.ErrorException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response

    def post_optional_string_property(
            self, value=None, custom_headers={}, raw=False, **operation_config):
        """
        Test explicitly optional integer. Please put a valid string-wrapper
        with 'value' = null.

        :param value:
        :type value: str or None
        :param dict custom_headers: headers that will be added to the request
        :param boolean raw: returns the direct response alongside the
        deserialized response
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """
        body_parameter = models.StringOptionalWrapper()
        if value is not None:
            body_parameter.value = value

        # Construct URL
        url = '/reqopt/optional/string/property'

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if body_parameter is not None:
            body_content = self._serialize.body(body_parameter, 'StringOptionalWrapper')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response

    def post_required_string_header(
            self, header_parameter, custom_headers={}, raw=False, **operation_config):
        """
        Test explicitly required string. Please put a header 'headerParameter'
        => null and the client library should throw before the request is
        sent.

        :param header_parameter:
        :type header_parameter: str
        :param dict custom_headers: headers that will be added to the request
        :param boolean raw: returns the direct response alongside the
        deserialized response
        :rtype: Error or (Error, requests.response) or
        concurrent.futures.Future
        """
        # Construct URL
        url = '/reqopt/requied/string/header'

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['headerParameter'] = self._serialize.header("header_parameter", header_parameter, 'str')

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(request, header_parameters, **operation_config)

        if response.status_code < 200 or response.status_code >= 300:
            raise models.ErrorException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response

    def post_optional_string_header(
            self, body_parameter=None, custom_headers={}, raw=False, **operation_config):
        """
        Test explicitly optional string. Please put a header 'headerParameter'
        => null.

        :param body_parameter:
        :type body_parameter: str or None
        :param dict custom_headers: headers that will be added to the request
        :param boolean raw: returns the direct response alongside the
        deserialized response
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """
        # Construct URL
        url = '/reqopt/optional/string/header'

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)
        if body_parameter is not None:
            header_parameters['bodyParameter'] = self._serialize.header("body_parameter", body_parameter, 'str')

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(request, header_parameters, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response

    def post_required_class_parameter(
            self, body_parameter, custom_headers={}, raw=False, **operation_config):
        """
        Test explicitly required complex object. Please put null and the
        client library should throw before the request is sent.

        :param body_parameter:
        :type body_parameter: Product
        :param dict custom_headers: headers that will be added to the request
        :param boolean raw: returns the direct response alongside the
        deserialized response
        :rtype: Error or (Error, requests.response) or
        concurrent.futures.Future
        """
        # Construct URL
        url = '/reqopt/requied/class/parameter'

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(body_parameter, 'Product')

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, **operation_config)

        if response.status_code < 200 or response.status_code >= 300:
            raise models.ErrorException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response

    def post_optional_class_parameter(
            self, body_parameter=None, custom_headers={}, raw=False, **operation_config):
        """
        Test explicitly optional complex object. Please put null.

        :param body_parameter:
        :type body_parameter: Product or None
        :param dict custom_headers: headers that will be added to the request
        :param boolean raw: returns the direct response alongside the
        deserialized response
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """
        # Construct URL
        url = '/reqopt/optional/class/parameter'

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if body_parameter is not None:
            body_content = self._serialize.body(body_parameter, 'Product')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response

    def post_required_class_property(
            self, value, custom_headers={}, raw=False, **operation_config):
        """
        Test explicitly required complex object. Please put a valid
        class-wrapper with 'value' = null and the client library should throw
        before the request is sent.

        :param value:
        :type value: Product
        :param dict custom_headers: headers that will be added to the request
        :param boolean raw: returns the direct response alongside the
        deserialized response
        :rtype: Error or (Error, requests.response) or
        concurrent.futures.Future
        """
        body_parameter = models.ClassWrapper()
        if value is not None:
            body_parameter.value = value

        # Construct URL
        url = '/reqopt/requied/class/property'

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(body_parameter, 'ClassWrapper')

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, **operation_config)

        if response.status_code < 200 or response.status_code >= 300:
            raise models.ErrorException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response

    def post_optional_class_property(
            self, value=None, custom_headers={}, raw=False, **operation_config):
        """
        Test explicitly optional complex object. Please put a valid
        class-wrapper with 'value' = null.

        :param value:
        :type value: Product or None
        :param dict custom_headers: headers that will be added to the request
        :param boolean raw: returns the direct response alongside the
        deserialized response
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """
        body_parameter = models.ClassOptionalWrapper()
        if value is not None:
            body_parameter.value = value

        # Construct URL
        url = '/reqopt/optional/class/property'

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if body_parameter is not None:
            body_content = self._serialize.body(body_parameter, 'ClassOptionalWrapper')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response

    def post_required_array_parameter(
            self, body_parameter, custom_headers={}, raw=False, **operation_config):
        """
        Test explicitly required array. Please put null and the client library
        should throw before the request is sent.

        :param body_parameter:
        :type body_parameter: list
        :param dict custom_headers: headers that will be added to the request
        :param boolean raw: returns the direct response alongside the
        deserialized response
        :rtype: Error or (Error, requests.response) or
        concurrent.futures.Future
        """
        # Construct URL
        url = '/reqopt/requied/array/parameter'

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(body_parameter, '[str]')

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, **operation_config)

        if response.status_code < 200 or response.status_code >= 300:
            raise models.ErrorException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response

    def post_optional_array_parameter(
            self, body_parameter=None, custom_headers={}, raw=False, **operation_config):
        """
        Test explicitly optional array. Please put null.

        :param body_parameter:
        :type body_parameter: list or None
        :param dict custom_headers: headers that will be added to the request
        :param boolean raw: returns the direct response alongside the
        deserialized response
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """
        # Construct URL
        url = '/reqopt/optional/array/parameter'

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if body_parameter is not None:
            body_content = self._serialize.body(body_parameter, '[str]')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response

    def post_required_array_property(
            self, value, custom_headers={}, raw=False, **operation_config):
        """
        Test explicitly required array. Please put a valid array-wrapper with
        'value' = null and the client library should throw before the request
        is sent.

        :param value:
        :type value: list
        :param dict custom_headers: headers that will be added to the request
        :param boolean raw: returns the direct response alongside the
        deserialized response
        :rtype: Error or (Error, requests.response) or
        concurrent.futures.Future
        """
        body_parameter = models.ArrayWrapper()
        if value is not None:
            body_parameter.value = value

        # Construct URL
        url = '/reqopt/requied/array/property'

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(body_parameter, 'ArrayWrapper')

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, **operation_config)

        if response.status_code < 200 or response.status_code >= 300:
            raise models.ErrorException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response

    def post_optional_array_property(
            self, value=None, custom_headers={}, raw=False, **operation_config):
        """
        Test explicitly optional array. Please put a valid array-wrapper with
        'value' = null.

        :param value:
        :type value: list or None
        :param dict custom_headers: headers that will be added to the request
        :param boolean raw: returns the direct response alongside the
        deserialized response
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """
        body_parameter = models.ArrayOptionalWrapper()
        if value is not None:
            body_parameter.value = value

        # Construct URL
        url = '/reqopt/optional/array/property'

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if body_parameter is not None:
            body_content = self._serialize.body(body_parameter, 'ArrayOptionalWrapper')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response

    def post_required_array_header(
            self, header_parameter, custom_headers={}, raw=False, **operation_config):
        """
        Test explicitly required array. Please put a header 'headerParameter'
        => null and the client library should throw before the request is
        sent.

        :param header_parameter:
        :type header_parameter: list
        :param dict custom_headers: headers that will be added to the request
        :param boolean raw: returns the direct response alongside the
        deserialized response
        :rtype: Error or (Error, requests.response) or
        concurrent.futures.Future
        """
        # Construct URL
        url = '/reqopt/requied/array/header'

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['headerParameter'] = self._serialize.header("header_parameter", header_parameter, '[str]', div=',')

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(request, header_parameters, **operation_config)

        if response.status_code < 200 or response.status_code >= 300:
            raise models.ErrorException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response

    def post_optional_array_header(
            self, header_parameter=None, custom_headers={}, raw=False, **operation_config):
        """
        Test explicitly optional integer. Please put a header
        'headerParameter' => null.

        :param header_parameter:
        :type header_parameter: list or None
        :param dict custom_headers: headers that will be added to the request
        :param boolean raw: returns the direct response alongside the
        deserialized response
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """
        # Construct URL
        url = '/reqopt/optional/array/header'

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)
        if header_parameter is not None:
            header_parameters['headerParameter'] = self._serialize.header("header_parameter", header_parameter, '[str]', div=',')

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(request, header_parameters, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
