#--------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
# 
# Code generated by Microsoft (R) AutoRest Code Generator 0.13.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
#--------------------------------------------------------------------------

import sys

from datetime import *

from msrest.service_client import ServiceClient
from msrest.serialization import Serializer, Deserializer
from msrest.exceptions import (
    SerializationError,
    DeserializationError,
    TokenExpiredError,
    ClientRequestError,
    HttpOperationError)

from ..models import *

class Datetimerfc1123Operations(object):

    def __init__(self, client, config, serializer, derserializer):

        self._client = client
        self._serialize = serializer
        self._deserialize = derserializer

        self.config = config

    def _parse_url(self, name, value, datatype):

        try:
            value = self._serialize.serialize_data(value, str(datatype))

        except ValueError:
            raise ValueError("{} must not be None.".format(name))

        except DeserializationError:
            raise TypeError("{} must be type {}.".format(name, datatype))

        else:
            return value

    @ServiceClient.async_request
    def get_null(self, custom_headers = {}, raw = False, callback = None):
        """

        Get null datetime value
        """

        # Construct URL
        url = '/datetimerfc1123/null'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('rfc-date', response)

        if raw:
            return deserialized, response

        return deserialized

    @ServiceClient.async_request
    def get_invalid(self, custom_headers = {}, raw = False, callback = None):
        """

        Get invalid datetime value
        """

        # Construct URL
        url = '/datetimerfc1123/invalid'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('rfc-date', response)

        if raw:
            return deserialized, response

        return deserialized

    @ServiceClient.async_request
    def get_overflow(self, custom_headers = {}, raw = False, callback = None):
        """

        Get overflow datetime value
        """

        # Construct URL
        url = '/datetimerfc1123/overflow'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('rfc-date', response)

        if raw:
            return deserialized, response

        return deserialized

    @ServiceClient.async_request
    def get_underflow(self, custom_headers = {}, raw = False, callback = None):
        """

        Get underflow datetime value
        """

        # Construct URL
        url = '/datetimerfc1123/underflow'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('rfc-date', response)

        if raw:
            return deserialized, response

        return deserialized

    @ServiceClient.async_request
    def put_utc_max_date_time(self, datetime_body, custom_headers = {}, raw = False, callback = None):
        """

        Put max datetime value Fri, 31 Dec 9999 23:59:59 GMT
        """

        # Construct URL
        url = '/datetimerfc1123/max'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(datetime_body)

        # Construct and send request
        request = self._client.put(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def get_utc_lowercase_max_date_time(self, custom_headers = {}, raw = False, callback = None):
        """

        Get max datetime value fri, 31 dec 9999 23:59:59 gmt
        """

        # Construct URL
        url = '/datetimerfc1123/max/lowercase'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('rfc-date', response)

        if raw:
            return deserialized, response

        return deserialized

    @ServiceClient.async_request
    def get_utc_uppercase_max_date_time(self, custom_headers = {}, raw = False, callback = None):
        """

        Get max datetime value FRI, 31 DEC 9999 23:59:59 GMT
        """

        # Construct URL
        url = '/datetimerfc1123/max/uppercase'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('rfc-date', response)

        if raw:
            return deserialized, response

        return deserialized

    @ServiceClient.async_request
    def put_utc_min_date_time(self, datetime_body, custom_headers = {}, raw = False, callback = None):
        """

        Put min datetime value Mon, 1 Jan 0001 00:00:00 GMT
        """

        # Construct URL
        url = '/datetimerfc1123/min'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(datetime_body)

        # Construct and send request
        request = self._client.put(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        if raw:
            return None, response

    @ServiceClient.async_request
    def get_utc_min_date_time(self, custom_headers = {}, raw = False, callback = None):
        """

        Get min datetime value Mon, 1 Jan 0001 00:00:00 GMT
        """

        # Construct URL
        url = '/datetimerfc1123/min'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        headers.update(custom_headers)
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise ErrorException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('rfc-date', response)

        if raw:
            return deserialized, response

        return deserialized
