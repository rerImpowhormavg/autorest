@using Microsoft.Rest.Generator.Python
@using Microsoft.Rest.Generator.Python.Templates
@using Microsoft.Rest.Generator.Utilities
@using System.Linq
@inherits Microsoft.Rest.Generator.Template<Microsoft.Rest.Generator.Python.ServiceClientTemplateModel>
@if (Model.ContainsDecimal)
{
@:from decimal import *
}
@if (Model.ContainsDatetime)
{
@:from datetime import *
}
@EmptyLine
from runtime.msrest import ServiceClient, Configuration
@{
  if (Model.MethodGroupModels.Any())
  {
    foreach (var modelGroupType in Model.MethodGroupModels)
    {
@:from .operations.@(modelGroupType.MethodGroupType.ToPythonCase()) import @modelGroupType.MethodGroupType
    }
  }
}
from .models import *
@EmptyLine
class @(Model.Name)Configuration(Configuration):
@EmptyLine
    def __init__(self, base_url=None, filepath=None, @(Model.RequiredConstructorParameters)):
@EmptyLine
         if (not base_url):
             base_url = '@Model.BaseUrl'
@EmptyLine
        super(@(Model.Name)Configuration, self).__init__(base_url, filepath)
@*EmptyLine
        self.api_version = '2015-06-01.2.0'
*@
@EmptyLine
@EmptyLine
class @(Model.Name)(ServiceClient):
@EmptyLine
    def __init__(self, credentials, config=Configuration()):
@EmptyLine
        super(@(Model.Name), self).__init__(credentials, config)
@EmptyLine
  @foreach (var methodGroup in Model.MethodGroupModels)
  {
        @:self.@(methodGroup.MethodGroupName) = @(methodGroup.MethodGroupType)(self, config)
  }
@EmptyLine
@if (Model.MethodTemplateModels.Any())
{
<text>
@EmptyLine
    def _url(self, *extension):
@EmptyLine
        path = [x.strip('/') for x in extension if x]
        return '/' + '/'.join(path)
@EmptyLine
    def _send(self, request, accept_status, headers, content=None):
@EmptyLine
        try:
            request.add_headers(headers)
            if content:
                request.add_content(content)
@EmptyLine
            response =  self._client.send(request)
@EmptyLine
            return response
@EmptyLine
</text>
  foreach (var method in Model.MethodTemplateModels)
  {
@(Include(new MethodTemplate(), method))
@EmptyLine
@:
  }
}


