@using Microsoft.Rest.Generator.Python
@using Microsoft.Rest.Generator.Python.Templates
@using Microsoft.Rest.Generator.Utilities
@using System.Linq
@inherits Microsoft.Rest.Generator.Template<Microsoft.Rest.Generator.Python.ServiceClientTemplateModel>
#--------------------------------------------------------------------------
@Header("# ")
#--------------------------------------------------------------------------
@EmptyLine
@if (Model.ContainsDecimal)
{
@:from decimal import *
}
@if (Model.ContainsDatetime)
{
@:from datetime import *
}
@EmptyLine
from msrest import ServiceClient, Configuration
from msrest import Serializer, Deserializer
from msrest.exceptions import (
    SerializationError,
    DeserializationError,
    TokenExpiredError,
    ClientRequestError,
    HttpOperationError)
@{
  if (Model.MethodGroupModels.Any())
  {
    foreach (var modelGroupType in Model.MethodGroupModels)
    {
@:from .operations.@(modelGroupType.MethodGroupType.ToPythonCase()) import @modelGroupType.MethodGroupType
    }
  }
}
import models
@EmptyLine
class @(Model.Name)Configuration(Configuration):
@EmptyLine
    def __init__(self, base_url=None, filepath=None):
@*(Model.RequiredConstructorParameters)*@
@EmptyLine
        if not base_url:
            base_url = '@Model.BaseUrl'
@EmptyLine
        super(@(Model.Name)Configuration, self).__init__(base_url, filepath)
@*EmptyLine
        self.api_version = '2015-06-01.2.0'
*@
@EmptyLine
@EmptyLine
class @(Model.Name)(object):
@EmptyLine
    def __init__(self, credentials, config):
@EmptyLine
        self._client = ServiceClient(credentials, config) 
@EmptyLine
        client_models = {k:v for k,v in models.__dict__.items() if isinstance(v, type)}
        self._serialize = Serializer()
        self._deserialize = Deserializer(client_models)
@EmptyLine
        self.config = config
  @foreach (var methodGroup in Model.MethodGroupModels)
  {
        @:self.@(methodGroup.MethodGroupName) = @(methodGroup.MethodGroupType)(self._client, self.config, self._serialize, self._deserialize)
  }
@EmptyLine
@if (Model.MethodTemplateModels.Any())
{
<text>
@EmptyLine
    def _parse_url(self, name, value, datatype):
@EmptyLine
        try:
            value = self._serialize.serialize_data(value, str(datatype))
@EmptyLine
        except ValueError:
            raise ValueError("{} must not be None.".format(name))
@EmptyLine
        except DeserializationError:
            raise TypeError("{} must be type {}.".format(name, datatype))
@EmptyLine
        else:
            return value
</text>
  foreach (var method in Model.MethodTemplateModels)
  {
@EmptyLine
@(Include(new MethodTemplate(), method))
  }
}
