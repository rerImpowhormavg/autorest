@using Microsoft.Rest.Generator.Python
@using Microsoft.Rest.Generator.Python.Templates
@using System.Linq;
@inherits Microsoft.Rest.Generator.Template<Microsoft.Rest.Generator.Python.MethodGroupTemplateModel>
import sys
@if (Model.ContainsDecimal)
{
@:from decimal import *
}
@if (Model.ContainsDatetime)
{
@:from datetime import *
}
@EmptyLine
try:
    from urlparse import urljoin
@EmptyLine
except ImportError:
    from urllib.parse import urljoin
@EmptyLine
from runtime.msrest.serialization import Serialized, Deserialized
from runtime.msrest.exceptions import (
    SerializationError,
    DeserializationError,
    TokenExpiredError,
    ClientRequestException)
@EmptyLine
from runtime.msrestazure.azure_handlers import Paged, Polled
@EmptyLine
@*from ..batch_exception import BatchStatusError*@
@EmptyLine
from .. import models
@EmptyLine
from ..models import *
@EmptyLine
class @(Model.MethodGroupType)(object):
@EmptyLine
    def __init__(self, client, config):
@EmptyLine
        self._client = client
        self._config = config
        self._classes = {k:v for k,v in models.__dict__.items() if isinstance(v, type)}
@EmptyLine
    def _url(self, *extension):
@EmptyLine
        path = [x.strip('/') for x in extension if x]
        return '/' + '/'.join(path)
@EmptyLine
    def _send(self, request, accept_status, headers, content=None):
@EmptyLine
        try:
            request.add_headers(headers)
            if content:
                request.add_content(content)
@EmptyLine
            response =  self._client.send(request)
@EmptyLine
            return response
@EmptyLine
@foreach (var method in Model.MethodTemplateModels)
{
@:@(Include(new MethodTemplate(), method))
@EmptyLine
}
@EmptyLine
