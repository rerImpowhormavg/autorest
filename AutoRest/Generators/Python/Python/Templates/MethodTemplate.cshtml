@using System;
@using System.Linq;
@using Microsoft.Rest.Generator.ClientModel
@using Microsoft.Rest.Generator.Utilities
@using Microsoft.Rest.Generator.Python
@using Microsoft.Rest.Generator.Python.TemplateModels
@using Microsoft.Rest.Generator.Python.Templates
@inherits Microsoft.Rest.Generator.Template<Microsoft.Rest.Generator.Python.MethodTemplateModel>
    @@async_request
    def @(Model.Name.ToPythonCase())(self, @(Model.MethodParameterDeclaration(Model.AddCustomHeader))):
        """
@if (!String.IsNullOrEmpty(Model.Summary))
{
@:        @WrapComment(string.Empty, Model.Summary)
}
@if (!String.IsNullOrEmpty(Model.Description))
{
@EmptyLine
@:        @WrapComment(string.Empty, Model.Description)
}

@EmptyLine
    @foreach(var parameter in Model.DocumentationParameters)
    {
@:        @WrapComment(string.Empty, ":param " + parameter.Name + ": " + parameter.Documentation)
    }
        @WrapComment(string.Empty, ":param custom_headers: headers that will be added to the request")
        @WrapComment(string.Empty, ":param raw: returns the direct response alongside the deserialized response")
        @WrapComment(string.Empty, ":param callback: if provided, the call will run asynchronously and call the callback when complete.  When specified the function returns a concurrent.futures.Future")
    @foreach (var parameter in Model.DocumentationParameters)
    {
@:        @WrapComment(string.Empty, ":type " + parameter.Name + ": " + MethodTemplateModel.GetDocumentationType(parameter.Type, parameter.IsRequired))
    }

        @WrapComment(string.Empty, ":type custom_headers: dict")
        @WrapComment(string.Empty, ":type raw: boolean")
        @WrapComment(string.Empty, ":type callback: Callable[[concurrent.futures.Future], None] or None")

        @WrapComment(string.Empty, string.Format(":rtype: {0} or ({0}, requests.response) or concurrent.futures.Future", MethodTemplateModel.GetDocumentationType(Model.ReturnType)))

        """
@EmptyLine
        @Model.BuildInputMappings()
@if (Model.InputParameterTransformation.Any())
{
@EmptyLine
}
        # Construct URL
        url = '@(Model.Url)'
        @(Model.BuildUrlPath("url"))
@EmptyLine
        # Construct parameters
        query = {}
        @(Model.BuildUrlQuery("query"))
@EmptyLine
        # Construct headers
        headers = {}
        @(Model.BuildHeaders("headers"))
        @(Model.SetDefaultHeaders)
        headers['Content-Type'] = '@(Model.ContentType)'
@EmptyLine
@if (Model.RequestBody != null)
{
@:        # Construct body
@:        content = self._serialize(@Model.RequestBody.Name, '@(Model.RequestBody.Type.ToPythonRuntimeTypeString())')
@EmptyLine
}
        # Construct and send request
        request = self._client.@(MethodTemplateModel.GetHttpFunction(Model.HttpMethod))(url, query)
@if (Model.RequestBody != null)
{
        @:response = self._client.send(request, headers, content)
}
else
{
        @:response = self._client.send(request, headers)
}
@EmptyLine
        if @Model.FailureStatusCodePredicate:
            raise @Model.RaisedException
@EmptyLine
@if (Model.HasAnyResponse)
{
  if (Model.IsResponseStream)
  {
<text>
        def download_gen():
            for data in response.iter_content(self.config.connection.data_block_size):
                if not data:
                    break
@EmptyLine
                yield data
@EmptyLine
        if raw:
            return download_gen(), response
@EmptyLine
        return download_gen()
</text>
  }
  else
  {
        @:deserialized = None
@EmptyLine
    foreach (var responsePair in Model.Responses.Where(r => r.Value != null))
    {
        @:if response.status_code == @MethodTemplateModel.GetStatusCodeReference(responsePair.Key):
            @:deserialized = self._deserialize('@responsePair.Value.ToPythonRuntimeTypeString()', response)
    }
@EmptyLine
        @:if raw:
            @:return deserialized, response
@EmptyLine
        @:return deserialized
  }
}
else
{
        @:if raw:
            @:return None, response
}

