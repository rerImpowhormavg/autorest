@using System
@using System.Linq;
@using Microsoft.Rest.Generator.ClientModel
@using Microsoft.Rest.Generator.Utilities
@using Microsoft.Rest.Generator.Python
@using Microsoft.Rest.Generator.Python.TemplateModels
@using Microsoft.Rest.Generator.Python.Templates
@inherits Microsoft.Rest.Generator.Template<Microsoft.Rest.Generator.Python.MethodTemplateModel>
    def @(Model.Name.ToPythonCase())(self, @(Model.MethodParameterDeclaration)):
        """
@if (!String.IsNullOrEmpty(Model.Summary))
{
@:        @WrapComment(string.Empty, Model.Summary)
}
@if (!String.IsNullOrEmpty(Model.Description))
{
@EmptyLine
@:        @WrapComment(string.Empty, Model.Description)
}
        """
@EmptyLine
@if (Model.ParameterTemplateModels.Any())
{
  var validationBlock = Model.ValidationString;
  if (!string.IsNullOrWhiteSpace(validationBlock))
  {
@:        # Validate
@:        @(validationBlock)
@EmptyLine
  }
}
        try:
    @*if (Model.IsAbsoluteUrl) *@
            # Construct URL
            url = self._url('pools', pool_name, 'evaluateautoscale')
@EmptyLine
            # Construct parameters
            query = {}
            query['api-version'] = self._config.api_version
            query['timeout'] = self._config.request_timeout
@EmptyLine
            # Construct headers
            headers = {}
@*custom header*@
            headers['ocp-date'] = Serialized.serialize_opc_date(datetime.utcnow())
            headers.update(access.get_headers())
            headers['Content-Type'] = '@(Model.ContentType)'
@EmptyLine
            # Construct body
            content = Serialized(evaluation_parameters)
@EmptyLine
@*stream handler*@
            # Construct and send request
            request = self._client.@(Model.GetHttpFunction(Model.HttpMethod))(url, query)
            response = self._send(request, headers, content)
@EmptyLine
            if response.status_code not in [@Model.GetAcceptStatus()]:
@EmptyLine
                deserialize = Deserialized(BatchStatusError, response, self)
                deserialized = deserialize(response.content, self._classes)
                raise deserialized
@EmptyLine
            return response
@EmptyLine
        except (SerializationError, DeserializationError):
            raise #TODO: Wrap in client-specific error?    
@EmptyLine
