# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator 0.13.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

import sys


from msrest.serialization import Serializer, Deserializer
from msrest.service_client import async_request
from msrest.exceptions import (
    DeserializationError,
    HttpOperationError)
import uuid

from ..models import *


class lr_osOperations(object):

    def __init__(self, client, config, serializer, derserializer):

        self._client = client
        self._serialize = serializer
        self._deserialize = derserializer

        self.config = config

    def _parse_url(self, name, value, datatype):

        try:
            value = self._serialize.serialize_data(value, datatype)

        except ValueError:
            raise ValueError("{} must not be None.".format(name))

        except DeserializationError:
            raise TypeError("{} must be type {}.".format(name, datatype))

        else:
            return value

    @async_request
    def put200_succeeded(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running put request, service returns a 200 to the initial
        request, with an entity that contains ProvisioningState=’Succeeded’.

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/put/200/succeeded'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.put(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [200, 204]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Product', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def begin_put200_succeeded(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running put request, service returns a 200 to the initial
        request, with an entity that contains ProvisioningState=’Succeeded’.

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/put/200/succeeded'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.put(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [200, 204]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Product', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def put200_succeeded_no_state(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running put request, service returns a 200 to the initial
        request, with an entity that does not contain
        ProvisioningState=’Succeeded’.

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/put/200/succeeded/nostate'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.put(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [200]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Product', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def begin_put200_succeeded_no_state(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running put request, service returns a 200 to the initial
        request, with an entity that does not contain
        ProvisioningState=’Succeeded’.

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/put/200/succeeded/nostate'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.put(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [200]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Product', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def put202_retry200(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running put request, service returns a 202 to the initial
        request, with a location header that points to a polling URL that
        returns a 200 and an entity that doesn't contains ProvisioningState

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/put/202/retry/200'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.put(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [202]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 202:
            deserialized = self._deserialize('Product', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def begin_put202_retry200(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running put request, service returns a 202 to the initial
        request, with a location header that points to a polling URL that
        returns a 200 and an entity that doesn't contains ProvisioningState

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/put/202/retry/200'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.put(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [202]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 202:
            deserialized = self._deserialize('Product', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def put201_creating_succeeded200(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running put request, service returns a 201 to the initial
        request, with an entity that contains ProvisioningState=’Creating’.
        Polls return this value until the last poll returns a ‘200’ with
        ProvisioningState=’Succeeded’

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/put/201/creating/succeeded/200'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.put(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [200, 201]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Product', response)
        if response.status_code == 201:
            deserialized = self._deserialize('Product', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def begin_put201_creating_succeeded200(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running put request, service returns a 201 to the initial
        request, with an entity that contains ProvisioningState=’Creating’.
        Polls return this value until the last poll returns a ‘200’ with
        ProvisioningState=’Succeeded’

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/put/201/creating/succeeded/200'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.put(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [200, 201]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Product', response)
        if response.status_code == 201:
            deserialized = self._deserialize('Product', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def put200_updating_succeeded204(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running put request, service returns a 201 to the initial
        request, with an entity that contains ProvisioningState=’Updating’.
        Polls return this value until the last poll returns a ‘200’ with
        ProvisioningState=’Succeeded’

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/put/200/updating/succeeded/200'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.put(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [200]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Product', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def begin_put200_updating_succeeded204(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running put request, service returns a 201 to the initial
        request, with an entity that contains ProvisioningState=’Updating’.
        Polls return this value until the last poll returns a ‘200’ with
        ProvisioningState=’Succeeded’

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/put/200/updating/succeeded/200'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.put(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [200]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Product', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def put201_creating_failed200(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running put request, service returns a 201 to the initial
        request, with an entity that contains ProvisioningState=’Created’.
        Polls return this value until the last poll returns a ‘200’ with
        ProvisioningState=’Failed’

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/put/201/created/failed/200'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.put(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [200, 201]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Product', response)
        if response.status_code == 201:
            deserialized = self._deserialize('Product', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def begin_put201_creating_failed200(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running put request, service returns a 201 to the initial
        request, with an entity that contains ProvisioningState=’Created’.
        Polls return this value until the last poll returns a ‘200’ with
        ProvisioningState=’Failed’

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/put/201/created/failed/200'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.put(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [200, 201]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Product', response)
        if response.status_code == 201:
            deserialized = self._deserialize('Product', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def put200_acceptedcanceled200(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running put request, service returns a 201 to the initial
        request, with an entity that contains ProvisioningState=’Creating’.
        Polls return this value until the last poll returns a ‘200’ with
        ProvisioningState=’Canceled’

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/put/200/accepted/canceled/200'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.put(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [200]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Product', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def begin_put200_acceptedcanceled200(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running put request, service returns a 201 to the initial
        request, with an entity that contains ProvisioningState=’Creating’.
        Polls return this value until the last poll returns a ‘200’ with
        ProvisioningState=’Canceled’

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/put/200/accepted/canceled/200'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.put(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [200]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Product', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def put_no_header_in_retry(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running put request, service returns a 202 to the initial request
        with location header. Subsequent calls to operation status do not
        contain location header.

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/put/noheader/202/200'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.put(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [202]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 202:
            deserialized = self._deserialize('Product', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def begin_put_no_header_in_retry(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running put request, service returns a 202 to the initial request
        with location header. Subsequent calls to operation status do not
        contain location header.

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/put/noheader/202/200'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.put(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [202]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 202:
            deserialized = self._deserialize('Product', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def put_async_retry_succeeded(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running put request, service returns a 200 to the initial
        request, with an entity that contains ProvisioningState=’Creating’.
        Poll the endpoint indicated in the Azure-AsyncOperation header for
        operation status

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/putasync/retry/succeeded'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.put(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [200]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Product', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def begin_put_async_retry_succeeded(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running put request, service returns a 200 to the initial
        request, with an entity that contains ProvisioningState=’Creating’.
        Poll the endpoint indicated in the Azure-AsyncOperation header for
        operation status

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/putasync/retry/succeeded'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.put(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [200]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Product', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def put_async_no_retry_succeeded(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running put request, service returns a 200 to the initial
        request, with an entity that contains ProvisioningState=’Creating’.
        Poll the endpoint indicated in the Azure-AsyncOperation header for
        operation status

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/putasync/noretry/succeeded'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.put(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [200]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Product', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def begin_put_async_no_retry_succeeded(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running put request, service returns a 200 to the initial
        request, with an entity that contains ProvisioningState=’Creating’.
        Poll the endpoint indicated in the Azure-AsyncOperation header for
        operation status

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/putasync/noretry/succeeded'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.put(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [200]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Product', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def put_async_retry_failed(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running put request, service returns a 200 to the initial
        request, with an entity that contains ProvisioningState=’Creating’.
        Poll the endpoint indicated in the Azure-AsyncOperation header for
        operation status

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/putasync/retry/failed'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.put(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [200]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Product', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def begin_put_async_retry_failed(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running put request, service returns a 200 to the initial
        request, with an entity that contains ProvisioningState=’Creating’.
        Poll the endpoint indicated in the Azure-AsyncOperation header for
        operation status

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/putasync/retry/failed'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.put(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [200]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Product', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def put_async_no_retrycanceled(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running put request, service returns a 200 to the initial
        request, with an entity that contains ProvisioningState=’Creating’.
        Poll the endpoint indicated in the Azure-AsyncOperation header for
        operation status

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/putasync/noretry/canceled'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.put(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [200]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Product', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def begin_put_async_no_retrycanceled(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running put request, service returns a 200 to the initial
        request, with an entity that contains ProvisioningState=’Creating’.
        Poll the endpoint indicated in the Azure-AsyncOperation header for
        operation status

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/putasync/noretry/canceled'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.put(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [200]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Product', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def put_async_no_header_in_retry(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running put request, service returns a 202 to the initial request
        with Azure-AsyncOperation header. Subsequent calls to operation
        status do not contain Azure-AsyncOperation header.

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/putasync/noheader/201/200'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.put(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [201]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 201:
            deserialized = self._deserialize('Product', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def begin_put_async_no_header_in_retry(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running put request, service returns a 202 to the initial request
        with Azure-AsyncOperation header. Subsequent calls to operation
        status do not contain Azure-AsyncOperation header.

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/putasync/noheader/201/200'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.put(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [201]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 201:
            deserialized = self._deserialize('Product', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def put_non_resource(self, sku, custom_headers={}, raw=False, callback=None):
        """

        Long running put request with non resource.

        :param sku: sku to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type sku: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/putnonresource/202/200'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(sku, 'Sku')

        # Construct and send request
        request = self._client.put(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [202]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 202:
            deserialized = self._deserialize('Sku', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def begin_put_non_resource(self, sku, custom_headers={}, raw=False, callback=None):
        """

        Long running put request with non resource.

        :param sku: sku to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type sku: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/putnonresource/202/200'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(sku, 'Sku')

        # Construct and send request
        request = self._client.put(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [202]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 202:
            deserialized = self._deserialize('Sku', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def put_async_non_resource(self, sku, custom_headers={}, raw=False, callback=None):
        """

        Long running put request with non resource.

        :param sku: Sku to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type sku: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/putnonresourceasync/202/200'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(sku, 'Sku')

        # Construct and send request
        request = self._client.put(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [202]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 202:
            deserialized = self._deserialize('Sku', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def begin_put_async_non_resource(self, sku, custom_headers={}, raw=False, callback=None):
        """

        Long running put request with non resource.

        :param sku: Sku to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type sku: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/putnonresourceasync/202/200'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(sku, 'Sku')

        # Construct and send request
        request = self._client.put(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [202]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 202:
            deserialized = self._deserialize('Sku', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def put_sub_resource(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running put request with sub resource.

        :param product: Sub Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/putsubresource/202/200'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'SubProduct')

        # Construct and send request
        request = self._client.put(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [202]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 202:
            deserialized = self._deserialize('SubProduct', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def begin_put_sub_resource(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running put request with sub resource.

        :param product: Sub Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/putsubresource/202/200'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'SubProduct')

        # Construct and send request
        request = self._client.put(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [202]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 202:
            deserialized = self._deserialize('SubProduct', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def put_async_sub_resource(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running put request with sub resource.

        :param product: Sub Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/putsubresourceasync/202/200'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'SubProduct')

        # Construct and send request
        request = self._client.put(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [202]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 202:
            deserialized = self._deserialize('SubProduct', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def begin_put_async_sub_resource(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running put request with sub resource.

        :param product: Sub Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/putsubresourceasync/202/200'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'SubProduct')

        # Construct and send request
        request = self._client.put(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [202]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 202:
            deserialized = self._deserialize('SubProduct', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def delete_provisioning202_accepted200_succeeded(self, custom_headers={}, raw=False, callback=None):
        """

        Long running delete request, service returns a 202 to the initial
        request, with an entity that contains ProvisioningState=’Accepted’.
        Polls return this value until the last poll returns a ‘200’ with
        ProvisioningState=’Succeeded’

        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/delete/provisioning/202/accepted/200/succeeded'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.delete(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200, 202]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Product', response)
        if response.status_code == 202:
            deserialized = self._deserialize('Product', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def begin_delete_provisioning202_accepted200_succeeded(self, custom_headers={}, raw=False, callback=None):
        """

        Long running delete request, service returns a 202 to the initial
        request, with an entity that contains ProvisioningState=’Accepted’.
        Polls return this value until the last poll returns a ‘200’ with
        ProvisioningState=’Succeeded’

        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/delete/provisioning/202/accepted/200/succeeded'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.delete(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200, 202]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Product', response)
        if response.status_code == 202:
            deserialized = self._deserialize('Product', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def delete_provisioning202_deleting_failed200(self, custom_headers={}, raw=False, callback=None):
        """

        Long running delete request, service returns a 202 to the initial
        request, with an entity that contains ProvisioningState=’Creating’.
        Polls return this value until the last poll returns a ‘200’ with
        ProvisioningState=’Failed’

        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/delete/provisioning/202/deleting/200/failed'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.delete(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200, 202]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Product', response)
        if response.status_code == 202:
            deserialized = self._deserialize('Product', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def begin_delete_provisioning202_deleting_failed200(self, custom_headers={}, raw=False, callback=None):
        """

        Long running delete request, service returns a 202 to the initial
        request, with an entity that contains ProvisioningState=’Creating’.
        Polls return this value until the last poll returns a ‘200’ with
        ProvisioningState=’Failed’

        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/delete/provisioning/202/deleting/200/failed'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.delete(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200, 202]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Product', response)
        if response.status_code == 202:
            deserialized = self._deserialize('Product', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def delete_provisioning202_deletingcanceled200(self, custom_headers={}, raw=False, callback=None):
        """

        Long running delete request, service returns a 202 to the initial
        request, with an entity that contains ProvisioningState=’Creating’.
        Polls return this value until the last poll returns a ‘200’ with
        ProvisioningState=’Canceled’

        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/delete/provisioning/202/deleting/200/canceled'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.delete(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200, 202]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Product', response)
        if response.status_code == 202:
            deserialized = self._deserialize('Product', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def begin_delete_provisioning202_deletingcanceled200(self, custom_headers={}, raw=False, callback=None):
        """

        Long running delete request, service returns a 202 to the initial
        request, with an entity that contains ProvisioningState=’Creating’.
        Polls return this value until the last poll returns a ‘200’ with
        ProvisioningState=’Canceled’

        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/delete/provisioning/202/deleting/200/canceled'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.delete(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200, 202]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Product', response)
        if response.status_code == 202:
            deserialized = self._deserialize('Product', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def delete204_succeeded(self, custom_headers={}, raw=False, callback=None):
        """

        Long running delete succeeds and returns right away

        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/delete/204/succeeded'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.delete(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [204]:
            raise CloudException(self._deserialize, response)

        if raw:
            return None, response

    @async_request
    def begin_delete204_succeeded(self, custom_headers={}, raw=False, callback=None):
        """

        Long running delete succeeds and returns right away

        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/delete/204/succeeded'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.delete(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [204]:
            raise CloudException(self._deserialize, response)

        if raw:
            return None, response

    @async_request
    def delete202_retry200(self, custom_headers={}, raw=False, callback=None):
        """

        Long running delete request, service returns a 202 to the initial
        request. Polls return this value until the last poll returns a ‘200’
        with ProvisioningState=’Succeeded’

        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/delete/202/retry/200'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.delete(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200, 202]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Product', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def begin_delete202_retry200(self, custom_headers={}, raw=False, callback=None):
        """

        Long running delete request, service returns a 202 to the initial
        request. Polls return this value until the last poll returns a ‘200’
        with ProvisioningState=’Succeeded’

        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/delete/202/retry/200'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.delete(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200, 202]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Product', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def delete202_no_retry204(self, custom_headers={}, raw=False, callback=None):
        """

        Long running delete request, service returns a 202 to the initial
        request. Polls return this value until the last poll returns a ‘200’
        with ProvisioningState=’Succeeded’

        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/delete/202/noretry/204'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.delete(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200, 202]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Product', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def begin_delete202_no_retry204(self, custom_headers={}, raw=False, callback=None):
        """

        Long running delete request, service returns a 202 to the initial
        request. Polls return this value until the last poll returns a ‘200’
        with ProvisioningState=’Succeeded’

        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/delete/202/noretry/204'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.delete(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200, 202]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Product', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def delete_no_header_in_retry(self, custom_headers={}, raw=False, callback=None):
        """

        Long running delete request, service returns a location header in the
        initial request. Subsequent calls to operation status do not contain
        location header.

        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/delete/noheader'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.delete(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [204, 202]:
            raise CloudException(self._deserialize, response)

        if raw:
            return None, response

    @async_request
    def begin_delete_no_header_in_retry(self, custom_headers={}, raw=False, callback=None):
        """

        Long running delete request, service returns a location header in the
        initial request. Subsequent calls to operation status do not contain
        location header.

        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/delete/noheader'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.delete(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [204, 202]:
            raise CloudException(self._deserialize, response)

        if raw:
            return None, response

    @async_request
    def delete_async_no_header_in_retry(self, custom_headers={}, raw=False, callback=None):
        """

        Long running delete request, service returns an Azure-AsyncOperation
        header in the initial request. Subsequent calls to operation status
        do not contain Azure-AsyncOperation header.

        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/deleteasync/noheader/202/204'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.delete(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [204, 202]:
            raise CloudException(self._deserialize, response)

        if raw:
            return None, response

    @async_request
    def begin_delete_async_no_header_in_retry(self, custom_headers={}, raw=False, callback=None):
        """

        Long running delete request, service returns an Azure-AsyncOperation
        header in the initial request. Subsequent calls to operation status
        do not contain Azure-AsyncOperation header.

        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/deleteasync/noheader/202/204'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.delete(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [204, 202]:
            raise CloudException(self._deserialize, response)

        if raw:
            return None, response

    @async_request
    def delete_async_retry_succeeded(self, custom_headers={}, raw=False, callback=None):
        """

        Long running delete request, service returns a 202 to the initial
        request. Poll the endpoint indicated in the Azure-AsyncOperation
        header for operation status

        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/deleteasync/retry/succeeded'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.delete(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [202]:
            raise CloudException(self._deserialize, response)

        if raw:
            return None, response

    @async_request
    def begin_delete_async_retry_succeeded(self, custom_headers={}, raw=False, callback=None):
        """

        Long running delete request, service returns a 202 to the initial
        request. Poll the endpoint indicated in the Azure-AsyncOperation
        header for operation status

        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/deleteasync/retry/succeeded'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.delete(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [202]:
            raise CloudException(self._deserialize, response)

        if raw:
            return None, response

    @async_request
    def delete_async_no_retry_succeeded(self, custom_headers={}, raw=False, callback=None):
        """

        Long running delete request, service returns a 202 to the initial
        request. Poll the endpoint indicated in the Azure-AsyncOperation
        header for operation status

        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/deleteasync/noretry/succeeded'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.delete(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [202]:
            raise CloudException(self._deserialize, response)

        if raw:
            return None, response

    @async_request
    def begin_delete_async_no_retry_succeeded(self, custom_headers={}, raw=False, callback=None):
        """

        Long running delete request, service returns a 202 to the initial
        request. Poll the endpoint indicated in the Azure-AsyncOperation
        header for operation status

        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/deleteasync/noretry/succeeded'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.delete(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [202]:
            raise CloudException(self._deserialize, response)

        if raw:
            return None, response

    @async_request
    def delete_async_retry_failed(self, custom_headers={}, raw=False, callback=None):
        """

        Long running delete request, service returns a 202 to the initial
        request. Poll the endpoint indicated in the Azure-AsyncOperation
        header for operation status

        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/deleteasync/retry/failed'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.delete(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [202]:
            raise CloudException(self._deserialize, response)

        if raw:
            return None, response

    @async_request
    def begin_delete_async_retry_failed(self, custom_headers={}, raw=False, callback=None):
        """

        Long running delete request, service returns a 202 to the initial
        request. Poll the endpoint indicated in the Azure-AsyncOperation
        header for operation status

        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/deleteasync/retry/failed'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.delete(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [202]:
            raise CloudException(self._deserialize, response)

        if raw:
            return None, response

    @async_request
    def delete_async_retrycanceled(self, custom_headers={}, raw=False, callback=None):
        """

        Long running delete request, service returns a 202 to the initial
        request. Poll the endpoint indicated in the Azure-AsyncOperation
        header for operation status

        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/deleteasync/retry/canceled'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.delete(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [202]:
            raise CloudException(self._deserialize, response)

        if raw:
            return None, response

    @async_request
    def begin_delete_async_retrycanceled(self, custom_headers={}, raw=False, callback=None):
        """

        Long running delete request, service returns a 202 to the initial
        request. Poll the endpoint indicated in the Azure-AsyncOperation
        header for operation status

        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/deleteasync/retry/canceled'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.delete(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [202]:
            raise CloudException(self._deserialize, response)

        if raw:
            return None, response

    @async_request
    def post200_with_payload(self, custom_headers={}, raw=False, callback=None):
        """

        Long running post request, service returns a 202 to the initial
        request, with 'Location' header. Poll returns a 200 with a response
        body after success.

        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/post/payload/200'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [202, 200]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 202:
            deserialized = self._deserialize('Sku', response)
        if response.status_code == 200:
            deserialized = self._deserialize('Sku', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def begin_post200_with_payload(self, custom_headers={}, raw=False, callback=None):
        """

        Long running post request, service returns a 202 to the initial
        request, with 'Location' header. Poll returns a 200 with a response
        body after success.

        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/post/payload/200'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [202, 200]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 202:
            deserialized = self._deserialize('Sku', response)
        if response.status_code == 200:
            deserialized = self._deserialize('Sku', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def post202_retry200(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running post request, service returns a 202 to the initial
        request, with 'Location' and 'Retry-After' headers, Polls return a
        200 with a response body after success

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/post/202/retry/200'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [202]:
            raise CloudException(self._deserialize, response)

        if raw:
            return None, response

    @async_request
    def begin_post202_retry200(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running post request, service returns a 202 to the initial
        request, with 'Location' and 'Retry-After' headers, Polls return a
        200 with a response body after success

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/post/202/retry/200'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [202]:
            raise CloudException(self._deserialize, response)

        if raw:
            return None, response

    @async_request
    def post202_no_retry204(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running post request, service returns a 202 to the initial
        request, with 'Location' header, 204 with noresponse body after
        success

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/post/202/noretry/204'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [202]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 202:
            deserialized = self._deserialize('Product', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def begin_post202_no_retry204(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running post request, service returns a 202 to the initial
        request, with 'Location' header, 204 with noresponse body after
        success

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/post/202/noretry/204'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [202]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 202:
            deserialized = self._deserialize('Product', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def post_async_retry_succeeded(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running post request, service returns a 202 to the initial
        request, with an entity that contains ProvisioningState=’Creating’.
        Poll the endpoint indicated in the Azure-AsyncOperation header for
        operation status

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/postasync/retry/succeeded'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [202, 200]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Product', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def begin_post_async_retry_succeeded(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running post request, service returns a 202 to the initial
        request, with an entity that contains ProvisioningState=’Creating’.
        Poll the endpoint indicated in the Azure-AsyncOperation header for
        operation status

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/postasync/retry/succeeded'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [202, 200]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Product', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def post_async_no_retry_succeeded(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running post request, service returns a 202 to the initial
        request, with an entity that contains ProvisioningState=’Creating’.
        Poll the endpoint indicated in the Azure-AsyncOperation header for
        operation status

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/postasync/noretry/succeeded'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [202, 200]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Product', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def begin_post_async_no_retry_succeeded(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running post request, service returns a 202 to the initial
        request, with an entity that contains ProvisioningState=’Creating’.
        Poll the endpoint indicated in the Azure-AsyncOperation header for
        operation status

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/postasync/noretry/succeeded'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [202, 200]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Product', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def post_async_retry_failed(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running post request, service returns a 202 to the initial
        request, with an entity that contains ProvisioningState=’Creating’.
        Poll the endpoint indicated in the Azure-AsyncOperation header for
        operation status

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/postasync/retry/failed'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [202]:
            raise CloudException(self._deserialize, response)

        if raw:
            return None, response

    @async_request
    def begin_post_async_retry_failed(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running post request, service returns a 202 to the initial
        request, with an entity that contains ProvisioningState=’Creating’.
        Poll the endpoint indicated in the Azure-AsyncOperation header for
        operation status

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/postasync/retry/failed'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [202]:
            raise CloudException(self._deserialize, response)

        if raw:
            return None, response

    @async_request
    def post_async_retrycanceled(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running post request, service returns a 202 to the initial
        request, with an entity that contains ProvisioningState=’Creating’.
        Poll the endpoint indicated in the Azure-AsyncOperation header for
        operation status

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/postasync/retry/canceled'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [202]:
            raise CloudException(self._deserialize, response)

        if raw:
            return None, response

    @async_request
    def begin_post_async_retrycanceled(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running post request, service returns a 202 to the initial
        request, with an entity that contains ProvisioningState=’Creating’.
        Poll the endpoint indicated in the Azure-AsyncOperation header for
        operation status

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/postasync/retry/canceled'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize.serialize_data(self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [202]:
            raise CloudException(self._deserialize, response)

        if raw:
            return None, response
