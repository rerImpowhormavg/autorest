# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator 0.13.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Serializer, Deserializer
from msrest.service_client import async_request
from msrest.exceptions import (
    DeserializationError,
    HttpOperationError)
import uuid

from ..models import *


class lrosa_dsOperations(object):

    def __init__(self, client, config, serializer, derserializer):

        self._client = client
        self._serialize = serializer
        self._deserialize = derserializer

        self.config = config

    def _serialize_data(self, name, value, datatype, **kwargs):

        try:
            value = self._serialize.serialize_data(value, datatype, **kwargs)

        except ValueError:
            raise ValueError("{} must not be None.".format(name))

        except DeserializationError:
            raise TypeError("{} must be type {}.".format(name, datatype))

        else:
            return value

    @async_request
    def put_non_retry400(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running put request, service returns a 400 to the initial request

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/nonretryerror/put/400'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize_data("self.config.accept_language", self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.put(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [200, 201]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Product', response)
        if response.status_code == 201:
            deserialized = self._deserialize('Product', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def begin_put_non_retry400(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running put request, service returns a 400 to the initial request

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/nonretryerror/put/400'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize_data("self.config.accept_language", self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.put(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [200, 201]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Product', response)
        if response.status_code == 201:
            deserialized = self._deserialize('Product', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def put_non_retry201_creating400(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running put request, service returns a Product with
        'ProvisioningState' = 'Creating' and 201 response code

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/nonretryerror/put/201/creating/400'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize_data("self.config.accept_language", self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.put(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [200, 201]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Product', response)
        if response.status_code == 201:
            deserialized = self._deserialize('Product', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def begin_put_non_retry201_creating400(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running put request, service returns a Product with
        'ProvisioningState' = 'Creating' and 201 response code

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/nonretryerror/put/201/creating/400'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize_data("self.config.accept_language", self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.put(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [200, 201]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Product', response)
        if response.status_code == 201:
            deserialized = self._deserialize('Product', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def put_async_relative_retry400(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running put request, service returns a 200 with
        ProvisioningState=’Creating’. Poll the endpoint indicated in the
        Azure-AsyncOperation header for operation status

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/nonretryerror/putasync/retry/400'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize_data("self.config.accept_language", self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.put(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [200]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Product', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def begin_put_async_relative_retry400(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running put request, service returns a 200 with
        ProvisioningState=’Creating’. Poll the endpoint indicated in the
        Azure-AsyncOperation header for operation status

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/nonretryerror/putasync/retry/400'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize_data("self.config.accept_language", self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.put(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [200]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Product', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def delete_non_retry400(self, custom_headers={}, raw=False, callback=None):
        """

        Long running delete request, service returns a 400 with an error body

        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/nonretryerror/delete/400'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize_data("self.config.accept_language", self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.delete(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [202]:
            raise CloudException(self._deserialize, response)

        if raw:
            return None, response

    @async_request
    def begin_delete_non_retry400(self, custom_headers={}, raw=False, callback=None):
        """

        Long running delete request, service returns a 400 with an error body

        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/nonretryerror/delete/400'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize_data("self.config.accept_language", self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.delete(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [202]:
            raise CloudException(self._deserialize, response)

        if raw:
            return None, response

    @async_request
    def delete202_non_retry400(self, custom_headers={}, raw=False, callback=None):
        """

        Long running delete request, service returns a 202 with a location
        header

        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/nonretryerror/delete/202/retry/400'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize_data("self.config.accept_language", self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.delete(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [202]:
            raise CloudException(self._deserialize, response)

        if raw:
            return None, response

    @async_request
    def begin_delete202_non_retry400(self, custom_headers={}, raw=False, callback=None):
        """

        Long running delete request, service returns a 202 with a location
        header

        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/nonretryerror/delete/202/retry/400'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize_data("self.config.accept_language", self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.delete(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [202]:
            raise CloudException(self._deserialize, response)

        if raw:
            return None, response

    @async_request
    def delete_async_relative_retry400(self, custom_headers={}, raw=False, callback=None):
        """

        Long running delete request, service returns a 202 to the initial
        request. Poll the endpoint indicated in the Azure-AsyncOperation
        header for operation status

        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/nonretryerror/deleteasync/retry/400'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize_data("self.config.accept_language", self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.delete(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [202]:
            raise CloudException(self._deserialize, response)

        if raw:
            return None, response

    @async_request
    def begin_delete_async_relative_retry400(self, custom_headers={}, raw=False, callback=None):
        """

        Long running delete request, service returns a 202 to the initial
        request. Poll the endpoint indicated in the Azure-AsyncOperation
        header for operation status

        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/nonretryerror/deleteasync/retry/400'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize_data("self.config.accept_language", self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.delete(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [202]:
            raise CloudException(self._deserialize, response)

        if raw:
            return None, response

    @async_request
    def post_non_retry400(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running post request, service returns a 400 with no error body

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/nonretryerror/post/400'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize_data("self.config.accept_language", self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [202]:
            raise CloudException(self._deserialize, response)

        if raw:
            return None, response

    @async_request
    def begin_post_non_retry400(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running post request, service returns a 400 with no error body

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/nonretryerror/post/400'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize_data("self.config.accept_language", self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [202]:
            raise CloudException(self._deserialize, response)

        if raw:
            return None, response

    @async_request
    def post202_non_retry400(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running post request, service returns a 202 with a location header

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/nonretryerror/post/202/retry/400'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize_data("self.config.accept_language", self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [202]:
            raise CloudException(self._deserialize, response)

        if raw:
            return None, response

    @async_request
    def begin_post202_non_retry400(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running post request, service returns a 202 with a location header

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/nonretryerror/post/202/retry/400'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize_data("self.config.accept_language", self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [202]:
            raise CloudException(self._deserialize, response)

        if raw:
            return None, response

    @async_request
    def post_async_relative_retry400(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running post request, service returns a 202 to the initial
        request Poll the endpoint indicated in the Azure-AsyncOperation
        header for operation status

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/nonretryerror/postasync/retry/400'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize_data("self.config.accept_language", self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [202]:
            raise CloudException(self._deserialize, response)

        if raw:
            return None, response

    @async_request
    def begin_post_async_relative_retry400(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running post request, service returns a 202 to the initial
        request Poll the endpoint indicated in the Azure-AsyncOperation
        header for operation status

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/nonretryerror/postasync/retry/400'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize_data("self.config.accept_language", self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [202]:
            raise CloudException(self._deserialize, response)

        if raw:
            return None, response

    @async_request
    def put_error201_no_provisioning_state_payload(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running put request, service returns a 201 to the initial request
        with no payload

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/error/put/201/noprovisioningstatepayload'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize_data("self.config.accept_language", self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.put(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [200, 201]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Product', response)
        if response.status_code == 201:
            deserialized = self._deserialize('Product', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def begin_put_error201_no_provisioning_state_payload(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running put request, service returns a 201 to the initial request
        with no payload

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/error/put/201/noprovisioningstatepayload'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize_data("self.config.accept_language", self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.put(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [200, 201]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Product', response)
        if response.status_code == 201:
            deserialized = self._deserialize('Product', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def put_async_relative_retry_no_status(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running put request, service returns a 200 to the initial
        request, with an entity that contains ProvisioningState=’Creating’.
        Poll the endpoint indicated in the Azure-AsyncOperation header for
        operation status

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/error/putasync/retry/nostatus'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize_data("self.config.accept_language", self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.put(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [200]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Product', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def begin_put_async_relative_retry_no_status(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running put request, service returns a 200 to the initial
        request, with an entity that contains ProvisioningState=’Creating’.
        Poll the endpoint indicated in the Azure-AsyncOperation header for
        operation status

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/error/putasync/retry/nostatus'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize_data("self.config.accept_language", self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.put(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [200]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Product', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def put_async_relative_retry_no_status_payload(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running put request, service returns a 200 to the initial
        request, with an entity that contains ProvisioningState=’Creating’.
        Poll the endpoint indicated in the Azure-AsyncOperation header for
        operation status

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/error/putasync/retry/nostatuspayload'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize_data("self.config.accept_language", self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.put(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [200]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Product', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def begin_put_async_relative_retry_no_status_payload(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running put request, service returns a 200 to the initial
        request, with an entity that contains ProvisioningState=’Creating’.
        Poll the endpoint indicated in the Azure-AsyncOperation header for
        operation status

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/error/putasync/retry/nostatuspayload'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize_data("self.config.accept_language", self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.put(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [200]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Product', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def delete204_succeeded(self, custom_headers={}, raw=False, callback=None):
        """

        Long running delete request, service returns a 204 to the initial
        request, indicating success.

        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/error/delete/204/nolocation'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize_data("self.config.accept_language", self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.delete(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [204]:
            raise CloudException(self._deserialize, response)

        if raw:
            return None, response

    @async_request
    def begin_delete204_succeeded(self, custom_headers={}, raw=False, callback=None):
        """

        Long running delete request, service returns a 204 to the initial
        request, indicating success.

        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/error/delete/204/nolocation'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize_data("self.config.accept_language", self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.delete(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [204]:
            raise CloudException(self._deserialize, response)

        if raw:
            return None, response

    @async_request
    def delete_async_relative_retry_no_status(self, custom_headers={}, raw=False, callback=None):
        """

        Long running delete request, service returns a 202 to the initial
        request. Poll the endpoint indicated in the Azure-AsyncOperation
        header for operation status

        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/error/deleteasync/retry/nostatus'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize_data("self.config.accept_language", self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.delete(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [202]:
            raise CloudException(self._deserialize, response)

        if raw:
            return None, response

    @async_request
    def begin_delete_async_relative_retry_no_status(self, custom_headers={}, raw=False, callback=None):
        """

        Long running delete request, service returns a 202 to the initial
        request. Poll the endpoint indicated in the Azure-AsyncOperation
        header for operation status

        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/error/deleteasync/retry/nostatus'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize_data("self.config.accept_language", self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.delete(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [202]:
            raise CloudException(self._deserialize, response)

        if raw:
            return None, response

    @async_request
    def post202_no_location(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running post request, service returns a 202 to the initial
        request, without a location header.

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/error/post/202/nolocation'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize_data("self.config.accept_language", self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [202]:
            raise CloudException(self._deserialize, response)

        if raw:
            return None, response

    @async_request
    def begin_post202_no_location(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running post request, service returns a 202 to the initial
        request, without a location header.

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/error/post/202/nolocation'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize_data("self.config.accept_language", self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [202]:
            raise CloudException(self._deserialize, response)

        if raw:
            return None, response

    @async_request
    def post_async_relative_retry_no_payload(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running post request, service returns a 202 to the initial
        request, with an entity that contains ProvisioningState=’Creating’.
        Poll the endpoint indicated in the Azure-AsyncOperation header for
        operation status

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/error/postasync/retry/nopayload'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize_data("self.config.accept_language", self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [202]:
            raise CloudException(self._deserialize, response)

        if raw:
            return None, response

    @async_request
    def begin_post_async_relative_retry_no_payload(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running post request, service returns a 202 to the initial
        request, with an entity that contains ProvisioningState=’Creating’.
        Poll the endpoint indicated in the Azure-AsyncOperation header for
        operation status

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/error/postasync/retry/nopayload'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize_data("self.config.accept_language", self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [202]:
            raise CloudException(self._deserialize, response)

        if raw:
            return None, response

    @async_request
    def put200_invalid_json(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running put request, service returns a 200 to the initial
        request, with an entity that is not a valid json

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/error/put/200/invalidjson'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize_data("self.config.accept_language", self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.put(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [200, 204]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Product', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def begin_put200_invalid_json(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running put request, service returns a 200 to the initial
        request, with an entity that is not a valid json

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/error/put/200/invalidjson'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize_data("self.config.accept_language", self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.put(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [200, 204]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Product', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def put_async_relative_retry_invalid_header(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running put request, service returns a 200 to the initial
        request, with an entity that contains ProvisioningState=’Creating’.
        The endpoint indicated in the Azure-AsyncOperation header is invalid.

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/error/putasync/retry/invalidheader'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize_data("self.config.accept_language", self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.put(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [200]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Product', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def begin_put_async_relative_retry_invalid_header(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running put request, service returns a 200 to the initial
        request, with an entity that contains ProvisioningState=’Creating’.
        The endpoint indicated in the Azure-AsyncOperation header is invalid.

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/error/putasync/retry/invalidheader'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize_data("self.config.accept_language", self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.put(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [200]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Product', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def put_async_relative_retry_invalid_json_polling(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running put request, service returns a 200 to the initial
        request, with an entity that contains ProvisioningState=’Creating’.
        Poll the endpoint indicated in the Azure-AsyncOperation header for
        operation status

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/error/putasync/retry/invalidjsonpolling'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize_data("self.config.accept_language", self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.put(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [200]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Product', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def begin_put_async_relative_retry_invalid_json_polling(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running put request, service returns a 200 to the initial
        request, with an entity that contains ProvisioningState=’Creating’.
        Poll the endpoint indicated in the Azure-AsyncOperation header for
        operation status

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/error/putasync/retry/invalidjsonpolling'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize_data("self.config.accept_language", self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.put(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [200]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Product', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def delete202_retry_invalid_header(self, custom_headers={}, raw=False, callback=None):
        """

        Long running delete request, service returns a 202 to the initial
        request receing a reponse with an invalid 'Location' and
        'Retry-After' headers

        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/error/delete/202/retry/invalidheader'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize_data("self.config.accept_language", self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.delete(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [202]:
            raise CloudException(self._deserialize, response)

        if raw:
            return None, response

    @async_request
    def begin_delete202_retry_invalid_header(self, custom_headers={}, raw=False, callback=None):
        """

        Long running delete request, service returns a 202 to the initial
        request receing a reponse with an invalid 'Location' and
        'Retry-After' headers

        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/error/delete/202/retry/invalidheader'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize_data("self.config.accept_language", self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.delete(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [202]:
            raise CloudException(self._deserialize, response)

        if raw:
            return None, response

    @async_request
    def delete_async_relative_retry_invalid_header(self, custom_headers={}, raw=False, callback=None):
        """

        Long running delete request, service returns a 202 to the initial
        request. The endpoint indicated in the Azure-AsyncOperation header is
        invalid

        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/error/deleteasync/retry/invalidheader'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize_data("self.config.accept_language", self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.delete(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [202]:
            raise CloudException(self._deserialize, response)

        if raw:
            return None, response

    @async_request
    def begin_delete_async_relative_retry_invalid_header(self, custom_headers={}, raw=False, callback=None):
        """

        Long running delete request, service returns a 202 to the initial
        request. The endpoint indicated in the Azure-AsyncOperation header is
        invalid

        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/error/deleteasync/retry/invalidheader'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize_data("self.config.accept_language", self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.delete(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [202]:
            raise CloudException(self._deserialize, response)

        if raw:
            return None, response

    @async_request
    def delete_async_relative_retry_invalid_json_polling(self, custom_headers={}, raw=False, callback=None):
        """

        Long running delete request, service returns a 202 to the initial
        request. Poll the endpoint indicated in the Azure-AsyncOperation
        header for operation status

        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/error/deleteasync/retry/invalidjsonpolling'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize_data("self.config.accept_language", self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.delete(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [202]:
            raise CloudException(self._deserialize, response)

        if raw:
            return None, response

    @async_request
    def begin_delete_async_relative_retry_invalid_json_polling(self, custom_headers={}, raw=False, callback=None):
        """

        Long running delete request, service returns a 202 to the initial
        request. Poll the endpoint indicated in the Azure-AsyncOperation
        header for operation status

        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/error/deleteasync/retry/invalidjsonpolling'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize_data("self.config.accept_language", self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.delete(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [202]:
            raise CloudException(self._deserialize, response)

        if raw:
            return None, response

    @async_request
    def post202_retry_invalid_header(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running post request, service returns a 202 to the initial
        request, with invalid 'Location' and 'Retry-After' headers.

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/error/post/202/retry/invalidheader'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize_data("self.config.accept_language", self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [202]:
            raise CloudException(self._deserialize, response)

        if raw:
            return None, response

    @async_request
    def begin_post202_retry_invalid_header(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running post request, service returns a 202 to the initial
        request, with invalid 'Location' and 'Retry-After' headers.

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/error/post/202/retry/invalidheader'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize_data("self.config.accept_language", self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [202]:
            raise CloudException(self._deserialize, response)

        if raw:
            return None, response

    @async_request
    def post_async_relative_retry_invalid_header(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running post request, service returns a 202 to the initial
        request, with an entity that contains ProvisioningState=’Creating’.
        The endpoint indicated in the Azure-AsyncOperation header is invalid.

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/error/postasync/retry/invalidheader'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize_data("self.config.accept_language", self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [202]:
            raise CloudException(self._deserialize, response)

        if raw:
            return None, response

    @async_request
    def begin_post_async_relative_retry_invalid_header(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running post request, service returns a 202 to the initial
        request, with an entity that contains ProvisioningState=’Creating’.
        The endpoint indicated in the Azure-AsyncOperation header is invalid.

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/error/postasync/retry/invalidheader'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize_data("self.config.accept_language", self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [202]:
            raise CloudException(self._deserialize, response)

        if raw:
            return None, response

    @async_request
    def post_async_relative_retry_invalid_json_polling(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running post request, service returns a 202 to the initial
        request, with an entity that contains ProvisioningState=’Creating’.
        Poll the endpoint indicated in the Azure-AsyncOperation header for
        operation status

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/error/postasync/retry/invalidjsonpolling'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize_data("self.config.accept_language", self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [202]:
            raise CloudException(self._deserialize, response)

        if raw:
            return None, response

    @async_request
    def begin_post_async_relative_retry_invalid_json_polling(self, product, custom_headers={}, raw=False, callback=None):
        """

        Long running post request, service returns a 202 to the initial
        request, with an entity that contains ProvisioningState=’Creating’.
        Poll the endpoint indicated in the Azure-AsyncOperation header for
        operation status

        :param product: Product to put
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type product: object or none
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/lro/error/postasync/retry/invalidjsonpolling'

        # Construct parameters
        query = {}

        # Construct headers
        headers = {}
        if self.config.accept_language is not None:
            headers['accept-language'] = self._serialize_data("self.config.accept_language", self.config.accept_language, 'str')
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(product, 'Product')

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [202]:
            raise CloudException(self._deserialize, response)

        if raw:
            return None, response
