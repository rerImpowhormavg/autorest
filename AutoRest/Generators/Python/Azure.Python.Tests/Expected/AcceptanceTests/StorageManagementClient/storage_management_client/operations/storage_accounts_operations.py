# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator 0.13.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

import sys


from msrest.service_client import ServiceClient, async_request
from msrest.serialization import Serializer, Deserializer
from msrest.exceptions import (
    SerializationError,
    DeserializationError,
    TokenExpiredError,
    ClientRequestError,
    HttpOperationError)
import uuid

from ..models import *


class storage_accountsOperations(object):

    def __init__(self, client, config, serializer, derserializer):

        self._client = client
        self._serialize = serializer
        self._deserialize = derserializer

        self.config = config

    def _parse_url(self, name, value, datatype):

        try:
            value = self._serialize.serialize_data(value, str(datatype))

        except ValueError:
            raise ValueError("{} must not be None.".format(name))

        except DeserializationError:
            raise TypeError("{} must be type {}.".format(name, datatype))

        else:
            return value

    @async_request
    def check_name_availability(self, account_name, custom_headers={}, raw=False, callback=None):
        """

        Checks that account name is valid and is not in use.

        :param account_name: The name of the storage account within the
        specified resource group. Storage account names must be between 3 and
        24 characters in length and use numbers and lower-case letters only.
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type account_name: object
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/subscriptions/{subscriptionId}/providers/Microsoft.Storage/checkNameAvailability'
        path_format_arguments = {
            'subscriptionId': self._parse_url("self.config.subscription_id", self.config.subscription_id, 'str', False)}
        url = url.format(**path_format_arguments)

        # Construct parameters
        query = {}
        if self.config.apiversion is not None:
            query['api-version'] = self._parse_url("self.config.apiversion", self.config.apiversion, 'str', False)

        # Construct headers
        headers = {}
        if self.config.acceptlanguage is not None:
            headers['accept-language'] = self.config.acceptlanguage
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(account_name, 'StorageAccountCheckNameAvailabilityParameters')

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [200]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('CheckNameAvailabilityResult', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def create(self, resource_group_name, account_name, parameters, custom_headers={}, raw=False, callback=None):
        """

        Asynchronously creates a new storage account with the specified
        parameters. Existing accounts cannot be updated with this API and
        should instead use the Update Storage Account API. If an account is
        already created and subsequent PUT request is issued with exact same
        set of properties, then HTTP 200 would be returned.

        :param resource_group_name: The name of the resource group within the
        user’s subscription.
        :param account_name: The name of the storage account within the
        specified resource group. Storage account names must be between 3 and
        24 characters in length and use numbers and lower-case letters only.
        :param parameters: The parameters to provide for the created account.
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type resource_group_name: str
        :type account_name: str
        :type parameters: object
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}'
        path_format_arguments = {
            'resourceGroupName': self._parse_url("resource_group_name", resource_group_name, 'str', False),
            'accountName': self._parse_url("account_name", account_name, 'str', False),
            'subscriptionId': self._parse_url("self.config.subscription_id", self.config.subscription_id, 'str', False)}
        url = url.format(**path_format_arguments)

        # Construct parameters
        query = {}
        if self.config.apiversion is not None:
            query['api-version'] = self._parse_url("self.config.apiversion", self.config.apiversion, 'str', False)

        # Construct headers
        headers = {}
        if self.config.acceptlanguage is not None:
            headers['accept-language'] = self.config.acceptlanguage
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(parameters, 'StorageAccountCreateParameters')

        # Construct and send request
        request = self._client.put(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [200, 202]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('StorageAccount', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def begin_create(self, resource_group_name, account_name, parameters, custom_headers={}, raw=False, callback=None):
        """

        Asynchronously creates a new storage account with the specified
        parameters. Existing accounts cannot be updated with this API and
        should instead use the Update Storage Account API. If an account is
        already created and subsequent PUT request is issued with exact same
        set of properties, then HTTP 200 would be returned.

        :param resource_group_name: The name of the resource group within the
        user’s subscription.
        :param account_name: The name of the storage account within the
        specified resource group. Storage account names must be between 3 and
        24 characters in length and use numbers and lower-case letters only.
        :param parameters: The parameters to provide for the created account.
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type resource_group_name: str
        :type account_name: str
        :type parameters: object
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}'
        path_format_arguments = {
            'resourceGroupName': self._parse_url("resource_group_name", resource_group_name, 'str', False),
            'accountName': self._parse_url("account_name", account_name, 'str', False),
            'subscriptionId': self._parse_url("self.config.subscription_id", self.config.subscription_id, 'str', False)}
        url = url.format(**path_format_arguments)

        # Construct parameters
        query = {}
        if self.config.apiversion is not None:
            query['api-version'] = self._parse_url("self.config.apiversion", self.config.apiversion, 'str', False)

        # Construct headers
        headers = {}
        if self.config.acceptlanguage is not None:
            headers['accept-language'] = self.config.acceptlanguage
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(parameters, 'StorageAccountCreateParameters')

        # Construct and send request
        request = self._client.put(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [200, 202]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('StorageAccount', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def delete(self, resource_group_name, account_name, custom_headers={}, raw=False, callback=None):
        """

        Deletes a storage account in Microsoft Azure.

        :param resource_group_name: The name of the resource group within the
        user’s subscription.
        :param account_name: The name of the storage account within the
        specified resource group. Storage account names must be between 3 and
        24 characters in length and use numbers and lower-case letters only.
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type resource_group_name: str
        :type account_name: str
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: None or (None, requests.response) or concurrent.futures.Future
        """

        # Construct URL
        url = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}'
        path_format_arguments = {
            'resourceGroupName': self._parse_url("resource_group_name", resource_group_name, 'str', False),
            'accountName': self._parse_url("account_name", account_name, 'str', False),
            'subscriptionId': self._parse_url("self.config.subscription_id", self.config.subscription_id, 'str', False)}
        url = url.format(**path_format_arguments)

        # Construct parameters
        query = {}
        if self.config.apiversion is not None:
            query['api-version'] = self._parse_url("self.config.apiversion", self.config.apiversion, 'str', False)

        # Construct headers
        headers = {}
        if self.config.acceptlanguage is not None:
            headers['accept-language'] = self.config.acceptlanguage
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.delete(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200, 204]:
            raise HttpOperationException(self._deserialize, response)

        if raw:
            return None, response

    @async_request
    def get_properties(self, resource_group_name, account_name, custom_headers={}, raw=False, callback=None):
        """

        Returns the properties for the specified storage account including but
        not limited to name, account type, location, and account status. The
        ListKeys operation should be used to retrieve storage keys.

        :param resource_group_name: The name of the resource group within the
        user’s subscription.
        :param account_name: The name of the storage account within the
        specified resource group. Storage account names must be between 3 and
        24 characters in length and use numbers and lower-case letters only.
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type resource_group_name: str
        :type account_name: str
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}'
        path_format_arguments = {
            'resourceGroupName': self._parse_url("resource_group_name", resource_group_name, 'str', False),
            'accountName': self._parse_url("account_name", account_name, 'str', False),
            'subscriptionId': self._parse_url("self.config.subscription_id", self.config.subscription_id, 'str', False)}
        url = url.format(**path_format_arguments)

        # Construct parameters
        query = {}
        if self.config.apiversion is not None:
            query['api-version'] = self._parse_url("self.config.apiversion", self.config.apiversion, 'str', False)

        # Construct headers
        headers = {}
        if self.config.acceptlanguage is not None:
            headers['accept-language'] = self.config.acceptlanguage
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.get(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('StorageAccount', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def update(self, resource_group_name, account_name, parameters, custom_headers={}, raw=False, callback=None):
        """

        Updates the account type or tags for a storage account. It can also be
        used to add a custom domain (note that custom domains cannot be added
        via the Create operation). Only one custom domain is supported per
        storage account. This API can only be used to update one of tags,
        accountType, or customDomain per call. To update multiple of these
        properties, call the API multiple times with one change per call.
        This call does not change the storage keys for the account. If you
        want to change storage account keys, use the RegenerateKey operation.
        The location and name of the storage account cannot be changed after
        creation.

        :param resource_group_name: The name of the resource group within the
        user’s subscription.
        :param account_name: The name of the storage account within the
        specified resource group. Storage account names must be between 3 and
        24 characters in length and use numbers and lower-case letters only.
        :param parameters: The parameters to update on the account. Note that
        only one property can be changed at a time using this API.
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type resource_group_name: str
        :type account_name: str
        :type parameters: object
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}'
        path_format_arguments = {
            'resourceGroupName': self._parse_url("resource_group_name", resource_group_name, 'str', False),
            'accountName': self._parse_url("account_name", account_name, 'str', False),
            'subscriptionId': self._parse_url("self.config.subscription_id", self.config.subscription_id, 'str', False)}
        url = url.format(**path_format_arguments)

        # Construct parameters
        query = {}
        if self.config.apiversion is not None:
            query['api-version'] = self._parse_url("self.config.apiversion", self.config.apiversion, 'str', False)

        # Construct headers
        headers = {}
        if self.config.acceptlanguage is not None:
            headers['accept-language'] = self.config.acceptlanguage
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(parameters, 'StorageAccountUpdateParameters')

        # Construct and send request
        request = self._client.patch(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [200]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('StorageAccount', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def list_keys(self, resource_group_name, account_name, custom_headers={}, raw=False, callback=None):
        """

        Lists the access keys for the specified storage account.

        :param resource_group_name: The name of the resource group.
        :param account_name: The name of the storage account.
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type resource_group_name: str
        :type account_name: str
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/listKeys'
        path_format_arguments = {
            'resourceGroupName': self._parse_url("resource_group_name", resource_group_name, 'str', False),
            'accountName': self._parse_url("account_name", account_name, 'str', False),
            'subscriptionId': self._parse_url("self.config.subscription_id", self.config.subscription_id, 'str', False)}
        url = url.format(**path_format_arguments)

        # Construct parameters
        query = {}
        if self.config.apiversion is not None:
            query['api-version'] = self._parse_url("self.config.apiversion", self.config.apiversion, 'str', False)

        # Construct headers
        headers = {}
        if self.config.acceptlanguage is not None:
            headers['accept-language'] = self.config.acceptlanguage
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers)

        if response.status_code not in [200]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('StorageAccountKeys', response)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def list(self, custom_headers={}, raw=False, callback=None):
        """

        Lists all the storage accounts available under the subscription. Note
        that storage keys are not returned; use the ListKeys operation for
        this.

        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        def paging(next_link=None, raw=False):

            if next_link is None:
                # Construct URL
                url = '/subscriptions/{subscriptionId}/providers/Microsoft.Storage/storageAccounts'
                path_format_arguments = {
                    'subscriptionId': self._parse_url("self.config.subscription_id", self.config.subscription_id, 'str', False)}
                url = url.format(**path_format_arguments)

                # Construct parameters
                query = {}
                if self.config.apiversion is not None:
                    query['api-version'] = self._parse_url("self.config.apiversion", self.config.apiversion, 'str', False)

            else:
                url = next_link
                query = {}

            # Construct headers
            headers = {}
            if self.config.acceptlanguage is not None:
                query['accept-language'] = self.config.acceptlanguage
            headers.update(custom_headers)
            headers['x-ms-client-request-id'] = str(uuid.uuid1())
            headers['Content-Type'] = 'application/json; charset=utf-8'

            # Construct and send request
            request = self._client.get(url, query)
            response = self._client.send(request, headers)

            if response.status_code not in [200]:
                raise CloudException(self._deserialize, response)

            return response

        response = paging()

        # Deserialize response
        deserialized = StorageAccountPaged(response, paging, self._deserialize.dependencies)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def list_by_resource_group(self, resource_group_name, custom_headers={}, raw=False, callback=None):
        """

        Lists all the storage accounts available under the given resource
        group. Note that storage keys are not returned; use the ListKeys
        operation for this.

        :param resource_group_name: The name of the resource group within the
        user’s subscription.
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type resource_group_name: str
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        def paging(next_link=None, raw=False):

            if next_link is None:
                # Construct URL
                url = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts'
                path_format_arguments = {
                    'resourceGroupName': self._parse_url("resource_group_name", resource_group_name, 'str', False),
                    'subscriptionId': self._parse_url("self.config.subscription_id", self.config.subscription_id, 'str', False)}
                url = url.format(**path_format_arguments)

                # Construct parameters
                query = {}
                if self.config.apiversion is not None:
                    query['api-version'] = self._parse_url("self.config.apiversion", self.config.apiversion, 'str', False)

            else:
                url = next_link
                query = {}

            # Construct headers
            headers = {}
            if self.config.acceptlanguage is not None:
                query['accept-language'] = self.config.acceptlanguage
            headers.update(custom_headers)
            headers['x-ms-client-request-id'] = str(uuid.uuid1())
            headers['Content-Type'] = 'application/json; charset=utf-8'

            # Construct and send request
            request = self._client.get(url, query)
            response = self._client.send(request, headers)

            if response.status_code not in [200]:
                raise CloudException(self._deserialize, response)

            return response

        response = paging()

        # Deserialize response
        deserialized = StorageAccountPaged(response, paging, self._deserialize.dependencies)

        if raw:
            return deserialized, response

        return deserialized

    @async_request
    def regenerate_key(self, resource_group_name, account_name, regenerate_key, custom_headers={}, raw=False, callback=None):
        """

        Regenerates the access keys for the specified storage account.

        :param resource_group_name: The name of the resource group within the
        user’s subscription.
        :param account_name: The name of the storage account within the
        specified resource group. Storage account names must be between 3 and
        24 characters in length and use numbers and lower-case letters only.
        :param regenerate_key: Specifies name of the key which should be
        regenerated.
        :param custom_headers: headers that will be added to the request
        :param raw: returns the direct response alongside the deserialized
        response
        :param callback: if provided, the call will run asynchronously and
        call the callback when complete.  When specified the function returns
        a concurrent.futures.Future
        :type resource_group_name: str
        :type account_name: str
        :type regenerate_key: object
        :type custom_headers: dict
        :type raw: boolean
        :type callback: Callable[[concurrent.futures.Future], None] or None
        :rtype: object or (object, requests.response) or
        concurrent.futures.Future
        """

        # Construct URL
        url = '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/regenerateKey'
        path_format_arguments = {
            'resourceGroupName': self._parse_url("resource_group_name", resource_group_name, 'str', False),
            'accountName': self._parse_url("account_name", account_name, 'str', False),
            'subscriptionId': self._parse_url("self.config.subscription_id", self.config.subscription_id, 'str', False)}
        url = url.format(**path_format_arguments)

        # Construct parameters
        query = {}
        if self.config.apiversion is not None:
            query['api-version'] = self._parse_url("self.config.apiversion", self.config.apiversion, 'str', False)

        # Construct headers
        headers = {}
        if self.config.acceptlanguage is not None:
            headers['accept-language'] = self.config.acceptlanguage
        headers.update(custom_headers)
        headers['x-ms-client-request-id'] = str(uuid.uuid1())
        headers['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        content = self._serialize(regenerate_key, 'StorageAccountRegenerateKeyParameters')

        # Construct and send request
        request = self._client.post(url, query)
        response = self._client.send(request, headers, content)

        if response.status_code not in [200]:
            raise CloudException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('StorageAccountKeys', response)

        if raw:
            return deserialized, response

        return deserialized
