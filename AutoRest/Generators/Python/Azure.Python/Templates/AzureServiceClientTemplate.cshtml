@using Microsoft.Rest.Generator.ClientModel
@using Microsoft.Rest.Generator.Python
@using Microsoft.Rest.Generator.Python.Templates
@using Microsoft.Rest.Generator.Utilities
@using System.Linq
@inherits Microsoft.Rest.Generator.Template<Microsoft.Rest.Generator.Azure.Python.AzureServiceClientTemplateModel>
# --------------------------------------------------------------------------
@Header("# ")
# --------------------------------------------------------------------------
@EmptyLine
from msrest.service_client import ServiceClient
from msrest import Configuration, Serializer, Deserializer
@if (Model.MethodTemplateModels.Any())
{
<text>
from msrest.service_client import async_request
from msrest.exceptions import (
    DeserializationError,
    HttpOperationError)
import uuid
</text>
}
@if (Model.MethodGroupModels.Any())
{
  foreach (var modelGroupType in Model.MethodGroupModels)
  {
@:from .operations.@(modelGroupType.MethodGroupType.ToPythonCase()) import @modelGroupType.MethodGroupType
  }
}
from . import models
@EmptyLine
@EmptyLine
class @(Model.Name)Configuration(Configuration):
@EmptyLine
    def __init__(self, @(Model.RequiredConstructorParameters)base_url=None, filepath=None):
@EmptyLine
        if not base_url:
            base_url = '@Model.BaseUrl'
@EmptyLine
        super(@(Model.Name)Configuration, self).__init__(base_url, filepath)
@{
  var propertiesRequired = Model.Properties.Where(p => p.IsRequired);
  if (propertiesRequired.Any())
  {
@EmptyLine
    foreach (var property in propertiesRequired)
    {
        @:self.@(property.Name) = @(property.Name)
    }
  }
}
@{
  var propertiesHasDefault = Model.Properties.Where(p => p.DefaultValue != null);
  if (propertiesHasDefault.Any())
  {
    @EmptyLine
    @foreach (var property in propertiesHasDefault)
    {
        @:if self.@(property.Name) is None:
            @:self.@(property.Name) = @(property.DefaultValue)
    }
  }
}
@EmptyLine
@EmptyLine
class @(Model.Name)(object):
@EmptyLine
    def __init__(self, config):
@EmptyLine
        self._client = ServiceClient(@(Model.Properties.Any(p => p.Type == PrimaryType.Credentials) ? "config.credentials" : "None"), config)
@EmptyLine
        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self._serialize = Serializer()
        self._deserialize = Deserializer(client_models)
@EmptyLine
        self.config = config
  @foreach (var methodGroup in Model.MethodGroupModels)
  {
        @:self.@(methodGroup.MethodGroupName) = @(methodGroup.MethodGroupType)(self._client, self.config, self._serialize, self._deserialize)
  }
@if (Model.MethodTemplateModels.Any())
{
<text>
@EmptyLine
    def _serialize_data(self, name, value, datatype, **kwargs):
@EmptyLine
        try:
            value = self._serialize.serialize_data(value, datatype, **kwargs)
@EmptyLine
        except ValueError:
            raise ValueError("{} must not be None.".format(name))
@EmptyLine
        except DeserializationError:
            raise TypeError("{} must be type {}.".format(name, datatype))
@EmptyLine
        else:
            return value
</text>
  foreach (var method in Model.MethodTemplateModels)
  {
@EmptyLine
@(Include(new AzureMethodTemplate(), (AzureMethodTemplateModel)method))
  }
}
