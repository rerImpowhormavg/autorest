/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the CatalogDictionaryOfArray class.
 * @constructor
 * @member {object} [productDictionaryOfArray] Dictionary of Array of product
 * 
 */
function CatalogDictionaryOfArray() {
}

/**
 * Defines the metadata of CatalogDictionaryOfArray
 *
 * @returns {object} metadata of CatalogDictionaryOfArray
 *
 */
CatalogDictionaryOfArray.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'CatalogDictionaryOfArray',
    type: {
      name: 'Composite',
      className: 'CatalogDictionaryOfArray',
      modelProperties: {
        productDictionaryOfArray: {
          required: false,
          serializedName: 'productDictionaryOfArray',
          type: {
            name: 'Dictionary',
            value: {
                required: false,
                serializedName: 'ArrayElementType',
                type: {
                  name: 'Sequence',
                  element: {
                      required: false,
                      serializedName: 'ProductElementType',
                      type: {
                        name: 'Composite',
                        className: 'Product'
                      }
                  }
                }
            }
          }
        }
      }
    }
  };
};

/**
 * Validate the payload against the CatalogDictionaryOfArray schema
 *
 * @param {JSON} payload
 *
 */
CatalogDictionaryOfArray.prototype.serialize = function () {
  var payload = {};
  if (this['productDictionaryOfArray'] && typeof this['productDictionaryOfArray'] === 'object') {
    payload['productDictionaryOfArray'] = {};
    for(var valueElement in this['productDictionaryOfArray']) {
      if (util.isArray(this['productDictionaryOfArray'][valueElement])) {
        payload['productDictionaryOfArray'][valueElement] = [];
        for (var i = 0; i < this['productDictionaryOfArray'][valueElement].length; i++) {
          if (this['productDictionaryOfArray'][valueElement][i]) {
            payload['productDictionaryOfArray'][valueElement][i] = this['productDictionaryOfArray'][valueElement][i].serialize();
          }
        }
      }
      else {
        payload['productDictionaryOfArray'][valueElement] = this['productDictionaryOfArray'][valueElement];
      }
    }
  }

  return payload;
};

/**
 * Deserialize the instance to CatalogDictionaryOfArray schema
 *
 * @param {JSON} instance
 *
 */
CatalogDictionaryOfArray.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['productDictionaryOfArray']) {
      this['productDictionaryOfArray'] = {};
      for(var valueElement1 in instance['productDictionaryOfArray']) {
        if (instance['productDictionaryOfArray'] !== null && instance['productDictionaryOfArray'] !== undefined) {
          if (instance['productDictionaryOfArray'][valueElement1]) {
            var tempInstanceproductDictionaryOfArrayvalueElement1 = [];
            instance['productDictionaryOfArray'][valueElement1].forEach(function(element) {
              if (element) {
                element = new models['Product']().deserialize(element);
              }
              tempInstanceproductDictionaryOfArrayvalueElement1.push(element);
            });
            this['productDictionaryOfArray'][valueElement1] = tempInstanceproductDictionaryOfArrayvalueElement1;
          }
        }
      }
    }
  }

  return this;
};

module.exports = CatalogDictionaryOfArray;
