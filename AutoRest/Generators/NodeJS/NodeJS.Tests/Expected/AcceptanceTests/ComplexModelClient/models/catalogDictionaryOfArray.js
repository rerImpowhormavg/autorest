/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the CatalogDictionaryOfArray class.
 * @constructor
 * @member {object} [productDictionaryOfArray] Dictionary of Array of product
 * 
 */
function CatalogDictionaryOfArray(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.productDictionaryOfArray) {
      this.productDictionaryOfArray = {};
      for(var valueElement in parameters.productDictionaryOfArray) {
        if (parameters.productDictionaryOfArray[valueElement]) {
          var tempParametersproductDictionaryOfArrayvalueElement = [];
          parameters.productDictionaryOfArray[valueElement].forEach(function(element) {
            if (element) {
              element = new models['Product'](element);
            }
            tempParametersproductDictionaryOfArrayvalueElement.push(element);
          });
          this.productDictionaryOfArray[valueElement] = tempParametersproductDictionaryOfArrayvalueElement;
        }
      }
    }
  }    
}


/**
 * Validate the payload against the CatalogDictionaryOfArray schema
 *
 * @param {JSON} payload
 *
 */
CatalogDictionaryOfArray.prototype.serialize = function () {
  var payload = {};
  if (this['productDictionaryOfArray'] && typeof this['productDictionaryOfArray'] === 'object') {
    payload['productDictionaryOfArray'] = {};
    for(var valueElement1 in this['productDictionaryOfArray']) {
      if (util.isArray(this['productDictionaryOfArray'][valueElement1])) {
        payload['productDictionaryOfArray'][valueElement1] = [];
        for (var i = 0; i < this['productDictionaryOfArray'][valueElement1].length; i++) {
          if (this['productDictionaryOfArray'][valueElement1][i]) {
            if (payload['productDictionaryOfArray'] === null || payload['productDictionaryOfArray'] === undefined) {
              payload['productDictionaryOfArray'] = {};
            }
            payload['productDictionaryOfArray'][valueElement1][i] = this['productDictionaryOfArray'][valueElement1][i].serialize();
          }
        }
      }
      else {
        payload['productDictionaryOfArray'][valueElement1] = this['productDictionaryOfArray'][valueElement1];
      }
    }
  }

  return payload;
};

/**
 * Deserialize the instance to CatalogDictionaryOfArray schema
 *
 * @param {JSON} instance
 *
 */
CatalogDictionaryOfArray.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['productDictionaryOfArray']) {
      this['productDictionaryOfArray'] = {};
      for(var valueElement2 in instance['productDictionaryOfArray']) {
        if (instance['productDictionaryOfArray'] !== null && instance['productDictionaryOfArray'] !== undefined) {
          if (instance['productDictionaryOfArray'][valueElement2]) {
            var tempInstanceproductDictionaryOfArrayvalueElement2 = [];
            instance['productDictionaryOfArray'][valueElement2].forEach(function(element1) {
              if (element1) {
                element1 = new models['Product']().deserialize(element1);
              }
              tempInstanceproductDictionaryOfArrayvalueElement2.push(element1);
            });
            this['productDictionaryOfArray'][valueElement2] = tempInstanceproductDictionaryOfArrayvalueElement2;
          }
        }
      }
    }
  }

  return this;
};

module.exports = CatalogDictionaryOfArray;
