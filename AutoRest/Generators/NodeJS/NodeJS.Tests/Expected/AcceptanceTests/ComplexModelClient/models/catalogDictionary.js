/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

/**
 * @class
 * Initializes a new instance of the CatalogDictionary class.
 * @constructor
 * @member {object} [productDictionary] Dictionary of products
 * 
 */
function CatalogDictionary(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.productDictionary) {
      this.productDictionary = {};
      for(var valueElement in parameters.productDictionary) {
        if (parameters.productDictionary[valueElement]) {
          this.productDictionary[valueElement] = new models['Product'](parameters.productDictionary[valueElement]);
        }
      }
    }
  }    
}


/**
 * Validate the payload against the CatalogDictionary schema
 *
 * @param {JSON} payload
 *
 */
CatalogDictionary.prototype.serialize = function () {
  var payload = {};
  if (this['productDictionary'] && typeof this['productDictionary'] === 'object') {
    payload['productDictionary'] = {};
    for(var valueElement1 in this['productDictionary']) {
      if (this['productDictionary'][valueElement1]) {
        if (payload['productDictionary'] === null || payload['productDictionary'] === undefined) {
          payload['productDictionary'] = {};
        }
        payload['productDictionary'][valueElement1] = this['productDictionary'][valueElement1].serialize();
      }
      else {
        payload['productDictionary'][valueElement1] = this['productDictionary'][valueElement1];
      }
    }
  }

  return payload;
};

/**
 * Deserialize the instance to CatalogDictionary schema
 *
 * @param {JSON} instance
 *
 */
CatalogDictionary.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['productDictionary']) {
      this['productDictionary'] = {};
      for(var valueElement2 in instance['productDictionary']) {
        if (instance['productDictionary'] !== null && instance['productDictionary'] !== undefined) {
          if (instance['productDictionary'][valueElement2]) {
            this['productDictionary'][valueElement2] = new models['Product']().deserialize(instance['productDictionary'][valueElement2]);
          }
        }
      }
    }
  }

  return this;
};

module.exports = CatalogDictionary;
