/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the Fish class.
 * @constructor
 * @member {string} [species]
 * 
 * @member {number} length
 * 
 * @member {array} [siblings]
 * 
 * @member {string} dtype Polymorhpic Discriminator
 * 
 */
function Fish(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.species !== null && parameters.species !== undefined) {
      this.species = parameters.species;
    }
    if (parameters.length !== null && parameters.length !== undefined) {
      this.length = parameters.length;
    }
    if (parameters.siblings !== null && parameters.siblings !== undefined) {
      var initializedParameterssiblings = [];
      parameters.siblings.forEach(function(element) {
        if (element !== null && element !== undefined) {
          element = new models.discriminators[element['dtype']](element);
        }
        initializedParameterssiblings.push(element);
      });
      this.siblings = initializedParameterssiblings;
    }
    if (parameters.dtype !== null && parameters.dtype !== undefined) {
      this.dtype = parameters.dtype;
    }
  }    
}


/**
 * Validate the payload against the Fish schema
 *
 * @param {JSON} payload
 *
 */
Fish.prototype.serialize = function () {
  var payload = {};
  if (this['species'] !== null && this['species'] !== undefined) {
    if (typeof this['species'].valueOf() !== 'string') {
      throw new Error('this[\'species\'] must be of type string.');
    }
    payload['species'] = this['species'];
  }

  if (this['length'] === null || this['length'] === undefined || typeof this['length'] !== 'number') {
    throw new Error('this[\'length\'] cannot be null or undefined and it must be of type number.');
  }
  payload['length'] = this['length'];

  if (util.isArray(this['siblings'])) {
    payload['siblings'] = [];
    for (var i = 0; i < this['siblings'].length; i++) {
      if (this['siblings'][i]) {
        if(this['siblings'][i]['dtype'] !== null && this['siblings'][i]['dtype'] !== undefined && models.discriminators[this['siblings'][i]['dtype']]) {
          payload['siblings'][i] = this['siblings'][i].serialize();
        } else {
          throw new Error('No discriminator field "dtype" was found in parameter "this[\'siblings\'][i]".');
        }
      }
    }
  }

  if (this['dtype'] === null || this['dtype'] === undefined || typeof this['dtype'].valueOf() !== 'string') {
    throw new Error('this[\'dtype\'] cannot be null or undefined and it must be of type string.');
  }
  payload['dtype'] = this['dtype'];

  return payload;
};

/**
 * Deserialize the instance to Fish schema
 *
 * @param {JSON} instance
 *
 */
Fish.prototype.deserialize = function (instance) {
  if (instance) {
    this['species'] = instance['species'];

    this['length'] = instance['length'];

    if (instance['siblings'] !== null && instance['siblings'] !== undefined) {
      var deserializedInstancesiblings = [];
      instance['siblings'].forEach(function(element1) {
        if (element1 !== null && element1 !== undefined) {
          element1 = new models.discriminators[element1['dtype']]().deserialize(element1);
        }
        deserializedInstancesiblings.push(element1);
      });
      this['siblings'] = deserializedInstancesiblings;
    }

    this['dtype'] = instance['dtype'];
  }

  return this;
};

module.exports = Fish;
