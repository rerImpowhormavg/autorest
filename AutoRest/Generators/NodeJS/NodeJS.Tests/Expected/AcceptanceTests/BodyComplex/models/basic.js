/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * @class
 * Initializes a new instance of the Basic class.
 * @constructor
 * @member {number} [id]
 * 
 * @member {string} [name]
 * 
 * @member {string} [color] Possible values for this property include: 'cyan',
 * 'Magenta', 'YELLOW', 'blacK'.
 * 
 */
function Basic() {
}

/**
 * Defines the metadata of Basic
 *
 * @returns {object} metadata of Basic
 *
 */
Basic.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'basic',
    type: {
      name: 'Composite',
      className: 'Basic',
      modelProperties: {
        id: {
          required: false,
          serializedName: 'id',
          type: {
            name: 'Number'
          }
        },
        name: {
          required: false,
          serializedName: 'name',
          type: {
            name: 'String'
          }
        },
        color: {
          required: false,
          serializedName: 'color',
          type: {
            name: 'String'
          }
        }
      }
    }
  };
};

/**
 * Validate the payload against the Basic schema
 *
 * @param {JSON} payload
 *
 */
Basic.prototype.serialize = function () {
  var payload = {};
  if (this['id'] !== null && this['id'] !== undefined) {
    if (typeof this['id'] !== 'number') {
      throw new Error('this[\'id\'] must be of type number.');
    }
    payload['id'] = this['id'];
  }

  if (this['name'] !== null && this['name'] !== undefined) {
    if (typeof this['name'].valueOf() !== 'string') {
      throw new Error('this[\'name\'] must be of type string.');
    }
    payload['name'] = this['name'];
  }

  if (this['color'] !== null && this['color'] !== undefined) {
    if (typeof this['color'].valueOf() !== 'string') {
      throw new Error('this[\'color\'] must be of type string.');
    }
    payload['color'] = this['color'];
  }

  return payload;
};

/**
 * Deserialize the instance to Basic schema
 *
 * @param {JSON} instance
 *
 */
Basic.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['id'] !== undefined) {
      this['id'] = instance['id'];
    }

    if (instance['name'] !== undefined) {
      this['name'] = instance['name'];
    }

    if (instance['color'] !== undefined) {
      this['color'] = instance['color'];
    }
  }

  return this;
};

module.exports = Basic;
