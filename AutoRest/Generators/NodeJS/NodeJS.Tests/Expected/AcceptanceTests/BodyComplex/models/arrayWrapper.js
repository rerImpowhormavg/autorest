/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var util = require('util');

/**
 * @class
 * Initializes a new instance of the ArrayWrapper class.
 * @constructor
 * @member {array} [array]
 * 
 */
function ArrayWrapper() {
}

/**
 * Defines the metadata of ArrayWrapper
 *
 * @returns {object} metadata of ArrayWrapper
 *
 */
ArrayWrapper.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'array-wrapper',
    type: {
      name: 'Composite',
      className: 'ArrayWrapper',
      modelProperties: {
        array: {
          required: false,
          serializedName: 'array',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'StringElementType',
                type: {
                  name: 'String'
                }
            }
          }
        }
      }
    }
  };
};

/**
 * Validate the payload against the ArrayWrapper schema
 *
 * @param {JSON} payload
 *
 */
ArrayWrapper.prototype.serialize = function () {
  var payload = {};
  if (util.isArray(this['array'])) {
    payload['array'] = [];
    for (var i = 0; i < this['array'].length; i++) {
      if (this['array'][i] !== null && this['array'][i] !== undefined) {
        if (typeof this['array'][i].valueOf() !== 'string') {
          throw new Error('this[\'array\'][i] must be of type string.');
        }
        payload['array'][i] = this['array'][i];
      }
    }
  }

  return payload;
};

/**
 * Deserialize the instance to ArrayWrapper schema
 *
 * @param {JSON} instance
 *
 */
ArrayWrapper.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['array']) {
      var tempInstancearray = [];
      instance['array'].forEach(function(element) {
        if (element !== undefined) {
          element = element;
        }
        tempInstancearray.push(element);
      });
      this['array'] = tempInstancearray;
    }
  }

  return this;
};

module.exports = ArrayWrapper;
