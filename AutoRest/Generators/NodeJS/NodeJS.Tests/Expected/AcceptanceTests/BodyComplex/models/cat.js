/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the Cat class.
 * @constructor
 * @member {string} [color]
 * 
 * @member {array} [hates]
 * 
 */
function Cat(parameters) {
  Cat['super_'].call(this, parameters);
  if (parameters !== null && parameters !== undefined) {
    if (parameters.color !== null && parameters.color !== undefined) {
      this.color = parameters.color;
    }
    if (parameters.hates !== null && parameters.hates !== undefined) {
      var initializedParametershates = [];
      parameters.hates.forEach(function(element) {
        if (element !== null && element !== undefined) {
          element = new models['Dog'](element);
        }
        initializedParametershates.push(element);
      });
      this.hates = initializedParametershates;
    }
  }    
}

util.inherits(Cat, models['Pet']);

/**
 * Validate the payload against the Cat schema
 *
 * @param {JSON} payload
 *
 */
Cat.prototype.serialize = function () {
  var payload = Cat['super_'].prototype.serialize.call(this);
  if (this['color'] !== null && this['color'] !== undefined) {
    if (typeof this['color'].valueOf() !== 'string') {
      throw new Error('this[\'color\'] must be of type string.');
    }
    payload['color'] = this['color'];
  }

  if (util.isArray(this['hates'])) {
    payload['hates'] = [];
    for (var i = 0; i < this['hates'].length; i++) {
      if (this['hates'][i]) {
        if (payload['hates'] === null || payload['hates'] === undefined) {
          payload['hates'] = {};
        }
        payload['hates'][i] = this['hates'][i].serialize();
      }
    }
  }

  return payload;
};

/**
 * Deserialize the instance to Cat schema
 *
 * @param {JSON} instance
 *
 */
Cat.prototype.deserialize = function (instance) {
  Cat['super_'].prototype.deserialize.call(this, instance);
  if (instance) {
    if (instance['color'] !== null && instance['color'] !== undefined) {
      this['color'] = instance['color'];
    }

    if (instance['hates'] !== null && instance['hates'] !== undefined) {
      var deserializedInstancehates = [];
      instance['hates'].forEach(function(element1) {
        if (element1 !== null && element1 !== undefined) {
          element1 = new models['Dog']().deserialize(element1);
        }
        deserializedInstancehates.push(element1);
      });
      this['hates'] = deserializedInstancehates;
    }
  }

  return this;
};

module.exports = Cat;
