/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { RequestOptions, WebResource } from "ms-rest";
import * as stream from "stream";
import * as models from "../models";


/**
 * @class
 * BasicOperations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AutoRestComplexTestService.
 */
export interface BasicOperations {

    /**
     * Get complex type {id: 2, name: 'abc', color: 'YELLOW'}
     *
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {function} callback
     *
     * @returns {function} callback(err, result, request, response)
     *
     *                      {Error}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {object} [result]   - The deserialized result object.
     *                      See {@link Basic} for more information.
     *
     *                      {object} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {stream} [response] - The HTTP Response stream if an error did not occur.
     */
    getValid(options: RequestOptions, callback: (err: Error, result: models.Basic, request: WebResource, response: stream.Readable) => void): void;

    /**
     * Please put {id: 2, name: 'abc', color: 'Magenta'}
     *
     * @param {object} complexBody Please put {id: 2, name: 'abc', color:
     * 'Magenta'}
     * 
     * @param {number} [complexBody.id]
     * 
     * @param {string} [complexBody.name]
     * 
     * @param {string} [complexBody.color] Possible values for this property
     * include: 'cyan', 'Magenta', 'YELLOW', 'blacK'.
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {function} callback
     *
     * @returns {function} callback(err, result, request, response)
     *
     *                      {Error}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object.
     *
     *                      {object} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {stream} [response] - The HTTP Response stream if an error did not occur.
     */
    putValid(complexBody: models.Basic, options: RequestOptions, callback: (err: Error, result: void, request: WebResource, response: stream.Readable) => void): void;

    /**
     * Get a basic complex type that is invalid for the local strong type
     *
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {function} callback
     *
     * @returns {function} callback(err, result, request, response)
     *
     *                      {Error}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {object} [result]   - The deserialized result object.
     *                      See {@link Basic} for more information.
     *
     *                      {object} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {stream} [response] - The HTTP Response stream if an error did not occur.
     */
    getInvalid(options: RequestOptions, callback: (err: Error, result: models.Basic, request: WebResource, response: stream.Readable) => void): void;

    /**
     * Get a basic complex type that is empty
     *
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {function} callback
     *
     * @returns {function} callback(err, result, request, response)
     *
     *                      {Error}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {object} [result]   - The deserialized result object.
     *                      See {@link Basic} for more information.
     *
     *                      {object} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {stream} [response] - The HTTP Response stream if an error did not occur.
     */
    getEmpty(options: RequestOptions, callback: (err: Error, result: models.Basic, request: WebResource, response: stream.Readable) => void): void;

    /**
     * Get a basic complex type whose properties are null
     *
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {function} callback
     *
     * @returns {function} callback(err, result, request, response)
     *
     *                      {Error}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {object} [result]   - The deserialized result object.
     *                      See {@link Basic} for more information.
     *
     *                      {object} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {stream} [response] - The HTTP Response stream if an error did not occur.
     */
    getNull(options: RequestOptions, callback: (err: Error, result: models.Basic, request: WebResource, response: stream.Readable) => void): void;

    /**
     * Get a basic complex type while the server doesn't provide a response payload
     *
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {function} callback
     *
     * @returns {function} callback(err, result, request, response)
     *
     *                      {Error}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {object} [result]   - The deserialized result object.
     *                      See {@link Basic} for more information.
     *
     *                      {object} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {stream} [response] - The HTTP Response stream if an error did not occur.
     */
    getNotProvided(options: RequestOptions, callback: (err: Error, result: models.Basic, request: WebResource, response: stream.Readable) => void): void;
}

/**
 * @class
 * Primitive
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AutoRestComplexTestService.
 */
export interface Primitive {

    /**
     * Get complex types with integer properties
     *
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {function} callback
     *
     * @returns {function} callback(err, result, request, response)
     *
     *                      {Error}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {object} [result]   - The deserialized result object.
     *                      See {@link IntWrapper} for more information.
     *
     *                      {object} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {stream} [response] - The HTTP Response stream if an error did not occur.
     */
    getInt(options: RequestOptions, callback: (err: Error, result: models.IntWrapper, request: WebResource, response: stream.Readable) => void): void;

    /**
     * Put complex types with integer properties
     *
     * @param {object} complexBody Please put -1 and 2
     * 
     * @param {number} [complexBody.field1]
     * 
     * @param {number} [complexBody.field2]
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {function} callback
     *
     * @returns {function} callback(err, result, request, response)
     *
     *                      {Error}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object.
     *
     *                      {object} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {stream} [response] - The HTTP Response stream if an error did not occur.
     */
    putInt(complexBody: models.IntWrapper, options: RequestOptions, callback: (err: Error, result: void, request: WebResource, response: stream.Readable) => void): void;

    /**
     * Get complex types with long properties
     *
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {function} callback
     *
     * @returns {function} callback(err, result, request, response)
     *
     *                      {Error}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {object} [result]   - The deserialized result object.
     *                      See {@link LongWrapper} for more information.
     *
     *                      {object} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {stream} [response] - The HTTP Response stream if an error did not occur.
     */
    getLong(options: RequestOptions, callback: (err: Error, result: models.LongWrapper, request: WebResource, response: stream.Readable) => void): void;

    /**
     * Put complex types with long properties
     *
     * @param {object} complexBody Please put 1099511627775 and -999511627788
     * 
     * @param {number} [complexBody.field1]
     * 
     * @param {number} [complexBody.field2]
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {function} callback
     *
     * @returns {function} callback(err, result, request, response)
     *
     *                      {Error}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object.
     *
     *                      {object} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {stream} [response] - The HTTP Response stream if an error did not occur.
     */
    putLong(complexBody: models.LongWrapper, options: RequestOptions, callback: (err: Error, result: void, request: WebResource, response: stream.Readable) => void): void;

    /**
     * Get complex types with float properties
     *
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {function} callback
     *
     * @returns {function} callback(err, result, request, response)
     *
     *                      {Error}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {object} [result]   - The deserialized result object.
     *                      See {@link FloatWrapper} for more information.
     *
     *                      {object} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {stream} [response] - The HTTP Response stream if an error did not occur.
     */
    getFloat(options: RequestOptions, callback: (err: Error, result: models.FloatWrapper, request: WebResource, response: stream.Readable) => void): void;

    /**
     * Put complex types with float properties
     *
     * @param {object} complexBody Please put 1.05 and -0.003
     * 
     * @param {number} [complexBody.field1]
     * 
     * @param {number} [complexBody.field2]
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {function} callback
     *
     * @returns {function} callback(err, result, request, response)
     *
     *                      {Error}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object.
     *
     *                      {object} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {stream} [response] - The HTTP Response stream if an error did not occur.
     */
    putFloat(complexBody: models.FloatWrapper, options: RequestOptions, callback: (err: Error, result: void, request: WebResource, response: stream.Readable) => void): void;

    /**
     * Get complex types with double properties
     *
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {function} callback
     *
     * @returns {function} callback(err, result, request, response)
     *
     *                      {Error}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {object} [result]   - The deserialized result object.
     *                      See {@link DoubleWrapper} for more information.
     *
     *                      {object} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {stream} [response] - The HTTP Response stream if an error did not occur.
     */
    getDouble(options: RequestOptions, callback: (err: Error, result: models.DoubleWrapper, request: WebResource, response: stream.Readable) => void): void;

    /**
     * Put complex types with double properties
     *
     * @param {object} complexBody Please put 3e-100 and
     * -0.000000000000000000000000000000000000000000000000000000005
     * 
     * @param {number} [complexBody.field1]
     * 
     * @param {number}
     * [complexBody.field56ZerosAfterTheDotAndNegativeZeroBeforeDotAndThisIsALongFieldNameOnPurpose]
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {function} callback
     *
     * @returns {function} callback(err, result, request, response)
     *
     *                      {Error}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object.
     *
     *                      {object} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {stream} [response] - The HTTP Response stream if an error did not occur.
     */
    putDouble(complexBody: models.DoubleWrapper, options: RequestOptions, callback: (err: Error, result: void, request: WebResource, response: stream.Readable) => void): void;

    /**
     * Get complex types with bool properties
     *
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {function} callback
     *
     * @returns {function} callback(err, result, request, response)
     *
     *                      {Error}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {object} [result]   - The deserialized result object.
     *                      See {@link BooleanWrapper} for more information.
     *
     *                      {object} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {stream} [response] - The HTTP Response stream if an error did not occur.
     */
    getBool(options: RequestOptions, callback: (err: Error, result: models.BooleanWrapper, request: WebResource, response: stream.Readable) => void): void;

    /**
     * Put complex types with bool properties
     *
     * @param {object} complexBody Please put true and false
     * 
     * @param {boolean} [complexBody.fieldTrue]
     * 
     * @param {boolean} [complexBody.fieldFalse]
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {function} callback
     *
     * @returns {function} callback(err, result, request, response)
     *
     *                      {Error}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object.
     *
     *                      {object} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {stream} [response] - The HTTP Response stream if an error did not occur.
     */
    putBool(complexBody: models.BooleanWrapper, options: RequestOptions, callback: (err: Error, result: void, request: WebResource, response: stream.Readable) => void): void;

    /**
     * Get complex types with string properties
     *
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {function} callback
     *
     * @returns {function} callback(err, result, request, response)
     *
     *                      {Error}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {object} [result]   - The deserialized result object.
     *                      See {@link StringWrapper} for more information.
     *
     *                      {object} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {stream} [response] - The HTTP Response stream if an error did not occur.
     */
    getString(options: RequestOptions, callback: (err: Error, result: models.StringWrapper, request: WebResource, response: stream.Readable) => void): void;

    /**
     * Put complex types with string properties
     *
     * @param {object} complexBody Please put 'goodrequest', '', and null
     * 
     * @param {string} [complexBody.field]
     * 
     * @param {string} [complexBody.empty]
     * 
     * @param {string} [complexBody.null]
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {function} callback
     *
     * @returns {function} callback(err, result, request, response)
     *
     *                      {Error}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object.
     *
     *                      {object} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {stream} [response] - The HTTP Response stream if an error did not occur.
     */
    putString(complexBody: models.StringWrapper, options: RequestOptions, callback: (err: Error, result: void, request: WebResource, response: stream.Readable) => void): void;

    /**
     * Get complex types with date properties
     *
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {function} callback
     *
     * @returns {function} callback(err, result, request, response)
     *
     *                      {Error}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {object} [result]   - The deserialized result object.
     *                      See {@link DateWrapper} for more information.
     *
     *                      {object} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {stream} [response] - The HTTP Response stream if an error did not occur.
     */
    getDate(options: RequestOptions, callback: (err: Error, result: models.DateWrapper, request: WebResource, response: stream.Readable) => void): void;

    /**
     * Put complex types with date properties
     *
     * @param {object} complexBody Please put '0001-01-01' and '2016-02-29'
     * 
     * @param {date} [complexBody.field]
     * 
     * @param {date} [complexBody.leap]
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {function} callback
     *
     * @returns {function} callback(err, result, request, response)
     *
     *                      {Error}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object.
     *
     *                      {object} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {stream} [response] - The HTTP Response stream if an error did not occur.
     */
    putDate(complexBody: models.DateWrapper, options: RequestOptions, callback: (err: Error, result: void, request: WebResource, response: stream.Readable) => void): void;

    /**
     * Get complex types with datetime properties
     *
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {function} callback
     *
     * @returns {function} callback(err, result, request, response)
     *
     *                      {Error}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {object} [result]   - The deserialized result object.
     *                      See {@link DatetimeWrapper} for more information.
     *
     *                      {object} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {stream} [response] - The HTTP Response stream if an error did not occur.
     */
    getDateTime(options: RequestOptions, callback: (err: Error, result: models.DatetimeWrapper, request: WebResource, response: stream.Readable) => void): void;

    /**
     * Put complex types with datetime properties
     *
     * @param {object} complexBody Please put '0001-01-01T12:00:00-04:00' and
     * '2015-05-18T11:38:00-08:00'
     * 
     * @param {date} [complexBody.field]
     * 
     * @param {date} [complexBody.now]
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {function} callback
     *
     * @returns {function} callback(err, result, request, response)
     *
     *                      {Error}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object.
     *
     *                      {object} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {stream} [response] - The HTTP Response stream if an error did not occur.
     */
    putDateTime(complexBody: models.DatetimeWrapper, options: RequestOptions, callback: (err: Error, result: void, request: WebResource, response: stream.Readable) => void): void;

    /**
     * Get complex types with byte properties
     *
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {function} callback
     *
     * @returns {function} callback(err, result, request, response)
     *
     *                      {Error}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {object} [result]   - The deserialized result object.
     *                      See {@link ByteWrapper} for more information.
     *
     *                      {object} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {stream} [response] - The HTTP Response stream if an error did not occur.
     */
    getByte(options: RequestOptions, callback: (err: Error, result: models.ByteWrapper, request: WebResource, response: stream.Readable) => void): void;

    /**
     * Put complex types with byte properties
     *
     * @param {object} complexBody Please put non-ascii byte string hex(FF FE FD
     * FC 00 FA F9 F8 F7 F6)
     * 
     * @param {buffer} [complexBody.field]
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {function} callback
     *
     * @returns {function} callback(err, result, request, response)
     *
     *                      {Error}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object.
     *
     *                      {object} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {stream} [response] - The HTTP Response stream if an error did not occur.
     */
    putByte(complexBody: models.ByteWrapper, options: RequestOptions, callback: (err: Error, result: void, request: WebResource, response: stream.Readable) => void): void;
}

/**
 * @class
 * ArrayModel
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AutoRestComplexTestService.
 */
export interface ArrayModel {

    /**
     * Get complex types with array property
     *
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {function} callback
     *
     * @returns {function} callback(err, result, request, response)
     *
     *                      {Error}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {object} [result]   - The deserialized result object.
     *                      See {@link ArrayWrapper} for more information.
     *
     *                      {object} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {stream} [response] - The HTTP Response stream if an error did not occur.
     */
    getValid(options: RequestOptions, callback: (err: Error, result: models.ArrayWrapper, request: WebResource, response: stream.Readable) => void): void;

    /**
     * Put complex types with array property
     *
     * @param {object} complexBody Please put an array with 4 items: "1, 2, 3, 4",
     * "", null, "&S#$(*Y", "The quick brown fox jumps over the lazy dog"
     * 
     * @param {array} [complexBody.array]
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {function} callback
     *
     * @returns {function} callback(err, result, request, response)
     *
     *                      {Error}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object.
     *
     *                      {object} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {stream} [response] - The HTTP Response stream if an error did not occur.
     */
    putValid(complexBody: models.ArrayWrapper, options: RequestOptions, callback: (err: Error, result: void, request: WebResource, response: stream.Readable) => void): void;

    /**
     * Get complex types with array property which is empty
     *
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {function} callback
     *
     * @returns {function} callback(err, result, request, response)
     *
     *                      {Error}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {object} [result]   - The deserialized result object.
     *                      See {@link ArrayWrapper} for more information.
     *
     *                      {object} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {stream} [response] - The HTTP Response stream if an error did not occur.
     */
    getEmpty(options: RequestOptions, callback: (err: Error, result: models.ArrayWrapper, request: WebResource, response: stream.Readable) => void): void;

    /**
     * Put complex types with array property which is empty
     *
     * @param {object} complexBody Please put an empty array
     * 
     * @param {array} [complexBody.array]
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {function} callback
     *
     * @returns {function} callback(err, result, request, response)
     *
     *                      {Error}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object.
     *
     *                      {object} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {stream} [response] - The HTTP Response stream if an error did not occur.
     */
    putEmpty(complexBody: models.ArrayWrapper, options: RequestOptions, callback: (err: Error, result: void, request: WebResource, response: stream.Readable) => void): void;

    /**
     * Get complex types with array property while server doesn't provide a
     * response payload
     *
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {function} callback
     *
     * @returns {function} callback(err, result, request, response)
     *
     *                      {Error}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {object} [result]   - The deserialized result object.
     *                      See {@link ArrayWrapper} for more information.
     *
     *                      {object} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {stream} [response] - The HTTP Response stream if an error did not occur.
     */
    getNotProvided(options: RequestOptions, callback: (err: Error, result: models.ArrayWrapper, request: WebResource, response: stream.Readable) => void): void;
}

/**
 * @class
 * Dictionary
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AutoRestComplexTestService.
 */
export interface Dictionary {

    /**
     * Get complex types with dictionary property
     *
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {function} callback
     *
     * @returns {function} callback(err, result, request, response)
     *
     *                      {Error}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {object} [result]   - The deserialized result object.
     *                      See {@link DictionaryWrapper} for more information.
     *
     *                      {object} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {stream} [response] - The HTTP Response stream if an error did not occur.
     */
    getValid(options: RequestOptions, callback: (err: Error, result: models.DictionaryWrapper, request: WebResource, response: stream.Readable) => void): void;

    /**
     * Put complex types with dictionary property
     *
     * @param {object} complexBody Please put a dictionary with 5 key-value pairs:
     * "txt":"notepad", "bmp":"mspaint", "xls":"excel", "exe":"", "":null
     * 
     * @param {object} [complexBody.defaultProgram]
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {function} callback
     *
     * @returns {function} callback(err, result, request, response)
     *
     *                      {Error}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object.
     *
     *                      {object} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {stream} [response] - The HTTP Response stream if an error did not occur.
     */
    putValid(complexBody: models.DictionaryWrapper, options: RequestOptions, callback: (err: Error, result: void, request: WebResource, response: stream.Readable) => void): void;

    /**
     * Get complex types with dictionary property which is empty
     *
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {function} callback
     *
     * @returns {function} callback(err, result, request, response)
     *
     *                      {Error}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {object} [result]   - The deserialized result object.
     *                      See {@link DictionaryWrapper} for more information.
     *
     *                      {object} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {stream} [response] - The HTTP Response stream if an error did not occur.
     */
    getEmpty(options: RequestOptions, callback: (err: Error, result: models.DictionaryWrapper, request: WebResource, response: stream.Readable) => void): void;

    /**
     * Put complex types with dictionary property which is empty
     *
     * @param {object} complexBody Please put an empty dictionary
     * 
     * @param {object} [complexBody.defaultProgram]
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {function} callback
     *
     * @returns {function} callback(err, result, request, response)
     *
     *                      {Error}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object.
     *
     *                      {object} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {stream} [response] - The HTTP Response stream if an error did not occur.
     */
    putEmpty(complexBody: models.DictionaryWrapper, options: RequestOptions, callback: (err: Error, result: void, request: WebResource, response: stream.Readable) => void): void;

    /**
     * Get complex types with dictionary property which is null
     *
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {function} callback
     *
     * @returns {function} callback(err, result, request, response)
     *
     *                      {Error}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {object} [result]   - The deserialized result object.
     *                      See {@link DictionaryWrapper} for more information.
     *
     *                      {object} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {stream} [response] - The HTTP Response stream if an error did not occur.
     */
    getNull(options: RequestOptions, callback: (err: Error, result: models.DictionaryWrapper, request: WebResource, response: stream.Readable) => void): void;

    /**
     * Get complex types with dictionary property while server doesn't provide a
     * response payload
     *
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {function} callback
     *
     * @returns {function} callback(err, result, request, response)
     *
     *                      {Error}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {object} [result]   - The deserialized result object.
     *                      See {@link DictionaryWrapper} for more information.
     *
     *                      {object} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {stream} [response] - The HTTP Response stream if an error did not occur.
     */
    getNotProvided(options: RequestOptions, callback: (err: Error, result: models.DictionaryWrapper, request: WebResource, response: stream.Readable) => void): void;
}

/**
 * @class
 * Inheritance
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AutoRestComplexTestService.
 */
export interface Inheritance {

    /**
     * Get complex types that extend others
     *
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {function} callback
     *
     * @returns {function} callback(err, result, request, response)
     *
     *                      {Error}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {object} [result]   - The deserialized result object.
     *                      See {@link Siamese} for more information.
     *
     *                      {object} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {stream} [response] - The HTTP Response stream if an error did not occur.
     */
    getValid(options: RequestOptions, callback: (err: Error, result: models.Siamese, request: WebResource, response: stream.Readable) => void): void;

    /**
     * Put complex types that extend others
     *
     * @param {object} complexBody Please put a siamese with id=2, name="Siameee",
     * color=green, breed=persion, which hates 2 dogs, the 1st one named "Potato"
     * with id=1 and food="tomato", and the 2nd one named "Tomato" with id=-1 and
     * food="french fries".
     * 
     * @param {string} [complexBody.breed]
     * 
     * @param {string} [complexBody.color]
     * 
     * @param {array} [complexBody.hates]
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {function} callback
     *
     * @returns {function} callback(err, result, request, response)
     *
     *                      {Error}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object.
     *
     *                      {object} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {stream} [response] - The HTTP Response stream if an error did not occur.
     */
    putValid(complexBody: models.Siamese, options: RequestOptions, callback: (err: Error, result: void, request: WebResource, response: stream.Readable) => void): void;
}

/**
 * @class
 * Polymorphism
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AutoRestComplexTestService.
 */
export interface Polymorphism {

    /**
     * Get complex types that are polymorphic
     *
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {function} callback
     *
     * @returns {function} callback(err, result, request, response)
     *
     *                      {Error}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {object} [result]   - The deserialized result object.
     *                      See {@link Fish} for more information.
     *
     *                      {object} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {stream} [response] - The HTTP Response stream if an error did not occur.
     */
    getValid(options: RequestOptions, callback: (err: Error, result: models.Fish, request: WebResource, response: stream.Readable) => void): void;

    /**
     * Put complex types that are polymorphic
     *
     * @param {object} complexBody Please put a salmon that looks like this:
     * {
     * 'dtype':'Salmon',
     * 'location':'alaska',
     * 'iswild':true,
     * 'species':'king',
     * 'length':1.0,
     * 'siblings':[
     * {
     * 'dtype':'Shark',
     * 'age':6,
     * 'birthday': '2012-01-05T01:00:00Z',
     * 'length':20.0,
     * 'species':'predator',
     * },
     * {
     * 'dtype':'Sawshark',
     * 'age':105,
     * 'birthday': '1900-01-05T01:00:00Z',
     * 'length':10.0,
     * 'picture': new Buffer([255, 255, 255, 255,
     * 254]).toString('base64'),
     * 'species':'dangerous',
     * }
     * ]
     * };
     * 
     * @param {string} [complexBody.species]
     * 
     * @param {number} [complexBody.length]
     * 
     * @param {array} [complexBody.siblings]
     * 
     * @param {string} [complexBody.dtype] Polymorhpic Discriminator
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {function} callback
     *
     * @returns {function} callback(err, result, request, response)
     *
     *                      {Error}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object.
     *
     *                      {object} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {stream} [response] - The HTTP Response stream if an error did not occur.
     */
    putValid(complexBody: models.Fish, options: RequestOptions, callback: (err: Error, result: void, request: WebResource, response: stream.Readable) => void): void;

    /**
     * Put complex types that are polymorphic, attempting to omit required
     * 'birthday' field - the request should not be allowed from the client
     *
     * @param {object} complexBody Please attempt put a sawshark that looks like
     * this, the client should not allow this data to be sent:
     * {
     * "dtype": "sawshark",
     * "species": "snaggle toothed",
     * "length": 18.5,
     * "age": 2,
     * "birthday": "2013-06-01T01:00:00Z",
     * "location": "alaska",
     * "picture": base64(FF FF FF FF FE),
     * "siblings": [
     * {
     * "dtype": "shark",
     * "species": "predator",
     * "birthday": "2012-01-05T01:00:00Z",
     * "length": 20,
     * "age": 6
     * },
     * {
     * "dtype": "sawshark",
     * "species": "dangerous",
     * "picture": base64(FF FF FF FF FE),
     * "length": 10,
     * "age": 105
     * }
     * ]
     * }
     * 
     * @param {string} [complexBody.species]
     * 
     * @param {number} [complexBody.length]
     * 
     * @param {array} [complexBody.siblings]
     * 
     * @param {string} [complexBody.dtype] Polymorhpic Discriminator
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {function} callback
     *
     * @returns {function} callback(err, result, request, response)
     *
     *                      {Error}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object.
     *
     *                      {object} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {stream} [response] - The HTTP Response stream if an error did not occur.
     */
    putValidMissingRequired(complexBody: models.Fish, options: RequestOptions, callback: (err: Error, result: void, request: WebResource, response: stream.Readable) => void): void;
}

/**
 * @class
 * Polymorphicrecursive
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AutoRestComplexTestService.
 */
export interface Polymorphicrecursive {

    /**
     * Get complex types that are polymorphic and have recursive references
     *
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {function} callback
     *
     * @returns {function} callback(err, result, request, response)
     *
     *                      {Error}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {object} [result]   - The deserialized result object.
     *                      See {@link Fish} for more information.
     *
     *                      {object} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {stream} [response] - The HTTP Response stream if an error did not occur.
     */
    getValid(options: RequestOptions, callback: (err: Error, result: models.Fish, request: WebResource, response: stream.Readable) => void): void;

    /**
     * Put complex types that are polymorphic and have recursive references
     *
     * @param {object} complexBody Please put a salmon that looks like this:
     * {
     * "dtype": "salmon",
     * "species": "king",
     * "length": 1,
     * "age": 1,
     * "location": "alaska",
     * "iswild": true,
     * "siblings": [
     * {
     * "dtype": "shark",
     * "species": "predator",
     * "length": 20,
     * "age": 6,
     * "siblings": [
     * {
     * "dtype": "salmon",
     * "species": "coho",
     * "length": 2,
     * "age": 2,
     * "location": "atlantic",
     * "iswild": true,
     * "siblings": [
     * {
     * "dtype": "shark",
     * "species": "predator",
     * "length": 20,
     * "age": 6
     * },
     * {
     * "dtype": "sawshark",
     * "species": "dangerous",
     * "length": 10,
     * "age": 105
     * }
     * ]
     * },
     * {
     * "dtype": "sawshark",
     * "species": "dangerous",
     * "length": 10,
     * "age": 105
     * }
     * ]
     * },
     * {
     * "dtype": "sawshark",
     * "species": "dangerous",
     * "length": 10,
     * "age": 105
     * }
     * ]
     * }
     * 
     * @param {string} [complexBody.species]
     * 
     * @param {number} [complexBody.length]
     * 
     * @param {array} [complexBody.siblings]
     * 
     * @param {string} [complexBody.dtype] Polymorhpic Discriminator
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {function} callback
     *
     * @returns {function} callback(err, result, request, response)
     *
     *                      {Error}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object.
     *
     *                      {object} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {stream} [response] - The HTTP Response stream if an error did not occur.
     */
    putValid(complexBody: models.Fish, options: RequestOptions, callback: (err: Error, result: void, request: WebResource, response: stream.Readable) => void): void;
}
