/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.12.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { RequestOptions, WebResource } from "ms-rest";
import * as stream from "stream";
import * as models from "../models";


/**
 * @class
 * Datetime
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the AutoRestDateTimeTestService.
 */
export interface Datetime {

    /**
     * Get null datetime value
     *
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {function} callback
     *
     * @returns {function} callback(err, result, request, response)
     *
     *                      {Error}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {date} [result]   - The deserialized result object.
     *
     *                      {object} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {stream} [response] - The HTTP Response stream if an error did not occur.
     */
    getNull(options: RequestOptions, callback: (err: Error, result: Date, request: WebResource, response: stream.Readable) => void): void;

    /**
     * Get invalid datetime value
     *
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {function} callback
     *
     * @returns {function} callback(err, result, request, response)
     *
     *                      {Error}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {date} [result]   - The deserialized result object.
     *
     *                      {object} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {stream} [response] - The HTTP Response stream if an error did not occur.
     */
    getInvalid(options: RequestOptions, callback: (err: Error, result: Date, request: WebResource, response: stream.Readable) => void): void;

    /**
     * Get overflow datetime value
     *
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {function} callback
     *
     * @returns {function} callback(err, result, request, response)
     *
     *                      {Error}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {date} [result]   - The deserialized result object.
     *
     *                      {object} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {stream} [response] - The HTTP Response stream if an error did not occur.
     */
    getOverflow(options: RequestOptions, callback: (err: Error, result: Date, request: WebResource, response: stream.Readable) => void): void;

    /**
     * Get underflow datetime value
     *
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {function} callback
     *
     * @returns {function} callback(err, result, request, response)
     *
     *                      {Error}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {date} [result]   - The deserialized result object.
     *
     *                      {object} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {stream} [response] - The HTTP Response stream if an error did not occur.
     */
    getUnderflow(options: RequestOptions, callback: (err: Error, result: Date, request: WebResource, response: stream.Readable) => void): void;

    /**
     * Put max datetime value 9999-12-31T23:59:59.9999999Z
     *
     * @param {date} datetimeBody
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {function} callback
     *
     * @returns {function} callback(err, result, request, response)
     *
     *                      {Error}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object.
     *
     *                      {object} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {stream} [response] - The HTTP Response stream if an error did not occur.
     */
    putUtcMaxDateTime(datetimeBody: Date, options: RequestOptions, callback: (err: Error, result: void, request: WebResource, response: stream.Readable) => void): void;

    /**
     * Get max datetime value 9999-12-31t23:59:59.9999999z
     *
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {function} callback
     *
     * @returns {function} callback(err, result, request, response)
     *
     *                      {Error}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {date} [result]   - The deserialized result object.
     *
     *                      {object} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {stream} [response] - The HTTP Response stream if an error did not occur.
     */
    getUtcLowercaseMaxDateTime(options: RequestOptions, callback: (err: Error, result: Date, request: WebResource, response: stream.Readable) => void): void;

    /**
     * Get max datetime value 9999-12-31T23:59:59.9999999Z
     *
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {function} callback
     *
     * @returns {function} callback(err, result, request, response)
     *
     *                      {Error}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {date} [result]   - The deserialized result object.
     *
     *                      {object} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {stream} [response] - The HTTP Response stream if an error did not occur.
     */
    getUtcUppercaseMaxDateTime(options: RequestOptions, callback: (err: Error, result: Date, request: WebResource, response: stream.Readable) => void): void;

    /**
     * Put max datetime value with positive numoffset
     * 9999-12-31t23:59:59.9999999+14:00
     *
     * @param {date} datetimeBody
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {function} callback
     *
     * @returns {function} callback(err, result, request, response)
     *
     *                      {Error}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object.
     *
     *                      {object} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {stream} [response] - The HTTP Response stream if an error did not occur.
     */
    putLocalPositiveOffsetMaxDateTime(datetimeBody: Date, options: RequestOptions, callback: (err: Error, result: void, request: WebResource, response: stream.Readable) => void): void;

    /**
     * Get max datetime value with positive num offset
     * 9999-12-31t23:59:59.9999999+14:00
     *
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {function} callback
     *
     * @returns {function} callback(err, result, request, response)
     *
     *                      {Error}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {date} [result]   - The deserialized result object.
     *
     *                      {object} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {stream} [response] - The HTTP Response stream if an error did not occur.
     */
    getLocalPositiveOffsetLowercaseMaxDateTime(options: RequestOptions, callback: (err: Error, result: Date, request: WebResource, response: stream.Readable) => void): void;

    /**
     * Get max datetime value with positive num offset
     * 9999-12-31T23:59:59.9999999+14:00
     *
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {function} callback
     *
     * @returns {function} callback(err, result, request, response)
     *
     *                      {Error}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {date} [result]   - The deserialized result object.
     *
     *                      {object} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {stream} [response] - The HTTP Response stream if an error did not occur.
     */
    getLocalPositiveOffsetUppercaseMaxDateTime(options: RequestOptions, callback: (err: Error, result: Date, request: WebResource, response: stream.Readable) => void): void;

    /**
     * Put max datetime value with positive numoffset
     * 9999-12-31t23:59:59.9999999-14:00
     *
     * @param {date} datetimeBody
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {function} callback
     *
     * @returns {function} callback(err, result, request, response)
     *
     *                      {Error}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object.
     *
     *                      {object} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {stream} [response] - The HTTP Response stream if an error did not occur.
     */
    putLocalNegativeOffsetMaxDateTime(datetimeBody: Date, options: RequestOptions, callback: (err: Error, result: void, request: WebResource, response: stream.Readable) => void): void;

    /**
     * Get max datetime value with positive num offset
     * 9999-12-31T23:59:59.9999999-14:00
     *
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {function} callback
     *
     * @returns {function} callback(err, result, request, response)
     *
     *                      {Error}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {date} [result]   - The deserialized result object.
     *
     *                      {object} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {stream} [response] - The HTTP Response stream if an error did not occur.
     */
    getLocalNegativeOffsetUppercaseMaxDateTime(options: RequestOptions, callback: (err: Error, result: Date, request: WebResource, response: stream.Readable) => void): void;

    /**
     * Get max datetime value with positive num offset
     * 9999-12-31t23:59:59.9999999-14:00
     *
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {function} callback
     *
     * @returns {function} callback(err, result, request, response)
     *
     *                      {Error}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {date} [result]   - The deserialized result object.
     *
     *                      {object} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {stream} [response] - The HTTP Response stream if an error did not occur.
     */
    getLocalNegativeOffsetLowercaseMaxDateTime(options: RequestOptions, callback: (err: Error, result: Date, request: WebResource, response: stream.Readable) => void): void;

    /**
     * Put min datetime value 0001-01-01T00:00:00Z
     *
     * @param {date} datetimeBody
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {function} callback
     *
     * @returns {function} callback(err, result, request, response)
     *
     *                      {Error}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object.
     *
     *                      {object} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {stream} [response] - The HTTP Response stream if an error did not occur.
     */
    putUtcMinDateTime(datetimeBody: Date, options: RequestOptions, callback: (err: Error, result: void, request: WebResource, response: stream.Readable) => void): void;

    /**
     * Get min datetime value 0001-01-01T00:00:00Z
     *
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {function} callback
     *
     * @returns {function} callback(err, result, request, response)
     *
     *                      {Error}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {date} [result]   - The deserialized result object.
     *
     *                      {object} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {stream} [response] - The HTTP Response stream if an error did not occur.
     */
    getUtcMinDateTime(options: RequestOptions, callback: (err: Error, result: Date, request: WebResource, response: stream.Readable) => void): void;

    /**
     * Put min datetime value 0001-01-01T00:00:00+14:00
     *
     * @param {date} datetimeBody
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {function} callback
     *
     * @returns {function} callback(err, result, request, response)
     *
     *                      {Error}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object.
     *
     *                      {object} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {stream} [response] - The HTTP Response stream if an error did not occur.
     */
    putLocalPositiveOffsetMinDateTime(datetimeBody: Date, options: RequestOptions, callback: (err: Error, result: void, request: WebResource, response: stream.Readable) => void): void;

    /**
     * Get min datetime value 0001-01-01T00:00:00+14:00
     *
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {function} callback
     *
     * @returns {function} callback(err, result, request, response)
     *
     *                      {Error}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {date} [result]   - The deserialized result object.
     *
     *                      {object} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {stream} [response] - The HTTP Response stream if an error did not occur.
     */
    getLocalPositiveOffsetMinDateTime(options: RequestOptions, callback: (err: Error, result: Date, request: WebResource, response: stream.Readable) => void): void;

    /**
     * Put min datetime value 0001-01-01T00:00:00-14:00
     *
     * @param {date} datetimeBody
     * 
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {function} callback
     *
     * @returns {function} callback(err, result, request, response)
     *
     *                      {Error}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object.
     *
     *                      {object} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {stream} [response] - The HTTP Response stream if an error did not occur.
     */
    putLocalNegativeOffsetMinDateTime(datetimeBody: Date, options: RequestOptions, callback: (err: Error, result: void, request: WebResource, response: stream.Readable) => void): void;

    /**
     * Get min datetime value 0001-01-01T00:00:00-14:00
     *
     * @param {object} [options]
     *
     * @param {object} [options.customHeaders] headers that will be added to
     * request
     *
     * @param {function} callback
     *
     * @returns {function} callback(err, result, request, response)
     *
     *                      {Error}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {date} [result]   - The deserialized result object.
     *
     *                      {object} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {stream} [response] - The HTTP Response stream if an error did not occur.
     */
    getLocalNegativeOffsetMinDateTime(options: RequestOptions, callback: (err: Error, result: Date, request: WebResource, response: stream.Readable) => void): void;
}
