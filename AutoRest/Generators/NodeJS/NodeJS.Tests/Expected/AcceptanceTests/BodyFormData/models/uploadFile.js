/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.13.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

/**
 * @class
 * Initializes a new instance of the UploadFile class.
 * @constructor
 * @member {string} [fieldName]
 * 
 * @member {string} [originalName]
 * 
 * @member {string} [encoding]
 * 
 * @member {string} [mimetype]
 * 
 * @member {object} [buffer]
 * 
 * @member {string} [buffer.type]
 * 
 * @member {array} [buffer.data]
 * 
 * @member {number} [size]
 * 
 */
function UploadFile(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.fieldName !== undefined) {
      this.fieldName = parameters.fieldName;
    }
    if (parameters.originalName !== undefined) {
      this.originalName = parameters.originalName;
    }
    if (parameters.encoding !== undefined) {
      this.encoding = parameters.encoding;
    }
    if (parameters.mimetype !== undefined) {
      this.mimetype = parameters.mimetype;
    }
    if (parameters.buffer) {
      this.buffer = new models['BufferModel'](parameters.buffer);
    }
    if (parameters.size !== undefined) {
      this.size = parameters.size;
    }
  }    
}


/**
 * Validate the payload against the UploadFile schema
 *
 * @param {JSON} payload
 *
 */
UploadFile.prototype.serialize = function () {
  var payload = {};
  if (this['fieldName'] !== null && this['fieldName'] !== undefined) {
    if (typeof this['fieldName'].valueOf() !== 'string') {
      throw new Error('this[\'fieldName\'] must be of type string.');
    }
    payload['fieldName'] = this['fieldName'];
  }

  if (this['originalName'] !== null && this['originalName'] !== undefined) {
    if (typeof this['originalName'].valueOf() !== 'string') {
      throw new Error('this[\'originalName\'] must be of type string.');
    }
    payload['originalName'] = this['originalName'];
  }

  if (this['encoding'] !== null && this['encoding'] !== undefined) {
    if (typeof this['encoding'].valueOf() !== 'string') {
      throw new Error('this[\'encoding\'] must be of type string.');
    }
    payload['encoding'] = this['encoding'];
  }

  if (this['mimetype'] !== null && this['mimetype'] !== undefined) {
    if (typeof this['mimetype'].valueOf() !== 'string') {
      throw new Error('this[\'mimetype\'] must be of type string.');
    }
    payload['mimetype'] = this['mimetype'];
  }

  if (this['buffer']) {
    payload['buffer'] = this['buffer'].serialize();
  }

  if (this['size'] !== null && this['size'] !== undefined) {
    if (typeof this['size'] !== 'number') {
      throw new Error('this[\'size\'] must be of type number.');
    }
    payload['size'] = this['size'];
  }

  return payload;
};

/**
 * Deserialize the instance to UploadFile schema
 *
 * @param {JSON} instance
 *
 */
UploadFile.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['fieldName'] !== undefined) {
      this['fieldName'] = instance['fieldName'];
    }

    if (instance['originalName'] !== undefined) {
      this['originalName'] = instance['originalName'];
    }

    if (instance['encoding'] !== undefined) {
      this['encoding'] = instance['encoding'];
    }

    if (instance['mimetype'] !== undefined) {
      this['mimetype'] = instance['mimetype'];
    }

    if (instance['buffer']) {
      this['buffer'] = new models['BufferModel']().deserialize(instance['buffer']);
    }

    if (instance['size'] !== undefined) {
      this['size'] = instance['size'];
    }
  }

  return this;
};

module.exports = UploadFile;
