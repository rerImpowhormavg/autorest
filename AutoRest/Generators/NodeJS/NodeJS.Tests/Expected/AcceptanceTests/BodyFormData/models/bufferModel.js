/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.13.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var util = require('util');

/**
 * @class
 * Initializes a new instance of the BufferModel class.
 * @constructor
 * @member {string} [type]
 * 
 * @member {array} [data]
 * 
 */
function BufferModel(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.type !== undefined) {
      this.type = parameters.type;
    }
    if (parameters.data) {
      var tempParametersdata = [];
      parameters.data.forEach(function(element) {
        if (element !== undefined) {
          element = element;
        }
        tempParametersdata.push(element);
      });
      this.data = tempParametersdata;
    }
  }    
}


/**
 * Validate the payload against the BufferModel schema
 *
 * @param {JSON} payload
 *
 */
BufferModel.prototype.serialize = function () {
  var payload = {};
  if (this['type'] !== null && this['type'] !== undefined) {
    if (typeof this['type'].valueOf() !== 'string') {
      throw new Error('this[\'type\'] must be of type string.');
    }
    payload['type'] = this['type'];
  }

  if (util.isArray(this['data'])) {
    payload['data'] = [];
    for (var i = 0; i < this['data'].length; i++) {
      if (this['data'][i] !== null && this['data'][i] !== undefined) {
        if (typeof this['data'][i] !== 'number') {
          throw new Error('this[\'data\'][i] must be of type number.');
        }
        if (payload['data'] === null || payload['data'] === undefined) {
          payload['data'] = {};
        }
        payload['data'][i] = this['data'][i];
      }
    }
  }

  return payload;
};

/**
 * Deserialize the instance to BufferModel schema
 *
 * @param {JSON} instance
 *
 */
BufferModel.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['type'] !== undefined) {
      this['type'] = instance['type'];
    }

    if (instance['data']) {
      var tempInstancedata = [];
      instance['data'].forEach(function(element1) {
        if (element1 !== undefined) {
          element1 = element1;
        }
        tempInstancedata.push(element1);
      });
      this['data'] = tempInstancedata;
    }
  }

  return this;
};

module.exports = BufferModel;
