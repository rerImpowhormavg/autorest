@using System.Linq
@using System.Collections.Generic
@using Microsoft.Rest.Generator.ClientModel
@using Microsoft.Rest.Generator.NodeJS.TemplateModels
@inherits Microsoft.Rest.Generator.Template<Microsoft.Rest.Generator.NodeJS.ModelTemplateModel>
/*
@Header(" * ")
 */
@EmptyLine
'use strict';
@EmptyLine
@if (Model.ContainsPropertiesInCompositeType())
{
@:var models = require('./index');
@EmptyLine
}
@if (Model.ContainsPropertiesInSequenceType())
{
@:var util = require('util');
@EmptyLine
}

/**
 * @@class
 * Initializes a new instance of the @(Model.Name) class.
 * @@constructor
 */
function @(Model.Name)(parameters) {
@{ 
  if (Model.BaseModelType != null)
  {
  @:@(Model.Name)['super_'].call(this, parameters);
  }
  if (Model.Properties.Count > 0)
  {
  @:if (parameters !== null && parameters !== undefined) {
    for (int i = 0; i < Model.Properties.Count; i++) 
    {
    @:if (parameters['@(Model.Properties[i].Name)'] !== null && parameters['@(Model.Properties[i].Name)'] !== undefined) {
      if (Model.Properties[i].Type.GetType().Name == "CompositeType")
      {
      @:this['@(Model.Properties[i].Name)'] = new models['@(Model.Properties[i].Type.Name)'](parameters['@(Model.Properties[i].Name)']);
      }
      else
      {
      @:this['@(Model.Properties[i].Name)'] = parameters['@(Model.Properties[i].Name)'];
      }
    @:}
    }
  @:}    
  }
}
}
@EmptyLine
@{
if (Model.BaseModelType != null)
{
@:util.inherits(@(Model.Name), models['@(Model.BaseModelType.Name)']);
}
}
@EmptyLine
/**
 * Validate the payload against the @Model.Name schema
 *
 * @@param {JSON} payload
 *
 */
@(Model.Name).prototype.serialize = function () {
  var payload = {};
@{
  if (Model.BaseModelType != null)
  {
  @:payload = @(Model.Name)['super_'].prototype.serialize.call(this);
  }
  var propertyList = new List<Property>(Model.ComposedProperties);
  for (int i = 0; i < propertyList.Count; i++)
  {
  @:@(Model.ValidateProperty("payload", propertyList[i]))
  if (i != propertyList.Count-1)
  {
  @EmptyLine
  }
  }
}
};
@EmptyLine
/**
 * Deserialize the instance to @Model.Name schema
 *
 * @@param {JSON} instance
 *
 */
@(Model.Name).prototype.deserialize = function (instance) {
  @{
  if (Model.BaseModelType != null)
  {
  @:@(Model.Name)['super_'].prototype.deserialize.call(this, instance);
  }
  var specialProperties = Model.SpecialProperties;
  if (specialProperties.Count() > 0)
  {
  @:if (instance) {
    var specialPropertyList = new List<Property>(Model.SpecialProperties);
    for (int i = 0; i < specialPropertyList.Count; i++)
    {
    @:@(Model.DeserializeProperty("instance", specialPropertyList[i]))
    if (i != specialPropertyList.Count - 1)
    {
    @EmptyLine
    }
    }
  @:}
  }
  @:return instance;
  }
};
@EmptyLine
module.exports = @(Model.Name);