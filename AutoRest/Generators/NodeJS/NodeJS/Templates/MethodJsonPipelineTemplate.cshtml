@using System.Linq;
@using Microsoft.Rest.Generator.ClientModel
@using Microsoft.Rest.Generator.NodeJS
@using Microsoft.Rest.Generator.NodeJS.TemplateModels
@inherits Microsoft.Rest.Generator.Template<Microsoft.Rest.Generator.NodeJS.MethodTemplateModel>
// Send Request
return client.pipeline(httpRequest, function (err, response, responseBody) {
  if (err) {
    return callback(err);
  }
  var statusCode = response.statusCode;
  if (@(Model.FailureStatusCodePredicate)) {
    var error = new Error(responseBody);
    error.statusCode = response.statusCode;
    error.request = httpRequest;
    error.response = response;
    if (responseBody === '') responseBody = null;
    var parsedErrorResponse;
    try {
      parsedErrorResponse = JSON.parse(responseBody);
      error.body = parsedErrorResponse;
  @if (Model.DefaultResponse != null)
  {
      var deserializeErrorBody = Model.GetDeserializationString(Model.DefaultResponse, "error.body");
      if (!string.IsNullOrWhiteSpace(deserializeErrorBody))
      {
@:      if (error.body !== null && error.body !== undefined) {
@:        @(deserializeErrorBody)
@:      }
      }
  }
    } catch (defaultError) {
      error.message = util.format('Error "%s" occurred in deserializing the responseBody - "%s" for the default response.', defaultError, responseBody);
      return callback(error);
    }
    return callback(error);
  }

  // Create Result
  var result = null;
  if (responseBody === '') responseBody = null;
  @Model.InitializeResponseBody

  @foreach (var responsePair in Model.Responses.Where(r => r.Value != null))
  {
      <text>
  // Deserialize Response
  if (statusCode === @MethodTemplateModel.GetStatusCodeReference(responsePair.Key)) {
    var parsedResponse = null;
    try {
      parsedResponse = JSON.parse(responseBody);
  @if (Model.ReturnType is CompositeType)
  {
      if (!string.IsNullOrEmpty(((CompositeType)Model.ReturnType).PolymorphicDiscriminator))
      {
      @:result = new client._models.discriminators[parsedResponse[@(((CompositeType)Model.ReturnType).PolymorphicDiscriminator)']]();
      }
      else
      {
      @:result = new client._models['@(Model.ReturnType.Name)']();
      }
  }
  @{
      var deserializeBody = Model.GetDeserializationString(Model.ReturnType);
      if (!string.IsNullOrWhiteSpace(deserializeBody))
      {
@:    if (parsedResponse !== null && parsedResponse !== undefined) {
@:        @(deserializeBody)
@:      }
      }
   }
    } catch (error) {
      @(Model.DeserializationError)
    }
  }
      </text>
  }
  @if (Model.ReturnType != null && Model.DefaultResponse != null && !Model.Responses.Any())
  {
@:  var parsedResponse = null;
@:  try {
@:    parsedResponse = JSON.parse(responseBody);
  if (Model.DefaultResponse is CompositeType)
  {
      if (!string.IsNullOrEmpty(((CompositeType)Model.DefaultResponse).PolymorphicDiscriminator))
      {
    @:result = new client._models.discriminators[parsedResponse[@(((CompositeType)Model.DefaultResponse).PolymorphicDiscriminator)']]();
      }
      else
      {
    @:result = new client._models['@(Model.DefaultResponse.Name)']();
      }
  }
    var deserializeBody = Model.GetDeserializationString(Model.DefaultResponse);
    if (!string.IsNullOrWhiteSpace(deserializeBody))
    {
@:    if (parsedResponse !== null && parsedResponse !== undefined) {
@:      @(deserializeBody)
@:    }
    }
@:  } catch (error) {
@:@(Model.DeserializationError)
@:}
  }
  @EmptyLine

  return callback(null, result, httpRequest, response);
});