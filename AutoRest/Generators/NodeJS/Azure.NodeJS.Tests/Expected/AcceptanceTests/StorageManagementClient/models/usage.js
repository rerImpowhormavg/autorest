/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

/**
 * @class
 * Initializes a new instance of the Usage class.
 * @constructor
 */
function Usage(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters['unit'] !== null && parameters['unit'] !== undefined) {
      this['unit'] = parameters['unit'];
    }
    if (parameters['currentValue'] !== null && parameters['currentValue'] !== undefined) {
      this['currentValue'] = parameters['currentValue'];
    }
    if (parameters['limit'] !== null && parameters['limit'] !== undefined) {
      this['limit'] = parameters['limit'];
    }
    if (parameters['name'] !== null && parameters['name'] !== undefined) {
      this['name'] = new models['UsageName'](parameters['name']);
    }
  }    
}


/**
 * Validate the payload against the Usage schema
 *
 * @param {JSON} payload
 *
 */
Usage.prototype.serialize = function () {
  var payload = {};
  if (payload['unit']) {
    var allowedValues = [ 'Count', 'Bytes', 'Seconds', 'Percent', 'CountsPerSecond', 'BytesPerSecond' ];
    if (!allowedValues.some( function(item) { return item === payload['unit']; })) {
      throw new Error(payload['unit'] + ' is not a valid value. The valid values are: ' + allowedValues);
    }
  }

  if (payload['currentValue'] !== null && payload['currentValue'] !== undefined && typeof payload['currentValue'] !== 'number') {
    throw new Error('payload[\'currentValue\'] must be of type number.');
  }

  if (payload['limit'] !== null && payload['limit'] !== undefined && typeof payload['limit'] !== 'number') {
    throw new Error('payload[\'limit\'] must be of type number.');
  }

  if (payload['name']) {
    models['UsageName'].validate(payload['name']);
  }
};

/**
 * Deserialize the instance to Usage schema
 *
 * @param {JSON} instance
 *
 */
Usage.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance.name !== null && instance.name !== undefined) {
      instance.name = models['UsageName'].deserialize(instance.name);
    }
  }
  return instance;
};

module.exports = Usage;
