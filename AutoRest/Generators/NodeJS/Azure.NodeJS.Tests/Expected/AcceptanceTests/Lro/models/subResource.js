/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the SubResource class.
 * @constructor
 * @member {string} [id] Sub Resource Id
 * 
 */
function SubResource() {
  SubResource['super_'].call(this);
}

util.inherits(SubResource, models['BaseResource']);

/**
 * Defines the metadata of SubResource
 *
 * @returns {object} metadata of SubResource
 *
 */
SubResource.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'SubResource',
    type: {
      name: 'Composite',
      className: 'SubResource',
      modelProperties: {
        id: {
          required: false,
          serializedName: 'id',
          type: {
            name: 'String'
          }
        }
      }
    }
  };
};

/**
 * Validate the payload against the SubResource schema
 *
 * @param {JSON} payload
 *
 */
SubResource.prototype.serialize = function () {
  var payload = SubResource['super_'].prototype.serialize.call(this);
  if (this['id'] !== null && this['id'] !== undefined) {
    if (typeof this['id'].valueOf() !== 'string') {
      throw new Error('this[\'id\'] must be of type string.');
    }
    payload['id'] = this['id'];
  }

  return payload;
};

/**
 * Deserialize the instance to SubResource schema
 *
 * @param {JSON} instance
 *
 */
SubResource.prototype.deserialize = function (instance) {
  SubResource['super_'].prototype.deserialize.call(this, instance);
  if (instance) {
    if (instance['id'] !== undefined) {
      this['id'] = instance['id'];
    }
  }

  return this;
};

module.exports = SubResource;
