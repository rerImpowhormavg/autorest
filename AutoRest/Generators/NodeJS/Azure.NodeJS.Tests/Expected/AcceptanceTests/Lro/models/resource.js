/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the Resource class.
 * @constructor
 * @member {string} [id] Resource Id
 * 
 * @member {string} [type] Resource Type
 * 
 * @member {object} [tags]
 * 
 * @member {string} [location] Resource Location
 * 
 * @member {string} [name] Resource Name
 * 
 */
function Resource() {
  Resource['super_'].call(this);
}

util.inherits(Resource, models['BaseResource']);

/**
 * Defines the metadata of Resource
 *
 * @returns {object} metadata of Resource
 *
 */
Resource.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'Resource',
    type: {
      name: 'Composite',
      className: 'Resource',
      modelProperties: {
        id: {
          required: false,
          serializedName: 'id',
          type: {
            name: 'String'
          }
        },
        type: {
          required: false,
          serializedName: 'type',
          type: {
            name: 'String'
          }
        },
        tags: {
          required: false,
          serializedName: 'tags',
          type: {
            name: 'Dictionary',
            value: {
                required: false,
                serializedName: 'StringElementType',
                type: {
                  name: 'String'
                }
            }
          }
        },
        location: {
          required: false,
          serializedName: 'location',
          type: {
            name: 'String'
          }
        },
        name: {
          required: false,
          serializedName: 'name',
          type: {
            name: 'String'
          }
        }
      }
    }
  };
};

/**
 * Validate the payload against the Resource schema
 *
 * @param {JSON} payload
 *
 */
Resource.prototype.serialize = function () {
  var payload = Resource['super_'].prototype.serialize.call(this);
  if (this['id'] !== null && this['id'] !== undefined) {
    if (typeof this['id'].valueOf() !== 'string') {
      throw new Error('this[\'id\'] must be of type string.');
    }
    payload['id'] = this['id'];
  }

  if (this['type'] !== null && this['type'] !== undefined) {
    if (typeof this['type'].valueOf() !== 'string') {
      throw new Error('this[\'type\'] must be of type string.');
    }
    payload['type'] = this['type'];
  }

  if (this['tags'] && typeof this['tags'] === 'object') {
    payload['tags'] = {};
    for(var valueElement in this['tags']) {
      if (this['tags'][valueElement] !== null && this['tags'][valueElement] !== undefined) {
        if (typeof this['tags'][valueElement].valueOf() !== 'string') {
          throw new Error('this[\'tags\'][valueElement] must be of type string.');
        }
        payload['tags'][valueElement] = this['tags'][valueElement];
      }
      else {
        payload['tags'][valueElement] = this['tags'][valueElement];
      }
    }
  }

  if (this['location'] !== null && this['location'] !== undefined) {
    if (typeof this['location'].valueOf() !== 'string') {
      throw new Error('this[\'location\'] must be of type string.');
    }
    payload['location'] = this['location'];
  }

  if (this['name'] !== null && this['name'] !== undefined) {
    if (typeof this['name'].valueOf() !== 'string') {
      throw new Error('this[\'name\'] must be of type string.');
    }
    payload['name'] = this['name'];
  }

  return payload;
};

/**
 * Deserialize the instance to Resource schema
 *
 * @param {JSON} instance
 *
 */
Resource.prototype.deserialize = function (instance) {
  Resource['super_'].prototype.deserialize.call(this, instance);
  if (instance) {
    if (instance['id'] !== undefined) {
      this['id'] = instance['id'];
    }

    if (instance['type'] !== undefined) {
      this['type'] = instance['type'];
    }

    if (instance['tags']) {
      this['tags'] = {};
      for(var valueElement1 in instance['tags']) {
        if (instance['tags'] !== null && instance['tags'] !== undefined) {
          if (instance['tags'][valueElement1] !== undefined) {
            this['tags'][valueElement1] = instance['tags'][valueElement1];
          }
        }
      }
    }

    if (instance['location'] !== undefined) {
      this['location'] = instance['location'];
    }

    if (instance['name'] !== undefined) {
      this['name'] = instance['name'];
    }
  }

  return this;
};

module.exports = Resource;
