/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the ProductResult class.
 * @constructor
 * @member {array} [values]
 * 
 * @member {string} [nextLink]
 * 
 */
function ProductResult(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.values !== null && parameters.values !== undefined) {
      var initializedParametersvalues = [];
      parameters.values.forEach(function(element) {
        if (element !== null && element !== undefined) {
          element = new models['Product'](element);
        }
        initializedParametersvalues.push(element);
      });
      this.values = initializedParametersvalues;
    }
    if (parameters.nextLink !== null && parameters.nextLink !== undefined) {
      this.nextLink = parameters.nextLink;
    }
  }    
}


/**
 * Validate the payload against the ProductResult schema
 *
 * @param {JSON} payload
 *
 */
ProductResult.prototype.serialize = function () {
  var payload = {};
  if (util.isArray(this['values'])) {
    payload['values'] = [];
    for (var i = 0; i < this['values'].length; i++) {
      if (this['values'][i]) {
        payload['values'][i] = this['values'][i].serialize();
      }
    }
  }

  if (this['nextLink'] !== null && this['nextLink'] !== undefined) {
    if (typeof this['nextLink'].valueOf() !== 'string') {
      throw new Error('this[\'nextLink\'] must be of type string.');
    }
    payload['nextLink'] = this['nextLink'];
  }

  return payload;
};

/**
 * Deserialize the instance to ProductResult schema
 *
 * @param {JSON} instance
 *
 */
ProductResult.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['values'] !== null && instance['values'] !== undefined) {
      var deserializedInstancevalues = [];
      instance['values'].forEach(function(element1) {
        if (element1 !== null && element1 !== undefined) {
          element1 = new models['Product']().deserialize(element1);
        }
        deserializedInstancevalues.push(element1);
      });
      this['values'] = deserializedInstancevalues;
    }

    this['nextLink'] = instance['nextLink'];
  }

  return this;
};

module.exports = ProductResult;
