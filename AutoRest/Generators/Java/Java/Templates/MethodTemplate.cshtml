@using System.Linq;
@using Microsoft.Rest.Generator.ClientModel
@using Microsoft.Rest.Generator.Java
@using Microsoft.Rest.Generator.Java.TemplateModels
@using Microsoft.Rest.Generator.Utilities
@inherits Microsoft.Rest.Generator.Template<Microsoft.Rest.Generator.Java.MethodTemplateModel>
@if (Model.LocalParameters.Any(p => !p.IsConstant && !p.IsRequired))
{
<text>
/**
@if (!string.IsNullOrEmpty(Model.Summary))
{
@: * @Model.Summary.EscapeXmlComment().Period()
}
@if (!string.IsNullOrEmpty(Model.Description))
{
@: * @Model.Description.EscapeXmlComment().Period()
}
 *
@foreach (var param in Model.LocalParameters.Where(p => !p.IsConstant && p.IsRequired))
{
@: * @@param @param.Name @((param.Documentation ?? "the " + param.Type.ToString() + " value").EscapeXmlComment())
}
@foreach (var exception in Model.ExceptionStatements)
{
@: * @@throws @exception
}
@if (Model.ReturnType.Body != null)
{
@: * @@return the @Model.ReturnTypeModel.BodyClientType.Name.EscapeXmlComment() object wrapped in {@@link @Model.ReturnTypeModel.ClientResponseType} if successful.
}
else
{
@: * @@return the {@@link @Model.ReturnTypeModel.ClientResponseType} object if successful.
}
 */
public @Model.ReturnTypeModel.ClientResponseTypeString @(Model.Name)(@Model.MethodRequiredParameterDeclaration) throws @Model.ExceptionString {
@foreach (var param in Model.RequiredNullableParameters)
{
@:    if (@param.Name == null) {
@:        throw new IllegalArgumentException("Parameter @param.Name is required and cannot be null.");
@:    }
}
@foreach (var param in Model.ParametersToValidate.Where(p => p.IsRequired))
{
@:    Validator.validate(@(param.Name));
}
@foreach (ParameterModel parameter in Model.LocalParameters)
{
    if (!parameter.IsRequired)
    {
@:    final @(parameter.WireType.Name) @(parameter.WireName) = @(parameter.WireType.DefaultValue(Model));
    }
    if (parameter.IsConstant)
    {
@:    final @(parameter.ClientType.ParameterVariant) @(parameter.Name) = @(parameter.DefaultValue);

    }
}
    @Model.BuildInputMappings(true)

@if (Model.ServiceClient.Extensions.ContainsKey(Microsoft.Rest.Generator.Extensions.ParameterizedHostExtension))
{
foreach (var param in Model.Parameters.Where(p => p.Extensions.ContainsKey("hostParameter")))
{
@:    @(Model.ClientReference).getBaseUrl().set("{@(param.SerializedName)}", @param.Name);
}
}
    @Model.RequiredParameterConversion
    Call<@Model.CallType> call = service.@(Model.Name)(@Model.MethodRequiredParameterApiInvocation);
    @Model.ResponseGeneration(true)
    return @Model.ReturnValue;
}
@EmptyLine
/**
@if (!string.IsNullOrEmpty(Model.Summary))
{
@: * @Model.Summary.EscapeXmlComment().Period()
}
@if (!string.IsNullOrEmpty(Model.Description))
{
@: * @Model.Description.EscapeXmlComment().Period()
}
 *
@foreach (var param in Model.LocalParameters.Where(p => !p.IsConstant && p.IsRequired))
{
@: * @@param @param.Name @((param.Documentation ?? "the " + param.Type.ToString() + " value").EscapeXmlComment())
}
@Model.CallbackDocumentation
 * @@throws IllegalArgumentException thrown if callback is null
 * @@return the {@@link Call} object
 */
public ServiceCall @(Model.Name)Async(@Model.MethodRequiredParameterDeclarationWithCallback) throws IllegalArgumentException {
    if (serviceCallback == null) {
        throw new IllegalArgumentException("ServiceCallback is required for async calls.");
    }
@foreach (var param in Model.RequiredNullableParameters)
{
@:    if (@param.Name == null) {
@:        serviceCallback.failure(new IllegalArgumentException("Parameter @param.Name is required and cannot be null."));
@:        return null;
@:    }
}
@foreach (var param in Model.ParametersToValidate.Where(p => p.IsRequired))
{
@:    Validator.validate(@(param.Name), serviceCallback);
}

@foreach (ParameterModel parameter in Model.LocalParameters)
{
    if (!parameter.IsRequired)
    {
@:    final @(parameter.WireType.Name) @(parameter.WireName) = @(parameter.WireType.DefaultValue(Model));
    }
    if (parameter.IsConstant)
    {
@:    final @(parameter.ClientType.ParameterVariant) @(parameter.Name) = @(parameter.DefaultValue);
    }
}
    @Model.BuildInputMappings(true)

@if (Model.ServiceClient.Extensions.ContainsKey(Microsoft.Rest.Generator.Extensions.ParameterizedHostExtension))
{
foreach (var param in Model.Parameters.Where(p => p.Extensions.ContainsKey("hostParameter")))
{
@:    @(Model.ClientReference).getBaseUrl().set("{@(param.SerializedName)}", @param.Name);
}
}
    @Model.RequiredParameterConversion
    Call<@Model.CallType> call = service.@(Model.Name)(@Model.MethodRequiredParameterApiInvocation);
    @Model.ServiceCallConstruction
    call.enqueue(new @Model.InternalCallback<@(Model.ReturnTypeModel.ClientCallbackTypeString)>(serviceCallback) {
        @@Override
        public void onResponse(Call<@Model.CallType> call, Response<@Model.CallType> response) {
            try {
                @Model.SuccessCallback(true)
            } catch (@Model.OperationExceptionTypeString | IOException exception) {
                serviceCallback.failure(exception);
            }
        }
    });
    return serviceCall;
}
@EmptyLine
</text>
}
/**
@if (!string.IsNullOrEmpty(Model.Summary))
{
@: * @Model.Summary.EscapeXmlComment().Period()
}
@if (!string.IsNullOrEmpty(Model.Description))
{
@: * @Model.Description.EscapeXmlComment().Period()
}
 *
@foreach (var param in Model.LocalParameters.Where(p => !p.IsConstant))
{
@: * @@param @param.Name @((param.Documentation ?? "the " + param.Type.ToString() + " value").EscapeXmlComment())
}
@foreach (var exception in Model.ExceptionStatements)
{
@: * @@throws @exception
}
@if (Model.ReturnType.Body != null)
{
@: * @@return the @Model.ReturnTypeModel.BodyClientType.Name.EscapeXmlComment() object wrapped in {@@link @Model.ReturnTypeModel.ClientResponseType} if successful.
}
else
{
@: * @@return the {@@link @Model.ReturnTypeModel.ClientResponseType} object if successful.
}
 */
public @Model.ReturnTypeModel.ClientResponseTypeString @(Model.Name)(@Model.MethodParameterDeclaration) throws @Model.ExceptionString {
@foreach (var param in Model.RequiredNullableParameters)
{
@:    if (@param.Name == null) {
@:        throw new IllegalArgumentException("Parameter @param.Name is required and cannot be null.");
@:    }
}
@foreach (var param in Model.ParametersToValidate)
{
@:    Validator.validate(@(param.Name));
}
@foreach (ParameterModel parameter in Model.LocalParameters)
{
    if (parameter.IsConstant)
    {
@:    final @(parameter.Type.Name) @(parameter.Name) = @(parameter.DefaultValue);
    }
}
    @Model.BuildInputMappings()

@if (Model.ServiceClient.Extensions.ContainsKey(Microsoft.Rest.Generator.Extensions.ParameterizedHostExtension))
{
foreach (var param in Model.Parameters.Where(p => p.Extensions.ContainsKey("hostParameter")))
{
@:    @(Model.ClientReference).getBaseUrl().set("{@(param.SerializedName)}", @param.Name);
}
}
    @Model.ParameterConversion
    Call<@Model.CallType> call = service.@(Model.Name)(@Model.MethodParameterApiInvocation);
    @Model.ResponseGeneration()
    return @Model.ReturnValue;
}
@EmptyLine
/**
@if (!string.IsNullOrEmpty(Model.Summary))
{
@: * @Model.Summary.EscapeXmlComment().Period()
}
@if (!string.IsNullOrEmpty(Model.Description))
{
@: * @Model.Description.EscapeXmlComment().Period()
}
 *
@foreach (var param in Model.LocalParameters.Where(p => !p.IsConstant))
{
@: * @@param @param.Name @((param.Documentation ?? "the " + param.Type.ToString() + " value").EscapeXmlComment())
}
@Model.CallbackDocumentation
 * @@throws IllegalArgumentException thrown if callback is null
 * @@return the {@@link Call} object
 */
public ServiceCall @(Model.Name)Async(@Model.MethodParameterDeclarationWithCallback) throws IllegalArgumentException {
    if (serviceCallback == null) {
        throw new IllegalArgumentException("ServiceCallback is required for async calls.");
    }
@foreach (var param in Model.RequiredNullableParameters)
{
@:    if (@param.Name == null) {
@:        serviceCallback.failure(new IllegalArgumentException("Parameter @param.Name is required and cannot be null."));
@:        return null;
@:    }
}
@foreach (var param in Model.ParametersToValidate)
{
@:    Validator.validate(@(param.Name), serviceCallback);
}

@foreach (ParameterModel parameter in Model.LocalParameters)
{
    if (parameter.IsConstant)
    {
@:    final @(parameter.Type.Name) @(parameter.Name) = @(parameter.DefaultValue);
    }
}
    @Model.BuildInputMappings()

@if (Model.ServiceClient.Extensions.ContainsKey(Microsoft.Rest.Generator.Extensions.ParameterizedHostExtension))
{
foreach (var param in Model.Parameters.Where(p => p.Extensions.ContainsKey("hostParameter")))
{
@:    @(Model.ClientReference).getBaseUrl().set("{@(param.SerializedName)}", @param.Name);
}
}
    @Model.ParameterConversion
    Call<@Model.CallType> call = service.@(Model.Name)(@Model.MethodParameterApiInvocation);
    @Model.ServiceCallConstruction
    call.enqueue(new @Model.InternalCallback<@(Model.ReturnTypeModel.ClientCallbackTypeString)>(serviceCallback) {
        @@Override
        public void onResponse(Call<@Model.CallType> call, Response<@Model.CallType> response) {
            try {
                @Model.SuccessCallback()
            } catch (@Model.OperationExceptionTypeString | IOException exception) {
                serviceCallback.failure(exception);
            }
        }
    });
    return serviceCall;
}
@EmptyLine
private @Model.ReturnTypeModel.WireResponseTypeString @(Model.Name)Delegate(Response<@Model.CallType> response) throws @Model.ExceptionString {
    return new @Model.ResponseBuilder<@Model.ReturnTypeModel.GenericBodyWireTypeString, @Model.OperationExceptionTypeString>(@(Model.ClientReference).getMapperAdapter())
@foreach (var response in Model.ResponseModels)
{

            @:.register(@((int)response.Key), new TypeToken<@response.Value.GenericBodyWireTypeString>() { }.getType())
}
@if (Model.DefaultResponse.Body != null)
{
            @:.registerError(@(Model.OperationExceptionTypeString).class)
}
@if (Model.HttpMethod == HttpMethod.Head)
{
    if (Model.ReturnType.Headers != null)
    {
            @:.buildEmptyWithHeaders(response, @(Model.ReturnType.Headers.Name).class);
    }
    else
    {
            @:.buildEmpty(response);
    }
}
else
{
    if (Model.ReturnType.Headers != null)
    {
            @:.buildWithHeaders(response, @(Model.ReturnType.Headers.Name).class);
    }
    else
    {
            @:.build(response);
    }
}
}