/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator 0.15.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.headexceptions;

import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceResponseBuilder;
import com.microsoft.azure.CloudException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseEmptyCallback;
import java.io.IOException;
import retrofit.Call;
import retrofit.Response;
import retrofit.Retrofit;

/**
 * An instance of this class provides access to all the operations defined
 * in HeadExceptionOperations.
 */
public final class HeadExceptionOperationsImpl implements HeadExceptionOperations {
    /** The Retrofit service to perform REST calls. */
    private HeadExceptionService service;
    /** The service client containing this operation class. */
    private AutoRestHeadExceptionTestService client;

    /**
     * Initializes an instance of HeadExceptionOperations.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public HeadExceptionOperationsImpl(Retrofit retrofit, AutoRestHeadExceptionTestService client) {
        this.service = retrofit.create(HeadExceptionService.class);
        this.client = client;
    }

    /**
     * Return 200 status code if successful.
     *
     * @throws CloudException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the {@link ServiceResponse} object if successful.
     */
    public ServiceResponse<Void> head200() throws CloudException, IOException {
        Call<Void> call = service.head200(this.client.getAcceptLanguage());
        return head200Delegate(call.execute(), null);
    }

    /**
     * Return 200 status code if successful.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public Call<Void> head200Async(final ServiceCallback<Void> serviceCallback) {
        Call<Void> call = service.head200(this.client.getAcceptLanguage());
        call.enqueue(new ServiceResponseEmptyCallback<Void>(serviceCallback) {
            @Override
            public void onResponse(Response<Void> response, Retrofit retrofit) {
                try {
                    serviceCallback.success(head200Delegate(response, retrofit));
                } catch (CloudException | IOException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<Void> head200Delegate(Response<Void> response, Retrofit retrofit) throws CloudException, IOException {
        return new AzureServiceResponseBuilder<Void, CloudException>()
                .register(200, new TypeToken<Void>() { }.getType())
                .buildEmpty(response, retrofit);
    }

    /**
     * Return 204 status code if successful.
     *
     * @throws CloudException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the {@link ServiceResponse} object if successful.
     */
    public ServiceResponse<Void> head204() throws CloudException, IOException {
        Call<Void> call = service.head204(this.client.getAcceptLanguage());
        return head204Delegate(call.execute(), null);
    }

    /**
     * Return 204 status code if successful.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public Call<Void> head204Async(final ServiceCallback<Void> serviceCallback) {
        Call<Void> call = service.head204(this.client.getAcceptLanguage());
        call.enqueue(new ServiceResponseEmptyCallback<Void>(serviceCallback) {
            @Override
            public void onResponse(Response<Void> response, Retrofit retrofit) {
                try {
                    serviceCallback.success(head204Delegate(response, retrofit));
                } catch (CloudException | IOException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<Void> head204Delegate(Response<Void> response, Retrofit retrofit) throws CloudException, IOException {
        return new AzureServiceResponseBuilder<Void, CloudException>()
                .register(204, new TypeToken<Void>() { }.getType())
                .buildEmpty(response, retrofit);
    }

    /**
     * Return 404 status code if successful.
     *
     * @throws CloudException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the {@link ServiceResponse} object if successful.
     */
    public ServiceResponse<Void> head404() throws CloudException, IOException {
        Call<Void> call = service.head404(this.client.getAcceptLanguage());
        return head404Delegate(call.execute(), null);
    }

    /**
     * Return 404 status code if successful.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public Call<Void> head404Async(final ServiceCallback<Void> serviceCallback) {
        Call<Void> call = service.head404(this.client.getAcceptLanguage());
        call.enqueue(new ServiceResponseEmptyCallback<Void>(serviceCallback) {
            @Override
            public void onResponse(Response<Void> response, Retrofit retrofit) {
                try {
                    serviceCallback.success(head404Delegate(response, retrofit));
                } catch (CloudException | IOException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<Void> head404Delegate(Response<Void> response, Retrofit retrofit) throws CloudException, IOException {
        return new AzureServiceResponseBuilder<Void, CloudException>()
                .register(204, new TypeToken<Void>() { }.getType())
                .buildEmpty(response, retrofit);
    }

}
