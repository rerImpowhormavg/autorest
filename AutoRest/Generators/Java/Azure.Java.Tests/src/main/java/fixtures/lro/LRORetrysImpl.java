/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.lro;

import com.google.gson.reflect.TypeToken;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceException;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseBuilder;
import com.microsoft.rest.ServiceResponseCallback;
import retrofit.RestAdapter;
import retrofit.RetrofitError;
import retrofit.client.Response;
import fixtures.lro.models.Product;
import fixtures.lro.models.CloudError;

public class LRORetrysImpl implements LRORetrys {
    private LRORetrysService service;
    AutoRestLongRunningOperationTestService client;

    public LRORetrysImpl(RestAdapter restAdapter, AutoRestLongRunningOperationTestService client) {
        this.service = restAdapter.create(LRORetrysService.class);
        this.client = client;
    }

    /**
     * Long running put request, service returns a 500, then a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
     *
     * @param product Product to put
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public Product put201CreatingSucceeded200(Product product) throws ServiceException {
        try {
            ServiceResponse<Product> response = put201CreatingSucceeded200Delegate(service.put201CreatingSucceeded200(product, this.client.getAcceptLanguage()), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Product> response = put201CreatingSucceeded200Delegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Long running put request, service returns a 500, then a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void put201CreatingSucceeded200Async(Product product, final ServiceCallback<Product> serviceCallback) {
        service.put201CreatingSucceeded200Async(product, this.client.getAcceptLanguage(), new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(put201CreatingSucceeded200Delegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Product> put201CreatingSucceeded200Delegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Product>()
                .register(200, new TypeToken<Product>(){}.getType())
                .register(201, new TypeToken<Product>(){}.getType())
                .registerError(new TypeToken<CloudError>(){}.getType())
                .build(response, error);
    }

    /**
     * Long running put request, service returns a 500, then a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
     *
     * @param product Product to put
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public Product beginPut201CreatingSucceeded200(Product product) throws ServiceException {
        try {
            ServiceResponse<Product> response = beginPut201CreatingSucceeded200Delegate(service.beginPut201CreatingSucceeded200(product, this.client.getAcceptLanguage()), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Product> response = beginPut201CreatingSucceeded200Delegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Long running put request, service returns a 500, then a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void beginPut201CreatingSucceeded200Async(Product product, final ServiceCallback<Product> serviceCallback) {
        service.beginPut201CreatingSucceeded200Async(product, this.client.getAcceptLanguage(), new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(beginPut201CreatingSucceeded200Delegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Product> beginPut201CreatingSucceeded200Delegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Product>()
                .register(200, new TypeToken<Product>(){}.getType())
                .register(201, new TypeToken<Product>(){}.getType())
                .registerError(new TypeToken<CloudError>(){}.getType())
                .build(response, error);
    }

    /**
     * Long running put request, service returns a 500, then a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public Product putAsyncRelativeRetrySucceeded(Product product) throws ServiceException {
        try {
            ServiceResponse<Product> response = putAsyncRelativeRetrySucceededDelegate(service.putAsyncRelativeRetrySucceeded(product, this.client.getAcceptLanguage()), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Product> response = putAsyncRelativeRetrySucceededDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Long running put request, service returns a 500, then a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void putAsyncRelativeRetrySucceededAsync(Product product, final ServiceCallback<Product> serviceCallback) {
        service.putAsyncRelativeRetrySucceededAsync(product, this.client.getAcceptLanguage(), new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(putAsyncRelativeRetrySucceededDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Product> putAsyncRelativeRetrySucceededDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Product>()
                .register(200, new TypeToken<Product>(){}.getType())
                .registerError(new TypeToken<CloudError>(){}.getType())
                .build(response, error);
    }

    /**
     * Long running put request, service returns a 500, then a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public Product beginPutAsyncRelativeRetrySucceeded(Product product) throws ServiceException {
        try {
            ServiceResponse<Product> response = beginPutAsyncRelativeRetrySucceededDelegate(service.beginPutAsyncRelativeRetrySucceeded(product, this.client.getAcceptLanguage()), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Product> response = beginPutAsyncRelativeRetrySucceededDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Long running put request, service returns a 500, then a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void beginPutAsyncRelativeRetrySucceededAsync(Product product, final ServiceCallback<Product> serviceCallback) {
        service.beginPutAsyncRelativeRetrySucceededAsync(product, this.client.getAcceptLanguage(), new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(beginPutAsyncRelativeRetrySucceededDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Product> beginPutAsyncRelativeRetrySucceededDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Product>()
                .register(200, new TypeToken<Product>(){}.getType())
                .registerError(new TypeToken<CloudError>(){}.getType())
                .build(response, error);
    }

    /**
     * Long running delete request, service returns a 500, then a  202 to the initial request, with an entity that contains ProvisioningState=’Accepted’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
     *
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public Product deleteProvisioning202Accepted200Succeeded() throws ServiceException {
        try {
            ServiceResponse<Product> response = deleteProvisioning202Accepted200SucceededDelegate(service.deleteProvisioning202Accepted200Succeeded(this.client.getAcceptLanguage()), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Product> response = deleteProvisioning202Accepted200SucceededDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Long running delete request, service returns a 500, then a  202 to the initial request, with an entity that contains ProvisioningState=’Accepted’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void deleteProvisioning202Accepted200SucceededAsync(final ServiceCallback<Product> serviceCallback) {
        service.deleteProvisioning202Accepted200SucceededAsync(this.client.getAcceptLanguage(), new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(deleteProvisioning202Accepted200SucceededDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Product> deleteProvisioning202Accepted200SucceededDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Product>()
                .register(200, new TypeToken<Product>(){}.getType())
                .register(202, new TypeToken<Product>(){}.getType())
                .registerError(new TypeToken<CloudError>(){}.getType())
                .build(response, error);
    }

    /**
     * Long running delete request, service returns a 500, then a  202 to the initial request, with an entity that contains ProvisioningState=’Accepted’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
     *
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public Product beginDeleteProvisioning202Accepted200Succeeded() throws ServiceException {
        try {
            ServiceResponse<Product> response = beginDeleteProvisioning202Accepted200SucceededDelegate(service.beginDeleteProvisioning202Accepted200Succeeded(this.client.getAcceptLanguage()), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Product> response = beginDeleteProvisioning202Accepted200SucceededDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Long running delete request, service returns a 500, then a  202 to the initial request, with an entity that contains ProvisioningState=’Accepted’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void beginDeleteProvisioning202Accepted200SucceededAsync(final ServiceCallback<Product> serviceCallback) {
        service.beginDeleteProvisioning202Accepted200SucceededAsync(this.client.getAcceptLanguage(), new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(beginDeleteProvisioning202Accepted200SucceededDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Product> beginDeleteProvisioning202Accepted200SucceededDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Product>()
                .register(200, new TypeToken<Product>(){}.getType())
                .register(202, new TypeToken<Product>(){}.getType())
                .registerError(new TypeToken<CloudError>(){}.getType())
                .build(response, error);
    }

    /**
     * Long running delete request, service returns a 500, then a 202 to the initial request. Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void delete202Retry200() throws ServiceException {
        try {
            ServiceResponse<Void> response = delete202Retry200Delegate(service.delete202Retry200(this.client.getAcceptLanguage()), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = delete202Retry200Delegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Long running delete request, service returns a 500, then a 202 to the initial request. Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void delete202Retry200Async(final ServiceCallback<Void> serviceCallback) {
        service.delete202Retry200Async(this.client.getAcceptLanguage(), new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(delete202Retry200Delegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> delete202Retry200Delegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(202, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<CloudError>(){}.getType())
                .build(response, error);
    }

    /**
     * Long running delete request, service returns a 500, then a 202 to the initial request. Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void beginDelete202Retry200() throws ServiceException {
        try {
            ServiceResponse<Void> response = beginDelete202Retry200Delegate(service.beginDelete202Retry200(this.client.getAcceptLanguage()), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = beginDelete202Retry200Delegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Long running delete request, service returns a 500, then a 202 to the initial request. Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void beginDelete202Retry200Async(final ServiceCallback<Void> serviceCallback) {
        service.beginDelete202Retry200Async(this.client.getAcceptLanguage(), new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(beginDelete202Retry200Delegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> beginDelete202Retry200Delegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(202, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<CloudError>(){}.getType())
                .build(response, error);
    }

    /**
     * Long running delete request, service returns a 500, then a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void deleteAsyncRelativeRetrySucceeded() throws ServiceException {
        try {
            ServiceResponse<Void> response = deleteAsyncRelativeRetrySucceededDelegate(service.deleteAsyncRelativeRetrySucceeded(this.client.getAcceptLanguage()), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = deleteAsyncRelativeRetrySucceededDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Long running delete request, service returns a 500, then a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void deleteAsyncRelativeRetrySucceededAsync(final ServiceCallback<Void> serviceCallback) {
        service.deleteAsyncRelativeRetrySucceededAsync(this.client.getAcceptLanguage(), new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(deleteAsyncRelativeRetrySucceededDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> deleteAsyncRelativeRetrySucceededDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(202, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<CloudError>(){}.getType())
                .build(response, error);
    }

    /**
     * Long running delete request, service returns a 500, then a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void beginDeleteAsyncRelativeRetrySucceeded() throws ServiceException {
        try {
            ServiceResponse<Void> response = beginDeleteAsyncRelativeRetrySucceededDelegate(service.beginDeleteAsyncRelativeRetrySucceeded(this.client.getAcceptLanguage()), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = beginDeleteAsyncRelativeRetrySucceededDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Long running delete request, service returns a 500, then a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void beginDeleteAsyncRelativeRetrySucceededAsync(final ServiceCallback<Void> serviceCallback) {
        service.beginDeleteAsyncRelativeRetrySucceededAsync(this.client.getAcceptLanguage(), new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(beginDeleteAsyncRelativeRetrySucceededDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> beginDeleteAsyncRelativeRetrySucceededDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(202, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<CloudError>(){}.getType())
                .build(response, error);
    }

    /**
     * Long running post request, service returns a 500, then a 202 to the initial request, with 'Location' and 'Retry-After' headers, Polls return a 200 with a response body after success
     *
     * @param product Product to put
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void post202Retry200(Product product) throws ServiceException {
        try {
            ServiceResponse<Void> response = post202Retry200Delegate(service.post202Retry200(product, this.client.getAcceptLanguage()), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = post202Retry200Delegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Long running post request, service returns a 500, then a 202 to the initial request, with 'Location' and 'Retry-After' headers, Polls return a 200 with a response body after success
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void post202Retry200Async(Product product, final ServiceCallback<Void> serviceCallback) {
        service.post202Retry200Async(product, this.client.getAcceptLanguage(), new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(post202Retry200Delegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> post202Retry200Delegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(202, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<CloudError>(){}.getType())
                .build(response, error);
    }

    /**
     * Long running post request, service returns a 500, then a 202 to the initial request, with 'Location' and 'Retry-After' headers, Polls return a 200 with a response body after success
     *
     * @param product Product to put
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void beginPost202Retry200(Product product) throws ServiceException {
        try {
            ServiceResponse<Void> response = beginPost202Retry200Delegate(service.beginPost202Retry200(product, this.client.getAcceptLanguage()), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = beginPost202Retry200Delegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Long running post request, service returns a 500, then a 202 to the initial request, with 'Location' and 'Retry-After' headers, Polls return a 200 with a response body after success
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void beginPost202Retry200Async(Product product, final ServiceCallback<Void> serviceCallback) {
        service.beginPost202Retry200Async(product, this.client.getAcceptLanguage(), new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(beginPost202Retry200Delegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> beginPost202Retry200Delegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(202, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<CloudError>(){}.getType())
                .build(response, error);
    }

    /**
     * Long running post request, service returns a 500, then a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void postAsyncRelativeRetrySucceeded(Product product) throws ServiceException {
        try {
            ServiceResponse<Void> response = postAsyncRelativeRetrySucceededDelegate(service.postAsyncRelativeRetrySucceeded(product, this.client.getAcceptLanguage()), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = postAsyncRelativeRetrySucceededDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Long running post request, service returns a 500, then a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void postAsyncRelativeRetrySucceededAsync(Product product, final ServiceCallback<Void> serviceCallback) {
        service.postAsyncRelativeRetrySucceededAsync(product, this.client.getAcceptLanguage(), new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(postAsyncRelativeRetrySucceededDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> postAsyncRelativeRetrySucceededDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(202, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<CloudError>(){}.getType())
                .build(response, error);
    }

    /**
     * Long running post request, service returns a 500, then a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void beginPostAsyncRelativeRetrySucceeded(Product product) throws ServiceException {
        try {
            ServiceResponse<Void> response = beginPostAsyncRelativeRetrySucceededDelegate(service.beginPostAsyncRelativeRetrySucceeded(product, this.client.getAcceptLanguage()), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = beginPostAsyncRelativeRetrySucceededDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Long running post request, service returns a 500, then a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void beginPostAsyncRelativeRetrySucceededAsync(Product product, final ServiceCallback<Void> serviceCallback) {
        service.beginPostAsyncRelativeRetrySucceededAsync(product, this.client.getAcceptLanguage(), new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(beginPostAsyncRelativeRetrySucceededDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> beginPostAsyncRelativeRetrySucceededDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(202, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<CloudError>(){}.getType())
                .build(response, error);
    }

}
