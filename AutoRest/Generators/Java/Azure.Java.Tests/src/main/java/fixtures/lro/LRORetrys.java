/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.lro;

import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceException;
import com.microsoft.rest.ServiceResponseCallback;
import retrofit.client.Response;
import fixtures.lro.models.Product;
import retrofit.http.PUT;
import retrofit.http.Body;
import retrofit.http.Header;
import com.microsoft.rest.DELETE;
import retrofit.http.POST;

/**
 * An instance of this class provides access to all the operations defined
 * in LRORetrys.
 */
public interface LRORetrys {
    /**
     * The interface defining all the services for LRORetrys to be
     * used by Retrofit to perform actually REST calls.
     */
    interface LRORetrysService {
        @PUT("/lro/retryerror/put/201/creating/succeeded/200")
        Response put201CreatingSucceeded200(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @PUT("/lro/retryerror/put/201/creating/succeeded/200")
        void put201CreatingSucceeded200Async(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @PUT("/lro/retryerror/put/201/creating/succeeded/200")
        Response beginPut201CreatingSucceeded200(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @PUT("/lro/retryerror/put/201/creating/succeeded/200")
        void beginPut201CreatingSucceeded200Async(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @PUT("/lro/retryerror/putasync/retry/succeeded")
        Response putAsyncRelativeRetrySucceeded(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @PUT("/lro/retryerror/putasync/retry/succeeded")
        void putAsyncRelativeRetrySucceededAsync(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @PUT("/lro/retryerror/putasync/retry/succeeded")
        Response beginPutAsyncRelativeRetrySucceeded(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @PUT("/lro/retryerror/putasync/retry/succeeded")
        void beginPutAsyncRelativeRetrySucceededAsync(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @DELETE("/lro/retryerror/delete/provisioning/202/accepted/200/succeeded")
        Response deleteProvisioning202Accepted200Succeeded(@Header("accept-language") String acceptLanguage) throws ServiceException;

        @DELETE("/lro/retryerror/delete/provisioning/202/accepted/200/succeeded")
        void deleteProvisioning202Accepted200SucceededAsync(@Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @DELETE("/lro/retryerror/delete/provisioning/202/accepted/200/succeeded")
        Response beginDeleteProvisioning202Accepted200Succeeded(@Header("accept-language") String acceptLanguage) throws ServiceException;

        @DELETE("/lro/retryerror/delete/provisioning/202/accepted/200/succeeded")
        void beginDeleteProvisioning202Accepted200SucceededAsync(@Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @DELETE("/lro/retryerror/delete/202/retry/200")
        Response delete202Retry200(@Header("accept-language") String acceptLanguage) throws ServiceException;

        @DELETE("/lro/retryerror/delete/202/retry/200")
        void delete202Retry200Async(@Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @DELETE("/lro/retryerror/delete/202/retry/200")
        Response beginDelete202Retry200(@Header("accept-language") String acceptLanguage) throws ServiceException;

        @DELETE("/lro/retryerror/delete/202/retry/200")
        void beginDelete202Retry200Async(@Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @DELETE("/lro/retryerror/deleteasync/retry/succeeded")
        Response deleteAsyncRelativeRetrySucceeded(@Header("accept-language") String acceptLanguage) throws ServiceException;

        @DELETE("/lro/retryerror/deleteasync/retry/succeeded")
        void deleteAsyncRelativeRetrySucceededAsync(@Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @DELETE("/lro/retryerror/deleteasync/retry/succeeded")
        Response beginDeleteAsyncRelativeRetrySucceeded(@Header("accept-language") String acceptLanguage) throws ServiceException;

        @DELETE("/lro/retryerror/deleteasync/retry/succeeded")
        void beginDeleteAsyncRelativeRetrySucceededAsync(@Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @POST("/lro/retryerror/post/202/retry/200")
        Response post202Retry200(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @POST("/lro/retryerror/post/202/retry/200")
        void post202Retry200Async(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @POST("/lro/retryerror/post/202/retry/200")
        Response beginPost202Retry200(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @POST("/lro/retryerror/post/202/retry/200")
        void beginPost202Retry200Async(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @POST("/lro/retryerror/postasync/retry/succeeded")
        Response postAsyncRelativeRetrySucceeded(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @POST("/lro/retryerror/postasync/retry/succeeded")
        void postAsyncRelativeRetrySucceededAsync(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @POST("/lro/retryerror/postasync/retry/succeeded")
        Response beginPostAsyncRelativeRetrySucceeded(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @POST("/lro/retryerror/postasync/retry/succeeded")
        void beginPostAsyncRelativeRetrySucceededAsync(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

    }
    /**
     * Long running put request, service returns a 500, then a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
     *
     * @param product Product to put
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Product put201CreatingSucceeded200(Product product) throws ServiceException;

    /**
     * Long running put request, service returns a 500, then a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void put201CreatingSucceeded200Async(Product product, final ServiceCallback<Product> serviceCallback);

    /**
     * Long running put request, service returns a 500, then a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
     *
     * @param product Product to put
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Product beginPut201CreatingSucceeded200(Product product) throws ServiceException;

    /**
     * Long running put request, service returns a 500, then a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginPut201CreatingSucceeded200Async(Product product, final ServiceCallback<Product> serviceCallback);

    /**
     * Long running put request, service returns a 500, then a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Product putAsyncRelativeRetrySucceeded(Product product) throws ServiceException;

    /**
     * Long running put request, service returns a 500, then a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void putAsyncRelativeRetrySucceededAsync(Product product, final ServiceCallback<Product> serviceCallback);

    /**
     * Long running put request, service returns a 500, then a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Product beginPutAsyncRelativeRetrySucceeded(Product product) throws ServiceException;

    /**
     * Long running put request, service returns a 500, then a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginPutAsyncRelativeRetrySucceededAsync(Product product, final ServiceCallback<Product> serviceCallback);

    /**
     * Long running delete request, service returns a 500, then a  202 to the initial request, with an entity that contains ProvisioningState=’Accepted’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
     *
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Product deleteProvisioning202Accepted200Succeeded() throws ServiceException;

    /**
     * Long running delete request, service returns a 500, then a  202 to the initial request, with an entity that contains ProvisioningState=’Accepted’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void deleteProvisioning202Accepted200SucceededAsync(final ServiceCallback<Product> serviceCallback);

    /**
     * Long running delete request, service returns a 500, then a  202 to the initial request, with an entity that contains ProvisioningState=’Accepted’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
     *
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Product beginDeleteProvisioning202Accepted200Succeeded() throws ServiceException;

    /**
     * Long running delete request, service returns a 500, then a  202 to the initial request, with an entity that contains ProvisioningState=’Accepted’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginDeleteProvisioning202Accepted200SucceededAsync(final ServiceCallback<Product> serviceCallback);

    /**
     * Long running delete request, service returns a 500, then a 202 to the initial request. Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void delete202Retry200() throws ServiceException;

    /**
     * Long running delete request, service returns a 500, then a 202 to the initial request. Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void delete202Retry200Async(final ServiceCallback<Void> serviceCallback);

    /**
     * Long running delete request, service returns a 500, then a 202 to the initial request. Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void beginDelete202Retry200() throws ServiceException;

    /**
     * Long running delete request, service returns a 500, then a 202 to the initial request. Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginDelete202Retry200Async(final ServiceCallback<Void> serviceCallback);

    /**
     * Long running delete request, service returns a 500, then a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void deleteAsyncRelativeRetrySucceeded() throws ServiceException;

    /**
     * Long running delete request, service returns a 500, then a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void deleteAsyncRelativeRetrySucceededAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Long running delete request, service returns a 500, then a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void beginDeleteAsyncRelativeRetrySucceeded() throws ServiceException;

    /**
     * Long running delete request, service returns a 500, then a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginDeleteAsyncRelativeRetrySucceededAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Long running post request, service returns a 500, then a 202 to the initial request, with 'Location' and 'Retry-After' headers, Polls return a 200 with a response body after success
     *
     * @param product Product to put
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void post202Retry200(Product product) throws ServiceException;

    /**
     * Long running post request, service returns a 500, then a 202 to the initial request, with 'Location' and 'Retry-After' headers, Polls return a 200 with a response body after success
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void post202Retry200Async(Product product, final ServiceCallback<Void> serviceCallback);

    /**
     * Long running post request, service returns a 500, then a 202 to the initial request, with 'Location' and 'Retry-After' headers, Polls return a 200 with a response body after success
     *
     * @param product Product to put
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void beginPost202Retry200(Product product) throws ServiceException;

    /**
     * Long running post request, service returns a 500, then a 202 to the initial request, with 'Location' and 'Retry-After' headers, Polls return a 200 with a response body after success
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginPost202Retry200Async(Product product, final ServiceCallback<Void> serviceCallback);

    /**
     * Long running post request, service returns a 500, then a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void postAsyncRelativeRetrySucceeded(Product product) throws ServiceException;

    /**
     * Long running post request, service returns a 500, then a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void postAsyncRelativeRetrySucceededAsync(Product product, final ServiceCallback<Void> serviceCallback);

    /**
     * Long running post request, service returns a 500, then a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void beginPostAsyncRelativeRetrySucceeded(Product product) throws ServiceException;

    /**
     * Long running post request, service returns a 500, then a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginPostAsyncRelativeRetrySucceededAsync(Product product, final ServiceCallback<Void> serviceCallback);

}
