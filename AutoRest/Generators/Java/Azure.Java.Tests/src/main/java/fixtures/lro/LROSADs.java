/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.lro;

import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceException;
import com.microsoft.rest.ServiceResponseCallback;
import retrofit.client.Response;
import fixtures.lro.models.Product;
import retrofit.http.PUT;
import retrofit.http.Body;
import retrofit.http.Header;
import com.microsoft.rest.DELETE;
import retrofit.http.POST;

/**
 * An instance of this class provides access to all the operations defined
 * in LROSADs.
 */
public interface LROSADs {
    /**
     * The interface defining all the services for LROSADs to be
     * used by Retrofit to perform actually REST calls.
     */
    interface LROSADsService {
        @PUT("/lro/nonretryerror/put/400")
        Response putNonRetry400(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @PUT("/lro/nonretryerror/put/400")
        void putNonRetry400Async(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @PUT("/lro/nonretryerror/put/400")
        Response beginPutNonRetry400(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @PUT("/lro/nonretryerror/put/400")
        void beginPutNonRetry400Async(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @PUT("/lro/nonretryerror/put/201/creating/400")
        Response putNonRetry201Creating400(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @PUT("/lro/nonretryerror/put/201/creating/400")
        void putNonRetry201Creating400Async(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @PUT("/lro/nonretryerror/put/201/creating/400")
        Response beginPutNonRetry201Creating400(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @PUT("/lro/nonretryerror/put/201/creating/400")
        void beginPutNonRetry201Creating400Async(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @PUT("/lro/nonretryerror/putasync/retry/400")
        Response putAsyncRelativeRetry400(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @PUT("/lro/nonretryerror/putasync/retry/400")
        void putAsyncRelativeRetry400Async(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @PUT("/lro/nonretryerror/putasync/retry/400")
        Response beginPutAsyncRelativeRetry400(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @PUT("/lro/nonretryerror/putasync/retry/400")
        void beginPutAsyncRelativeRetry400Async(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @DELETE("/lro/nonretryerror/delete/400")
        Response deleteNonRetry400(@Header("accept-language") String acceptLanguage) throws ServiceException;

        @DELETE("/lro/nonretryerror/delete/400")
        void deleteNonRetry400Async(@Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @DELETE("/lro/nonretryerror/delete/400")
        Response beginDeleteNonRetry400(@Header("accept-language") String acceptLanguage) throws ServiceException;

        @DELETE("/lro/nonretryerror/delete/400")
        void beginDeleteNonRetry400Async(@Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @DELETE("/lro/nonretryerror/delete/202/retry/400")
        Response delete202NonRetry400(@Header("accept-language") String acceptLanguage) throws ServiceException;

        @DELETE("/lro/nonretryerror/delete/202/retry/400")
        void delete202NonRetry400Async(@Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @DELETE("/lro/nonretryerror/delete/202/retry/400")
        Response beginDelete202NonRetry400(@Header("accept-language") String acceptLanguage) throws ServiceException;

        @DELETE("/lro/nonretryerror/delete/202/retry/400")
        void beginDelete202NonRetry400Async(@Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @DELETE("/lro/nonretryerror/deleteasync/retry/400")
        Response deleteAsyncRelativeRetry400(@Header("accept-language") String acceptLanguage) throws ServiceException;

        @DELETE("/lro/nonretryerror/deleteasync/retry/400")
        void deleteAsyncRelativeRetry400Async(@Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @DELETE("/lro/nonretryerror/deleteasync/retry/400")
        Response beginDeleteAsyncRelativeRetry400(@Header("accept-language") String acceptLanguage) throws ServiceException;

        @DELETE("/lro/nonretryerror/deleteasync/retry/400")
        void beginDeleteAsyncRelativeRetry400Async(@Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @POST("/lro/nonretryerror/post/400")
        Response postNonRetry400(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @POST("/lro/nonretryerror/post/400")
        void postNonRetry400Async(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @POST("/lro/nonretryerror/post/400")
        Response beginPostNonRetry400(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @POST("/lro/nonretryerror/post/400")
        void beginPostNonRetry400Async(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @POST("/lro/nonretryerror/post/202/retry/400")
        Response post202NonRetry400(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @POST("/lro/nonretryerror/post/202/retry/400")
        void post202NonRetry400Async(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @POST("/lro/nonretryerror/post/202/retry/400")
        Response beginPost202NonRetry400(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @POST("/lro/nonretryerror/post/202/retry/400")
        void beginPost202NonRetry400Async(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @POST("/lro/nonretryerror/postasync/retry/400")
        Response postAsyncRelativeRetry400(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @POST("/lro/nonretryerror/postasync/retry/400")
        void postAsyncRelativeRetry400Async(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @POST("/lro/nonretryerror/postasync/retry/400")
        Response beginPostAsyncRelativeRetry400(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @POST("/lro/nonretryerror/postasync/retry/400")
        void beginPostAsyncRelativeRetry400Async(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @PUT("/lro/error/put/201/noprovisioningstatepayload")
        Response putError201NoProvisioningStatePayload(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @PUT("/lro/error/put/201/noprovisioningstatepayload")
        void putError201NoProvisioningStatePayloadAsync(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @PUT("/lro/error/put/201/noprovisioningstatepayload")
        Response beginPutError201NoProvisioningStatePayload(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @PUT("/lro/error/put/201/noprovisioningstatepayload")
        void beginPutError201NoProvisioningStatePayloadAsync(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @PUT("/lro/error/putasync/retry/nostatus")
        Response putAsyncRelativeRetryNoStatus(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @PUT("/lro/error/putasync/retry/nostatus")
        void putAsyncRelativeRetryNoStatusAsync(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @PUT("/lro/error/putasync/retry/nostatus")
        Response beginPutAsyncRelativeRetryNoStatus(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @PUT("/lro/error/putasync/retry/nostatus")
        void beginPutAsyncRelativeRetryNoStatusAsync(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @PUT("/lro/error/putasync/retry/nostatuspayload")
        Response putAsyncRelativeRetryNoStatusPayload(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @PUT("/lro/error/putasync/retry/nostatuspayload")
        void putAsyncRelativeRetryNoStatusPayloadAsync(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @PUT("/lro/error/putasync/retry/nostatuspayload")
        Response beginPutAsyncRelativeRetryNoStatusPayload(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @PUT("/lro/error/putasync/retry/nostatuspayload")
        void beginPutAsyncRelativeRetryNoStatusPayloadAsync(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @DELETE("/lro/error/delete/204/nolocation")
        Response delete204Succeeded(@Header("accept-language") String acceptLanguage) throws ServiceException;

        @DELETE("/lro/error/delete/204/nolocation")
        void delete204SucceededAsync(@Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @DELETE("/lro/error/delete/204/nolocation")
        Response beginDelete204Succeeded(@Header("accept-language") String acceptLanguage) throws ServiceException;

        @DELETE("/lro/error/delete/204/nolocation")
        void beginDelete204SucceededAsync(@Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @DELETE("/lro/error/deleteasync/retry/nostatus")
        Response deleteAsyncRelativeRetryNoStatus(@Header("accept-language") String acceptLanguage) throws ServiceException;

        @DELETE("/lro/error/deleteasync/retry/nostatus")
        void deleteAsyncRelativeRetryNoStatusAsync(@Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @DELETE("/lro/error/deleteasync/retry/nostatus")
        Response beginDeleteAsyncRelativeRetryNoStatus(@Header("accept-language") String acceptLanguage) throws ServiceException;

        @DELETE("/lro/error/deleteasync/retry/nostatus")
        void beginDeleteAsyncRelativeRetryNoStatusAsync(@Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @POST("/lro/error/post/202/nolocation")
        Response post202NoLocation(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @POST("/lro/error/post/202/nolocation")
        void post202NoLocationAsync(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @POST("/lro/error/post/202/nolocation")
        Response beginPost202NoLocation(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @POST("/lro/error/post/202/nolocation")
        void beginPost202NoLocationAsync(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @POST("/lro/error/postasync/retry/nopayload")
        Response postAsyncRelativeRetryNoPayload(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @POST("/lro/error/postasync/retry/nopayload")
        void postAsyncRelativeRetryNoPayloadAsync(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @POST("/lro/error/postasync/retry/nopayload")
        Response beginPostAsyncRelativeRetryNoPayload(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @POST("/lro/error/postasync/retry/nopayload")
        void beginPostAsyncRelativeRetryNoPayloadAsync(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @PUT("/lro/error/put/200/invalidjson")
        Response put200InvalidJson(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @PUT("/lro/error/put/200/invalidjson")
        void put200InvalidJsonAsync(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @PUT("/lro/error/put/200/invalidjson")
        Response beginPut200InvalidJson(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @PUT("/lro/error/put/200/invalidjson")
        void beginPut200InvalidJsonAsync(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @PUT("/lro/error/putasync/retry/invalidheader")
        Response putAsyncRelativeRetryInvalidHeader(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @PUT("/lro/error/putasync/retry/invalidheader")
        void putAsyncRelativeRetryInvalidHeaderAsync(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @PUT("/lro/error/putasync/retry/invalidheader")
        Response beginPutAsyncRelativeRetryInvalidHeader(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @PUT("/lro/error/putasync/retry/invalidheader")
        void beginPutAsyncRelativeRetryInvalidHeaderAsync(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @PUT("/lro/error/putasync/retry/invalidjsonpolling")
        Response putAsyncRelativeRetryInvalidJsonPolling(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @PUT("/lro/error/putasync/retry/invalidjsonpolling")
        void putAsyncRelativeRetryInvalidJsonPollingAsync(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @PUT("/lro/error/putasync/retry/invalidjsonpolling")
        Response beginPutAsyncRelativeRetryInvalidJsonPolling(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @PUT("/lro/error/putasync/retry/invalidjsonpolling")
        void beginPutAsyncRelativeRetryInvalidJsonPollingAsync(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @DELETE("/lro/error/delete/202/retry/invalidheader")
        Response delete202RetryInvalidHeader(@Header("accept-language") String acceptLanguage) throws ServiceException;

        @DELETE("/lro/error/delete/202/retry/invalidheader")
        void delete202RetryInvalidHeaderAsync(@Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @DELETE("/lro/error/delete/202/retry/invalidheader")
        Response beginDelete202RetryInvalidHeader(@Header("accept-language") String acceptLanguage) throws ServiceException;

        @DELETE("/lro/error/delete/202/retry/invalidheader")
        void beginDelete202RetryInvalidHeaderAsync(@Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @DELETE("/lro/error/deleteasync/retry/invalidheader")
        Response deleteAsyncRelativeRetryInvalidHeader(@Header("accept-language") String acceptLanguage) throws ServiceException;

        @DELETE("/lro/error/deleteasync/retry/invalidheader")
        void deleteAsyncRelativeRetryInvalidHeaderAsync(@Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @DELETE("/lro/error/deleteasync/retry/invalidheader")
        Response beginDeleteAsyncRelativeRetryInvalidHeader(@Header("accept-language") String acceptLanguage) throws ServiceException;

        @DELETE("/lro/error/deleteasync/retry/invalidheader")
        void beginDeleteAsyncRelativeRetryInvalidHeaderAsync(@Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @DELETE("/lro/error/deleteasync/retry/invalidjsonpolling")
        Response deleteAsyncRelativeRetryInvalidJsonPolling(@Header("accept-language") String acceptLanguage) throws ServiceException;

        @DELETE("/lro/error/deleteasync/retry/invalidjsonpolling")
        void deleteAsyncRelativeRetryInvalidJsonPollingAsync(@Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @DELETE("/lro/error/deleteasync/retry/invalidjsonpolling")
        Response beginDeleteAsyncRelativeRetryInvalidJsonPolling(@Header("accept-language") String acceptLanguage) throws ServiceException;

        @DELETE("/lro/error/deleteasync/retry/invalidjsonpolling")
        void beginDeleteAsyncRelativeRetryInvalidJsonPollingAsync(@Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @POST("/lro/error/post/202/retry/invalidheader")
        Response post202RetryInvalidHeader(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @POST("/lro/error/post/202/retry/invalidheader")
        void post202RetryInvalidHeaderAsync(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @POST("/lro/error/post/202/retry/invalidheader")
        Response beginPost202RetryInvalidHeader(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @POST("/lro/error/post/202/retry/invalidheader")
        void beginPost202RetryInvalidHeaderAsync(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @POST("/lro/error/postasync/retry/invalidheader")
        Response postAsyncRelativeRetryInvalidHeader(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @POST("/lro/error/postasync/retry/invalidheader")
        void postAsyncRelativeRetryInvalidHeaderAsync(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @POST("/lro/error/postasync/retry/invalidheader")
        Response beginPostAsyncRelativeRetryInvalidHeader(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @POST("/lro/error/postasync/retry/invalidheader")
        void beginPostAsyncRelativeRetryInvalidHeaderAsync(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @POST("/lro/error/postasync/retry/invalidjsonpolling")
        Response postAsyncRelativeRetryInvalidJsonPolling(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @POST("/lro/error/postasync/retry/invalidjsonpolling")
        void postAsyncRelativeRetryInvalidJsonPollingAsync(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @POST("/lro/error/postasync/retry/invalidjsonpolling")
        Response beginPostAsyncRelativeRetryInvalidJsonPolling(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @POST("/lro/error/postasync/retry/invalidjsonpolling")
        void beginPostAsyncRelativeRetryInvalidJsonPollingAsync(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

    }
    /**
     * Long running put request, service returns a 400 to the initial request
     *
     * @param product Product to put
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Product putNonRetry400(Product product) throws ServiceException;

    /**
     * Long running put request, service returns a 400 to the initial request
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void putNonRetry400Async(Product product, final ServiceCallback<Product> serviceCallback);

    /**
     * Long running put request, service returns a 400 to the initial request
     *
     * @param product Product to put
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Product beginPutNonRetry400(Product product) throws ServiceException;

    /**
     * Long running put request, service returns a 400 to the initial request
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginPutNonRetry400Async(Product product, final ServiceCallback<Product> serviceCallback);

    /**
     * Long running put request, service returns a Product with 'ProvisioningState' = 'Creating' and 201 response code
     *
     * @param product Product to put
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Product putNonRetry201Creating400(Product product) throws ServiceException;

    /**
     * Long running put request, service returns a Product with 'ProvisioningState' = 'Creating' and 201 response code
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void putNonRetry201Creating400Async(Product product, final ServiceCallback<Product> serviceCallback);

    /**
     * Long running put request, service returns a Product with 'ProvisioningState' = 'Creating' and 201 response code
     *
     * @param product Product to put
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Product beginPutNonRetry201Creating400(Product product) throws ServiceException;

    /**
     * Long running put request, service returns a Product with 'ProvisioningState' = 'Creating' and 201 response code
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginPutNonRetry201Creating400Async(Product product, final ServiceCallback<Product> serviceCallback);

    /**
     * Long running put request, service returns a 200 with ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Product putAsyncRelativeRetry400(Product product) throws ServiceException;

    /**
     * Long running put request, service returns a 200 with ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void putAsyncRelativeRetry400Async(Product product, final ServiceCallback<Product> serviceCallback);

    /**
     * Long running put request, service returns a 200 with ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Product beginPutAsyncRelativeRetry400(Product product) throws ServiceException;

    /**
     * Long running put request, service returns a 200 with ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginPutAsyncRelativeRetry400Async(Product product, final ServiceCallback<Product> serviceCallback);

    /**
     * Long running delete request, service returns a 400 with an error body
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void deleteNonRetry400() throws ServiceException;

    /**
     * Long running delete request, service returns a 400 with an error body
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void deleteNonRetry400Async(final ServiceCallback<Void> serviceCallback);

    /**
     * Long running delete request, service returns a 400 with an error body
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void beginDeleteNonRetry400() throws ServiceException;

    /**
     * Long running delete request, service returns a 400 with an error body
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginDeleteNonRetry400Async(final ServiceCallback<Void> serviceCallback);

    /**
     * Long running delete request, service returns a 202 with a location header
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void delete202NonRetry400() throws ServiceException;

    /**
     * Long running delete request, service returns a 202 with a location header
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void delete202NonRetry400Async(final ServiceCallback<Void> serviceCallback);

    /**
     * Long running delete request, service returns a 202 with a location header
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void beginDelete202NonRetry400() throws ServiceException;

    /**
     * Long running delete request, service returns a 202 with a location header
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginDelete202NonRetry400Async(final ServiceCallback<Void> serviceCallback);

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void deleteAsyncRelativeRetry400() throws ServiceException;

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void deleteAsyncRelativeRetry400Async(final ServiceCallback<Void> serviceCallback);

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void beginDeleteAsyncRelativeRetry400() throws ServiceException;

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginDeleteAsyncRelativeRetry400Async(final ServiceCallback<Void> serviceCallback);

    /**
     * Long running post request, service returns a 400 with no error body
     *
     * @param product Product to put
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void postNonRetry400(Product product) throws ServiceException;

    /**
     * Long running post request, service returns a 400 with no error body
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void postNonRetry400Async(Product product, final ServiceCallback<Void> serviceCallback);

    /**
     * Long running post request, service returns a 400 with no error body
     *
     * @param product Product to put
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void beginPostNonRetry400(Product product) throws ServiceException;

    /**
     * Long running post request, service returns a 400 with no error body
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginPostNonRetry400Async(Product product, final ServiceCallback<Void> serviceCallback);

    /**
     * Long running post request, service returns a 202 with a location header
     *
     * @param product Product to put
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void post202NonRetry400(Product product) throws ServiceException;

    /**
     * Long running post request, service returns a 202 with a location header
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void post202NonRetry400Async(Product product, final ServiceCallback<Void> serviceCallback);

    /**
     * Long running post request, service returns a 202 with a location header
     *
     * @param product Product to put
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void beginPost202NonRetry400(Product product) throws ServiceException;

    /**
     * Long running post request, service returns a 202 with a location header
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginPost202NonRetry400Async(Product product, final ServiceCallback<Void> serviceCallback);

    /**
     * Long running post request, service returns a 202 to the initial request Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void postAsyncRelativeRetry400(Product product) throws ServiceException;

    /**
     * Long running post request, service returns a 202 to the initial request Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void postAsyncRelativeRetry400Async(Product product, final ServiceCallback<Void> serviceCallback);

    /**
     * Long running post request, service returns a 202 to the initial request Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void beginPostAsyncRelativeRetry400(Product product) throws ServiceException;

    /**
     * Long running post request, service returns a 202 to the initial request Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginPostAsyncRelativeRetry400Async(Product product, final ServiceCallback<Void> serviceCallback);

    /**
     * Long running put request, service returns a 201 to the initial request with no payload
     *
     * @param product Product to put
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Product putError201NoProvisioningStatePayload(Product product) throws ServiceException;

    /**
     * Long running put request, service returns a 201 to the initial request with no payload
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void putError201NoProvisioningStatePayloadAsync(Product product, final ServiceCallback<Product> serviceCallback);

    /**
     * Long running put request, service returns a 201 to the initial request with no payload
     *
     * @param product Product to put
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Product beginPutError201NoProvisioningStatePayload(Product product) throws ServiceException;

    /**
     * Long running put request, service returns a 201 to the initial request with no payload
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginPutError201NoProvisioningStatePayloadAsync(Product product, final ServiceCallback<Product> serviceCallback);

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Product putAsyncRelativeRetryNoStatus(Product product) throws ServiceException;

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void putAsyncRelativeRetryNoStatusAsync(Product product, final ServiceCallback<Product> serviceCallback);

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Product beginPutAsyncRelativeRetryNoStatus(Product product) throws ServiceException;

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginPutAsyncRelativeRetryNoStatusAsync(Product product, final ServiceCallback<Product> serviceCallback);

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Product putAsyncRelativeRetryNoStatusPayload(Product product) throws ServiceException;

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void putAsyncRelativeRetryNoStatusPayloadAsync(Product product, final ServiceCallback<Product> serviceCallback);

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Product beginPutAsyncRelativeRetryNoStatusPayload(Product product) throws ServiceException;

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginPutAsyncRelativeRetryNoStatusPayloadAsync(Product product, final ServiceCallback<Product> serviceCallback);

    /**
     * Long running delete request, service returns a 204 to the initial request, indicating success.
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void delete204Succeeded() throws ServiceException;

    /**
     * Long running delete request, service returns a 204 to the initial request, indicating success.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void delete204SucceededAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Long running delete request, service returns a 204 to the initial request, indicating success.
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void beginDelete204Succeeded() throws ServiceException;

    /**
     * Long running delete request, service returns a 204 to the initial request, indicating success.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginDelete204SucceededAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void deleteAsyncRelativeRetryNoStatus() throws ServiceException;

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void deleteAsyncRelativeRetryNoStatusAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void beginDeleteAsyncRelativeRetryNoStatus() throws ServiceException;

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginDeleteAsyncRelativeRetryNoStatusAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Long running post request, service returns a 202 to the initial request, without a location header.
     *
     * @param product Product to put
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void post202NoLocation(Product product) throws ServiceException;

    /**
     * Long running post request, service returns a 202 to the initial request, without a location header.
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void post202NoLocationAsync(Product product, final ServiceCallback<Void> serviceCallback);

    /**
     * Long running post request, service returns a 202 to the initial request, without a location header.
     *
     * @param product Product to put
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void beginPost202NoLocation(Product product) throws ServiceException;

    /**
     * Long running post request, service returns a 202 to the initial request, without a location header.
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginPost202NoLocationAsync(Product product, final ServiceCallback<Void> serviceCallback);

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void postAsyncRelativeRetryNoPayload(Product product) throws ServiceException;

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void postAsyncRelativeRetryNoPayloadAsync(Product product, final ServiceCallback<Void> serviceCallback);

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void beginPostAsyncRelativeRetryNoPayload(Product product) throws ServiceException;

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginPostAsyncRelativeRetryNoPayloadAsync(Product product, final ServiceCallback<Void> serviceCallback);

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that is not a valid json
     *
     * @param product Product to put
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Product put200InvalidJson(Product product) throws ServiceException;

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that is not a valid json
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void put200InvalidJsonAsync(Product product, final ServiceCallback<Product> serviceCallback);

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that is not a valid json
     *
     * @param product Product to put
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Product beginPut200InvalidJson(Product product) throws ServiceException;

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that is not a valid json
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginPut200InvalidJsonAsync(Product product, final ServiceCallback<Product> serviceCallback);

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. The endpoint indicated in the Azure-AsyncOperation header is invalid.
     *
     * @param product Product to put
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Product putAsyncRelativeRetryInvalidHeader(Product product) throws ServiceException;

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. The endpoint indicated in the Azure-AsyncOperation header is invalid.
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void putAsyncRelativeRetryInvalidHeaderAsync(Product product, final ServiceCallback<Product> serviceCallback);

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. The endpoint indicated in the Azure-AsyncOperation header is invalid.
     *
     * @param product Product to put
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Product beginPutAsyncRelativeRetryInvalidHeader(Product product) throws ServiceException;

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. The endpoint indicated in the Azure-AsyncOperation header is invalid.
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginPutAsyncRelativeRetryInvalidHeaderAsync(Product product, final ServiceCallback<Product> serviceCallback);

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Product putAsyncRelativeRetryInvalidJsonPolling(Product product) throws ServiceException;

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void putAsyncRelativeRetryInvalidJsonPollingAsync(Product product, final ServiceCallback<Product> serviceCallback);

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Product beginPutAsyncRelativeRetryInvalidJsonPolling(Product product) throws ServiceException;

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginPutAsyncRelativeRetryInvalidJsonPollingAsync(Product product, final ServiceCallback<Product> serviceCallback);

    /**
     * Long running delete request, service returns a 202 to the initial request receing a reponse with an invalid 'Location' and 'Retry-After' headers
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void delete202RetryInvalidHeader() throws ServiceException;

    /**
     * Long running delete request, service returns a 202 to the initial request receing a reponse with an invalid 'Location' and 'Retry-After' headers
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void delete202RetryInvalidHeaderAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Long running delete request, service returns a 202 to the initial request receing a reponse with an invalid 'Location' and 'Retry-After' headers
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void beginDelete202RetryInvalidHeader() throws ServiceException;

    /**
     * Long running delete request, service returns a 202 to the initial request receing a reponse with an invalid 'Location' and 'Retry-After' headers
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginDelete202RetryInvalidHeaderAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Long running delete request, service returns a 202 to the initial request. The endpoint indicated in the Azure-AsyncOperation header is invalid
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void deleteAsyncRelativeRetryInvalidHeader() throws ServiceException;

    /**
     * Long running delete request, service returns a 202 to the initial request. The endpoint indicated in the Azure-AsyncOperation header is invalid
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void deleteAsyncRelativeRetryInvalidHeaderAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Long running delete request, service returns a 202 to the initial request. The endpoint indicated in the Azure-AsyncOperation header is invalid
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void beginDeleteAsyncRelativeRetryInvalidHeader() throws ServiceException;

    /**
     * Long running delete request, service returns a 202 to the initial request. The endpoint indicated in the Azure-AsyncOperation header is invalid
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginDeleteAsyncRelativeRetryInvalidHeaderAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void deleteAsyncRelativeRetryInvalidJsonPolling() throws ServiceException;

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void deleteAsyncRelativeRetryInvalidJsonPollingAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void beginDeleteAsyncRelativeRetryInvalidJsonPolling() throws ServiceException;

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginDeleteAsyncRelativeRetryInvalidJsonPollingAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Long running post request, service returns a 202 to the initial request, with invalid 'Location' and 'Retry-After' headers.
     *
     * @param product Product to put
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void post202RetryInvalidHeader(Product product) throws ServiceException;

    /**
     * Long running post request, service returns a 202 to the initial request, with invalid 'Location' and 'Retry-After' headers.
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void post202RetryInvalidHeaderAsync(Product product, final ServiceCallback<Void> serviceCallback);

    /**
     * Long running post request, service returns a 202 to the initial request, with invalid 'Location' and 'Retry-After' headers.
     *
     * @param product Product to put
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void beginPost202RetryInvalidHeader(Product product) throws ServiceException;

    /**
     * Long running post request, service returns a 202 to the initial request, with invalid 'Location' and 'Retry-After' headers.
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginPost202RetryInvalidHeaderAsync(Product product, final ServiceCallback<Void> serviceCallback);

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. The endpoint indicated in the Azure-AsyncOperation header is invalid.
     *
     * @param product Product to put
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void postAsyncRelativeRetryInvalidHeader(Product product) throws ServiceException;

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. The endpoint indicated in the Azure-AsyncOperation header is invalid.
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void postAsyncRelativeRetryInvalidHeaderAsync(Product product, final ServiceCallback<Void> serviceCallback);

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. The endpoint indicated in the Azure-AsyncOperation header is invalid.
     *
     * @param product Product to put
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void beginPostAsyncRelativeRetryInvalidHeader(Product product) throws ServiceException;

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. The endpoint indicated in the Azure-AsyncOperation header is invalid.
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginPostAsyncRelativeRetryInvalidHeaderAsync(Product product, final ServiceCallback<Void> serviceCallback);

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void postAsyncRelativeRetryInvalidJsonPolling(Product product) throws ServiceException;

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void postAsyncRelativeRetryInvalidJsonPollingAsync(Product product, final ServiceCallback<Void> serviceCallback);

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void beginPostAsyncRelativeRetryInvalidJsonPolling(Product product) throws ServiceException;

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginPostAsyncRelativeRetryInvalidJsonPollingAsync(Product product, final ServiceCallback<Void> serviceCallback);

}
