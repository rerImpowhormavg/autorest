/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.azurespecials;

import com.google.gson.reflect.TypeToken;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceException;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseBuilder;
import com.microsoft.rest.ServiceResponseCallback;
import retrofit.RestAdapter;
import retrofit.RetrofitError;
import retrofit.client.Response;
import fixtures.azurespecials.models.Error;

public class SkipUrlEncodingImpl implements SkipUrlEncoding {
    private SkipUrlEncodingService service;
    AutoRestAzureSpecialParametersTestClient client;

    public SkipUrlEncodingImpl(RestAdapter restAdapter, AutoRestAzureSpecialParametersTestClient client) {
        this.service = restAdapter.create(SkipUrlEncodingService.class);
        this.client = client;
    }

    /**
     * Get method with unencoded path parameter with value 'path1/path2/path3'
     *
     * @param unencodedPathParam Unencoded path parameter with value 'path1/path2/path3'
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void getMethodPathValid(String unencodedPathParam) throws ServiceException {
        if (unencodedPathParam == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter unencodedPathParam is required and cannot be null."));
        }
        try {
            ServiceResponse<Void> response = getMethodPathValidDelegate(service.getMethodPathValid(unencodedPathParam, this.client.getAcceptLanguage()), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = getMethodPathValidDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Get method with unencoded path parameter with value 'path1/path2/path3'
     *
     * @param unencodedPathParam Unencoded path parameter with value 'path1/path2/path3'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getMethodPathValidAsync(String unencodedPathParam, final ServiceCallback<Void> serviceCallback) {
        if (unencodedPathParam == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter unencodedPathParam is required and cannot be null.")));
        }
        service.getMethodPathValidAsync(unencodedPathParam, this.client.getAcceptLanguage(), new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getMethodPathValidDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> getMethodPathValidDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get method with unencoded path parameter with value 'path1/path2/path3'
     *
     * @param unencodedPathParam Unencoded path parameter with value 'path1/path2/path3'
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void getPathPathValid(String unencodedPathParam) throws ServiceException {
        if (unencodedPathParam == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter unencodedPathParam is required and cannot be null."));
        }
        try {
            ServiceResponse<Void> response = getPathPathValidDelegate(service.getPathPathValid(unencodedPathParam, this.client.getAcceptLanguage()), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = getPathPathValidDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Get method with unencoded path parameter with value 'path1/path2/path3'
     *
     * @param unencodedPathParam Unencoded path parameter with value 'path1/path2/path3'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getPathPathValidAsync(String unencodedPathParam, final ServiceCallback<Void> serviceCallback) {
        if (unencodedPathParam == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter unencodedPathParam is required and cannot be null.")));
        }
        service.getPathPathValidAsync(unencodedPathParam, this.client.getAcceptLanguage(), new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getPathPathValidDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> getPathPathValidDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get method with unencoded path parameter with value 'path1/path2/path3'
     *
     * @param unencodedPathParam An unencoded path parameter with value 'path1/path2/path3'. Possible values for this parameter include: 'path1/path2/path3'
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void getSwaggerPathValid(String unencodedPathParam) throws ServiceException {
        if (unencodedPathParam == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter unencodedPathParam is required and cannot be null."));
        }
        try {
            ServiceResponse<Void> response = getSwaggerPathValidDelegate(service.getSwaggerPathValid(unencodedPathParam, this.client.getAcceptLanguage()), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = getSwaggerPathValidDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Get method with unencoded path parameter with value 'path1/path2/path3'
     *
     * @param unencodedPathParam An unencoded path parameter with value 'path1/path2/path3'. Possible values for this parameter include: 'path1/path2/path3'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getSwaggerPathValidAsync(String unencodedPathParam, final ServiceCallback<Void> serviceCallback) {
        if (unencodedPathParam == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter unencodedPathParam is required and cannot be null.")));
        }
        service.getSwaggerPathValidAsync(unencodedPathParam, this.client.getAcceptLanguage(), new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getSwaggerPathValidDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> getSwaggerPathValidDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get method with unencoded query parameter with value 'value1&amp;q2=value2&amp;q3=value3'
     *
     * @param q1 Unencoded query parameter with value 'value1&amp;q2=value2&amp;q3=value3'
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void getMethodQueryValid(String q1) throws ServiceException {
        if (q1 == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter q1 is required and cannot be null."));
        }
        try {
            ServiceResponse<Void> response = getMethodQueryValidDelegate(service.getMethodQueryValid(q1, this.client.getAcceptLanguage()), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = getMethodQueryValidDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Get method with unencoded query parameter with value 'value1&amp;q2=value2&amp;q3=value3'
     *
     * @param q1 Unencoded query parameter with value 'value1&amp;q2=value2&amp;q3=value3'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getMethodQueryValidAsync(String q1, final ServiceCallback<Void> serviceCallback) {
        if (q1 == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter q1 is required and cannot be null.")));
        }
        service.getMethodQueryValidAsync(q1, this.client.getAcceptLanguage(), new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getMethodQueryValidDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> getMethodQueryValidDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get method with unencoded query parameter with value null
     *
     * @param q1 Unencoded query parameter with value null
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void getMethodQueryNull(String q1) throws ServiceException {
        try {
            ServiceResponse<Void> response = getMethodQueryNullDelegate(service.getMethodQueryNull(q1, this.client.getAcceptLanguage()), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = getMethodQueryNullDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Get method with unencoded query parameter with value null
     *
     * @param q1 Unencoded query parameter with value null
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getMethodQueryNullAsync(String q1, final ServiceCallback<Void> serviceCallback) {
        service.getMethodQueryNullAsync(q1, this.client.getAcceptLanguage(), new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getMethodQueryNullDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> getMethodQueryNullDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get method with unencoded query parameter with value 'value1&amp;q2=value2&amp;q3=value3'
     *
     * @param q1 Unencoded query parameter with value 'value1&amp;q2=value2&amp;q3=value3'
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void getPathQueryValid(String q1) throws ServiceException {
        if (q1 == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter q1 is required and cannot be null."));
        }
        try {
            ServiceResponse<Void> response = getPathQueryValidDelegate(service.getPathQueryValid(q1, this.client.getAcceptLanguage()), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = getPathQueryValidDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Get method with unencoded query parameter with value 'value1&amp;q2=value2&amp;q3=value3'
     *
     * @param q1 Unencoded query parameter with value 'value1&amp;q2=value2&amp;q3=value3'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getPathQueryValidAsync(String q1, final ServiceCallback<Void> serviceCallback) {
        if (q1 == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter q1 is required and cannot be null.")));
        }
        service.getPathQueryValidAsync(q1, this.client.getAcceptLanguage(), new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getPathQueryValidDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> getPathQueryValidDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get method with unencoded query parameter with value 'value1&amp;q2=value2&amp;q3=value3'
     *
     * @param q1 An unencoded query parameter with value 'value1&amp;q2=value2&amp;q3=value3'. Possible values for this parameter include: 'value1&amp;q2=value2&amp;q3=value3'
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void getSwaggerQueryValid(String q1) throws ServiceException {
        try {
            ServiceResponse<Void> response = getSwaggerQueryValidDelegate(service.getSwaggerQueryValid(q1, this.client.getAcceptLanguage()), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = getSwaggerQueryValidDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Get method with unencoded query parameter with value 'value1&amp;q2=value2&amp;q3=value3'
     *
     * @param q1 An unencoded query parameter with value 'value1&amp;q2=value2&amp;q3=value3'. Possible values for this parameter include: 'value1&amp;q2=value2&amp;q3=value3'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getSwaggerQueryValidAsync(String q1, final ServiceCallback<Void> serviceCallback) {
        service.getSwaggerQueryValidAsync(q1, this.client.getAcceptLanguage(), new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getSwaggerQueryValidDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> getSwaggerQueryValidDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

}
