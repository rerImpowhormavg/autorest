/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.azurespecials;

import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceException;
import com.microsoft.rest.ServiceResponseCallback;
import retrofit.client.Response;
import retrofit.http.GET;
import retrofit.http.Path;
import retrofit.http.Header;
import retrofit.http.Query;

/**
 * An instance of this class provides access to all the operations defined
 * in SkipUrlEncoding.
 */
public interface SkipUrlEncoding {
    /**
     * The interface defining all the services for SkipUrlEncoding to be
     * used by Retrofit to perform actually REST calls.
     */
    interface SkipUrlEncodingService {
        @GET("/azurespecials/skipUrlEncoding/method/path/valid/{unencodedPathParam}")
        Response getMethodPathValid(@Path("unencodedPathParam") String unencodedPathParam, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @GET("/azurespecials/skipUrlEncoding/method/path/valid/{unencodedPathParam}")
        void getMethodPathValidAsync(@Path("unencodedPathParam") String unencodedPathParam, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @GET("/azurespecials/skipUrlEncoding/path/path/valid/{unencodedPathParam}")
        Response getPathPathValid(@Path("unencodedPathParam") String unencodedPathParam, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @GET("/azurespecials/skipUrlEncoding/path/path/valid/{unencodedPathParam}")
        void getPathPathValidAsync(@Path("unencodedPathParam") String unencodedPathParam, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @GET("/azurespecials/skipUrlEncoding/swagger/path/valid/{unencodedPathParam}")
        Response getSwaggerPathValid(@Path("unencodedPathParam") String unencodedPathParam, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @GET("/azurespecials/skipUrlEncoding/swagger/path/valid/{unencodedPathParam}")
        void getSwaggerPathValidAsync(@Path("unencodedPathParam") String unencodedPathParam, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @GET("/azurespecials/skipUrlEncoding/method/query/valid")
        Response getMethodQueryValid(@Query("q1") String q1, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @GET("/azurespecials/skipUrlEncoding/method/query/valid")
        void getMethodQueryValidAsync(@Query("q1") String q1, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @GET("/azurespecials/skipUrlEncoding/method/query/null")
        Response getMethodQueryNull(@Query("q1") String q1, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @GET("/azurespecials/skipUrlEncoding/method/query/null")
        void getMethodQueryNullAsync(@Query("q1") String q1, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @GET("/azurespecials/skipUrlEncoding/path/query/valid")
        Response getPathQueryValid(@Query("q1") String q1, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @GET("/azurespecials/skipUrlEncoding/path/query/valid")
        void getPathQueryValidAsync(@Query("q1") String q1, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @GET("/azurespecials/skipUrlEncoding/swagger/query/valid")
        Response getSwaggerQueryValid(@Query("q1") String q1, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @GET("/azurespecials/skipUrlEncoding/swagger/query/valid")
        void getSwaggerQueryValidAsync(@Query("q1") String q1, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

    }
    /**
     * Get method with unencoded path parameter with value 'path1/path2/path3'
     *
     * @param unencodedPathParam Unencoded path parameter with value 'path1/path2/path3'
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void getMethodPathValid(String unencodedPathParam) throws ServiceException;

    /**
     * Get method with unencoded path parameter with value 'path1/path2/path3'
     *
     * @param unencodedPathParam Unencoded path parameter with value 'path1/path2/path3'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getMethodPathValidAsync(String unencodedPathParam, final ServiceCallback<Void> serviceCallback);

    /**
     * Get method with unencoded path parameter with value 'path1/path2/path3'
     *
     * @param unencodedPathParam Unencoded path parameter with value 'path1/path2/path3'
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void getPathPathValid(String unencodedPathParam) throws ServiceException;

    /**
     * Get method with unencoded path parameter with value 'path1/path2/path3'
     *
     * @param unencodedPathParam Unencoded path parameter with value 'path1/path2/path3'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getPathPathValidAsync(String unencodedPathParam, final ServiceCallback<Void> serviceCallback);

    /**
     * Get method with unencoded path parameter with value 'path1/path2/path3'
     *
     * @param unencodedPathParam An unencoded path parameter with value 'path1/path2/path3'. Possible values for this parameter include: 'path1/path2/path3'
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void getSwaggerPathValid(String unencodedPathParam) throws ServiceException;

    /**
     * Get method with unencoded path parameter with value 'path1/path2/path3'
     *
     * @param unencodedPathParam An unencoded path parameter with value 'path1/path2/path3'. Possible values for this parameter include: 'path1/path2/path3'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getSwaggerPathValidAsync(String unencodedPathParam, final ServiceCallback<Void> serviceCallback);

    /**
     * Get method with unencoded query parameter with value 'value1&amp;q2=value2&amp;q3=value3'
     *
     * @param q1 Unencoded query parameter with value 'value1&amp;q2=value2&amp;q3=value3'
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void getMethodQueryValid(String q1) throws ServiceException;

    /**
     * Get method with unencoded query parameter with value 'value1&amp;q2=value2&amp;q3=value3'
     *
     * @param q1 Unencoded query parameter with value 'value1&amp;q2=value2&amp;q3=value3'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getMethodQueryValidAsync(String q1, final ServiceCallback<Void> serviceCallback);

    /**
     * Get method with unencoded query parameter with value null
     *
     * @param q1 Unencoded query parameter with value null
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void getMethodQueryNull(String q1) throws ServiceException;

    /**
     * Get method with unencoded query parameter with value null
     *
     * @param q1 Unencoded query parameter with value null
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getMethodQueryNullAsync(String q1, final ServiceCallback<Void> serviceCallback);

    /**
     * Get method with unencoded query parameter with value 'value1&amp;q2=value2&amp;q3=value3'
     *
     * @param q1 Unencoded query parameter with value 'value1&amp;q2=value2&amp;q3=value3'
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void getPathQueryValid(String q1) throws ServiceException;

    /**
     * Get method with unencoded query parameter with value 'value1&amp;q2=value2&amp;q3=value3'
     *
     * @param q1 Unencoded query parameter with value 'value1&amp;q2=value2&amp;q3=value3'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getPathQueryValidAsync(String q1, final ServiceCallback<Void> serviceCallback);

    /**
     * Get method with unencoded query parameter with value 'value1&amp;q2=value2&amp;q3=value3'
     *
     * @param q1 An unencoded query parameter with value 'value1&amp;q2=value2&amp;q3=value3'. Possible values for this parameter include: 'value1&amp;q2=value2&amp;q3=value3'
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void getSwaggerQueryValid(String q1) throws ServiceException;

    /**
     * Get method with unencoded query parameter with value 'value1&amp;q2=value2&amp;q3=value3'
     *
     * @param q1 An unencoded query parameter with value 'value1&amp;q2=value2&amp;q3=value3'. Possible values for this parameter include: 'value1&amp;q2=value2&amp;q3=value3'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getSwaggerQueryValidAsync(String q1, final ServiceCallback<Void> serviceCallback);

}
