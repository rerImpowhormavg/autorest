/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.azurespecials;

import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceException;
import com.microsoft.rest.ServiceResponseCallback;
import retrofit.client.Response;
import retrofit.http.POST;
import retrofit.http.Path;
import retrofit.http.Header;

/**
 * An instance of this class provides access to all the operations defined
 * in SubscriptionInMethod.
 */
public interface SubscriptionInMethod {
    /**
     * The interface defining all the services for SubscriptionInMethod to be
     * used by Retrofit to perform actually REST calls.
     */
    interface SubscriptionInMethodService {
        @POST("/azurespecials/subscriptionId/method/string/none/path/local/1234-5678-9012-3456/{subscriptionId}")
        Response postMethodLocalValid(@Path("subscriptionId") String subscriptionId, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @POST("/azurespecials/subscriptionId/method/string/none/path/local/1234-5678-9012-3456/{subscriptionId}")
        void postMethodLocalValidAsync(@Path("subscriptionId") String subscriptionId, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @POST("/azurespecials/subscriptionId/method/string/none/path/local/null/{subscriptionId}")
        Response postMethodLocalNull(@Path("subscriptionId") String subscriptionId, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @POST("/azurespecials/subscriptionId/method/string/none/path/local/null/{subscriptionId}")
        void postMethodLocalNullAsync(@Path("subscriptionId") String subscriptionId, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @POST("/azurespecials/subscriptionId/path/string/none/path/local/1234-5678-9012-3456/{subscriptionId}")
        Response postPathLocalValid(@Path("subscriptionId") String subscriptionId, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @POST("/azurespecials/subscriptionId/path/string/none/path/local/1234-5678-9012-3456/{subscriptionId}")
        void postPathLocalValidAsync(@Path("subscriptionId") String subscriptionId, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @POST("/azurespecials/subscriptionId/swagger/string/none/path/local/1234-5678-9012-3456/{subscriptionId}")
        Response postSwaggerLocalValid(@Path("subscriptionId") String subscriptionId, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @POST("/azurespecials/subscriptionId/swagger/string/none/path/local/1234-5678-9012-3456/{subscriptionId}")
        void postSwaggerLocalValidAsync(@Path("subscriptionId") String subscriptionId, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

    }
    /**
     * POST method with subscriptionId modeled in the method.  pass in subscription id = '1234-5678-9012-3456' to succeed
     *
     * @param subscriptionId This should appear as a method parameter, use value '1234-5678-9012-3456'
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void postMethodLocalValid(String subscriptionId) throws ServiceException;

    /**
     * POST method with subscriptionId modeled in the method.  pass in subscription id = '1234-5678-9012-3456' to succeed
     *
     * @param subscriptionId This should appear as a method parameter, use value '1234-5678-9012-3456'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void postMethodLocalValidAsync(String subscriptionId, final ServiceCallback<Void> serviceCallback);

    /**
     * POST method with subscriptionId modeled in the method.  pass in subscription id = null, client-side validation should prevent you from making this call
     *
     * @param subscriptionId This should appear as a method parameter, use value null, client-side validation should prvenet the call
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void postMethodLocalNull(String subscriptionId) throws ServiceException;

    /**
     * POST method with subscriptionId modeled in the method.  pass in subscription id = null, client-side validation should prevent you from making this call
     *
     * @param subscriptionId This should appear as a method parameter, use value null, client-side validation should prvenet the call
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void postMethodLocalNullAsync(String subscriptionId, final ServiceCallback<Void> serviceCallback);

    /**
     * POST method with subscriptionId modeled in the method.  pass in subscription id = '1234-5678-9012-3456' to succeed
     *
     * @param subscriptionId Should appear as a method parameter -use value '1234-5678-9012-3456'
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void postPathLocalValid(String subscriptionId) throws ServiceException;

    /**
     * POST method with subscriptionId modeled in the method.  pass in subscription id = '1234-5678-9012-3456' to succeed
     *
     * @param subscriptionId Should appear as a method parameter -use value '1234-5678-9012-3456'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void postPathLocalValidAsync(String subscriptionId, final ServiceCallback<Void> serviceCallback);

    /**
     * POST method with subscriptionId modeled in the method.  pass in subscription id = '1234-5678-9012-3456' to succeed
     *
     * @param subscriptionId The subscriptionId, which appears in the path, the value is always '1234-5678-9012-3456'
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void postSwaggerLocalValid(String subscriptionId) throws ServiceException;

    /**
     * POST method with subscriptionId modeled in the method.  pass in subscription id = '1234-5678-9012-3456' to succeed
     *
     * @param subscriptionId The subscriptionId, which appears in the path, the value is always '1234-5678-9012-3456'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void postSwaggerLocalValidAsync(String subscriptionId, final ServiceCallback<Void> serviceCallback);

}
