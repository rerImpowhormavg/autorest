/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.azurespecials;

import com.google.gson.reflect.TypeToken;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceException;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseBuilder;
import com.microsoft.rest.ServiceResponseCallback;
import retrofit.RestAdapter;
import retrofit.RetrofitError;
import retrofit.client.Response;
import fixtures.azurespecials.models.Error;

public class HeaderOperationsImpl implements HeaderOperations {
    private HeaderService service;
    AutoRestAzureSpecialParametersTestClient client;

    public HeaderOperationsImpl(RestAdapter restAdapter, AutoRestAzureSpecialParametersTestClient client) {
        this.service = restAdapter.create(HeaderService.class);
        this.client = client;
    }

    /**
     * Send foo-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 in the header of the request
     *
     * @param fooClientRequestId The fooRequestId
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void customNamedRequestId(String fooClientRequestId) throws ServiceException {
        if (fooClientRequestId == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter fooClientRequestId is required and cannot be null."));
        }
        try {
            ServiceResponse<Void> response = customNamedRequestIdDelegate(service.customNamedRequestId(fooClientRequestId, this.client.getAcceptLanguage()), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = customNamedRequestIdDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Send foo-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 in the header of the request
     *
     * @param fooClientRequestId The fooRequestId
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void customNamedRequestIdAsync(String fooClientRequestId, final ServiceCallback<Void> serviceCallback) {
        if (fooClientRequestId == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter fooClientRequestId is required and cannot be null.")));
        }
        service.customNamedRequestIdAsync(fooClientRequestId, this.client.getAcceptLanguage(), new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(customNamedRequestIdDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> customNamedRequestIdDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

}
