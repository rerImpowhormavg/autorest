/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.lro;

import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceException;
import com.microsoft.rest.ServiceResponseCallback;
import retrofit.client.Response;
import fixtures.lro.models.Product;
import fixtures.lro.models.Sku;
import fixtures.lro.models.SubProduct;
import retrofit.http.PUT;
import retrofit.http.Body;
import retrofit.http.Header;
import com.microsoft.rest.DELETE;
import retrofit.http.POST;

/**
 * An instance of this class provides access to all the operations defined
 * in LROs.
 */
public interface LROs {
    /**
     * The interface defining all the services for LROs to be
     * used by Retrofit to perform actually REST calls.
     */
    interface LROsService {
        @PUT("/lro/put/200/succeeded")
        Response put200Succeeded(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @PUT("/lro/put/200/succeeded")
        void put200SucceededAsync(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @PUT("/lro/put/200/succeeded")
        Response beginPut200Succeeded(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @PUT("/lro/put/200/succeeded")
        void beginPut200SucceededAsync(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @PUT("/lro/put/200/succeeded/nostate")
        Response put200SucceededNoState(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @PUT("/lro/put/200/succeeded/nostate")
        void put200SucceededNoStateAsync(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @PUT("/lro/put/200/succeeded/nostate")
        Response beginPut200SucceededNoState(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @PUT("/lro/put/200/succeeded/nostate")
        void beginPut200SucceededNoStateAsync(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @PUT("/lro/put/202/retry/200")
        Response put202Retry200(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @PUT("/lro/put/202/retry/200")
        void put202Retry200Async(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @PUT("/lro/put/202/retry/200")
        Response beginPut202Retry200(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @PUT("/lro/put/202/retry/200")
        void beginPut202Retry200Async(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @PUT("/lro/put/201/creating/succeeded/200")
        Response put201CreatingSucceeded200(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @PUT("/lro/put/201/creating/succeeded/200")
        void put201CreatingSucceeded200Async(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @PUT("/lro/put/201/creating/succeeded/200")
        Response beginPut201CreatingSucceeded200(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @PUT("/lro/put/201/creating/succeeded/200")
        void beginPut201CreatingSucceeded200Async(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @PUT("/lro/put/200/updating/succeeded/200")
        Response put200UpdatingSucceeded204(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @PUT("/lro/put/200/updating/succeeded/200")
        void put200UpdatingSucceeded204Async(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @PUT("/lro/put/200/updating/succeeded/200")
        Response beginPut200UpdatingSucceeded204(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @PUT("/lro/put/200/updating/succeeded/200")
        void beginPut200UpdatingSucceeded204Async(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @PUT("/lro/put/201/created/failed/200")
        Response put201CreatingFailed200(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @PUT("/lro/put/201/created/failed/200")
        void put201CreatingFailed200Async(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @PUT("/lro/put/201/created/failed/200")
        Response beginPut201CreatingFailed200(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @PUT("/lro/put/201/created/failed/200")
        void beginPut201CreatingFailed200Async(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @PUT("/lro/put/200/accepted/canceled/200")
        Response put200Acceptedcanceled200(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @PUT("/lro/put/200/accepted/canceled/200")
        void put200Acceptedcanceled200Async(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @PUT("/lro/put/200/accepted/canceled/200")
        Response beginPut200Acceptedcanceled200(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @PUT("/lro/put/200/accepted/canceled/200")
        void beginPut200Acceptedcanceled200Async(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @PUT("/lro/put/noheader/202/200")
        Response putNoHeaderInRetry(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @PUT("/lro/put/noheader/202/200")
        void putNoHeaderInRetryAsync(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @PUT("/lro/put/noheader/202/200")
        Response beginPutNoHeaderInRetry(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @PUT("/lro/put/noheader/202/200")
        void beginPutNoHeaderInRetryAsync(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @PUT("/lro/putasync/retry/succeeded")
        Response putAsyncRetrySucceeded(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @PUT("/lro/putasync/retry/succeeded")
        void putAsyncRetrySucceededAsync(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @PUT("/lro/putasync/retry/succeeded")
        Response beginPutAsyncRetrySucceeded(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @PUT("/lro/putasync/retry/succeeded")
        void beginPutAsyncRetrySucceededAsync(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @PUT("/lro/putasync/noretry/succeeded")
        Response putAsyncNoRetrySucceeded(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @PUT("/lro/putasync/noretry/succeeded")
        void putAsyncNoRetrySucceededAsync(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @PUT("/lro/putasync/noretry/succeeded")
        Response beginPutAsyncNoRetrySucceeded(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @PUT("/lro/putasync/noretry/succeeded")
        void beginPutAsyncNoRetrySucceededAsync(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @PUT("/lro/putasync/retry/failed")
        Response putAsyncRetryFailed(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @PUT("/lro/putasync/retry/failed")
        void putAsyncRetryFailedAsync(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @PUT("/lro/putasync/retry/failed")
        Response beginPutAsyncRetryFailed(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @PUT("/lro/putasync/retry/failed")
        void beginPutAsyncRetryFailedAsync(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @PUT("/lro/putasync/noretry/canceled")
        Response putAsyncNoRetrycanceled(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @PUT("/lro/putasync/noretry/canceled")
        void putAsyncNoRetrycanceledAsync(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @PUT("/lro/putasync/noretry/canceled")
        Response beginPutAsyncNoRetrycanceled(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @PUT("/lro/putasync/noretry/canceled")
        void beginPutAsyncNoRetrycanceledAsync(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @PUT("/lro/putasync/noheader/201/200")
        Response putAsyncNoHeaderInRetry(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @PUT("/lro/putasync/noheader/201/200")
        void putAsyncNoHeaderInRetryAsync(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @PUT("/lro/putasync/noheader/201/200")
        Response beginPutAsyncNoHeaderInRetry(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @PUT("/lro/putasync/noheader/201/200")
        void beginPutAsyncNoHeaderInRetryAsync(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @PUT("/lro/putnonresource/202/200")
        Response putNonResource(@Body Sku sku, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @PUT("/lro/putnonresource/202/200")
        void putNonResourceAsync(@Body Sku sku, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @PUT("/lro/putnonresource/202/200")
        Response beginPutNonResource(@Body Sku sku, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @PUT("/lro/putnonresource/202/200")
        void beginPutNonResourceAsync(@Body Sku sku, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @PUT("/lro/putnonresourceasync/202/200")
        Response putAsyncNonResource(@Body Sku sku, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @PUT("/lro/putnonresourceasync/202/200")
        void putAsyncNonResourceAsync(@Body Sku sku, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @PUT("/lro/putnonresourceasync/202/200")
        Response beginPutAsyncNonResource(@Body Sku sku, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @PUT("/lro/putnonresourceasync/202/200")
        void beginPutAsyncNonResourceAsync(@Body Sku sku, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @PUT("/lro/putsubresource/202/200")
        Response putSubResource(@Body SubProduct product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @PUT("/lro/putsubresource/202/200")
        void putSubResourceAsync(@Body SubProduct product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @PUT("/lro/putsubresource/202/200")
        Response beginPutSubResource(@Body SubProduct product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @PUT("/lro/putsubresource/202/200")
        void beginPutSubResourceAsync(@Body SubProduct product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @PUT("/lro/putsubresourceasync/202/200")
        Response putAsyncSubResource(@Body SubProduct product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @PUT("/lro/putsubresourceasync/202/200")
        void putAsyncSubResourceAsync(@Body SubProduct product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @PUT("/lro/putsubresourceasync/202/200")
        Response beginPutAsyncSubResource(@Body SubProduct product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @PUT("/lro/putsubresourceasync/202/200")
        void beginPutAsyncSubResourceAsync(@Body SubProduct product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @DELETE("/lro/delete/provisioning/202/accepted/200/succeeded")
        Response deleteProvisioning202Accepted200Succeeded(@Header("accept-language") String acceptLanguage) throws ServiceException;

        @DELETE("/lro/delete/provisioning/202/accepted/200/succeeded")
        void deleteProvisioning202Accepted200SucceededAsync(@Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @DELETE("/lro/delete/provisioning/202/accepted/200/succeeded")
        Response beginDeleteProvisioning202Accepted200Succeeded(@Header("accept-language") String acceptLanguage) throws ServiceException;

        @DELETE("/lro/delete/provisioning/202/accepted/200/succeeded")
        void beginDeleteProvisioning202Accepted200SucceededAsync(@Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @DELETE("/lro/delete/provisioning/202/deleting/200/failed")
        Response deleteProvisioning202DeletingFailed200(@Header("accept-language") String acceptLanguage) throws ServiceException;

        @DELETE("/lro/delete/provisioning/202/deleting/200/failed")
        void deleteProvisioning202DeletingFailed200Async(@Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @DELETE("/lro/delete/provisioning/202/deleting/200/failed")
        Response beginDeleteProvisioning202DeletingFailed200(@Header("accept-language") String acceptLanguage) throws ServiceException;

        @DELETE("/lro/delete/provisioning/202/deleting/200/failed")
        void beginDeleteProvisioning202DeletingFailed200Async(@Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @DELETE("/lro/delete/provisioning/202/deleting/200/canceled")
        Response deleteProvisioning202Deletingcanceled200(@Header("accept-language") String acceptLanguage) throws ServiceException;

        @DELETE("/lro/delete/provisioning/202/deleting/200/canceled")
        void deleteProvisioning202Deletingcanceled200Async(@Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @DELETE("/lro/delete/provisioning/202/deleting/200/canceled")
        Response beginDeleteProvisioning202Deletingcanceled200(@Header("accept-language") String acceptLanguage) throws ServiceException;

        @DELETE("/lro/delete/provisioning/202/deleting/200/canceled")
        void beginDeleteProvisioning202Deletingcanceled200Async(@Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @DELETE("/lro/delete/204/succeeded")
        Response delete204Succeeded(@Header("accept-language") String acceptLanguage) throws ServiceException;

        @DELETE("/lro/delete/204/succeeded")
        void delete204SucceededAsync(@Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @DELETE("/lro/delete/204/succeeded")
        Response beginDelete204Succeeded(@Header("accept-language") String acceptLanguage) throws ServiceException;

        @DELETE("/lro/delete/204/succeeded")
        void beginDelete204SucceededAsync(@Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @DELETE("/lro/delete/202/retry/200")
        Response delete202Retry200(@Header("accept-language") String acceptLanguage) throws ServiceException;

        @DELETE("/lro/delete/202/retry/200")
        void delete202Retry200Async(@Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @DELETE("/lro/delete/202/retry/200")
        Response beginDelete202Retry200(@Header("accept-language") String acceptLanguage) throws ServiceException;

        @DELETE("/lro/delete/202/retry/200")
        void beginDelete202Retry200Async(@Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @DELETE("/lro/delete/202/noretry/204")
        Response delete202NoRetry204(@Header("accept-language") String acceptLanguage) throws ServiceException;

        @DELETE("/lro/delete/202/noretry/204")
        void delete202NoRetry204Async(@Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @DELETE("/lro/delete/202/noretry/204")
        Response beginDelete202NoRetry204(@Header("accept-language") String acceptLanguage) throws ServiceException;

        @DELETE("/lro/delete/202/noretry/204")
        void beginDelete202NoRetry204Async(@Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @DELETE("/lro/delete/noheader")
        Response deleteNoHeaderInRetry(@Header("accept-language") String acceptLanguage) throws ServiceException;

        @DELETE("/lro/delete/noheader")
        void deleteNoHeaderInRetryAsync(@Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @DELETE("/lro/delete/noheader")
        Response beginDeleteNoHeaderInRetry(@Header("accept-language") String acceptLanguage) throws ServiceException;

        @DELETE("/lro/delete/noheader")
        void beginDeleteNoHeaderInRetryAsync(@Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @DELETE("/lro/deleteasync/noheader/202/204")
        Response deleteAsyncNoHeaderInRetry(@Header("accept-language") String acceptLanguage) throws ServiceException;

        @DELETE("/lro/deleteasync/noheader/202/204")
        void deleteAsyncNoHeaderInRetryAsync(@Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @DELETE("/lro/deleteasync/noheader/202/204")
        Response beginDeleteAsyncNoHeaderInRetry(@Header("accept-language") String acceptLanguage) throws ServiceException;

        @DELETE("/lro/deleteasync/noheader/202/204")
        void beginDeleteAsyncNoHeaderInRetryAsync(@Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @DELETE("/lro/deleteasync/retry/succeeded")
        Response deleteAsyncRetrySucceeded(@Header("accept-language") String acceptLanguage) throws ServiceException;

        @DELETE("/lro/deleteasync/retry/succeeded")
        void deleteAsyncRetrySucceededAsync(@Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @DELETE("/lro/deleteasync/retry/succeeded")
        Response beginDeleteAsyncRetrySucceeded(@Header("accept-language") String acceptLanguage) throws ServiceException;

        @DELETE("/lro/deleteasync/retry/succeeded")
        void beginDeleteAsyncRetrySucceededAsync(@Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @DELETE("/lro/deleteasync/noretry/succeeded")
        Response deleteAsyncNoRetrySucceeded(@Header("accept-language") String acceptLanguage) throws ServiceException;

        @DELETE("/lro/deleteasync/noretry/succeeded")
        void deleteAsyncNoRetrySucceededAsync(@Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @DELETE("/lro/deleteasync/noretry/succeeded")
        Response beginDeleteAsyncNoRetrySucceeded(@Header("accept-language") String acceptLanguage) throws ServiceException;

        @DELETE("/lro/deleteasync/noretry/succeeded")
        void beginDeleteAsyncNoRetrySucceededAsync(@Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @DELETE("/lro/deleteasync/retry/failed")
        Response deleteAsyncRetryFailed(@Header("accept-language") String acceptLanguage) throws ServiceException;

        @DELETE("/lro/deleteasync/retry/failed")
        void deleteAsyncRetryFailedAsync(@Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @DELETE("/lro/deleteasync/retry/failed")
        Response beginDeleteAsyncRetryFailed(@Header("accept-language") String acceptLanguage) throws ServiceException;

        @DELETE("/lro/deleteasync/retry/failed")
        void beginDeleteAsyncRetryFailedAsync(@Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @DELETE("/lro/deleteasync/retry/canceled")
        Response deleteAsyncRetrycanceled(@Header("accept-language") String acceptLanguage) throws ServiceException;

        @DELETE("/lro/deleteasync/retry/canceled")
        void deleteAsyncRetrycanceledAsync(@Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @DELETE("/lro/deleteasync/retry/canceled")
        Response beginDeleteAsyncRetrycanceled(@Header("accept-language") String acceptLanguage) throws ServiceException;

        @DELETE("/lro/deleteasync/retry/canceled")
        void beginDeleteAsyncRetrycanceledAsync(@Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @POST("/lro/post/payload/200")
        Response post200WithPayload(@Header("accept-language") String acceptLanguage) throws ServiceException;

        @POST("/lro/post/payload/200")
        void post200WithPayloadAsync(@Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @POST("/lro/post/payload/200")
        Response beginPost200WithPayload(@Header("accept-language") String acceptLanguage) throws ServiceException;

        @POST("/lro/post/payload/200")
        void beginPost200WithPayloadAsync(@Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @POST("/lro/post/202/retry/200")
        Response post202Retry200(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @POST("/lro/post/202/retry/200")
        void post202Retry200Async(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @POST("/lro/post/202/retry/200")
        Response beginPost202Retry200(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @POST("/lro/post/202/retry/200")
        void beginPost202Retry200Async(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @POST("/lro/post/202/noretry/204")
        Response post202NoRetry204(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @POST("/lro/post/202/noretry/204")
        void post202NoRetry204Async(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @POST("/lro/post/202/noretry/204")
        Response beginPost202NoRetry204(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @POST("/lro/post/202/noretry/204")
        void beginPost202NoRetry204Async(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @POST("/lro/postasync/retry/succeeded")
        Response postAsyncRetrySucceeded(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @POST("/lro/postasync/retry/succeeded")
        void postAsyncRetrySucceededAsync(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @POST("/lro/postasync/retry/succeeded")
        Response beginPostAsyncRetrySucceeded(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @POST("/lro/postasync/retry/succeeded")
        void beginPostAsyncRetrySucceededAsync(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @POST("/lro/postasync/noretry/succeeded")
        Response postAsyncNoRetrySucceeded(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @POST("/lro/postasync/noretry/succeeded")
        void postAsyncNoRetrySucceededAsync(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @POST("/lro/postasync/noretry/succeeded")
        Response beginPostAsyncNoRetrySucceeded(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @POST("/lro/postasync/noretry/succeeded")
        void beginPostAsyncNoRetrySucceededAsync(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @POST("/lro/postasync/retry/failed")
        Response postAsyncRetryFailed(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @POST("/lro/postasync/retry/failed")
        void postAsyncRetryFailedAsync(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @POST("/lro/postasync/retry/failed")
        Response beginPostAsyncRetryFailed(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @POST("/lro/postasync/retry/failed")
        void beginPostAsyncRetryFailedAsync(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @POST("/lro/postasync/retry/canceled")
        Response postAsyncRetrycanceled(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @POST("/lro/postasync/retry/canceled")
        void postAsyncRetrycanceledAsync(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @POST("/lro/postasync/retry/canceled")
        Response beginPostAsyncRetrycanceled(@Body Product product, @Header("accept-language") String acceptLanguage) throws ServiceException;

        @POST("/lro/postasync/retry/canceled")
        void beginPostAsyncRetrycanceledAsync(@Body Product product, @Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

    }
    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Succeeded’.
     *
     * @param product Product to put
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Product put200Succeeded(Product product) throws ServiceException;

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Succeeded’.
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void put200SucceededAsync(Product product, final ServiceCallback<Product> serviceCallback);

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Succeeded’.
     *
     * @param product Product to put
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Product beginPut200Succeeded(Product product) throws ServiceException;

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Succeeded’.
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginPut200SucceededAsync(Product product, final ServiceCallback<Product> serviceCallback);

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that does not contain ProvisioningState=’Succeeded’.
     *
     * @param product Product to put
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Product put200SucceededNoState(Product product) throws ServiceException;

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that does not contain ProvisioningState=’Succeeded’.
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void put200SucceededNoStateAsync(Product product, final ServiceCallback<Product> serviceCallback);

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that does not contain ProvisioningState=’Succeeded’.
     *
     * @param product Product to put
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Product beginPut200SucceededNoState(Product product) throws ServiceException;

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that does not contain ProvisioningState=’Succeeded’.
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginPut200SucceededNoStateAsync(Product product, final ServiceCallback<Product> serviceCallback);

    /**
     * Long running put request, service returns a 202 to the initial request, with a location header that points to a polling URL that returns a 200 and an entity that doesn't contains ProvisioningState
     *
     * @param product Product to put
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Product put202Retry200(Product product) throws ServiceException;

    /**
     * Long running put request, service returns a 202 to the initial request, with a location header that points to a polling URL that returns a 200 and an entity that doesn't contains ProvisioningState
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void put202Retry200Async(Product product, final ServiceCallback<Product> serviceCallback);

    /**
     * Long running put request, service returns a 202 to the initial request, with a location header that points to a polling URL that returns a 200 and an entity that doesn't contains ProvisioningState
     *
     * @param product Product to put
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Product beginPut202Retry200(Product product) throws ServiceException;

    /**
     * Long running put request, service returns a 202 to the initial request, with a location header that points to a polling URL that returns a 200 and an entity that doesn't contains ProvisioningState
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginPut202Retry200Async(Product product, final ServiceCallback<Product> serviceCallback);

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
     *
     * @param product Product to put
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Product put201CreatingSucceeded200(Product product) throws ServiceException;

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void put201CreatingSucceeded200Async(Product product, final ServiceCallback<Product> serviceCallback);

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
     *
     * @param product Product to put
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Product beginPut201CreatingSucceeded200(Product product) throws ServiceException;

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginPut201CreatingSucceeded200Async(Product product, final ServiceCallback<Product> serviceCallback);

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Updating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
     *
     * @param product Product to put
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Product put200UpdatingSucceeded204(Product product) throws ServiceException;

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Updating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void put200UpdatingSucceeded204Async(Product product, final ServiceCallback<Product> serviceCallback);

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Updating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
     *
     * @param product Product to put
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Product beginPut200UpdatingSucceeded204(Product product) throws ServiceException;

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Updating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginPut200UpdatingSucceeded204Async(Product product, final ServiceCallback<Product> serviceCallback);

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Created’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Failed’
     *
     * @param product Product to put
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Product put201CreatingFailed200(Product product) throws ServiceException;

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Created’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Failed’
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void put201CreatingFailed200Async(Product product, final ServiceCallback<Product> serviceCallback);

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Created’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Failed’
     *
     * @param product Product to put
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Product beginPut201CreatingFailed200(Product product) throws ServiceException;

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Created’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Failed’
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginPut201CreatingFailed200Async(Product product, final ServiceCallback<Product> serviceCallback);

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Canceled’
     *
     * @param product Product to put
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Product put200Acceptedcanceled200(Product product) throws ServiceException;

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Canceled’
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void put200Acceptedcanceled200Async(Product product, final ServiceCallback<Product> serviceCallback);

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Canceled’
     *
     * @param product Product to put
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Product beginPut200Acceptedcanceled200(Product product) throws ServiceException;

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Canceled’
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginPut200Acceptedcanceled200Async(Product product, final ServiceCallback<Product> serviceCallback);

    /**
     * Long running put request, service returns a 202 to the initial request with location header. Subsequent calls to operation status do not contain location header.
     *
     * @param product Product to put
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Product putNoHeaderInRetry(Product product) throws ServiceException;

    /**
     * Long running put request, service returns a 202 to the initial request with location header. Subsequent calls to operation status do not contain location header.
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void putNoHeaderInRetryAsync(Product product, final ServiceCallback<Product> serviceCallback);

    /**
     * Long running put request, service returns a 202 to the initial request with location header. Subsequent calls to operation status do not contain location header.
     *
     * @param product Product to put
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Product beginPutNoHeaderInRetry(Product product) throws ServiceException;

    /**
     * Long running put request, service returns a 202 to the initial request with location header. Subsequent calls to operation status do not contain location header.
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginPutNoHeaderInRetryAsync(Product product, final ServiceCallback<Product> serviceCallback);

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Product putAsyncRetrySucceeded(Product product) throws ServiceException;

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void putAsyncRetrySucceededAsync(Product product, final ServiceCallback<Product> serviceCallback);

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Product beginPutAsyncRetrySucceeded(Product product) throws ServiceException;

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginPutAsyncRetrySucceededAsync(Product product, final ServiceCallback<Product> serviceCallback);

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Product putAsyncNoRetrySucceeded(Product product) throws ServiceException;

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void putAsyncNoRetrySucceededAsync(Product product, final ServiceCallback<Product> serviceCallback);

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Product beginPutAsyncNoRetrySucceeded(Product product) throws ServiceException;

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginPutAsyncNoRetrySucceededAsync(Product product, final ServiceCallback<Product> serviceCallback);

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Product putAsyncRetryFailed(Product product) throws ServiceException;

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void putAsyncRetryFailedAsync(Product product, final ServiceCallback<Product> serviceCallback);

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Product beginPutAsyncRetryFailed(Product product) throws ServiceException;

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginPutAsyncRetryFailedAsync(Product product, final ServiceCallback<Product> serviceCallback);

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Product putAsyncNoRetrycanceled(Product product) throws ServiceException;

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void putAsyncNoRetrycanceledAsync(Product product, final ServiceCallback<Product> serviceCallback);

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Product beginPutAsyncNoRetrycanceled(Product product) throws ServiceException;

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginPutAsyncNoRetrycanceledAsync(Product product, final ServiceCallback<Product> serviceCallback);

    /**
     * Long running put request, service returns a 202 to the initial request with Azure-AsyncOperation header. Subsequent calls to operation status do not contain Azure-AsyncOperation header.
     *
     * @param product Product to put
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Product putAsyncNoHeaderInRetry(Product product) throws ServiceException;

    /**
     * Long running put request, service returns a 202 to the initial request with Azure-AsyncOperation header. Subsequent calls to operation status do not contain Azure-AsyncOperation header.
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void putAsyncNoHeaderInRetryAsync(Product product, final ServiceCallback<Product> serviceCallback);

    /**
     * Long running put request, service returns a 202 to the initial request with Azure-AsyncOperation header. Subsequent calls to operation status do not contain Azure-AsyncOperation header.
     *
     * @param product Product to put
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Product beginPutAsyncNoHeaderInRetry(Product product) throws ServiceException;

    /**
     * Long running put request, service returns a 202 to the initial request with Azure-AsyncOperation header. Subsequent calls to operation status do not contain Azure-AsyncOperation header.
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginPutAsyncNoHeaderInRetryAsync(Product product, final ServiceCallback<Product> serviceCallback);

    /**
     * Long running put request with non resource.
     *
     * @param sku sku to put
     * @return the Sku object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Sku putNonResource(Sku sku) throws ServiceException;

    /**
     * Long running put request with non resource.
     *
     * @param sku sku to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void putNonResourceAsync(Sku sku, final ServiceCallback<Sku> serviceCallback);

    /**
     * Long running put request with non resource.
     *
     * @param sku sku to put
     * @return the Sku object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Sku beginPutNonResource(Sku sku) throws ServiceException;

    /**
     * Long running put request with non resource.
     *
     * @param sku sku to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginPutNonResourceAsync(Sku sku, final ServiceCallback<Sku> serviceCallback);

    /**
     * Long running put request with non resource.
     *
     * @param sku Sku to put
     * @return the Sku object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Sku putAsyncNonResource(Sku sku) throws ServiceException;

    /**
     * Long running put request with non resource.
     *
     * @param sku Sku to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void putAsyncNonResourceAsync(Sku sku, final ServiceCallback<Sku> serviceCallback);

    /**
     * Long running put request with non resource.
     *
     * @param sku Sku to put
     * @return the Sku object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Sku beginPutAsyncNonResource(Sku sku) throws ServiceException;

    /**
     * Long running put request with non resource.
     *
     * @param sku Sku to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginPutAsyncNonResourceAsync(Sku sku, final ServiceCallback<Sku> serviceCallback);

    /**
     * Long running put request with sub resource.
     *
     * @param product Sub Product to put
     * @return the SubProduct object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    SubProduct putSubResource(SubProduct product) throws ServiceException;

    /**
     * Long running put request with sub resource.
     *
     * @param product Sub Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void putSubResourceAsync(SubProduct product, final ServiceCallback<SubProduct> serviceCallback);

    /**
     * Long running put request with sub resource.
     *
     * @param product Sub Product to put
     * @return the SubProduct object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    SubProduct beginPutSubResource(SubProduct product) throws ServiceException;

    /**
     * Long running put request with sub resource.
     *
     * @param product Sub Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginPutSubResourceAsync(SubProduct product, final ServiceCallback<SubProduct> serviceCallback);

    /**
     * Long running put request with sub resource.
     *
     * @param product Sub Product to put
     * @return the SubProduct object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    SubProduct putAsyncSubResource(SubProduct product) throws ServiceException;

    /**
     * Long running put request with sub resource.
     *
     * @param product Sub Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void putAsyncSubResourceAsync(SubProduct product, final ServiceCallback<SubProduct> serviceCallback);

    /**
     * Long running put request with sub resource.
     *
     * @param product Sub Product to put
     * @return the SubProduct object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    SubProduct beginPutAsyncSubResource(SubProduct product) throws ServiceException;

    /**
     * Long running put request with sub resource.
     *
     * @param product Sub Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginPutAsyncSubResourceAsync(SubProduct product, final ServiceCallback<SubProduct> serviceCallback);

    /**
     * Long running delete request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Accepted’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
     *
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Product deleteProvisioning202Accepted200Succeeded() throws ServiceException;

    /**
     * Long running delete request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Accepted’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void deleteProvisioning202Accepted200SucceededAsync(final ServiceCallback<Product> serviceCallback);

    /**
     * Long running delete request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Accepted’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
     *
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Product beginDeleteProvisioning202Accepted200Succeeded() throws ServiceException;

    /**
     * Long running delete request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Accepted’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginDeleteProvisioning202Accepted200SucceededAsync(final ServiceCallback<Product> serviceCallback);

    /**
     * Long running delete request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Failed’
     *
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Product deleteProvisioning202DeletingFailed200() throws ServiceException;

    /**
     * Long running delete request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Failed’
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void deleteProvisioning202DeletingFailed200Async(final ServiceCallback<Product> serviceCallback);

    /**
     * Long running delete request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Failed’
     *
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Product beginDeleteProvisioning202DeletingFailed200() throws ServiceException;

    /**
     * Long running delete request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Failed’
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginDeleteProvisioning202DeletingFailed200Async(final ServiceCallback<Product> serviceCallback);

    /**
     * Long running delete request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Canceled’
     *
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Product deleteProvisioning202Deletingcanceled200() throws ServiceException;

    /**
     * Long running delete request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Canceled’
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void deleteProvisioning202Deletingcanceled200Async(final ServiceCallback<Product> serviceCallback);

    /**
     * Long running delete request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Canceled’
     *
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Product beginDeleteProvisioning202Deletingcanceled200() throws ServiceException;

    /**
     * Long running delete request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Canceled’
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginDeleteProvisioning202Deletingcanceled200Async(final ServiceCallback<Product> serviceCallback);

    /**
     * Long running delete succeeds and returns right away
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void delete204Succeeded() throws ServiceException;

    /**
     * Long running delete succeeds and returns right away
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void delete204SucceededAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Long running delete succeeds and returns right away
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void beginDelete204Succeeded() throws ServiceException;

    /**
     * Long running delete succeeds and returns right away
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginDelete204SucceededAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Long running delete request, service returns a 202 to the initial request. Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
     *
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Product delete202Retry200() throws ServiceException;

    /**
     * Long running delete request, service returns a 202 to the initial request. Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void delete202Retry200Async(final ServiceCallback<Product> serviceCallback);

    /**
     * Long running delete request, service returns a 202 to the initial request. Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
     *
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Product beginDelete202Retry200() throws ServiceException;

    /**
     * Long running delete request, service returns a 202 to the initial request. Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginDelete202Retry200Async(final ServiceCallback<Product> serviceCallback);

    /**
     * Long running delete request, service returns a 202 to the initial request. Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
     *
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Product delete202NoRetry204() throws ServiceException;

    /**
     * Long running delete request, service returns a 202 to the initial request. Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void delete202NoRetry204Async(final ServiceCallback<Product> serviceCallback);

    /**
     * Long running delete request, service returns a 202 to the initial request. Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
     *
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Product beginDelete202NoRetry204() throws ServiceException;

    /**
     * Long running delete request, service returns a 202 to the initial request. Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginDelete202NoRetry204Async(final ServiceCallback<Product> serviceCallback);

    /**
     * Long running delete request, service returns a location header in the initial request. Subsequent calls to operation status do not contain location header.
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void deleteNoHeaderInRetry() throws ServiceException;

    /**
     * Long running delete request, service returns a location header in the initial request. Subsequent calls to operation status do not contain location header.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void deleteNoHeaderInRetryAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Long running delete request, service returns a location header in the initial request. Subsequent calls to operation status do not contain location header.
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void beginDeleteNoHeaderInRetry() throws ServiceException;

    /**
     * Long running delete request, service returns a location header in the initial request. Subsequent calls to operation status do not contain location header.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginDeleteNoHeaderInRetryAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Long running delete request, service returns an Azure-AsyncOperation header in the initial request. Subsequent calls to operation status do not contain Azure-AsyncOperation header.
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void deleteAsyncNoHeaderInRetry() throws ServiceException;

    /**
     * Long running delete request, service returns an Azure-AsyncOperation header in the initial request. Subsequent calls to operation status do not contain Azure-AsyncOperation header.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void deleteAsyncNoHeaderInRetryAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Long running delete request, service returns an Azure-AsyncOperation header in the initial request. Subsequent calls to operation status do not contain Azure-AsyncOperation header.
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void beginDeleteAsyncNoHeaderInRetry() throws ServiceException;

    /**
     * Long running delete request, service returns an Azure-AsyncOperation header in the initial request. Subsequent calls to operation status do not contain Azure-AsyncOperation header.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginDeleteAsyncNoHeaderInRetryAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void deleteAsyncRetrySucceeded() throws ServiceException;

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void deleteAsyncRetrySucceededAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void beginDeleteAsyncRetrySucceeded() throws ServiceException;

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginDeleteAsyncRetrySucceededAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void deleteAsyncNoRetrySucceeded() throws ServiceException;

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void deleteAsyncNoRetrySucceededAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void beginDeleteAsyncNoRetrySucceeded() throws ServiceException;

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginDeleteAsyncNoRetrySucceededAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void deleteAsyncRetryFailed() throws ServiceException;

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void deleteAsyncRetryFailedAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void beginDeleteAsyncRetryFailed() throws ServiceException;

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginDeleteAsyncRetryFailedAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void deleteAsyncRetrycanceled() throws ServiceException;

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void deleteAsyncRetrycanceledAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void beginDeleteAsyncRetrycanceled() throws ServiceException;

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginDeleteAsyncRetrycanceledAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' header. Poll returns a 200 with a response body after success.
     *
     * @return the Sku object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Sku post200WithPayload() throws ServiceException;

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' header. Poll returns a 200 with a response body after success.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void post200WithPayloadAsync(final ServiceCallback<Sku> serviceCallback);

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' header. Poll returns a 200 with a response body after success.
     *
     * @return the Sku object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Sku beginPost200WithPayload() throws ServiceException;

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' header. Poll returns a 200 with a response body after success.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginPost200WithPayloadAsync(final ServiceCallback<Sku> serviceCallback);

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' and 'Retry-After' headers, Polls return a 200 with a response body after success
     *
     * @param product Product to put
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void post202Retry200(Product product) throws ServiceException;

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' and 'Retry-After' headers, Polls return a 200 with a response body after success
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void post202Retry200Async(Product product, final ServiceCallback<Void> serviceCallback);

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' and 'Retry-After' headers, Polls return a 200 with a response body after success
     *
     * @param product Product to put
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void beginPost202Retry200(Product product) throws ServiceException;

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' and 'Retry-After' headers, Polls return a 200 with a response body after success
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginPost202Retry200Async(Product product, final ServiceCallback<Void> serviceCallback);

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' header, 204 with noresponse body after success
     *
     * @param product Product to put
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Product post202NoRetry204(Product product) throws ServiceException;

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' header, 204 with noresponse body after success
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void post202NoRetry204Async(Product product, final ServiceCallback<Product> serviceCallback);

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' header, 204 with noresponse body after success
     *
     * @param product Product to put
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Product beginPost202NoRetry204(Product product) throws ServiceException;

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' header, 204 with noresponse body after success
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginPost202NoRetry204Async(Product product, final ServiceCallback<Product> serviceCallback);

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Product postAsyncRetrySucceeded(Product product) throws ServiceException;

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void postAsyncRetrySucceededAsync(Product product, final ServiceCallback<Product> serviceCallback);

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Product beginPostAsyncRetrySucceeded(Product product) throws ServiceException;

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginPostAsyncRetrySucceededAsync(Product product, final ServiceCallback<Product> serviceCallback);

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Product postAsyncNoRetrySucceeded(Product product) throws ServiceException;

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void postAsyncNoRetrySucceededAsync(Product product, final ServiceCallback<Product> serviceCallback);

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @return the Product object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Product beginPostAsyncNoRetrySucceeded(Product product) throws ServiceException;

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginPostAsyncNoRetrySucceededAsync(Product product, final ServiceCallback<Product> serviceCallback);

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void postAsyncRetryFailed(Product product) throws ServiceException;

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void postAsyncRetryFailedAsync(Product product, final ServiceCallback<Void> serviceCallback);

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void beginPostAsyncRetryFailed(Product product) throws ServiceException;

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginPostAsyncRetryFailedAsync(Product product, final ServiceCallback<Void> serviceCallback);

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void postAsyncRetrycanceled(Product product) throws ServiceException;

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void postAsyncRetrycanceledAsync(Product product, final ServiceCallback<Void> serviceCallback);

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void beginPostAsyncRetrycanceled(Product product) throws ServiceException;

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status
     *
     * @param product Product to put
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void beginPostAsyncRetrycanceledAsync(Product product, final ServiceCallback<Void> serviceCallback);

}
