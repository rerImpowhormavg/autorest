/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.paging;

import com.google.gson.reflect.TypeToken;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceException;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseBuilder;
import com.microsoft.rest.ServiceResponseCallback;
import retrofit.RestAdapter;
import retrofit.RetrofitError;
import retrofit.client.Response;
import fixtures.paging.models.Page<Product>;
import fixtures.paging.models.CloudError;

public class PagingImpl implements Paging {
    private PagingService service;
    AutoRestPagingTestService client;

    public PagingImpl(RestAdapter restAdapter, AutoRestPagingTestService client) {
        this.service = restAdapter.create(PagingService.class);
        this.client = client;
    }

    /**
     * A paging operation that finishes on the first call without a nextlink
     *
     * @return the Page&lt;Product&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public Page<Product> getSinglePages() throws ServiceException {
        try {
            ServiceResponse<Page<Product>> response = getSinglePagesDelegate(service.getSinglePages(this.client.getAcceptLanguage()), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Page<Product>> response = getSinglePagesDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * A paging operation that finishes on the first call without a nextlink
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getSinglePagesAsync(final ServiceCallback<Page<Product>> serviceCallback) {
        service.getSinglePagesAsync(this.client.getAcceptLanguage(), new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getSinglePagesDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Page<Product>> getSinglePagesDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Page<Product>>()
                .register(200, new TypeToken<Page<Product>>(){}.getType())
                .registerError(new TypeToken<CloudError>(){}.getType())
                .build(response, error);
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages
     *
     * @return the Page&lt;Product&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public Page<Product> getMultiplePages() throws ServiceException {
        try {
            ServiceResponse<Page<Product>> response = getMultiplePagesDelegate(service.getMultiplePages(this.client.getAcceptLanguage()), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Page<Product>> response = getMultiplePagesDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getMultiplePagesAsync(final ServiceCallback<Page<Product>> serviceCallback) {
        service.getMultiplePagesAsync(this.client.getAcceptLanguage(), new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getMultiplePagesDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Page<Product>> getMultiplePagesDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Page<Product>>()
                .register(200, new TypeToken<Page<Product>>(){}.getType())
                .registerError(new TypeToken<CloudError>(){}.getType())
                .build(response, error);
    }

    /**
     * A paging operation that fails on the first call with 500 and then
     * retries and then get a response including a nextLink that has 10 pages
     *
     * @return the Page&lt;Product&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public Page<Product> getMultiplePagesRetryFirst() throws ServiceException {
        try {
            ServiceResponse<Page<Product>> response = getMultiplePagesRetryFirstDelegate(service.getMultiplePagesRetryFirst(this.client.getAcceptLanguage()), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Page<Product>> response = getMultiplePagesRetryFirstDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * A paging operation that fails on the first call with 500 and then
     * retries and then get a response including a nextLink that has 10 pages
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getMultiplePagesRetryFirstAsync(final ServiceCallback<Page<Product>> serviceCallback) {
        service.getMultiplePagesRetryFirstAsync(this.client.getAcceptLanguage(), new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getMultiplePagesRetryFirstDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Page<Product>> getMultiplePagesRetryFirstDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Page<Product>>()
                .register(200, new TypeToken<Page<Product>>(){}.getType())
                .registerError(new TypeToken<CloudError>(){}.getType())
                .build(response, error);
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages, of which
     * the 2nd call fails first with 500. The client should retry and finish
     * all 10 pages eventually.
     *
     * @return the Page&lt;Product&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public Page<Product> getMultiplePagesRetrySecond() throws ServiceException {
        try {
            ServiceResponse<Page<Product>> response = getMultiplePagesRetrySecondDelegate(service.getMultiplePagesRetrySecond(this.client.getAcceptLanguage()), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Page<Product>> response = getMultiplePagesRetrySecondDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages, of which
     * the 2nd call fails first with 500. The client should retry and finish
     * all 10 pages eventually.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getMultiplePagesRetrySecondAsync(final ServiceCallback<Page<Product>> serviceCallback) {
        service.getMultiplePagesRetrySecondAsync(this.client.getAcceptLanguage(), new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getMultiplePagesRetrySecondDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Page<Product>> getMultiplePagesRetrySecondDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Page<Product>>()
                .register(200, new TypeToken<Page<Product>>(){}.getType())
                .registerError(new TypeToken<CloudError>(){}.getType())
                .build(response, error);
    }

    /**
     * A paging operation that receives a 400 on the first call
     *
     * @return the Page&lt;Product&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public Page<Product> getSinglePagesFailure() throws ServiceException {
        try {
            ServiceResponse<Page<Product>> response = getSinglePagesFailureDelegate(service.getSinglePagesFailure(this.client.getAcceptLanguage()), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Page<Product>> response = getSinglePagesFailureDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * A paging operation that receives a 400 on the first call
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getSinglePagesFailureAsync(final ServiceCallback<Page<Product>> serviceCallback) {
        service.getSinglePagesFailureAsync(this.client.getAcceptLanguage(), new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getSinglePagesFailureDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Page<Product>> getSinglePagesFailureDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Page<Product>>()
                .register(200, new TypeToken<Page<Product>>(){}.getType())
                .registerError(new TypeToken<CloudError>(){}.getType())
                .build(response, error);
    }

    /**
     * A paging operation that receives a 400 on the second call
     *
     * @return the Page&lt;Product&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public Page<Product> getMultiplePagesFailure() throws ServiceException {
        try {
            ServiceResponse<Page<Product>> response = getMultiplePagesFailureDelegate(service.getMultiplePagesFailure(this.client.getAcceptLanguage()), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Page<Product>> response = getMultiplePagesFailureDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * A paging operation that receives a 400 on the second call
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getMultiplePagesFailureAsync(final ServiceCallback<Page<Product>> serviceCallback) {
        service.getMultiplePagesFailureAsync(this.client.getAcceptLanguage(), new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getMultiplePagesFailureDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Page<Product>> getMultiplePagesFailureDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Page<Product>>()
                .register(200, new TypeToken<Page<Product>>(){}.getType())
                .registerError(new TypeToken<CloudError>(){}.getType())
                .build(response, error);
    }

    /**
     * A paging operation that receives an invalid nextLink
     *
     * @return the Page&lt;Product&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public Page<Product> getMultiplePagesFailureUri() throws ServiceException {
        try {
            ServiceResponse<Page<Product>> response = getMultiplePagesFailureUriDelegate(service.getMultiplePagesFailureUri(this.client.getAcceptLanguage()), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Page<Product>> response = getMultiplePagesFailureUriDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * A paging operation that receives an invalid nextLink
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getMultiplePagesFailureUriAsync(final ServiceCallback<Page<Product>> serviceCallback) {
        service.getMultiplePagesFailureUriAsync(this.client.getAcceptLanguage(), new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getMultiplePagesFailureUriDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Page<Product>> getMultiplePagesFailureUriDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Page<Product>>()
                .register(200, new TypeToken<Page<Product>>(){}.getType())
                .registerError(new TypeToken<CloudError>(){}.getType())
                .build(response, error);
    }

    /**
     * A paging operation that finishes on the first call without a nextlink
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the Page&lt;Product&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public Page<Product> getSinglePagesNext(String nextPageLink) throws ServiceException {
        if (nextPageLink == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter nextPageLink is required and cannot be null."));
        }
        try {
            ServiceResponse<Page<Product>> response = getSinglePagesNextDelegate(service.getSinglePagesNext(nextPageLink, this.client.getAcceptLanguage()), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Page<Product>> response = getSinglePagesNextDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * A paging operation that finishes on the first call without a nextlink
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getSinglePagesNextAsync(String nextPageLink, final ServiceCallback<Page<Product>> serviceCallback) {
        if (nextPageLink == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.")));
        }
        service.getSinglePagesNextAsync(nextPageLink, this.client.getAcceptLanguage(), new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getSinglePagesNextDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Page<Product>> getSinglePagesNextDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Page<Product>>()
                .register(200, new TypeToken<Page<Product>>(){}.getType())
                .registerError(new TypeToken<CloudError>(){}.getType())
                .build(response, error);
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the Page&lt;Product&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public Page<Product> getMultiplePagesNext(String nextPageLink) throws ServiceException {
        if (nextPageLink == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter nextPageLink is required and cannot be null."));
        }
        try {
            ServiceResponse<Page<Product>> response = getMultiplePagesNextDelegate(service.getMultiplePagesNext(nextPageLink, this.client.getAcceptLanguage()), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Page<Product>> response = getMultiplePagesNextDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getMultiplePagesNextAsync(String nextPageLink, final ServiceCallback<Page<Product>> serviceCallback) {
        if (nextPageLink == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.")));
        }
        service.getMultiplePagesNextAsync(nextPageLink, this.client.getAcceptLanguage(), new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getMultiplePagesNextDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Page<Product>> getMultiplePagesNextDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Page<Product>>()
                .register(200, new TypeToken<Page<Product>>(){}.getType())
                .registerError(new TypeToken<CloudError>(){}.getType())
                .build(response, error);
    }

    /**
     * A paging operation that fails on the first call with 500 and then
     * retries and then get a response including a nextLink that has 10 pages
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the Page&lt;Product&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public Page<Product> getMultiplePagesRetryFirstNext(String nextPageLink) throws ServiceException {
        if (nextPageLink == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter nextPageLink is required and cannot be null."));
        }
        try {
            ServiceResponse<Page<Product>> response = getMultiplePagesRetryFirstNextDelegate(service.getMultiplePagesRetryFirstNext(nextPageLink, this.client.getAcceptLanguage()), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Page<Product>> response = getMultiplePagesRetryFirstNextDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * A paging operation that fails on the first call with 500 and then
     * retries and then get a response including a nextLink that has 10 pages
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getMultiplePagesRetryFirstNextAsync(String nextPageLink, final ServiceCallback<Page<Product>> serviceCallback) {
        if (nextPageLink == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.")));
        }
        service.getMultiplePagesRetryFirstNextAsync(nextPageLink, this.client.getAcceptLanguage(), new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getMultiplePagesRetryFirstNextDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Page<Product>> getMultiplePagesRetryFirstNextDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Page<Product>>()
                .register(200, new TypeToken<Page<Product>>(){}.getType())
                .registerError(new TypeToken<CloudError>(){}.getType())
                .build(response, error);
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages, of which
     * the 2nd call fails first with 500. The client should retry and finish
     * all 10 pages eventually.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the Page&lt;Product&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public Page<Product> getMultiplePagesRetrySecondNext(String nextPageLink) throws ServiceException {
        if (nextPageLink == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter nextPageLink is required and cannot be null."));
        }
        try {
            ServiceResponse<Page<Product>> response = getMultiplePagesRetrySecondNextDelegate(service.getMultiplePagesRetrySecondNext(nextPageLink, this.client.getAcceptLanguage()), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Page<Product>> response = getMultiplePagesRetrySecondNextDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages, of which
     * the 2nd call fails first with 500. The client should retry and finish
     * all 10 pages eventually.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getMultiplePagesRetrySecondNextAsync(String nextPageLink, final ServiceCallback<Page<Product>> serviceCallback) {
        if (nextPageLink == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.")));
        }
        service.getMultiplePagesRetrySecondNextAsync(nextPageLink, this.client.getAcceptLanguage(), new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getMultiplePagesRetrySecondNextDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Page<Product>> getMultiplePagesRetrySecondNextDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Page<Product>>()
                .register(200, new TypeToken<Page<Product>>(){}.getType())
                .registerError(new TypeToken<CloudError>(){}.getType())
                .build(response, error);
    }

    /**
     * A paging operation that receives a 400 on the first call
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the Page&lt;Product&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public Page<Product> getSinglePagesFailureNext(String nextPageLink) throws ServiceException {
        if (nextPageLink == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter nextPageLink is required and cannot be null."));
        }
        try {
            ServiceResponse<Page<Product>> response = getSinglePagesFailureNextDelegate(service.getSinglePagesFailureNext(nextPageLink, this.client.getAcceptLanguage()), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Page<Product>> response = getSinglePagesFailureNextDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * A paging operation that receives a 400 on the first call
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getSinglePagesFailureNextAsync(String nextPageLink, final ServiceCallback<Page<Product>> serviceCallback) {
        if (nextPageLink == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.")));
        }
        service.getSinglePagesFailureNextAsync(nextPageLink, this.client.getAcceptLanguage(), new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getSinglePagesFailureNextDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Page<Product>> getSinglePagesFailureNextDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Page<Product>>()
                .register(200, new TypeToken<Page<Product>>(){}.getType())
                .registerError(new TypeToken<CloudError>(){}.getType())
                .build(response, error);
    }

    /**
     * A paging operation that receives a 400 on the second call
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the Page&lt;Product&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public Page<Product> getMultiplePagesFailureNext(String nextPageLink) throws ServiceException {
        if (nextPageLink == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter nextPageLink is required and cannot be null."));
        }
        try {
            ServiceResponse<Page<Product>> response = getMultiplePagesFailureNextDelegate(service.getMultiplePagesFailureNext(nextPageLink, this.client.getAcceptLanguage()), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Page<Product>> response = getMultiplePagesFailureNextDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * A paging operation that receives a 400 on the second call
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getMultiplePagesFailureNextAsync(String nextPageLink, final ServiceCallback<Page<Product>> serviceCallback) {
        if (nextPageLink == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.")));
        }
        service.getMultiplePagesFailureNextAsync(nextPageLink, this.client.getAcceptLanguage(), new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getMultiplePagesFailureNextDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Page<Product>> getMultiplePagesFailureNextDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Page<Product>>()
                .register(200, new TypeToken<Page<Product>>(){}.getType())
                .registerError(new TypeToken<CloudError>(){}.getType())
                .build(response, error);
    }

    /**
     * A paging operation that receives an invalid nextLink
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the Page&lt;Product&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public Page<Product> getMultiplePagesFailureUriNext(String nextPageLink) throws ServiceException {
        if (nextPageLink == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter nextPageLink is required and cannot be null."));
        }
        try {
            ServiceResponse<Page<Product>> response = getMultiplePagesFailureUriNextDelegate(service.getMultiplePagesFailureUriNext(nextPageLink, this.client.getAcceptLanguage()), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Page<Product>> response = getMultiplePagesFailureUriNextDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * A paging operation that receives an invalid nextLink
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getMultiplePagesFailureUriNextAsync(String nextPageLink, final ServiceCallback<Page<Product>> serviceCallback) {
        if (nextPageLink == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.")));
        }
        service.getMultiplePagesFailureUriNextAsync(nextPageLink, this.client.getAcceptLanguage(), new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getMultiplePagesFailureUriNextDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Page<Product>> getMultiplePagesFailureUriNextDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Page<Product>>()
                .register(200, new TypeToken<Page<Product>>(){}.getType())
                .registerError(new TypeToken<CloudError>(){}.getType())
                .build(response, error);
    }

}
