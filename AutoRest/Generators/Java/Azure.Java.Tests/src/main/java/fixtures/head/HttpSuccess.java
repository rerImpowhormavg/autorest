/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.head;

import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceException;
import com.microsoft.rest.ServiceResponseCallback;
import retrofit.client.Response;
import retrofit.http.HEAD;
import retrofit.http.Header;

/**
 * An instance of this class provides access to all the operations defined
 * in HttpSuccess.
 */
public interface HttpSuccess {
    /**
     * The interface defining all the services for HttpSuccess to be
     * used by Retrofit to perform actually REST calls.
     */
    interface HttpSuccessService {
        @HEAD("/http/success/204")
        Response head204(@Header("accept-language") String acceptLanguage) throws ServiceException;

        @HEAD("/http/success/204")
        void head204Async(@Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

        @HEAD("/http/success/404")
        Response head404(@Header("accept-language") String acceptLanguage) throws ServiceException;

        @HEAD("/http/success/404")
        void head404Async(@Header("accept-language") String acceptLanguage, ServiceResponseCallback cb);

    }
    /**
     * Return 204 status code if successful
     *
     * @return the Boolean object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Boolean head204() throws ServiceException;

    /**
     * Return 204 status code if successful
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void head204Async(final ServiceCallback<Boolean> serviceCallback);

    /**
     * Return 404 status code if successful
     *
     * @return the Boolean object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Boolean head404() throws ServiceException;

    /**
     * Return 404 status code if successful
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void head404Async(final ServiceCallback<Boolean> serviceCallback);

}
