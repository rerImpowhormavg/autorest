/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.head;

import com.google.gson.reflect.TypeToken;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceException;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseBuilder;
import com.microsoft.rest.ServiceResponseCallback;
import retrofit.RestAdapter;
import retrofit.RetrofitError;
import retrofit.client.Response;
import fixtures.head.models.CloudError;

public class HttpSuccessImpl implements HttpSuccess {
    private HttpSuccessService service;
    AutoRestHeadTestService client;

    public HttpSuccessImpl(RestAdapter restAdapter, AutoRestHeadTestService client) {
        this.service = restAdapter.create(HttpSuccessService.class);
        this.client = client;
    }

    /**
     *
     * @return the Boolean object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public Boolean head204() throws ServiceException {
        try {
            ServiceResponse<Boolean> response = head204Delegate(service.head204(this.client.getAcceptLanguage()), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Boolean> response = head204Delegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void head204Async(final ServiceCallback<Boolean> serviceCallback) {
        service.head204Async(this.client.getAcceptLanguage(), new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(head204Delegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Boolean> head204Delegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Boolean>()
                .register(204, new TypeToken<Void>(){}.getType())
                .register(404, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<CloudError>(){}.getType())
                .build(response, error);
    }

    /**
     *
     * @return the Boolean object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public Boolean head404() throws ServiceException {
        try {
            ServiceResponse<Boolean> response = head404Delegate(service.head404(this.client.getAcceptLanguage()), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Boolean> response = head404Delegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void head404Async(final ServiceCallback<Boolean> serviceCallback) {
        service.head404Async(this.client.getAcceptLanguage(), new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(head404Delegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Boolean> head404Delegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Boolean>()
                .register(204, new TypeToken<Void>(){}.getType())
                .register(404, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<CloudError>(){}.getType())
                .build(response, error);
    }

}
