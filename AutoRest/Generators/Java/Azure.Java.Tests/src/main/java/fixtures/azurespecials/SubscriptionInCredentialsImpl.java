/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.azurespecials;

import com.google.gson.reflect.TypeToken;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceException;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseBuilder;
import com.microsoft.rest.ServiceResponseCallback;
import retrofit.RestAdapter;
import retrofit.RetrofitError;
import retrofit.client.Response;
import fixtures.azurespecials.models.Error;

public class SubscriptionInCredentialsImpl implements SubscriptionInCredentials {
    private SubscriptionInCredentialsService service;
    AutoRestAzureSpecialParametersTestClient client;

    public SubscriptionInCredentialsImpl(RestAdapter restAdapter, AutoRestAzureSpecialParametersTestClient client) {
        this.service = restAdapter.create(SubscriptionInCredentialsService.class);
        this.client = client;
    }

    /**
     * POST method with subscriptionId modeled in credentials.  Set the credential subscriptionId to '1234-5678-9012-3456' to succeed
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void postMethodGlobalValid() throws ServiceException {
        if (this.client.getSubscriptionId() == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        try {
            ServiceResponse<Void> response = postMethodGlobalValidDelegate(service.postMethodGlobalValid(this.client.getSubscriptionId(), this.client.getAcceptLanguage()), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = postMethodGlobalValidDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * POST method with subscriptionId modeled in credentials.  Set the credential subscriptionId to '1234-5678-9012-3456' to succeed
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void postMethodGlobalValidAsync(final ServiceCallback<Void> serviceCallback) {
        if (this.client.getSubscriptionId() == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter this.client.getSubscriptionId() is required and cannot be null.")));
        }
        service.postMethodGlobalValidAsync(this.client.getSubscriptionId(), this.client.getAcceptLanguage(), new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(postMethodGlobalValidDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> postMethodGlobalValidDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * POST method with subscriptionId modeled in credentials.  Set the credential subscriptionId to null, and client-side validation should prevent you from making this call
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void postMethodGlobalNull() throws ServiceException {
        if (this.client.getSubscriptionId() == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        try {
            ServiceResponse<Void> response = postMethodGlobalNullDelegate(service.postMethodGlobalNull(this.client.getSubscriptionId(), this.client.getAcceptLanguage()), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = postMethodGlobalNullDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * POST method with subscriptionId modeled in credentials.  Set the credential subscriptionId to null, and client-side validation should prevent you from making this call
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void postMethodGlobalNullAsync(final ServiceCallback<Void> serviceCallback) {
        if (this.client.getSubscriptionId() == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter this.client.getSubscriptionId() is required and cannot be null.")));
        }
        service.postMethodGlobalNullAsync(this.client.getSubscriptionId(), this.client.getAcceptLanguage(), new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(postMethodGlobalNullDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> postMethodGlobalNullDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * POST method with subscriptionId modeled in credentials.  Set the credential subscriptionId to '1234-5678-9012-3456' to succeed
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void postMethodGlobalNotProvidedValid() throws ServiceException {
        if (this.client.getSubscriptionId() == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (this.client.getApiVersion() == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter this.client.getApiVersion() is required and cannot be null."));
        }
        try {
            ServiceResponse<Void> response = postMethodGlobalNotProvidedValidDelegate(service.postMethodGlobalNotProvidedValid(this.client.getSubscriptionId(), this.client.getApiVersion(), this.client.getAcceptLanguage()), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = postMethodGlobalNotProvidedValidDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * POST method with subscriptionId modeled in credentials.  Set the credential subscriptionId to '1234-5678-9012-3456' to succeed
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void postMethodGlobalNotProvidedValidAsync(final ServiceCallback<Void> serviceCallback) {
        if (this.client.getSubscriptionId() == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter this.client.getSubscriptionId() is required and cannot be null.")));
        }
        if (this.client.getApiVersion() == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter this.client.getApiVersion() is required and cannot be null.")));
        }
        service.postMethodGlobalNotProvidedValidAsync(this.client.getSubscriptionId(), this.client.getApiVersion(), this.client.getAcceptLanguage(), new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(postMethodGlobalNotProvidedValidDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> postMethodGlobalNotProvidedValidDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * POST method with subscriptionId modeled in credentials.  Set the credential subscriptionId to '1234-5678-9012-3456' to succeed
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void postPathGlobalValid() throws ServiceException {
        if (this.client.getSubscriptionId() == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        try {
            ServiceResponse<Void> response = postPathGlobalValidDelegate(service.postPathGlobalValid(this.client.getSubscriptionId(), this.client.getAcceptLanguage()), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = postPathGlobalValidDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * POST method with subscriptionId modeled in credentials.  Set the credential subscriptionId to '1234-5678-9012-3456' to succeed
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void postPathGlobalValidAsync(final ServiceCallback<Void> serviceCallback) {
        if (this.client.getSubscriptionId() == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter this.client.getSubscriptionId() is required and cannot be null.")));
        }
        service.postPathGlobalValidAsync(this.client.getSubscriptionId(), this.client.getAcceptLanguage(), new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(postPathGlobalValidDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> postPathGlobalValidDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * POST method with subscriptionId modeled in credentials.  Set the credential subscriptionId to '1234-5678-9012-3456' to succeed
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void postSwaggerGlobalValid() throws ServiceException {
        if (this.client.getSubscriptionId() == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        try {
            ServiceResponse<Void> response = postSwaggerGlobalValidDelegate(service.postSwaggerGlobalValid(this.client.getSubscriptionId(), this.client.getAcceptLanguage()), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = postSwaggerGlobalValidDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * POST method with subscriptionId modeled in credentials.  Set the credential subscriptionId to '1234-5678-9012-3456' to succeed
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void postSwaggerGlobalValidAsync(final ServiceCallback<Void> serviceCallback) {
        if (this.client.getSubscriptionId() == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter this.client.getSubscriptionId() is required and cannot be null.")));
        }
        service.postSwaggerGlobalValidAsync(this.client.getSubscriptionId(), this.client.getAcceptLanguage(), new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(postSwaggerGlobalValidDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> postSwaggerGlobalValidDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

}
