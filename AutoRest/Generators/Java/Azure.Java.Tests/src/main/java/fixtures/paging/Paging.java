/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.12.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.paging;

import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceException;
import retrofit.Call;
import com.squareup.okhttp.ResponseBody;
import fixtures.paging.models.ProductResult;
import retrofit.http.GET;
import retrofit.http.Header;
import retrofit.http.Path;

/**
 * An instance of this class provides access to all the operations defined
 * in Paging.
 */
public interface Paging {
    /**
     * The interface defining all the services for Paging to be
     * used by Retrofit to perform actually REST calls.
     */
    interface PagingService {
        @GET("/paging/single")
        Call<ResponseBody> getSinglePages(@Header("accept-language") String acceptLanguage);

        @GET("/paging/multiple")
        Call<ResponseBody> getMultiplePages(@Header("accept-language") String acceptLanguage);

        @GET("/paging/multiple/retryfirst")
        Call<ResponseBody> getMultiplePagesRetryFirst(@Header("accept-language") String acceptLanguage);

        @GET("/paging/multiple/retrysecond")
        Call<ResponseBody> getMultiplePagesRetrySecond(@Header("accept-language") String acceptLanguage);

        @GET("/paging/single/failure")
        Call<ResponseBody> getSinglePagesFailure(@Header("accept-language") String acceptLanguage);

        @GET("/paging/multiple/failure")
        Call<ResponseBody> getMultiplePagesFailure(@Header("accept-language") String acceptLanguage);

        @GET("/paging/multiple/failureuri")
        Call<ResponseBody> getMultiplePagesFailureUri(@Header("accept-language") String acceptLanguage);

        @GET("{nextLink}")
        Call<ResponseBody> getSinglePagesNext(@Path("nextLink") String nextPageLink, @Header("accept-language") String acceptLanguage);

        @GET("{nextLink}")
        Call<ResponseBody> getMultiplePagesNext(@Path("nextLink") String nextPageLink, @Header("accept-language") String acceptLanguage);

        @GET("{nextLink}")
        Call<ResponseBody> getMultiplePagesRetryFirstNext(@Path("nextLink") String nextPageLink, @Header("accept-language") String acceptLanguage);

        @GET("{nextLink}")
        Call<ResponseBody> getMultiplePagesRetrySecondNext(@Path("nextLink") String nextPageLink, @Header("accept-language") String acceptLanguage);

        @GET("{nextLink}")
        Call<ResponseBody> getSinglePagesFailureNext(@Path("nextLink") String nextPageLink, @Header("accept-language") String acceptLanguage);

        @GET("{nextLink}")
        Call<ResponseBody> getMultiplePagesFailureNext(@Path("nextLink") String nextPageLink, @Header("accept-language") String acceptLanguage);

        @GET("{nextLink}")
        Call<ResponseBody> getMultiplePagesFailureUriNext(@Path("nextLink") String nextPageLink, @Header("accept-language") String acceptLanguage);

    }
    /**
     * A paging operation that finishes on the first call without a nextlink
     *
     * @return the ProductResult object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ProductResult getSinglePages() throws ServiceException;

    /**
     * A paging operation that finishes on the first call without a nextlink
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getSinglePagesAsync(final ServiceCallback<ProductResult> serviceCallback);

    /**
     * A paging operation that includes a nextLink that has 10 pages
     *
     * @return the ProductResult object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ProductResult getMultiplePages() throws ServiceException;

    /**
     * A paging operation that includes a nextLink that has 10 pages
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getMultiplePagesAsync(final ServiceCallback<ProductResult> serviceCallback);

    /**
     * A paging operation that fails on the first call with 500 and then retries and then get a response including a nextLink that has 10 pages
     *
     * @return the ProductResult object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ProductResult getMultiplePagesRetryFirst() throws ServiceException;

    /**
     * A paging operation that fails on the first call with 500 and then retries and then get a response including a nextLink that has 10 pages
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getMultiplePagesRetryFirstAsync(final ServiceCallback<ProductResult> serviceCallback);

    /**
     * A paging operation that includes a nextLink that has 10 pages, of which the 2nd call fails first with 500. The client should retry and finish all 10 pages eventually.
     *
     * @return the ProductResult object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ProductResult getMultiplePagesRetrySecond() throws ServiceException;

    /**
     * A paging operation that includes a nextLink that has 10 pages, of which the 2nd call fails first with 500. The client should retry and finish all 10 pages eventually.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getMultiplePagesRetrySecondAsync(final ServiceCallback<ProductResult> serviceCallback);

    /**
     * A paging operation that receives a 400 on the first call
     *
     * @return the ProductResult object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ProductResult getSinglePagesFailure() throws ServiceException;

    /**
     * A paging operation that receives a 400 on the first call
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getSinglePagesFailureAsync(final ServiceCallback<ProductResult> serviceCallback);

    /**
     * A paging operation that receives a 400 on the second call
     *
     * @return the ProductResult object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ProductResult getMultiplePagesFailure() throws ServiceException;

    /**
     * A paging operation that receives a 400 on the second call
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getMultiplePagesFailureAsync(final ServiceCallback<ProductResult> serviceCallback);

    /**
     * A paging operation that receives an invalid nextLink
     *
     * @return the ProductResult object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ProductResult getMultiplePagesFailureUri() throws ServiceException;

    /**
     * A paging operation that receives an invalid nextLink
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getMultiplePagesFailureUriAsync(final ServiceCallback<ProductResult> serviceCallback);

    /**
     * A paging operation that finishes on the first call without a nextlink
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the ProductResult object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ProductResult getSinglePagesNext(String nextPageLink) throws ServiceException;

    /**
     * A paging operation that finishes on the first call without a nextlink
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getSinglePagesNextAsync(String nextPageLink, final ServiceCallback<ProductResult> serviceCallback);

    /**
     * A paging operation that includes a nextLink that has 10 pages
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the ProductResult object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ProductResult getMultiplePagesNext(String nextPageLink) throws ServiceException;

    /**
     * A paging operation that includes a nextLink that has 10 pages
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getMultiplePagesNextAsync(String nextPageLink, final ServiceCallback<ProductResult> serviceCallback);

    /**
     * A paging operation that fails on the first call with 500 and then retries and then get a response including a nextLink that has 10 pages
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the ProductResult object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ProductResult getMultiplePagesRetryFirstNext(String nextPageLink) throws ServiceException;

    /**
     * A paging operation that fails on the first call with 500 and then retries and then get a response including a nextLink that has 10 pages
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getMultiplePagesRetryFirstNextAsync(String nextPageLink, final ServiceCallback<ProductResult> serviceCallback);

    /**
     * A paging operation that includes a nextLink that has 10 pages, of which the 2nd call fails first with 500. The client should retry and finish all 10 pages eventually.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the ProductResult object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ProductResult getMultiplePagesRetrySecondNext(String nextPageLink) throws ServiceException;

    /**
     * A paging operation that includes a nextLink that has 10 pages, of which the 2nd call fails first with 500. The client should retry and finish all 10 pages eventually.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getMultiplePagesRetrySecondNextAsync(String nextPageLink, final ServiceCallback<ProductResult> serviceCallback);

    /**
     * A paging operation that receives a 400 on the first call
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the ProductResult object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ProductResult getSinglePagesFailureNext(String nextPageLink) throws ServiceException;

    /**
     * A paging operation that receives a 400 on the first call
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getSinglePagesFailureNextAsync(String nextPageLink, final ServiceCallback<ProductResult> serviceCallback);

    /**
     * A paging operation that receives a 400 on the second call
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the ProductResult object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ProductResult getMultiplePagesFailureNext(String nextPageLink) throws ServiceException;

    /**
     * A paging operation that receives a 400 on the second call
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getMultiplePagesFailureNextAsync(String nextPageLink, final ServiceCallback<ProductResult> serviceCallback);

    /**
     * A paging operation that receives an invalid nextLink
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the ProductResult object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ProductResult getMultiplePagesFailureUriNext(String nextPageLink) throws ServiceException;

    /**
     * A paging operation that receives an invalid nextLink
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getMultiplePagesFailureUriNextAsync(String nextPageLink, final ServiceCallback<ProductResult> serviceCallback);

}
