@using System
@using Microsoft.Rest.Generator.Java
@using Microsoft.Rest.Generator.Java.Templates
@using Microsoft.Rest.Generator.Java.TemplateModels
@using Microsoft.Rest.Generator.Java.Azure
@using Microsoft.Rest.Generator.Java.Azure.Templates
@using Microsoft.Rest.Generator.Utilities
@using Microsoft.Rest.Generator.ClientModel
@using System.Linq
@inherits Microsoft.Rest.Generator.Template<Microsoft.Rest.Generator.Java.Azure.AzureMethodTemplateModel>
@if (!Model.IsLongRunningOperation)
{
@:@(Include(new MethodTemplate(), (MethodTemplateModel)Model))
}
else
{
if (Model.LocalParameters.Any(p => !p.IsConstant && !p.IsRequired))
{
<text>
/**
@if (!string.IsNullOrEmpty(Model.Summary))
{
@: * @Model.Summary.EscapeXmlComment().Period()
}
@if (!string.IsNullOrEmpty(Model.Description))
{
@: * @Model.Description.EscapeXmlComment().Period()
}
 *
@foreach (var param in Model.LocalParameters.Where(p => !p.IsConstant && p.IsRequired))
{
@: * @@param @param.Name @((param.Documentation ?? "the " + param.Type.ToString() + " value").EscapeXmlComment())
}
@foreach (var exception in Model.ExceptionStatements)
{
@: * @@throws @exception
}
@if (Model.ReturnType.Body != null)
{
@: * @@return the @Model.ReturnTypeModel.BodyClientType.Name.EscapeXmlComment() object wrapped in @Model.ReturnTypeModel.ClientResponseType if successful.
}
else
{
@: * @@return the @Model.ReturnTypeModel.ClientResponseType object if successful.
}
 */
public @Model.ReturnTypeModel.ClientResponseTypeString @(Model.Name)(@Model.MethodRequiredParameterDeclaration) throws @Model.ExceptionString {
@foreach (var param in Model.RequiredNullableParameters)
{
@:    if (@param.Name == null) {
@:        throw new IllegalArgumentException("Parameter @param.Name is required and cannot be null.");
@:    }
}
@foreach (var param in Model.ParametersToValidate.Where(p => p.IsRequired))
{
@:    Validator.validate(@(param.Name));
}

@foreach (ParameterModel parameter in Model.LocalParameters)
{
    if (!parameter.IsRequired)
    {
@:    final @(parameter.Type.Name) @(parameter.Name) = @(parameter.ClientType.DefaultValue);
    }
    if (parameter.IsConstant)
    {
@:    final @(parameter.Type.Name) @(parameter.Name) = @(parameter.DefaultValue);
    }
}
    @Model.BuildInputMappings()
    @Model.ParameterConversion
    Response<ResponseBody> result = service.@(Model.Name)(@Model.MethodParameterApiInvocation).execute();
    return client.getAzureClient().@(Model.PollingMethod)(result, @Model.PollingResourceTypeArgs);
}
@EmptyLine
/**
@if (!string.IsNullOrEmpty(Model.Summary))
{
@: * @Model.Summary.EscapeXmlComment().Period()
}
@if (!string.IsNullOrEmpty(Model.Description))
{
@: * @Model.Description.EscapeXmlComment().Period()
}
 *
@foreach (var param in Model.LocalParameters.Where(p => !p.IsConstant && p.IsRequired))
{
@: * @@param @param.Name @((param.Documentation ?? "the " + param.Type.ToString() + " value").EscapeXmlComment())
}
@Model.CallbackDocumentation
 * @@throws IllegalArgumentException thrown if callback is null
 * @@return the {@@link ServiceCall} object
 */
public ServiceCall @(Model.Name)Async(@Model.MethodRequiredParameterDeclarationWithCallback) throws IllegalArgumentException {
    if (serviceCallback == null) {
        throw new IllegalArgumentException("ServiceCallback is required for async calls.");
    }
@foreach (var param in Model.RequiredNullableParameters)
{
@:    if (@param.Name == null) {
@:        serviceCallback.failure(new IllegalArgumentException("Parameter @param.Name is required and cannot be null."));
@:    }
}
@foreach (var param in Model.ParametersToValidate.Where(p => p.IsRequired))
{
@:    Validator.validate(@(param.Name), serviceCallback);
}

@foreach (ParameterModel parameter in Model.LocalParameters)
{
    if (!parameter.IsRequired)
    {
@:    final @(parameter.Type.Name) @(parameter.Name) = @(parameter.ClientType.DefaultValue);
    }
    if (parameter.IsConstant)
    {
@:    final @(parameter.Type.Name) @(parameter.Name) = @(parameter.DefaultValue);
    }
}
    @Model.BuildInputMappings()
    @Model.ParameterConversion
    Call<@Model.CallType> call = service.@(Model.Name)(@Model.MethodParameterApiInvocation);
    final ServiceCall serviceCall = new ServiceCall(call);
    call.enqueue(new Callback<@Model.CallType>() {
        @@Override
        public void onFailure(Call<@Model.CallType> call, Throwable t) {
            serviceCallback.failure(t);
        }

        @@Override
        public void onResponse(Call<@Model.CallType> call, Response<@Model.CallType> response) {
            client.getAzureClient().@(Model.PollingMethod)Async(response, @Model.PollingResourceTypeArgs, serviceCall, serviceCallback);
        }
    });
    return serviceCall;
}
</text>
}
<text>
/**
@if (!string.IsNullOrEmpty(Model.Summary))
{
@: * @Model.Summary.EscapeXmlComment().Period()
}
@if (!string.IsNullOrEmpty(Model.Description))
{
@: * @Model.Description.EscapeXmlComment().Period()
}
 *
@foreach (var param in Model.LocalParameters.Where(p => !p.IsConstant))
{
@: * @@param @param.Name @((param.Documentation ?? "the " + param.Type.ToString() + " value").EscapeXmlComment())
}
@foreach (var exception in Model.ExceptionStatements)
{
@: * @@throws @exception
}
@if (Model.ReturnType.Body != null)
{
@: * @@return the @Model.ReturnTypeModel.BodyClientType.Name.EscapeXmlComment() object wrapped in @Model.ReturnTypeModel.ClientResponseType if successful.
}
else
{
@: * @@return the @Model.ReturnTypeModel.ClientResponseType object if successful.
}
 */
public @Model.ReturnTypeModel.ClientResponseTypeString @(Model.Name)(@Model.MethodParameterDeclaration) throws @Model.ExceptionString {
@foreach (var param in Model.RequiredNullableParameters)
{
@:    if (@param.Name == null) {
@:        throw new IllegalArgumentException("Parameter @param.Name is required and cannot be null.");
@:    }
}
@foreach (var param in Model.ParametersToValidate)
{
@:    Validator.validate(@(param.Name));
}

@foreach (ParameterModel parameter in Model.LocalParameters)
{
    if (parameter.IsConstant)
    {
@:    final @(parameter.Type.Name) @(parameter.Name) = @(parameter.DefaultValue);
    }
}
    @Model.BuildInputMappings()
    @Model.ParameterConversion
    Response<ResponseBody> result = service.@(Model.Name)(@Model.MethodParameterApiInvocation).execute();
    return client.getAzureClient().@(Model.PollingMethod)(result, @Model.PollingResourceTypeArgs);
}
@EmptyLine
/**
@if (!string.IsNullOrEmpty(Model.Summary))
{
@: * @Model.Summary.EscapeXmlComment().Period()
}
@if (!string.IsNullOrEmpty(Model.Description))
{
@: * @Model.Description.EscapeXmlComment().Period()
}
 *
@foreach (var param in Model.LocalParameters.Where(p => !p.IsConstant))
{
@: * @@param @param.Name @((param.Documentation ?? "the " + param.Type.ToString() + " value").EscapeXmlComment())
}
@Model.CallbackDocumentation
 * @@throws IllegalArgumentException thrown if callback is null
 * @@return the {@@link ServiceCall} object
 */
public ServiceCall @(Model.Name)Async(@Model.MethodParameterDeclarationWithCallback) throws IllegalArgumentException {
    if (serviceCallback == null) {
        throw new IllegalArgumentException("ServiceCallback is required for async calls.");
    }
@foreach (var param in Model.RequiredNullableParameters)
{
@:    if (@param.Name == null) {
@:        serviceCallback.failure(new IllegalArgumentException("Parameter @param.Name is required and cannot be null."));
@:    }
}
@foreach (var param in Model.ParametersToValidate)
{
@:    Validator.validate(@(param.Name), serviceCallback);
}

@foreach (ParameterModel parameter in Model.LocalParameters)
{
    if (parameter.IsConstant)
    {
@:    final @(parameter.Type.Name) @(parameter.Name) = @(parameter.DefaultValue);
    }
}
    @Model.BuildInputMappings()
    @Model.ParameterConversion
    Call<@Model.CallType> call = service.@(Model.Name)(@Model.MethodParameterApiInvocation);
    final ServiceCall serviceCall = new ServiceCall(call);
    call.enqueue(new Callback<@Model.CallType>() {
        @@Override
        public void onFailure(Call<@Model.CallType> call, Throwable t) {
            serviceCallback.failure(t);
        }

        @@Override
        public void onResponse(Call<@Model.CallType> call, Response<@Model.CallType> response) {
            client.getAzureClient().@(Model.PollingMethod)Async(response, @Model.PollingResourceTypeArgs, serviceCall, serviceCallback);
        }
    });
    return serviceCall;
}
</text>
}