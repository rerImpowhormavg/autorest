@using System
@using Microsoft.Rest.Generator.Java
@using Microsoft.Rest.Generator.Java.Templates
@using Microsoft.Rest.Generator.Java.TemplateModels
@using Microsoft.Rest.Generator.Java.Azure
@using Microsoft.Rest.Generator.Java.Azure.Templates
@using Microsoft.Rest.Generator.Utilities
@using Microsoft.Rest.Generator.ClientModel
@using System.Linq
@inherits Microsoft.Rest.Generator.Template<Microsoft.Rest.Generator.Java.Azure.AzureMethodTemplateModel>
/**
@if (!string.IsNullOrEmpty(Model.Summary))
{
@: * @Model.Summary.EscapeXmlComment()
}
@if (!string.IsNullOrEmpty(Model.Description))
{
@: * @Model.Description.EscapeXmlComment()
}
 *
@foreach (var param in Model.LocalParameters)
{
@: * @@param @param.Name @((param.Documentation ?? "the " + param.Type.ToString() + " value").EscapeXmlComment())
}
@if (Model.ReturnType != null)
{
@: * @@return the @Model.ReturnTypeString.EscapeXmlComment() object if successful.
}
 * @@throws ServiceException the exception wrapped in ServiceException if failed.
 */
@if (!Model.IsLongRunningOperation)
{
@:@(Include(new MethodTemplate(), (MethodTemplateModel)Model))
}
else if (Model.HttpMethod == HttpMethod.Post || Model.HttpMethod == HttpMethod.Delete)
{
@if (!String.IsNullOrEmpty(Model.Description) || !String.IsNullOrEmpty(Model.Summary))
{
<text>
public async Task<@(Model.OperationResponseReturnTypeString)> @(Model.Name)WithHttpMessagesAsync(@(Model.GetAsyncMethodParameterDeclaration(true)))
{
    // Send request
    @(Model.OperationResponseReturnTypeString) response = await Begin@(Model.Name)WithHttpMessagesAsync(
        @(Model.GetAsyncMethodInvocationArgs("customHeaders")));

    return await @(Model.ClientReference).GetPostOrDeleteOperationResultAsync(response, customHeaders, cancellationToken);
}
</text>
}
else if (Model.HttpMethod == HttpMethod.Put || Model.HttpMethod == HttpMethod.Patch)
{
@if (!String.IsNullOrEmpty(Model.Description) || !String.IsNullOrEmpty(Model.Summary))
{
@:/// <summary>
@:@WrapComment("/// ", String.IsNullOrEmpty(Model.Summary) ? Model.Description.EscapeXmlComment() : Model.Summary.EscapeXmlComment())
@:/// </summary>
}
@if (!String.IsNullOrEmpty(Model.Description) && !String.IsNullOrEmpty(Model.Summary))
{
@:@WrapComment("/// ", Model.Description.EscapeXmlComment())
}
@foreach (var parameter in Model.LocalParameters)
{
@:/// <param name='@parameter.Name'>
@WrapComment("/// ", parameter.Documentation.EscapeXmlComment())@:
@:/// </param>
}
@:/// <param name='customHeaders'>
@:/// The headers that will be added to request.
@:/// </param>
@:/// <param name='cancellationToken'>
@:/// The cancellation token.
@:/// </param>
<text>
public async Task<@(Model.OperationResponseReturnTypeString)> @(Model.Name)WithHttpMessagesAsync(@(Model.GetAsyncMethodParameterDeclaration(true)))
{
    // Send Request
    @(Model.OperationResponseReturnTypeString) response = await Begin@(Model.Name)WithHttpMessagesAsync(
        @(Model.GetAsyncMethodInvocationArgs("customHeaders")));

    return await @(Model.ClientReference).GetPutOrPatchOperationResultAsync<@(Model.ReturnType.Name)>(response,
        customHeaders,
        cancellationToken);
}
</text>
}
