// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.


package fixtures.requiredoptional;

import com.google.gson.reflect.TypeToken;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceException;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseBuilder;
import com.microsoft.rest.ServiceResponseCallback;
import retrofit.client.Response;
import retrofit.RestAdapter;
import retrofit.RetrofitError;
import retrofit.http.GET;
import retrofit.http.Path;
import retrofit.http.PUT;
import retrofit.http.Query;
import retrofit.http.Header;
import retrofit.http.Body;

public class Implicit {
    private ImplicitService service;

    public Implicit(RestAdapter restAdapter) {
        service = restAdapter.create(ImplicitService.class);
    }

    public interface ImplicitService {
        @GET("/reqopt/implicit/required/path/{pathParameter}")
        Response getRequiredPath(@Path("pathParameter") String pathParameter) throws ServiceException;

        @GET("/reqopt/implicit/required/path/{pathParameter}")
        void getRequiredPathAsync(@Path("pathParameter") String pathParameter, ServiceResponseCallback cb);

        @PUT("/reqopt/implicit/optional/query")
        Response putOptionalQuery(@Query("queryParameter") String queryParameter) throws ServiceException;

        @PUT("/reqopt/implicit/optional/query")
        void putOptionalQueryAsync(@Query("queryParameter") String queryParameter, ServiceResponseCallback cb);

        @PUT("/reqopt/implicit/optional/header")
        Response putOptionalHeader(@Header("queryParameter") String queryParameter) throws ServiceException;

        @PUT("/reqopt/implicit/optional/header")
        void putOptionalHeaderAsync(@Header("queryParameter") String queryParameter, ServiceResponseCallback cb);

        @PUT("/reqopt/implicit/optional/body")
        Response putOptionalBody(@Body String bodyParameter) throws ServiceException;

        @PUT("/reqopt/implicit/optional/body")
        void putOptionalBodyAsync(@Body String bodyParameter, ServiceResponseCallback cb);

        @GET("/reqopt/global/required/path/{required-global-path}")
        Response getRequiredGlobalPath() throws ServiceException;

        @GET("/reqopt/global/required/path/{required-global-path}")
        void getRequiredGlobalPathAsync(ServiceResponseCallback cb);

        @GET("/reqopt/global/required/query")
        Response getRequiredGlobalQuery() throws ServiceException;

        @GET("/reqopt/global/required/query")
        void getRequiredGlobalQueryAsync(ServiceResponseCallback cb);

        @GET("/reqopt/global/optional/query")
        Response getOptionalGlobalQuery() throws ServiceException;

        @GET("/reqopt/global/optional/query")
        void getOptionalGlobalQueryAsync(ServiceResponseCallback cb);

    }
    public Error getRequiredPath(String pathParameter) throws ServiceException {
        try {
            return getRequiredPathDelegate(service.getRequiredPath(pathParameter), null).getBody();
        } catch (RetrofitError error) {
            return getRequiredPathDelegate(error.getResponse(), error).getBody();
        }
    }

    public void getRequiredPathAsync(String pathParameter, final ServiceCallback<Error> serviceCallback) {
        service.getRequiredPathAsync(pathParameter, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getRequiredPathDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Error> getRequiredPathDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Error>()
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public void putOptionalQuery(String queryParameter) throws ServiceException {
        try {
            putOptionalQueryDelegate(service.putOptionalQuery(queryParameter), null).getBody();
        } catch (RetrofitError error) {
            putOptionalQueryDelegate(error.getResponse(), error).getBody();
        }
    }

    public void putOptionalQueryAsync(String queryParameter, final ServiceCallback<Void> serviceCallback) {
        service.putOptionalQueryAsync(queryParameter, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(putOptionalQueryDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> putOptionalQueryDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public void putOptionalHeader(String queryParameter) throws ServiceException {
        try {
            putOptionalHeaderDelegate(service.putOptionalHeader(queryParameter), null).getBody();
        } catch (RetrofitError error) {
            putOptionalHeaderDelegate(error.getResponse(), error).getBody();
        }
    }

    public void putOptionalHeaderAsync(String queryParameter, final ServiceCallback<Void> serviceCallback) {
        service.putOptionalHeaderAsync(queryParameter, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(putOptionalHeaderDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> putOptionalHeaderDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public void putOptionalBody(String bodyParameter) throws ServiceException {
        try {
            putOptionalBodyDelegate(service.putOptionalBody(bodyParameter), null).getBody();
        } catch (RetrofitError error) {
            putOptionalBodyDelegate(error.getResponse(), error).getBody();
        }
    }

    public void putOptionalBodyAsync(String bodyParameter, final ServiceCallback<Void> serviceCallback) {
        service.putOptionalBodyAsync(bodyParameter, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(putOptionalBodyDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> putOptionalBodyDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public Error getRequiredGlobalPath() throws ServiceException {
        try {
            return getRequiredGlobalPathDelegate(service.getRequiredGlobalPath(), null).getBody();
        } catch (RetrofitError error) {
            return getRequiredGlobalPathDelegate(error.getResponse(), error).getBody();
        }
    }

    public void getRequiredGlobalPathAsync(final ServiceCallback<Error> serviceCallback) {
        service.getRequiredGlobalPathAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getRequiredGlobalPathDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Error> getRequiredGlobalPathDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Error>()
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public Error getRequiredGlobalQuery() throws ServiceException {
        try {
            return getRequiredGlobalQueryDelegate(service.getRequiredGlobalQuery(), null).getBody();
        } catch (RetrofitError error) {
            return getRequiredGlobalQueryDelegate(error.getResponse(), error).getBody();
        }
    }

    public void getRequiredGlobalQueryAsync(final ServiceCallback<Error> serviceCallback) {
        service.getRequiredGlobalQueryAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getRequiredGlobalQueryDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Error> getRequiredGlobalQueryDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Error>()
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public Error getOptionalGlobalQuery() throws ServiceException {
        try {
            return getOptionalGlobalQueryDelegate(service.getOptionalGlobalQuery(), null).getBody();
        } catch (RetrofitError error) {
            return getOptionalGlobalQueryDelegate(error.getResponse(), error).getBody();
        }
    }

    public void getOptionalGlobalQueryAsync(final ServiceCallback<Error> serviceCallback) {
        service.getOptionalGlobalQueryAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getOptionalGlobalQueryDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Error> getOptionalGlobalQueryDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Error>()
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

}
