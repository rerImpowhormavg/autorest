/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.bodycomplex;

import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceResponse;
import fixtures.bodycomplex.models.ErrorException;
import fixtures.bodycomplex.models.ReadonlyObj;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.Call;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Headers;
import retrofit2.http.PUT;

/**
 * An instance of this class provides access to all the operations defined
 * in ReadonlypropertyOperations.
 */
public interface ReadonlypropertyOperations {
    /**
     * The interface defining all the services for ReadonlypropertyOperations to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ReadonlypropertyService {
        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("complex/readonlyproperty/valid")
        Call<ResponseBody> getValid();

        @Headers("Content-Type: application/json; charset=utf-8")
        @PUT("complex/readonlyproperty/valid")
        Call<ResponseBody> putValid(@Body ReadonlyObj complexBody);

    }
    /**
     * Get complex types that have readonly properties.
     *
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the ReadonlyObj object wrapped in {@link ServiceResponse} if successful.
     */
    ServiceResponse<ReadonlyObj> getValid() throws ErrorException, IOException;

    /**
     * Get complex types that have readonly properties.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getValidAsync(final ServiceCallback<ReadonlyObj> serviceCallback);

    /**
     * Put complex types that have readonly properties.
     *
     * @param complexBody 
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the {@link ServiceResponse} object if successful.
     */
    ServiceResponse<Void> putValid(ReadonlyObj complexBody) throws ErrorException, IOException, IllegalArgumentException;

    /**
     * Put complex types that have readonly properties.
     *
     * @param complexBody 
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> putValidAsync(ReadonlyObj complexBody, final ServiceCallback<Void> serviceCallback);

}
