/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.http;

import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseBuilder;
import com.microsoft.rest.ServiceResponseCallback;
import com.microsoft.rest.ServiceResponseEmptyCallback;
import fixtures.http.models.Error;
import fixtures.http.models.ErrorException;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.Call;
import retrofit2.Response;
import retrofit2.Retrofit;

/**
 * An instance of this class provides access to all the operations defined
 * in HttpClientFailureOperations.
 */
public final class HttpClientFailureOperationsImpl implements HttpClientFailureOperations {
    /** The Retrofit service to perform REST calls. */
    private HttpClientFailureService service;
    /** The service client containing this operation class. */
    private AutoRestHttpInfrastructureTestService client;

    /**
     * Initializes an instance of HttpClientFailureOperations.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public HttpClientFailureOperationsImpl(Retrofit retrofit, AutoRestHttpInfrastructureTestService client) {
        this.service = retrofit.create(HttpClientFailureService.class);
        this.client = client;
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the Error object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<Error> head400() throws ErrorException, IOException {
        Call<Void> call = service.head400();
        return head400Delegate(call.execute());
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public Call<Void> head400Async(final ServiceCallback<Error> serviceCallback) {
        Call<Void> call = service.head400();
        call.enqueue(new ServiceResponseEmptyCallback<Error>(serviceCallback) {
            @Override
            public void onResponse(Call<Void> call, Response<Void> response) {
                try {
                    serviceCallback.success(head400Delegate(response));
                } catch (ErrorException | IOException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<Error> head400Delegate(Response<Void> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<Error, ErrorException>()
                .registerError(ErrorException.class)
                .buildEmpty(response);
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the Error object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<Error> get400() throws ErrorException, IOException {
        Call<ResponseBody> call = service.get400();
        return get400Delegate(call.execute());
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public Call<ResponseBody> get400Async(final ServiceCallback<Error> serviceCallback) {
        Call<ResponseBody> call = service.get400();
        call.enqueue(new ServiceResponseCallback<Error>(serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    serviceCallback.success(get400Delegate(response));
                } catch (ErrorException | IOException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<Error> get400Delegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<Error, ErrorException>()
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the Error object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<Error> put400(Boolean booleanValue) throws ErrorException, IOException {
        Call<ResponseBody> call = service.put400(booleanValue);
        return put400Delegate(call.execute());
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public Call<ResponseBody> put400Async(Boolean booleanValue, final ServiceCallback<Error> serviceCallback) {
        Call<ResponseBody> call = service.put400(booleanValue);
        call.enqueue(new ServiceResponseCallback<Error>(serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    serviceCallback.success(put400Delegate(response));
                } catch (ErrorException | IOException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<Error> put400Delegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<Error, ErrorException>()
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the Error object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<Error> patch400(Boolean booleanValue) throws ErrorException, IOException {
        Call<ResponseBody> call = service.patch400(booleanValue);
        return patch400Delegate(call.execute());
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public Call<ResponseBody> patch400Async(Boolean booleanValue, final ServiceCallback<Error> serviceCallback) {
        Call<ResponseBody> call = service.patch400(booleanValue);
        call.enqueue(new ServiceResponseCallback<Error>(serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    serviceCallback.success(patch400Delegate(response));
                } catch (ErrorException | IOException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<Error> patch400Delegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<Error, ErrorException>()
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the Error object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<Error> post400(Boolean booleanValue) throws ErrorException, IOException {
        Call<ResponseBody> call = service.post400(booleanValue);
        return post400Delegate(call.execute());
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public Call<ResponseBody> post400Async(Boolean booleanValue, final ServiceCallback<Error> serviceCallback) {
        Call<ResponseBody> call = service.post400(booleanValue);
        call.enqueue(new ServiceResponseCallback<Error>(serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    serviceCallback.success(post400Delegate(response));
                } catch (ErrorException | IOException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<Error> post400Delegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<Error, ErrorException>()
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the Error object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<Error> delete400(Boolean booleanValue) throws ErrorException, IOException {
        Call<ResponseBody> call = service.delete400(booleanValue);
        return delete400Delegate(call.execute());
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public Call<ResponseBody> delete400Async(Boolean booleanValue, final ServiceCallback<Error> serviceCallback) {
        Call<ResponseBody> call = service.delete400(booleanValue);
        call.enqueue(new ServiceResponseCallback<Error>(serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    serviceCallback.success(delete400Delegate(response));
                } catch (ErrorException | IOException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<Error> delete400Delegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<Error, ErrorException>()
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Return 401 status code - should be represented in the client as an error.
     *
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the Error object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<Error> head401() throws ErrorException, IOException {
        Call<Void> call = service.head401();
        return head401Delegate(call.execute());
    }

    /**
     * Return 401 status code - should be represented in the client as an error.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public Call<Void> head401Async(final ServiceCallback<Error> serviceCallback) {
        Call<Void> call = service.head401();
        call.enqueue(new ServiceResponseEmptyCallback<Error>(serviceCallback) {
            @Override
            public void onResponse(Call<Void> call, Response<Void> response) {
                try {
                    serviceCallback.success(head401Delegate(response));
                } catch (ErrorException | IOException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<Error> head401Delegate(Response<Void> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<Error, ErrorException>()
                .registerError(ErrorException.class)
                .buildEmpty(response);
    }

    /**
     * Return 402 status code - should be represented in the client as an error.
     *
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the Error object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<Error> get402() throws ErrorException, IOException {
        Call<ResponseBody> call = service.get402();
        return get402Delegate(call.execute());
    }

    /**
     * Return 402 status code - should be represented in the client as an error.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public Call<ResponseBody> get402Async(final ServiceCallback<Error> serviceCallback) {
        Call<ResponseBody> call = service.get402();
        call.enqueue(new ServiceResponseCallback<Error>(serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    serviceCallback.success(get402Delegate(response));
                } catch (ErrorException | IOException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<Error> get402Delegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<Error, ErrorException>()
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Return 403 status code - should be represented in the client as an error.
     *
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the Error object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<Error> get403() throws ErrorException, IOException {
        Call<ResponseBody> call = service.get403();
        return get403Delegate(call.execute());
    }

    /**
     * Return 403 status code - should be represented in the client as an error.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public Call<ResponseBody> get403Async(final ServiceCallback<Error> serviceCallback) {
        Call<ResponseBody> call = service.get403();
        call.enqueue(new ServiceResponseCallback<Error>(serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    serviceCallback.success(get403Delegate(response));
                } catch (ErrorException | IOException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<Error> get403Delegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<Error, ErrorException>()
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Return 404 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the Error object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<Error> put404(Boolean booleanValue) throws ErrorException, IOException {
        Call<ResponseBody> call = service.put404(booleanValue);
        return put404Delegate(call.execute());
    }

    /**
     * Return 404 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public Call<ResponseBody> put404Async(Boolean booleanValue, final ServiceCallback<Error> serviceCallback) {
        Call<ResponseBody> call = service.put404(booleanValue);
        call.enqueue(new ServiceResponseCallback<Error>(serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    serviceCallback.success(put404Delegate(response));
                } catch (ErrorException | IOException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<Error> put404Delegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<Error, ErrorException>()
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Return 405 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the Error object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<Error> patch405(Boolean booleanValue) throws ErrorException, IOException {
        Call<ResponseBody> call = service.patch405(booleanValue);
        return patch405Delegate(call.execute());
    }

    /**
     * Return 405 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public Call<ResponseBody> patch405Async(Boolean booleanValue, final ServiceCallback<Error> serviceCallback) {
        Call<ResponseBody> call = service.patch405(booleanValue);
        call.enqueue(new ServiceResponseCallback<Error>(serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    serviceCallback.success(patch405Delegate(response));
                } catch (ErrorException | IOException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<Error> patch405Delegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<Error, ErrorException>()
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Return 406 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the Error object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<Error> post406(Boolean booleanValue) throws ErrorException, IOException {
        Call<ResponseBody> call = service.post406(booleanValue);
        return post406Delegate(call.execute());
    }

    /**
     * Return 406 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public Call<ResponseBody> post406Async(Boolean booleanValue, final ServiceCallback<Error> serviceCallback) {
        Call<ResponseBody> call = service.post406(booleanValue);
        call.enqueue(new ServiceResponseCallback<Error>(serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    serviceCallback.success(post406Delegate(response));
                } catch (ErrorException | IOException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<Error> post406Delegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<Error, ErrorException>()
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Return 407 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the Error object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<Error> delete407(Boolean booleanValue) throws ErrorException, IOException {
        Call<ResponseBody> call = service.delete407(booleanValue);
        return delete407Delegate(call.execute());
    }

    /**
     * Return 407 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public Call<ResponseBody> delete407Async(Boolean booleanValue, final ServiceCallback<Error> serviceCallback) {
        Call<ResponseBody> call = service.delete407(booleanValue);
        call.enqueue(new ServiceResponseCallback<Error>(serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    serviceCallback.success(delete407Delegate(response));
                } catch (ErrorException | IOException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<Error> delete407Delegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<Error, ErrorException>()
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Return 409 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the Error object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<Error> put409(Boolean booleanValue) throws ErrorException, IOException {
        Call<ResponseBody> call = service.put409(booleanValue);
        return put409Delegate(call.execute());
    }

    /**
     * Return 409 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public Call<ResponseBody> put409Async(Boolean booleanValue, final ServiceCallback<Error> serviceCallback) {
        Call<ResponseBody> call = service.put409(booleanValue);
        call.enqueue(new ServiceResponseCallback<Error>(serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    serviceCallback.success(put409Delegate(response));
                } catch (ErrorException | IOException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<Error> put409Delegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<Error, ErrorException>()
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Return 410 status code - should be represented in the client as an error.
     *
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the Error object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<Error> head410() throws ErrorException, IOException {
        Call<Void> call = service.head410();
        return head410Delegate(call.execute());
    }

    /**
     * Return 410 status code - should be represented in the client as an error.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public Call<Void> head410Async(final ServiceCallback<Error> serviceCallback) {
        Call<Void> call = service.head410();
        call.enqueue(new ServiceResponseEmptyCallback<Error>(serviceCallback) {
            @Override
            public void onResponse(Call<Void> call, Response<Void> response) {
                try {
                    serviceCallback.success(head410Delegate(response));
                } catch (ErrorException | IOException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<Error> head410Delegate(Response<Void> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<Error, ErrorException>()
                .registerError(ErrorException.class)
                .buildEmpty(response);
    }

    /**
     * Return 411 status code - should be represented in the client as an error.
     *
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the Error object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<Error> get411() throws ErrorException, IOException {
        Call<ResponseBody> call = service.get411();
        return get411Delegate(call.execute());
    }

    /**
     * Return 411 status code - should be represented in the client as an error.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public Call<ResponseBody> get411Async(final ServiceCallback<Error> serviceCallback) {
        Call<ResponseBody> call = service.get411();
        call.enqueue(new ServiceResponseCallback<Error>(serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    serviceCallback.success(get411Delegate(response));
                } catch (ErrorException | IOException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<Error> get411Delegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<Error, ErrorException>()
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Return 412 status code - should be represented in the client as an error.
     *
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the Error object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<Error> get412() throws ErrorException, IOException {
        Call<ResponseBody> call = service.get412();
        return get412Delegate(call.execute());
    }

    /**
     * Return 412 status code - should be represented in the client as an error.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public Call<ResponseBody> get412Async(final ServiceCallback<Error> serviceCallback) {
        Call<ResponseBody> call = service.get412();
        call.enqueue(new ServiceResponseCallback<Error>(serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    serviceCallback.success(get412Delegate(response));
                } catch (ErrorException | IOException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<Error> get412Delegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<Error, ErrorException>()
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Return 413 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the Error object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<Error> put413(Boolean booleanValue) throws ErrorException, IOException {
        Call<ResponseBody> call = service.put413(booleanValue);
        return put413Delegate(call.execute());
    }

    /**
     * Return 413 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public Call<ResponseBody> put413Async(Boolean booleanValue, final ServiceCallback<Error> serviceCallback) {
        Call<ResponseBody> call = service.put413(booleanValue);
        call.enqueue(new ServiceResponseCallback<Error>(serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    serviceCallback.success(put413Delegate(response));
                } catch (ErrorException | IOException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<Error> put413Delegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<Error, ErrorException>()
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Return 414 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the Error object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<Error> patch414(Boolean booleanValue) throws ErrorException, IOException {
        Call<ResponseBody> call = service.patch414(booleanValue);
        return patch414Delegate(call.execute());
    }

    /**
     * Return 414 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public Call<ResponseBody> patch414Async(Boolean booleanValue, final ServiceCallback<Error> serviceCallback) {
        Call<ResponseBody> call = service.patch414(booleanValue);
        call.enqueue(new ServiceResponseCallback<Error>(serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    serviceCallback.success(patch414Delegate(response));
                } catch (ErrorException | IOException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<Error> patch414Delegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<Error, ErrorException>()
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Return 415 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the Error object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<Error> post415(Boolean booleanValue) throws ErrorException, IOException {
        Call<ResponseBody> call = service.post415(booleanValue);
        return post415Delegate(call.execute());
    }

    /**
     * Return 415 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public Call<ResponseBody> post415Async(Boolean booleanValue, final ServiceCallback<Error> serviceCallback) {
        Call<ResponseBody> call = service.post415(booleanValue);
        call.enqueue(new ServiceResponseCallback<Error>(serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    serviceCallback.success(post415Delegate(response));
                } catch (ErrorException | IOException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<Error> post415Delegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<Error, ErrorException>()
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Return 416 status code - should be represented in the client as an error.
     *
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the Error object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<Error> get416() throws ErrorException, IOException {
        Call<ResponseBody> call = service.get416();
        return get416Delegate(call.execute());
    }

    /**
     * Return 416 status code - should be represented in the client as an error.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public Call<ResponseBody> get416Async(final ServiceCallback<Error> serviceCallback) {
        Call<ResponseBody> call = service.get416();
        call.enqueue(new ServiceResponseCallback<Error>(serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    serviceCallback.success(get416Delegate(response));
                } catch (ErrorException | IOException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<Error> get416Delegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<Error, ErrorException>()
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Return 417 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the Error object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<Error> delete417(Boolean booleanValue) throws ErrorException, IOException {
        Call<ResponseBody> call = service.delete417(booleanValue);
        return delete417Delegate(call.execute());
    }

    /**
     * Return 417 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public Call<ResponseBody> delete417Async(Boolean booleanValue, final ServiceCallback<Error> serviceCallback) {
        Call<ResponseBody> call = service.delete417(booleanValue);
        call.enqueue(new ServiceResponseCallback<Error>(serviceCallback) {
            @Override
            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
                try {
                    serviceCallback.success(delete417Delegate(response));
                } catch (ErrorException | IOException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<Error> delete417Delegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<Error, ErrorException>()
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Return 429 status code - should be represented in the client as an error.
     *
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the Error object wrapped in {@link ServiceResponse} if successful.
     */
    public ServiceResponse<Error> head429() throws ErrorException, IOException {
        Call<Void> call = service.head429();
        return head429Delegate(call.execute());
    }

    /**
     * Return 429 status code - should be represented in the client as an error.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    public Call<Void> head429Async(final ServiceCallback<Error> serviceCallback) {
        Call<Void> call = service.head429();
        call.enqueue(new ServiceResponseEmptyCallback<Error>(serviceCallback) {
            @Override
            public void onResponse(Call<Void> call, Response<Void> response) {
                try {
                    serviceCallback.success(head429Delegate(response));
                } catch (ErrorException | IOException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<Error> head429Delegate(Response<Void> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<Error, ErrorException>()
                .registerError(ErrorException.class)
                .buildEmpty(response);
    }

}
