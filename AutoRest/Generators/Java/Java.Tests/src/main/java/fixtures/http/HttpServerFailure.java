/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.http;

import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceException;
import com.microsoft.rest.ServiceResponseCallback;
import retrofit.client.Response;
import fixtures.http.models.Error;
import retrofit.http.HEAD;
import retrofit.http.GET;
import retrofit.http.POST;
import retrofit.http.Body;
import retrofit.http.DELETE;

/**
 * An instance of this class provides access to all the operations defined
 * in HttpServerFailure.
 */
public interface HttpServerFailure {
    /**
     * The interface defining all the services for HttpServerFailure to be
     * used by Retrofit to perform actually REST calls.
     */
    interface HttpServerFailureService {
        @HEAD("/http/failure/server/501")
        Response head501() throws ServiceException;

        @HEAD("/http/failure/server/501")
        void head501Async(ServiceResponseCallback cb);

        @GET("/http/failure/server/501")
        Response get501() throws ServiceException;

        @GET("/http/failure/server/501")
        void get501Async(ServiceResponseCallback cb);

        @POST("/http/failure/server/505")
        Response post505(@Body boolean booleanValue) throws ServiceException;

        @POST("/http/failure/server/505")
        void post505Async(@Body boolean booleanValue, ServiceResponseCallback cb);

        @DELETE("/http/failure/server/505")
        Response delete505(@Body boolean booleanValue) throws ServiceException;

        @DELETE("/http/failure/server/505")
        void delete505Async(@Body boolean booleanValue, ServiceResponseCallback cb);

    }
    /**
     * Return 501 status code - should be represented in the client as an error
     *
     * @return the Error object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Error head501() throws ServiceException;

    /**
     * Return 501 status code - should be represented in the client as an error
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void head501Async(final ServiceCallback<Error> serviceCallback);

    /**
     * Return 501 status code - should be represented in the client as an error
     *
     * @return the Error object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Error get501() throws ServiceException;

    /**
     * Return 501 status code - should be represented in the client as an error
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void get501Async(final ServiceCallback<Error> serviceCallback);

    /**
     * Return 505 status code - should be represented in the client as an error
     *
     * @param booleanValue Simple boolean value true
     * @return the Error object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Error post505(boolean booleanValue) throws ServiceException;

    /**
     * Return 505 status code - should be represented in the client as an error
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void post505Async(boolean booleanValue, final ServiceCallback<Error> serviceCallback);

    /**
     * Return 505 status code - should be represented in the client as an error
     *
     * @param booleanValue Simple boolean value true
     * @return the Error object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Error delete505(boolean booleanValue) throws ServiceException;

    /**
     * Return 505 status code - should be represented in the client as an error
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void delete505Async(boolean booleanValue, final ServiceCallback<Error> serviceCallback);

}
