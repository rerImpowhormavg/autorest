/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.bodyarray;

import com.google.gson.reflect.TypeToken;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceException;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseBuilder;
import com.microsoft.rest.ServiceResponseCallback;
import retrofit.RestAdapter;
import retrofit.RetrofitError;
import retrofit.client.Response;
import java.util.List;
import fixtures.bodyarray.models.Error;
import org.joda.time.LocalDate;
import org.joda.time.DateTime;
import fixtures.bodyarray.models.Product;
import java.util.Map;
import com.microsoft.rest.Validator;

public class ArrayImpl implements Array {
    private ArrayService service;
    AutoRestSwaggerBATArrayService client;

    public ArrayImpl(RestAdapter restAdapter, AutoRestSwaggerBATArrayService client) {
        this.service = restAdapter.create(ArrayService.class);
        this.client = client;
    }

    /**
     * Get null array value
     *
     * @return the List&lt;Integer&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public List<Integer> getNull() throws ServiceException {
        try {
            ServiceResponse<List<Integer>> response = getNullDelegate(service.getNull(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<List<Integer>> response = getNullDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Get null array value
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getNullAsync(final ServiceCallback<List<Integer>> serviceCallback) {
        service.getNullAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getNullDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<List<Integer>> getNullDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<List<Integer>>()
                .register(200, new TypeToken<List<Integer>>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get invalid array [1, 2, 3
     *
     * @return the List&lt;Integer&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public List<Integer> getInvalid() throws ServiceException {
        try {
            ServiceResponse<List<Integer>> response = getInvalidDelegate(service.getInvalid(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<List<Integer>> response = getInvalidDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Get invalid array [1, 2, 3
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getInvalidAsync(final ServiceCallback<List<Integer>> serviceCallback) {
        service.getInvalidAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getInvalidDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<List<Integer>> getInvalidDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<List<Integer>>()
                .register(200, new TypeToken<List<Integer>>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get empty array value []
     *
     * @return the List&lt;Integer&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public List<Integer> getEmpty() throws ServiceException {
        try {
            ServiceResponse<List<Integer>> response = getEmptyDelegate(service.getEmpty(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<List<Integer>> response = getEmptyDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Get empty array value []
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getEmptyAsync(final ServiceCallback<List<Integer>> serviceCallback) {
        service.getEmptyAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getEmptyDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<List<Integer>> getEmptyDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<List<Integer>>()
                .register(200, new TypeToken<List<Integer>>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Set array value empty []
     *
     * @param arrayBody the List&lt;String&gt; value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void putEmpty(List<String> arrayBody) throws ServiceException {
        if (arrayBody == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter arrayBody is required and cannot be null."));
        }
        Validator.validate(arrayBody);
        try {
            ServiceResponse<Void> response = putEmptyDelegate(service.putEmpty(arrayBody), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = putEmptyDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Set array value empty []
     *
     * @param arrayBody the List&lt;String&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void putEmptyAsync(List<String> arrayBody, final ServiceCallback<Void> serviceCallback) {
        if (arrayBody == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter arrayBody is required and cannot be null.")));
        }
        Validator.validate(arrayBody, serviceCallback);
        service.putEmptyAsync(arrayBody, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(putEmptyDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> putEmptyDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get boolean array value [true, false, false, true]
     *
     * @return the List&lt;Boolean&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public List<Boolean> getBooleanTfft() throws ServiceException {
        try {
            ServiceResponse<List<Boolean>> response = getBooleanTfftDelegate(service.getBooleanTfft(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<List<Boolean>> response = getBooleanTfftDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Get boolean array value [true, false, false, true]
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getBooleanTfftAsync(final ServiceCallback<List<Boolean>> serviceCallback) {
        service.getBooleanTfftAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getBooleanTfftDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<List<Boolean>> getBooleanTfftDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<List<Boolean>>()
                .register(200, new TypeToken<List<Boolean>>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Set array value empty [true, false, false, true]
     *
     * @param arrayBody the List&lt;Boolean&gt; value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void putBooleanTfft(List<Boolean> arrayBody) throws ServiceException {
        if (arrayBody == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter arrayBody is required and cannot be null."));
        }
        Validator.validate(arrayBody);
        try {
            ServiceResponse<Void> response = putBooleanTfftDelegate(service.putBooleanTfft(arrayBody), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = putBooleanTfftDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Set array value empty [true, false, false, true]
     *
     * @param arrayBody the List&lt;Boolean&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void putBooleanTfftAsync(List<Boolean> arrayBody, final ServiceCallback<Void> serviceCallback) {
        if (arrayBody == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter arrayBody is required and cannot be null.")));
        }
        Validator.validate(arrayBody, serviceCallback);
        service.putBooleanTfftAsync(arrayBody, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(putBooleanTfftDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> putBooleanTfftDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get boolean array value [true, null, false]
     *
     * @return the List&lt;Boolean&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public List<Boolean> getBooleanInvalidNull() throws ServiceException {
        try {
            ServiceResponse<List<Boolean>> response = getBooleanInvalidNullDelegate(service.getBooleanInvalidNull(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<List<Boolean>> response = getBooleanInvalidNullDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Get boolean array value [true, null, false]
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getBooleanInvalidNullAsync(final ServiceCallback<List<Boolean>> serviceCallback) {
        service.getBooleanInvalidNullAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getBooleanInvalidNullDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<List<Boolean>> getBooleanInvalidNullDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<List<Boolean>>()
                .register(200, new TypeToken<List<Boolean>>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get boolean array value [true, 'boolean', false]
     *
     * @return the List&lt;Boolean&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public List<Boolean> getBooleanInvalidString() throws ServiceException {
        try {
            ServiceResponse<List<Boolean>> response = getBooleanInvalidStringDelegate(service.getBooleanInvalidString(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<List<Boolean>> response = getBooleanInvalidStringDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Get boolean array value [true, 'boolean', false]
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getBooleanInvalidStringAsync(final ServiceCallback<List<Boolean>> serviceCallback) {
        service.getBooleanInvalidStringAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getBooleanInvalidStringDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<List<Boolean>> getBooleanInvalidStringDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<List<Boolean>>()
                .register(200, new TypeToken<List<Boolean>>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get integer array value [1, -1, 3, 300]
     *
     * @return the List&lt;Integer&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public List<Integer> getIntegerValid() throws ServiceException {
        try {
            ServiceResponse<List<Integer>> response = getIntegerValidDelegate(service.getIntegerValid(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<List<Integer>> response = getIntegerValidDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Get integer array value [1, -1, 3, 300]
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getIntegerValidAsync(final ServiceCallback<List<Integer>> serviceCallback) {
        service.getIntegerValidAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getIntegerValidDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<List<Integer>> getIntegerValidDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<List<Integer>>()
                .register(200, new TypeToken<List<Integer>>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Set array value empty [1, -1, 3, 300]
     *
     * @param arrayBody the List&lt;Integer&gt; value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void putIntegerValid(List<Integer> arrayBody) throws ServiceException {
        if (arrayBody == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter arrayBody is required and cannot be null."));
        }
        Validator.validate(arrayBody);
        try {
            ServiceResponse<Void> response = putIntegerValidDelegate(service.putIntegerValid(arrayBody), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = putIntegerValidDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Set array value empty [1, -1, 3, 300]
     *
     * @param arrayBody the List&lt;Integer&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void putIntegerValidAsync(List<Integer> arrayBody, final ServiceCallback<Void> serviceCallback) {
        if (arrayBody == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter arrayBody is required and cannot be null.")));
        }
        Validator.validate(arrayBody, serviceCallback);
        service.putIntegerValidAsync(arrayBody, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(putIntegerValidDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> putIntegerValidDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get integer array value [1, null, 0]
     *
     * @return the List&lt;Integer&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public List<Integer> getIntInvalidNull() throws ServiceException {
        try {
            ServiceResponse<List<Integer>> response = getIntInvalidNullDelegate(service.getIntInvalidNull(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<List<Integer>> response = getIntInvalidNullDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Get integer array value [1, null, 0]
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getIntInvalidNullAsync(final ServiceCallback<List<Integer>> serviceCallback) {
        service.getIntInvalidNullAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getIntInvalidNullDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<List<Integer>> getIntInvalidNullDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<List<Integer>>()
                .register(200, new TypeToken<List<Integer>>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get integer array value [1, 'integer', 0]
     *
     * @return the List&lt;Integer&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public List<Integer> getIntInvalidString() throws ServiceException {
        try {
            ServiceResponse<List<Integer>> response = getIntInvalidStringDelegate(service.getIntInvalidString(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<List<Integer>> response = getIntInvalidStringDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Get integer array value [1, 'integer', 0]
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getIntInvalidStringAsync(final ServiceCallback<List<Integer>> serviceCallback) {
        service.getIntInvalidStringAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getIntInvalidStringDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<List<Integer>> getIntInvalidStringDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<List<Integer>>()
                .register(200, new TypeToken<List<Integer>>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get integer array value [1, -1, 3, 300]
     *
     * @return the List&lt;Long&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public List<Long> getLongValid() throws ServiceException {
        try {
            ServiceResponse<List<Long>> response = getLongValidDelegate(service.getLongValid(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<List<Long>> response = getLongValidDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Get integer array value [1, -1, 3, 300]
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getLongValidAsync(final ServiceCallback<List<Long>> serviceCallback) {
        service.getLongValidAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getLongValidDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<List<Long>> getLongValidDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<List<Long>>()
                .register(200, new TypeToken<List<Long>>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Set array value empty [1, -1, 3, 300]
     *
     * @param arrayBody the List&lt;Long&gt; value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void putLongValid(List<Long> arrayBody) throws ServiceException {
        if (arrayBody == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter arrayBody is required and cannot be null."));
        }
        Validator.validate(arrayBody);
        try {
            ServiceResponse<Void> response = putLongValidDelegate(service.putLongValid(arrayBody), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = putLongValidDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Set array value empty [1, -1, 3, 300]
     *
     * @param arrayBody the List&lt;Long&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void putLongValidAsync(List<Long> arrayBody, final ServiceCallback<Void> serviceCallback) {
        if (arrayBody == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter arrayBody is required and cannot be null.")));
        }
        Validator.validate(arrayBody, serviceCallback);
        service.putLongValidAsync(arrayBody, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(putLongValidDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> putLongValidDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get long array value [1, null, 0]
     *
     * @return the List&lt;Long&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public List<Long> getLongInvalidNull() throws ServiceException {
        try {
            ServiceResponse<List<Long>> response = getLongInvalidNullDelegate(service.getLongInvalidNull(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<List<Long>> response = getLongInvalidNullDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Get long array value [1, null, 0]
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getLongInvalidNullAsync(final ServiceCallback<List<Long>> serviceCallback) {
        service.getLongInvalidNullAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getLongInvalidNullDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<List<Long>> getLongInvalidNullDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<List<Long>>()
                .register(200, new TypeToken<List<Long>>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get long array value [1, 'integer', 0]
     *
     * @return the List&lt;Long&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public List<Long> getLongInvalidString() throws ServiceException {
        try {
            ServiceResponse<List<Long>> response = getLongInvalidStringDelegate(service.getLongInvalidString(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<List<Long>> response = getLongInvalidStringDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Get long array value [1, 'integer', 0]
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getLongInvalidStringAsync(final ServiceCallback<List<Long>> serviceCallback) {
        service.getLongInvalidStringAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getLongInvalidStringDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<List<Long>> getLongInvalidStringDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<List<Long>>()
                .register(200, new TypeToken<List<Long>>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get float array value [0, -0.01, 1.2e20]
     *
     * @return the List&lt;Double&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public List<Double> getFloatValid() throws ServiceException {
        try {
            ServiceResponse<List<Double>> response = getFloatValidDelegate(service.getFloatValid(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<List<Double>> response = getFloatValidDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Get float array value [0, -0.01, 1.2e20]
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getFloatValidAsync(final ServiceCallback<List<Double>> serviceCallback) {
        service.getFloatValidAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getFloatValidDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<List<Double>> getFloatValidDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<List<Double>>()
                .register(200, new TypeToken<List<Double>>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Set array value [0, -0.01, 1.2e20]
     *
     * @param arrayBody the List&lt;Double&gt; value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void putFloatValid(List<Double> arrayBody) throws ServiceException {
        if (arrayBody == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter arrayBody is required and cannot be null."));
        }
        Validator.validate(arrayBody);
        try {
            ServiceResponse<Void> response = putFloatValidDelegate(service.putFloatValid(arrayBody), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = putFloatValidDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Set array value [0, -0.01, 1.2e20]
     *
     * @param arrayBody the List&lt;Double&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void putFloatValidAsync(List<Double> arrayBody, final ServiceCallback<Void> serviceCallback) {
        if (arrayBody == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter arrayBody is required and cannot be null.")));
        }
        Validator.validate(arrayBody, serviceCallback);
        service.putFloatValidAsync(arrayBody, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(putFloatValidDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> putFloatValidDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get float array value [0.0, null, -1.2e20]
     *
     * @return the List&lt;Double&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public List<Double> getFloatInvalidNull() throws ServiceException {
        try {
            ServiceResponse<List<Double>> response = getFloatInvalidNullDelegate(service.getFloatInvalidNull(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<List<Double>> response = getFloatInvalidNullDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Get float array value [0.0, null, -1.2e20]
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getFloatInvalidNullAsync(final ServiceCallback<List<Double>> serviceCallback) {
        service.getFloatInvalidNullAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getFloatInvalidNullDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<List<Double>> getFloatInvalidNullDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<List<Double>>()
                .register(200, new TypeToken<List<Double>>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get boolean array value [1.0, 'number', 0.0]
     *
     * @return the List&lt;Double&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public List<Double> getFloatInvalidString() throws ServiceException {
        try {
            ServiceResponse<List<Double>> response = getFloatInvalidStringDelegate(service.getFloatInvalidString(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<List<Double>> response = getFloatInvalidStringDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Get boolean array value [1.0, 'number', 0.0]
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getFloatInvalidStringAsync(final ServiceCallback<List<Double>> serviceCallback) {
        service.getFloatInvalidStringAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getFloatInvalidStringDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<List<Double>> getFloatInvalidStringDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<List<Double>>()
                .register(200, new TypeToken<List<Double>>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get float array value [0, -0.01, 1.2e20]
     *
     * @return the List&lt;Double&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public List<Double> getDoubleValid() throws ServiceException {
        try {
            ServiceResponse<List<Double>> response = getDoubleValidDelegate(service.getDoubleValid(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<List<Double>> response = getDoubleValidDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Get float array value [0, -0.01, 1.2e20]
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getDoubleValidAsync(final ServiceCallback<List<Double>> serviceCallback) {
        service.getDoubleValidAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getDoubleValidDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<List<Double>> getDoubleValidDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<List<Double>>()
                .register(200, new TypeToken<List<Double>>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Set array value [0, -0.01, 1.2e20]
     *
     * @param arrayBody the List&lt;Double&gt; value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void putDoubleValid(List<Double> arrayBody) throws ServiceException {
        if (arrayBody == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter arrayBody is required and cannot be null."));
        }
        Validator.validate(arrayBody);
        try {
            ServiceResponse<Void> response = putDoubleValidDelegate(service.putDoubleValid(arrayBody), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = putDoubleValidDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Set array value [0, -0.01, 1.2e20]
     *
     * @param arrayBody the List&lt;Double&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void putDoubleValidAsync(List<Double> arrayBody, final ServiceCallback<Void> serviceCallback) {
        if (arrayBody == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter arrayBody is required and cannot be null.")));
        }
        Validator.validate(arrayBody, serviceCallback);
        service.putDoubleValidAsync(arrayBody, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(putDoubleValidDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> putDoubleValidDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get float array value [0.0, null, -1.2e20]
     *
     * @return the List&lt;Double&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public List<Double> getDoubleInvalidNull() throws ServiceException {
        try {
            ServiceResponse<List<Double>> response = getDoubleInvalidNullDelegate(service.getDoubleInvalidNull(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<List<Double>> response = getDoubleInvalidNullDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Get float array value [0.0, null, -1.2e20]
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getDoubleInvalidNullAsync(final ServiceCallback<List<Double>> serviceCallback) {
        service.getDoubleInvalidNullAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getDoubleInvalidNullDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<List<Double>> getDoubleInvalidNullDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<List<Double>>()
                .register(200, new TypeToken<List<Double>>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get boolean array value [1.0, 'number', 0.0]
     *
     * @return the List&lt;Double&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public List<Double> getDoubleInvalidString() throws ServiceException {
        try {
            ServiceResponse<List<Double>> response = getDoubleInvalidStringDelegate(service.getDoubleInvalidString(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<List<Double>> response = getDoubleInvalidStringDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Get boolean array value [1.0, 'number', 0.0]
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getDoubleInvalidStringAsync(final ServiceCallback<List<Double>> serviceCallback) {
        service.getDoubleInvalidStringAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getDoubleInvalidStringDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<List<Double>> getDoubleInvalidStringDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<List<Double>>()
                .register(200, new TypeToken<List<Double>>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get string array value ['foo1', 'foo2', 'foo3']
     *
     * @return the List&lt;String&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public List<String> getStringValid() throws ServiceException {
        try {
            ServiceResponse<List<String>> response = getStringValidDelegate(service.getStringValid(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<List<String>> response = getStringValidDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Get string array value ['foo1', 'foo2', 'foo3']
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getStringValidAsync(final ServiceCallback<List<String>> serviceCallback) {
        service.getStringValidAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getStringValidDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<List<String>> getStringValidDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<List<String>>()
                .register(200, new TypeToken<List<String>>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Set array value ['foo1', 'foo2', 'foo3']
     *
     * @param arrayBody the List&lt;String&gt; value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void putStringValid(List<String> arrayBody) throws ServiceException {
        if (arrayBody == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter arrayBody is required and cannot be null."));
        }
        Validator.validate(arrayBody);
        try {
            ServiceResponse<Void> response = putStringValidDelegate(service.putStringValid(arrayBody), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = putStringValidDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Set array value ['foo1', 'foo2', 'foo3']
     *
     * @param arrayBody the List&lt;String&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void putStringValidAsync(List<String> arrayBody, final ServiceCallback<Void> serviceCallback) {
        if (arrayBody == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter arrayBody is required and cannot be null.")));
        }
        Validator.validate(arrayBody, serviceCallback);
        service.putStringValidAsync(arrayBody, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(putStringValidDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> putStringValidDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get string array value ['foo', null, 'foo2']
     *
     * @return the List&lt;String&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public List<String> getStringWithNull() throws ServiceException {
        try {
            ServiceResponse<List<String>> response = getStringWithNullDelegate(service.getStringWithNull(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<List<String>> response = getStringWithNullDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Get string array value ['foo', null, 'foo2']
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getStringWithNullAsync(final ServiceCallback<List<String>> serviceCallback) {
        service.getStringWithNullAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getStringWithNullDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<List<String>> getStringWithNullDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<List<String>>()
                .register(200, new TypeToken<List<String>>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get string array value ['foo', 123, 'foo2']
     *
     * @return the List&lt;String&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public List<String> getStringWithInvalid() throws ServiceException {
        try {
            ServiceResponse<List<String>> response = getStringWithInvalidDelegate(service.getStringWithInvalid(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<List<String>> response = getStringWithInvalidDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Get string array value ['foo', 123, 'foo2']
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getStringWithInvalidAsync(final ServiceCallback<List<String>> serviceCallback) {
        service.getStringWithInvalidAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getStringWithInvalidDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<List<String>> getStringWithInvalidDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<List<String>>()
                .register(200, new TypeToken<List<String>>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get integer array value ['2000-12-01', '1980-01-02', '1492-10-12']
     *
     * @return the List&lt;LocalDate&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public List<LocalDate> getDateValid() throws ServiceException {
        try {
            ServiceResponse<List<LocalDate>> response = getDateValidDelegate(service.getDateValid(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<List<LocalDate>> response = getDateValidDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Get integer array value ['2000-12-01', '1980-01-02', '1492-10-12']
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getDateValidAsync(final ServiceCallback<List<LocalDate>> serviceCallback) {
        service.getDateValidAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getDateValidDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<List<LocalDate>> getDateValidDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<List<LocalDate>>()
                .register(200, new TypeToken<List<LocalDate>>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Set array value  ['2000-12-01', '1980-01-02', '1492-10-12']
     *
     * @param arrayBody the List&lt;LocalDate&gt; value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void putDateValid(List<LocalDate> arrayBody) throws ServiceException {
        if (arrayBody == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter arrayBody is required and cannot be null."));
        }
        Validator.validate(arrayBody);
        try {
            ServiceResponse<Void> response = putDateValidDelegate(service.putDateValid(arrayBody), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = putDateValidDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Set array value  ['2000-12-01', '1980-01-02', '1492-10-12']
     *
     * @param arrayBody the List&lt;LocalDate&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void putDateValidAsync(List<LocalDate> arrayBody, final ServiceCallback<Void> serviceCallback) {
        if (arrayBody == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter arrayBody is required and cannot be null.")));
        }
        Validator.validate(arrayBody, serviceCallback);
        service.putDateValidAsync(arrayBody, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(putDateValidDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> putDateValidDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get date array value ['2012-01-01', null, '1776-07-04']
     *
     * @return the List&lt;LocalDate&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public List<LocalDate> getDateInvalidNull() throws ServiceException {
        try {
            ServiceResponse<List<LocalDate>> response = getDateInvalidNullDelegate(service.getDateInvalidNull(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<List<LocalDate>> response = getDateInvalidNullDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Get date array value ['2012-01-01', null, '1776-07-04']
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getDateInvalidNullAsync(final ServiceCallback<List<LocalDate>> serviceCallback) {
        service.getDateInvalidNullAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getDateInvalidNullDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<List<LocalDate>> getDateInvalidNullDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<List<LocalDate>>()
                .register(200, new TypeToken<List<LocalDate>>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get date array value ['2011-03-22', 'date']
     *
     * @return the List&lt;LocalDate&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public List<LocalDate> getDateInvalidChars() throws ServiceException {
        try {
            ServiceResponse<List<LocalDate>> response = getDateInvalidCharsDelegate(service.getDateInvalidChars(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<List<LocalDate>> response = getDateInvalidCharsDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Get date array value ['2011-03-22', 'date']
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getDateInvalidCharsAsync(final ServiceCallback<List<LocalDate>> serviceCallback) {
        service.getDateInvalidCharsAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getDateInvalidCharsDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<List<LocalDate>> getDateInvalidCharsDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<List<LocalDate>>()
                .register(200, new TypeToken<List<LocalDate>>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get date-time array value ['2000-12-01t00:00:01z', '1980-01-02T00:11:35+01:00', '1492-10-12T10:15:01-08:00']
     *
     * @return the List&lt;DateTime&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public List<DateTime> getDateTimeValid() throws ServiceException {
        try {
            ServiceResponse<List<DateTime>> response = getDateTimeValidDelegate(service.getDateTimeValid(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<List<DateTime>> response = getDateTimeValidDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Get date-time array value ['2000-12-01t00:00:01z', '1980-01-02T00:11:35+01:00', '1492-10-12T10:15:01-08:00']
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getDateTimeValidAsync(final ServiceCallback<List<DateTime>> serviceCallback) {
        service.getDateTimeValidAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getDateTimeValidDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<List<DateTime>> getDateTimeValidDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<List<DateTime>>()
                .register(200, new TypeToken<List<DateTime>>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Set array value  ['2000-12-01t00:00:01z', '1980-01-02T00:11:35+01:00', '1492-10-12T10:15:01-08:00']
     *
     * @param arrayBody the List&lt;DateTime&gt; value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void putDateTimeValid(List<DateTime> arrayBody) throws ServiceException {
        if (arrayBody == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter arrayBody is required and cannot be null."));
        }
        Validator.validate(arrayBody);
        try {
            ServiceResponse<Void> response = putDateTimeValidDelegate(service.putDateTimeValid(arrayBody), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = putDateTimeValidDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Set array value  ['2000-12-01t00:00:01z', '1980-01-02T00:11:35+01:00', '1492-10-12T10:15:01-08:00']
     *
     * @param arrayBody the List&lt;DateTime&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void putDateTimeValidAsync(List<DateTime> arrayBody, final ServiceCallback<Void> serviceCallback) {
        if (arrayBody == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter arrayBody is required and cannot be null.")));
        }
        Validator.validate(arrayBody, serviceCallback);
        service.putDateTimeValidAsync(arrayBody, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(putDateTimeValidDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> putDateTimeValidDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get date array value ['2000-12-01t00:00:01z', null]
     *
     * @return the List&lt;DateTime&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public List<DateTime> getDateTimeInvalidNull() throws ServiceException {
        try {
            ServiceResponse<List<DateTime>> response = getDateTimeInvalidNullDelegate(service.getDateTimeInvalidNull(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<List<DateTime>> response = getDateTimeInvalidNullDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Get date array value ['2000-12-01t00:00:01z', null]
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getDateTimeInvalidNullAsync(final ServiceCallback<List<DateTime>> serviceCallback) {
        service.getDateTimeInvalidNullAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getDateTimeInvalidNullDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<List<DateTime>> getDateTimeInvalidNullDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<List<DateTime>>()
                .register(200, new TypeToken<List<DateTime>>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get date array value ['2000-12-01t00:00:01z', 'date-time']
     *
     * @return the List&lt;DateTime&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public List<DateTime> getDateTimeInvalidChars() throws ServiceException {
        try {
            ServiceResponse<List<DateTime>> response = getDateTimeInvalidCharsDelegate(service.getDateTimeInvalidChars(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<List<DateTime>> response = getDateTimeInvalidCharsDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Get date array value ['2000-12-01t00:00:01z', 'date-time']
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getDateTimeInvalidCharsAsync(final ServiceCallback<List<DateTime>> serviceCallback) {
        service.getDateTimeInvalidCharsAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getDateTimeInvalidCharsDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<List<DateTime>> getDateTimeInvalidCharsDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<List<DateTime>>()
                .register(200, new TypeToken<List<DateTime>>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get byte array value [hex(FF FF FF FA), hex(01 02 03), hex (25, 29, 43)] with each item encoded in base64
     *
     * @return the List&lt;byte[]&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public List<byte[]> getByteValid() throws ServiceException {
        try {
            ServiceResponse<List<byte[]>> response = getByteValidDelegate(service.getByteValid(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<List<byte[]>> response = getByteValidDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Get byte array value [hex(FF FF FF FA), hex(01 02 03), hex (25, 29, 43)] with each item encoded in base64
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getByteValidAsync(final ServiceCallback<List<byte[]>> serviceCallback) {
        service.getByteValidAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getByteValidDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<List<byte[]>> getByteValidDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<List<byte[]>>()
                .register(200, new TypeToken<List<byte[]>>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Put the array value [hex(FF FF FF FA), hex(01 02 03), hex (25, 29, 43)] with each elementencoded in base 64
     *
     * @param arrayBody the List&lt;byte[]&gt; value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void putByteValid(List<byte[]> arrayBody) throws ServiceException {
        if (arrayBody == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter arrayBody is required and cannot be null."));
        }
        Validator.validate(arrayBody);
        try {
            ServiceResponse<Void> response = putByteValidDelegate(service.putByteValid(arrayBody), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = putByteValidDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Put the array value [hex(FF FF FF FA), hex(01 02 03), hex (25, 29, 43)] with each elementencoded in base 64
     *
     * @param arrayBody the List&lt;byte[]&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void putByteValidAsync(List<byte[]> arrayBody, final ServiceCallback<Void> serviceCallback) {
        if (arrayBody == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter arrayBody is required and cannot be null.")));
        }
        Validator.validate(arrayBody, serviceCallback);
        service.putByteValidAsync(arrayBody, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(putByteValidDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> putByteValidDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get byte array value [hex(AB, AC, AD), null] with the first item base64 encoded
     *
     * @return the List&lt;byte[]&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public List<byte[]> getByteInvalidNull() throws ServiceException {
        try {
            ServiceResponse<List<byte[]>> response = getByteInvalidNullDelegate(service.getByteInvalidNull(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<List<byte[]>> response = getByteInvalidNullDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Get byte array value [hex(AB, AC, AD), null] with the first item base64 encoded
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getByteInvalidNullAsync(final ServiceCallback<List<byte[]>> serviceCallback) {
        service.getByteInvalidNullAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getByteInvalidNullDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<List<byte[]>> getByteInvalidNullDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<List<byte[]>>()
                .register(200, new TypeToken<List<byte[]>>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get array of complex type null value
     *
     * @return the List&lt;Product&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public List<Product> getComplexNull() throws ServiceException {
        try {
            ServiceResponse<List<Product>> response = getComplexNullDelegate(service.getComplexNull(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<List<Product>> response = getComplexNullDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Get array of complex type null value
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getComplexNullAsync(final ServiceCallback<List<Product>> serviceCallback) {
        service.getComplexNullAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getComplexNullDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<List<Product>> getComplexNullDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<List<Product>>()
                .register(200, new TypeToken<List<Product>>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get empty array of complex type []
     *
     * @return the List&lt;Product&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public List<Product> getComplexEmpty() throws ServiceException {
        try {
            ServiceResponse<List<Product>> response = getComplexEmptyDelegate(service.getComplexEmpty(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<List<Product>> response = getComplexEmptyDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Get empty array of complex type []
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getComplexEmptyAsync(final ServiceCallback<List<Product>> serviceCallback) {
        service.getComplexEmptyAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getComplexEmptyDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<List<Product>> getComplexEmptyDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<List<Product>>()
                .register(200, new TypeToken<List<Product>>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get array of complex type with null item [{'integer': 1 'string': '2'}, null, {'integer': 5, 'string': '6'}]
     *
     * @return the List&lt;Product&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public List<Product> getComplexItemNull() throws ServiceException {
        try {
            ServiceResponse<List<Product>> response = getComplexItemNullDelegate(service.getComplexItemNull(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<List<Product>> response = getComplexItemNullDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Get array of complex type with null item [{'integer': 1 'string': '2'}, null, {'integer': 5, 'string': '6'}]
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getComplexItemNullAsync(final ServiceCallback<List<Product>> serviceCallback) {
        service.getComplexItemNullAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getComplexItemNullDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<List<Product>> getComplexItemNullDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<List<Product>>()
                .register(200, new TypeToken<List<Product>>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get array of complex type with empty item [{'integer': 1 'string': '2'}, {}, {'integer': 5, 'string': '6'}]
     *
     * @return the List&lt;Product&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public List<Product> getComplexItemEmpty() throws ServiceException {
        try {
            ServiceResponse<List<Product>> response = getComplexItemEmptyDelegate(service.getComplexItemEmpty(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<List<Product>> response = getComplexItemEmptyDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Get array of complex type with empty item [{'integer': 1 'string': '2'}, {}, {'integer': 5, 'string': '6'}]
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getComplexItemEmptyAsync(final ServiceCallback<List<Product>> serviceCallback) {
        service.getComplexItemEmptyAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getComplexItemEmptyDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<List<Product>> getComplexItemEmptyDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<List<Product>>()
                .register(200, new TypeToken<List<Product>>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get array of complex type with [{'integer': 1 'string': '2'}, {'integer': 3, 'string': '4'}, {'integer': 5, 'string': '6'}]
     *
     * @return the List&lt;Product&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public List<Product> getComplexValid() throws ServiceException {
        try {
            ServiceResponse<List<Product>> response = getComplexValidDelegate(service.getComplexValid(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<List<Product>> response = getComplexValidDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Get array of complex type with [{'integer': 1 'string': '2'}, {'integer': 3, 'string': '4'}, {'integer': 5, 'string': '6'}]
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getComplexValidAsync(final ServiceCallback<List<Product>> serviceCallback) {
        service.getComplexValidAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getComplexValidDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<List<Product>> getComplexValidDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<List<Product>>()
                .register(200, new TypeToken<List<Product>>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Put an array of complex type with values [{'integer': 1 'string': '2'}, {'integer': 3, 'string': '4'}, {'integer': 5, 'string': '6'}]
     *
     * @param arrayBody the List&lt;Product&gt; value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void putComplexValid(List<Product> arrayBody) throws ServiceException {
        if (arrayBody == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter arrayBody is required and cannot be null."));
        }
        Validator.validate(arrayBody);
        try {
            ServiceResponse<Void> response = putComplexValidDelegate(service.putComplexValid(arrayBody), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = putComplexValidDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Put an array of complex type with values [{'integer': 1 'string': '2'}, {'integer': 3, 'string': '4'}, {'integer': 5, 'string': '6'}]
     *
     * @param arrayBody the List&lt;Product&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void putComplexValidAsync(List<Product> arrayBody, final ServiceCallback<Void> serviceCallback) {
        if (arrayBody == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter arrayBody is required and cannot be null.")));
        }
        Validator.validate(arrayBody, serviceCallback);
        service.putComplexValidAsync(arrayBody, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(putComplexValidDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> putComplexValidDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get a null array
     *
     * @return the List&lt;List&lt;String&gt;&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public List<List<String>> getArrayNull() throws ServiceException {
        try {
            ServiceResponse<List<List<String>>> response = getArrayNullDelegate(service.getArrayNull(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<List<List<String>>> response = getArrayNullDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Get a null array
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getArrayNullAsync(final ServiceCallback<List<List<String>>> serviceCallback) {
        service.getArrayNullAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getArrayNullDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<List<List<String>>> getArrayNullDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<List<List<String>>>()
                .register(200, new TypeToken<List<List<String>>>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get an empty array []
     *
     * @return the List&lt;List&lt;String&gt;&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public List<List<String>> getArrayEmpty() throws ServiceException {
        try {
            ServiceResponse<List<List<String>>> response = getArrayEmptyDelegate(service.getArrayEmpty(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<List<List<String>>> response = getArrayEmptyDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Get an empty array []
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getArrayEmptyAsync(final ServiceCallback<List<List<String>>> serviceCallback) {
        service.getArrayEmptyAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getArrayEmptyDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<List<List<String>>> getArrayEmptyDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<List<List<String>>>()
                .register(200, new TypeToken<List<List<String>>>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get an array of array of strings [['1', '2', '3'], null, ['7', '8', '9']]
     *
     * @return the List&lt;List&lt;String&gt;&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public List<List<String>> getArrayItemNull() throws ServiceException {
        try {
            ServiceResponse<List<List<String>>> response = getArrayItemNullDelegate(service.getArrayItemNull(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<List<List<String>>> response = getArrayItemNullDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Get an array of array of strings [['1', '2', '3'], null, ['7', '8', '9']]
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getArrayItemNullAsync(final ServiceCallback<List<List<String>>> serviceCallback) {
        service.getArrayItemNullAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getArrayItemNullDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<List<List<String>>> getArrayItemNullDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<List<List<String>>>()
                .register(200, new TypeToken<List<List<String>>>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get an array of array of strings [['1', '2', '3'], [], ['7', '8', '9']]
     *
     * @return the List&lt;List&lt;String&gt;&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public List<List<String>> getArrayItemEmpty() throws ServiceException {
        try {
            ServiceResponse<List<List<String>>> response = getArrayItemEmptyDelegate(service.getArrayItemEmpty(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<List<List<String>>> response = getArrayItemEmptyDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Get an array of array of strings [['1', '2', '3'], [], ['7', '8', '9']]
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getArrayItemEmptyAsync(final ServiceCallback<List<List<String>>> serviceCallback) {
        service.getArrayItemEmptyAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getArrayItemEmptyDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<List<List<String>>> getArrayItemEmptyDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<List<List<String>>>()
                .register(200, new TypeToken<List<List<String>>>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get an array of array of strings [['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']]
     *
     * @return the List&lt;List&lt;String&gt;&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public List<List<String>> getArrayValid() throws ServiceException {
        try {
            ServiceResponse<List<List<String>>> response = getArrayValidDelegate(service.getArrayValid(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<List<List<String>>> response = getArrayValidDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Get an array of array of strings [['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']]
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getArrayValidAsync(final ServiceCallback<List<List<String>>> serviceCallback) {
        service.getArrayValidAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getArrayValidDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<List<List<String>>> getArrayValidDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<List<List<String>>>()
                .register(200, new TypeToken<List<List<String>>>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Put An array of array of strings [['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']]
     *
     * @param arrayBody the List&lt;List&lt;String&gt;&gt; value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void putArrayValid(List<List<String>> arrayBody) throws ServiceException {
        if (arrayBody == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter arrayBody is required and cannot be null."));
        }
        Validator.validate(arrayBody);
        try {
            ServiceResponse<Void> response = putArrayValidDelegate(service.putArrayValid(arrayBody), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = putArrayValidDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Put An array of array of strings [['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']]
     *
     * @param arrayBody the List&lt;List&lt;String&gt;&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void putArrayValidAsync(List<List<String>> arrayBody, final ServiceCallback<Void> serviceCallback) {
        if (arrayBody == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter arrayBody is required and cannot be null.")));
        }
        Validator.validate(arrayBody, serviceCallback);
        service.putArrayValidAsync(arrayBody, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(putArrayValidDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> putArrayValidDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get an array of Dictionaries with value null
     *
     * @return the List&lt;Map&lt;String, String&gt;&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public List<Map<String, String>> getDictionaryNull() throws ServiceException {
        try {
            ServiceResponse<List<Map<String, String>>> response = getDictionaryNullDelegate(service.getDictionaryNull(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<List<Map<String, String>>> response = getDictionaryNullDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Get an array of Dictionaries with value null
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getDictionaryNullAsync(final ServiceCallback<List<Map<String, String>>> serviceCallback) {
        service.getDictionaryNullAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getDictionaryNullDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<List<Map<String, String>>> getDictionaryNullDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<List<Map<String, String>>>()
                .register(200, new TypeToken<List<Map<String, String>>>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get an array of Dictionaries of type &lt;string, string&gt; with value []
     *
     * @return the List&lt;Map&lt;String, String&gt;&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public List<Map<String, String>> getDictionaryEmpty() throws ServiceException {
        try {
            ServiceResponse<List<Map<String, String>>> response = getDictionaryEmptyDelegate(service.getDictionaryEmpty(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<List<Map<String, String>>> response = getDictionaryEmptyDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Get an array of Dictionaries of type &lt;string, string&gt; with value []
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getDictionaryEmptyAsync(final ServiceCallback<List<Map<String, String>>> serviceCallback) {
        service.getDictionaryEmptyAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getDictionaryEmptyDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<List<Map<String, String>>> getDictionaryEmptyDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<List<Map<String, String>>>()
                .register(200, new TypeToken<List<Map<String, String>>>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get an array of Dictionaries of type &lt;string, string&gt; with value [{'1': 'one', '2': 'two', '3': 'three'}, null, {'7': 'seven', '8': 'eight', '9': 'nine'}]
     *
     * @return the List&lt;Map&lt;String, String&gt;&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public List<Map<String, String>> getDictionaryItemNull() throws ServiceException {
        try {
            ServiceResponse<List<Map<String, String>>> response = getDictionaryItemNullDelegate(service.getDictionaryItemNull(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<List<Map<String, String>>> response = getDictionaryItemNullDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Get an array of Dictionaries of type &lt;string, string&gt; with value [{'1': 'one', '2': 'two', '3': 'three'}, null, {'7': 'seven', '8': 'eight', '9': 'nine'}]
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getDictionaryItemNullAsync(final ServiceCallback<List<Map<String, String>>> serviceCallback) {
        service.getDictionaryItemNullAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getDictionaryItemNullDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<List<Map<String, String>>> getDictionaryItemNullDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<List<Map<String, String>>>()
                .register(200, new TypeToken<List<Map<String, String>>>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get an array of Dictionaries of type &lt;string, string&gt; with value [{'1': 'one', '2': 'two', '3': 'three'}, {}, {'7': 'seven', '8': 'eight', '9': 'nine'}]
     *
     * @return the List&lt;Map&lt;String, String&gt;&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public List<Map<String, String>> getDictionaryItemEmpty() throws ServiceException {
        try {
            ServiceResponse<List<Map<String, String>>> response = getDictionaryItemEmptyDelegate(service.getDictionaryItemEmpty(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<List<Map<String, String>>> response = getDictionaryItemEmptyDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Get an array of Dictionaries of type &lt;string, string&gt; with value [{'1': 'one', '2': 'two', '3': 'three'}, {}, {'7': 'seven', '8': 'eight', '9': 'nine'}]
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getDictionaryItemEmptyAsync(final ServiceCallback<List<Map<String, String>>> serviceCallback) {
        service.getDictionaryItemEmptyAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getDictionaryItemEmptyDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<List<Map<String, String>>> getDictionaryItemEmptyDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<List<Map<String, String>>>()
                .register(200, new TypeToken<List<Map<String, String>>>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get an array of Dictionaries of type &lt;string, string&gt; with value [{'1': 'one', '2': 'two', '3': 'three'}, {'4': 'four', '5': 'five', '6': 'six'}, {'7': 'seven', '8': 'eight', '9': 'nine'}]
     *
     * @return the List&lt;Map&lt;String, String&gt;&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public List<Map<String, String>> getDictionaryValid() throws ServiceException {
        try {
            ServiceResponse<List<Map<String, String>>> response = getDictionaryValidDelegate(service.getDictionaryValid(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<List<Map<String, String>>> response = getDictionaryValidDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Get an array of Dictionaries of type &lt;string, string&gt; with value [{'1': 'one', '2': 'two', '3': 'three'}, {'4': 'four', '5': 'five', '6': 'six'}, {'7': 'seven', '8': 'eight', '9': 'nine'}]
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getDictionaryValidAsync(final ServiceCallback<List<Map<String, String>>> serviceCallback) {
        service.getDictionaryValidAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getDictionaryValidDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<List<Map<String, String>>> getDictionaryValidDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<List<Map<String, String>>>()
                .register(200, new TypeToken<List<Map<String, String>>>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get an array of Dictionaries of type &lt;string, string&gt; with value [{'1': 'one', '2': 'two', '3': 'three'}, {'4': 'four', '5': 'five', '6': 'six'}, {'7': 'seven', '8': 'eight', '9': 'nine'}]
     *
     * @param arrayBody the List&lt;Map&lt;String, String&gt;&gt; value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void putDictionaryValid(List<Map<String, String>> arrayBody) throws ServiceException {
        if (arrayBody == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter arrayBody is required and cannot be null."));
        }
        Validator.validate(arrayBody);
        try {
            ServiceResponse<Void> response = putDictionaryValidDelegate(service.putDictionaryValid(arrayBody), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = putDictionaryValidDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Get an array of Dictionaries of type &lt;string, string&gt; with value [{'1': 'one', '2': 'two', '3': 'three'}, {'4': 'four', '5': 'five', '6': 'six'}, {'7': 'seven', '8': 'eight', '9': 'nine'}]
     *
     * @param arrayBody the List&lt;Map&lt;String, String&gt;&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void putDictionaryValidAsync(List<Map<String, String>> arrayBody, final ServiceCallback<Void> serviceCallback) {
        if (arrayBody == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter arrayBody is required and cannot be null.")));
        }
        Validator.validate(arrayBody, serviceCallback);
        service.putDictionaryValidAsync(arrayBody, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(putDictionaryValidDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> putDictionaryValidDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

}
