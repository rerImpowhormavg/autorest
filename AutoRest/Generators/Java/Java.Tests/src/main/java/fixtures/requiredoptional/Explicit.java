/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.requiredoptional;

import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceException;
import com.microsoft.rest.ServiceResponseCallback;
import retrofit.client.Response;
import fixtures.requiredoptional.models.IntWrapper;
import fixtures.requiredoptional.models.IntOptionalWrapper;
import fixtures.requiredoptional.models.StringWrapper;
import fixtures.requiredoptional.models.StringOptionalWrapper;
import fixtures.requiredoptional.models.Product;
import fixtures.requiredoptional.models.ClassWrapper;
import fixtures.requiredoptional.models.ClassOptionalWrapper;
import java.util.List;
import fixtures.requiredoptional.models.ArrayWrapper;
import fixtures.requiredoptional.models.ArrayOptionalWrapper;
import fixtures.requiredoptional.models.Error;
import retrofit.http.POST;
import retrofit.http.Body;
import retrofit.http.Header;

/**
 * An instance of this class provides access to all the operations defined
 * in Explicit.
 */
public interface Explicit {
    /**
     * The interface defining all the services for Explicit to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ExplicitService {
        @POST("/reqopt/requied/integer/parameter")
        Response postRequiredIntegerParameter(@Body int bodyParameter) throws ServiceException;

        @POST("/reqopt/requied/integer/parameter")
        void postRequiredIntegerParameterAsync(@Body int bodyParameter, ServiceResponseCallback cb);

        @POST("/reqopt/optional/integer/parameter")
        Response postOptionalIntegerParameter(@Body Integer bodyParameter) throws ServiceException;

        @POST("/reqopt/optional/integer/parameter")
        void postOptionalIntegerParameterAsync(@Body Integer bodyParameter, ServiceResponseCallback cb);

        @POST("/reqopt/requied/integer/property")
        Response postRequiredIntegerProperty(@Body IntWrapper bodyParameter) throws ServiceException;

        @POST("/reqopt/requied/integer/property")
        void postRequiredIntegerPropertyAsync(@Body IntWrapper bodyParameter, ServiceResponseCallback cb);

        @POST("/reqopt/optional/integer/property")
        Response postOptionalIntegerProperty(@Body IntOptionalWrapper bodyParameter) throws ServiceException;

        @POST("/reqopt/optional/integer/property")
        void postOptionalIntegerPropertyAsync(@Body IntOptionalWrapper bodyParameter, ServiceResponseCallback cb);

        @POST("/reqopt/requied/integer/header")
        Response postRequiredIntegerHeader(@Header("headerParameter") int headerParameter) throws ServiceException;

        @POST("/reqopt/requied/integer/header")
        void postRequiredIntegerHeaderAsync(@Header("headerParameter") int headerParameter, ServiceResponseCallback cb);

        @POST("/reqopt/optional/integer/header")
        Response postOptionalIntegerHeader(@Header("headerParameter") Integer headerParameter) throws ServiceException;

        @POST("/reqopt/optional/integer/header")
        void postOptionalIntegerHeaderAsync(@Header("headerParameter") Integer headerParameter, ServiceResponseCallback cb);

        @POST("/reqopt/requied/string/parameter")
        Response postRequiredStringParameter(@Body String bodyParameter) throws ServiceException;

        @POST("/reqopt/requied/string/parameter")
        void postRequiredStringParameterAsync(@Body String bodyParameter, ServiceResponseCallback cb);

        @POST("/reqopt/optional/string/parameter")
        Response postOptionalStringParameter(@Body String bodyParameter) throws ServiceException;

        @POST("/reqopt/optional/string/parameter")
        void postOptionalStringParameterAsync(@Body String bodyParameter, ServiceResponseCallback cb);

        @POST("/reqopt/requied/string/property")
        Response postRequiredStringProperty(@Body StringWrapper bodyParameter) throws ServiceException;

        @POST("/reqopt/requied/string/property")
        void postRequiredStringPropertyAsync(@Body StringWrapper bodyParameter, ServiceResponseCallback cb);

        @POST("/reqopt/optional/string/property")
        Response postOptionalStringProperty(@Body StringOptionalWrapper bodyParameter) throws ServiceException;

        @POST("/reqopt/optional/string/property")
        void postOptionalStringPropertyAsync(@Body StringOptionalWrapper bodyParameter, ServiceResponseCallback cb);

        @POST("/reqopt/requied/string/header")
        Response postRequiredStringHeader(@Header("headerParameter") String headerParameter) throws ServiceException;

        @POST("/reqopt/requied/string/header")
        void postRequiredStringHeaderAsync(@Header("headerParameter") String headerParameter, ServiceResponseCallback cb);

        @POST("/reqopt/optional/string/header")
        Response postOptionalStringHeader(@Header("bodyParameter") String bodyParameter) throws ServiceException;

        @POST("/reqopt/optional/string/header")
        void postOptionalStringHeaderAsync(@Header("bodyParameter") String bodyParameter, ServiceResponseCallback cb);

        @POST("/reqopt/requied/class/parameter")
        Response postRequiredClassParameter(@Body Product bodyParameter) throws ServiceException;

        @POST("/reqopt/requied/class/parameter")
        void postRequiredClassParameterAsync(@Body Product bodyParameter, ServiceResponseCallback cb);

        @POST("/reqopt/optional/class/parameter")
        Response postOptionalClassParameter(@Body Product bodyParameter) throws ServiceException;

        @POST("/reqopt/optional/class/parameter")
        void postOptionalClassParameterAsync(@Body Product bodyParameter, ServiceResponseCallback cb);

        @POST("/reqopt/requied/class/property")
        Response postRequiredClassProperty(@Body ClassWrapper bodyParameter) throws ServiceException;

        @POST("/reqopt/requied/class/property")
        void postRequiredClassPropertyAsync(@Body ClassWrapper bodyParameter, ServiceResponseCallback cb);

        @POST("/reqopt/optional/class/property")
        Response postOptionalClassProperty(@Body ClassOptionalWrapper bodyParameter) throws ServiceException;

        @POST("/reqopt/optional/class/property")
        void postOptionalClassPropertyAsync(@Body ClassOptionalWrapper bodyParameter, ServiceResponseCallback cb);

        @POST("/reqopt/requied/array/parameter")
        Response postRequiredArrayParameter(@Body List<String> bodyParameter) throws ServiceException;

        @POST("/reqopt/requied/array/parameter")
        void postRequiredArrayParameterAsync(@Body List<String> bodyParameter, ServiceResponseCallback cb);

        @POST("/reqopt/optional/array/parameter")
        Response postOptionalArrayParameter(@Body List<String> bodyParameter) throws ServiceException;

        @POST("/reqopt/optional/array/parameter")
        void postOptionalArrayParameterAsync(@Body List<String> bodyParameter, ServiceResponseCallback cb);

        @POST("/reqopt/requied/array/property")
        Response postRequiredArrayProperty(@Body ArrayWrapper bodyParameter) throws ServiceException;

        @POST("/reqopt/requied/array/property")
        void postRequiredArrayPropertyAsync(@Body ArrayWrapper bodyParameter, ServiceResponseCallback cb);

        @POST("/reqopt/optional/array/property")
        Response postOptionalArrayProperty(@Body ArrayOptionalWrapper bodyParameter) throws ServiceException;

        @POST("/reqopt/optional/array/property")
        void postOptionalArrayPropertyAsync(@Body ArrayOptionalWrapper bodyParameter, ServiceResponseCallback cb);

        @POST("/reqopt/requied/array/header")
        Response postRequiredArrayHeader(@Header("headerParameter") String headerParameter) throws ServiceException;

        @POST("/reqopt/requied/array/header")
        void postRequiredArrayHeaderAsync(@Header("headerParameter") String headerParameter, ServiceResponseCallback cb);

        @POST("/reqopt/optional/array/header")
        Response postOptionalArrayHeader(@Header("headerParameter") String headerParameter) throws ServiceException;

        @POST("/reqopt/optional/array/header")
        void postOptionalArrayHeaderAsync(@Header("headerParameter") String headerParameter, ServiceResponseCallback cb);

    }
    /**
     * Test explicitly required integer. Please put null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the int value
     * @return the Error object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Error postRequiredIntegerParameter(int bodyParameter) throws ServiceException;

    /**
     * Test explicitly required integer. Please put null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the int value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void postRequiredIntegerParameterAsync(int bodyParameter, final ServiceCallback<Error> serviceCallback);

    /**
     * Test explicitly optional integer. Please put null.
     *
     * @param bodyParameter the Integer value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void postOptionalIntegerParameter(Integer bodyParameter) throws ServiceException;

    /**
     * Test explicitly optional integer. Please put null.
     *
     * @param bodyParameter the Integer value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void postOptionalIntegerParameterAsync(Integer bodyParameter, final ServiceCallback<Void> serviceCallback);

    /**
     * Test explicitly required integer. Please put a valid int-wrapper with 'value' = null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the IntWrapper value
     * @return the Error object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Error postRequiredIntegerProperty(IntWrapper bodyParameter) throws ServiceException;

    /**
     * Test explicitly required integer. Please put a valid int-wrapper with 'value' = null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the IntWrapper value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void postRequiredIntegerPropertyAsync(IntWrapper bodyParameter, final ServiceCallback<Error> serviceCallback);

    /**
     * Test explicitly optional integer. Please put a valid int-wrapper with 'value' = null.
     *
     * @param bodyParameter the IntOptionalWrapper value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void postOptionalIntegerProperty(IntOptionalWrapper bodyParameter) throws ServiceException;

    /**
     * Test explicitly optional integer. Please put a valid int-wrapper with 'value' = null.
     *
     * @param bodyParameter the IntOptionalWrapper value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void postOptionalIntegerPropertyAsync(IntOptionalWrapper bodyParameter, final ServiceCallback<Void> serviceCallback);

    /**
     * Test explicitly required integer. Please put a header 'headerParameter' =&gt; null and the client library should throw before the request is sent.
     *
     * @param headerParameter the int value
     * @return the Error object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Error postRequiredIntegerHeader(int headerParameter) throws ServiceException;

    /**
     * Test explicitly required integer. Please put a header 'headerParameter' =&gt; null and the client library should throw before the request is sent.
     *
     * @param headerParameter the int value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void postRequiredIntegerHeaderAsync(int headerParameter, final ServiceCallback<Error> serviceCallback);

    /**
     * Test explicitly optional integer. Please put a header 'headerParameter' =&gt; null.
     *
     * @param headerParameter the Integer value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void postOptionalIntegerHeader(Integer headerParameter) throws ServiceException;

    /**
     * Test explicitly optional integer. Please put a header 'headerParameter' =&gt; null.
     *
     * @param headerParameter the Integer value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void postOptionalIntegerHeaderAsync(Integer headerParameter, final ServiceCallback<Void> serviceCallback);

    /**
     * Test explicitly required string. Please put null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the String value
     * @return the Error object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Error postRequiredStringParameter(String bodyParameter) throws ServiceException;

    /**
     * Test explicitly required string. Please put null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void postRequiredStringParameterAsync(String bodyParameter, final ServiceCallback<Error> serviceCallback);

    /**
     * Test explicitly optional string. Please put null.
     *
     * @param bodyParameter the String value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void postOptionalStringParameter(String bodyParameter) throws ServiceException;

    /**
     * Test explicitly optional string. Please put null.
     *
     * @param bodyParameter the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void postOptionalStringParameterAsync(String bodyParameter, final ServiceCallback<Void> serviceCallback);

    /**
     * Test explicitly required string. Please put a valid string-wrapper with 'value' = null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the StringWrapper value
     * @return the Error object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Error postRequiredStringProperty(StringWrapper bodyParameter) throws ServiceException;

    /**
     * Test explicitly required string. Please put a valid string-wrapper with 'value' = null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the StringWrapper value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void postRequiredStringPropertyAsync(StringWrapper bodyParameter, final ServiceCallback<Error> serviceCallback);

    /**
     * Test explicitly optional integer. Please put a valid string-wrapper with 'value' = null.
     *
     * @param bodyParameter the StringOptionalWrapper value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void postOptionalStringProperty(StringOptionalWrapper bodyParameter) throws ServiceException;

    /**
     * Test explicitly optional integer. Please put a valid string-wrapper with 'value' = null.
     *
     * @param bodyParameter the StringOptionalWrapper value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void postOptionalStringPropertyAsync(StringOptionalWrapper bodyParameter, final ServiceCallback<Void> serviceCallback);

    /**
     * Test explicitly required string. Please put a header 'headerParameter' =&gt; null and the client library should throw before the request is sent.
     *
     * @param headerParameter the String value
     * @return the Error object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Error postRequiredStringHeader(String headerParameter) throws ServiceException;

    /**
     * Test explicitly required string. Please put a header 'headerParameter' =&gt; null and the client library should throw before the request is sent.
     *
     * @param headerParameter the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void postRequiredStringHeaderAsync(String headerParameter, final ServiceCallback<Error> serviceCallback);

    /**
     * Test explicitly optional string. Please put a header 'headerParameter' =&gt; null.
     *
     * @param bodyParameter the String value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void postOptionalStringHeader(String bodyParameter) throws ServiceException;

    /**
     * Test explicitly optional string. Please put a header 'headerParameter' =&gt; null.
     *
     * @param bodyParameter the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void postOptionalStringHeaderAsync(String bodyParameter, final ServiceCallback<Void> serviceCallback);

    /**
     * Test explicitly required complex object. Please put null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the Product value
     * @return the Error object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Error postRequiredClassParameter(Product bodyParameter) throws ServiceException;

    /**
     * Test explicitly required complex object. Please put null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the Product value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void postRequiredClassParameterAsync(Product bodyParameter, final ServiceCallback<Error> serviceCallback);

    /**
     * Test explicitly optional complex object. Please put null.
     *
     * @param bodyParameter the Product value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void postOptionalClassParameter(Product bodyParameter) throws ServiceException;

    /**
     * Test explicitly optional complex object. Please put null.
     *
     * @param bodyParameter the Product value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void postOptionalClassParameterAsync(Product bodyParameter, final ServiceCallback<Void> serviceCallback);

    /**
     * Test explicitly required complex object. Please put a valid class-wrapper with 'value' = null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the ClassWrapper value
     * @return the Error object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Error postRequiredClassProperty(ClassWrapper bodyParameter) throws ServiceException;

    /**
     * Test explicitly required complex object. Please put a valid class-wrapper with 'value' = null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the ClassWrapper value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void postRequiredClassPropertyAsync(ClassWrapper bodyParameter, final ServiceCallback<Error> serviceCallback);

    /**
     * Test explicitly optional complex object. Please put a valid class-wrapper with 'value' = null.
     *
     * @param bodyParameter the ClassOptionalWrapper value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void postOptionalClassProperty(ClassOptionalWrapper bodyParameter) throws ServiceException;

    /**
     * Test explicitly optional complex object. Please put a valid class-wrapper with 'value' = null.
     *
     * @param bodyParameter the ClassOptionalWrapper value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void postOptionalClassPropertyAsync(ClassOptionalWrapper bodyParameter, final ServiceCallback<Void> serviceCallback);

    /**
     * Test explicitly required array. Please put null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the List&lt;String&gt; value
     * @return the Error object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Error postRequiredArrayParameter(List<String> bodyParameter) throws ServiceException;

    /**
     * Test explicitly required array. Please put null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the List&lt;String&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void postRequiredArrayParameterAsync(List<String> bodyParameter, final ServiceCallback<Error> serviceCallback);

    /**
     * Test explicitly optional array. Please put null.
     *
     * @param bodyParameter the List&lt;String&gt; value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void postOptionalArrayParameter(List<String> bodyParameter) throws ServiceException;

    /**
     * Test explicitly optional array. Please put null.
     *
     * @param bodyParameter the List&lt;String&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void postOptionalArrayParameterAsync(List<String> bodyParameter, final ServiceCallback<Void> serviceCallback);

    /**
     * Test explicitly required array. Please put a valid array-wrapper with 'value' = null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the ArrayWrapper value
     * @return the Error object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Error postRequiredArrayProperty(ArrayWrapper bodyParameter) throws ServiceException;

    /**
     * Test explicitly required array. Please put a valid array-wrapper with 'value' = null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the ArrayWrapper value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void postRequiredArrayPropertyAsync(ArrayWrapper bodyParameter, final ServiceCallback<Error> serviceCallback);

    /**
     * Test explicitly optional array. Please put a valid array-wrapper with 'value' = null.
     *
     * @param bodyParameter the ArrayOptionalWrapper value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void postOptionalArrayProperty(ArrayOptionalWrapper bodyParameter) throws ServiceException;

    /**
     * Test explicitly optional array. Please put a valid array-wrapper with 'value' = null.
     *
     * @param bodyParameter the ArrayOptionalWrapper value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void postOptionalArrayPropertyAsync(ArrayOptionalWrapper bodyParameter, final ServiceCallback<Void> serviceCallback);

    /**
     * Test explicitly required array. Please put a header 'headerParameter' =&gt; null and the client library should throw before the request is sent.
     *
     * @param headerParameter the List&lt;String&gt; value
     * @return the Error object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Error postRequiredArrayHeader(List<String> headerParameter) throws ServiceException;

    /**
     * Test explicitly required array. Please put a header 'headerParameter' =&gt; null and the client library should throw before the request is sent.
     *
     * @param headerParameter the List&lt;String&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void postRequiredArrayHeaderAsync(List<String> headerParameter, final ServiceCallback<Error> serviceCallback);

    /**
     * Test explicitly optional integer. Please put a header 'headerParameter' =&gt; null.
     *
     * @param headerParameter the List&lt;String&gt; value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void postOptionalArrayHeader(List<String> headerParameter) throws ServiceException;

    /**
     * Test explicitly optional integer. Please put a header 'headerParameter' =&gt; null.
     *
     * @param headerParameter the List&lt;String&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void postOptionalArrayHeaderAsync(List<String> headerParameter, final ServiceCallback<Void> serviceCallback);

}
