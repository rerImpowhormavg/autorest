// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.


package fixtures.bodyfile;

import com.google.gson.reflect.TypeToken;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceException;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseBuilder;
import com.microsoft.rest.ServiceResponseCallback;
import retrofit.RestAdapter;
import retrofit.RetrofitError;
import retrofit.client.Response;
import java.io.InputStream;
import fixtures.bodyfile.models.Error;

public class FilesImpl implements Files {
    private FilesService service;

    public FilesImpl(RestAdapter restAdapter) {
        service = restAdapter.create(FilesService.class);
    }

    public InputStream getFile() throws ServiceException {
        try {
            ServiceResponse<InputStream> response = getFileDelegate(service.getFile(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<InputStream> response = getFileDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    public void getFileAsync(final ServiceCallback<InputStream> serviceCallback) {
        service.getFileAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getFileDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<InputStream> getFileDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<InputStream>()
                .register(200, new TypeToken<InputStream>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public InputStream getEmptyFile() throws ServiceException {
        try {
            ServiceResponse<InputStream> response = getEmptyFileDelegate(service.getEmptyFile(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<InputStream> response = getEmptyFileDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    public void getEmptyFileAsync(final ServiceCallback<InputStream> serviceCallback) {
        service.getEmptyFileAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getEmptyFileDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<InputStream> getEmptyFileDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<InputStream>()
                .register(200, new TypeToken<InputStream>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

}
