// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.


package fixtures.http;

import com.google.gson.reflect.TypeToken;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceException;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseBuilder;
import com.microsoft.rest.ServiceResponseCallback;
import retrofit.client.Response;
import retrofit.RestAdapter;
import retrofit.RetrofitError;
import retrofit.http.GET;

public class HttpFailure {
    private HttpFailureService service;

    public HttpFailure(RestAdapter restAdapter) {
        service = restAdapter.create(HttpFailureService.class);
    }

    public interface HttpFailureService {
        @GET("/http/failure/emptybody/error")
        Response getEmptyError() throws ServiceException;

        @GET("/http/failure/emptybody/error")
        void getEmptyErrorAsync(ServiceResponseCallback cb);

    }
    public Boolean getEmptyError() throws ServiceException {
        try {
            return getEmptyErrorDelegate(service.getEmptyError(), null).getBody();
        } catch (RetrofitError error) {
            return getEmptyErrorDelegate(error.getResponse(), error).getBody();
        }
    }

    public void getEmptyErrorAsync(final ServiceCallback<Boolean> serviceCallback) {
        service.getEmptyErrorAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getEmptyErrorDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Boolean> getEmptyErrorDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Boolean>()
                .register(200, new TypeToken<Boolean>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

}
