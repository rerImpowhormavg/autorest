/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.bodystring;

import com.google.gson.reflect.TypeToken;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceException;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseBuilder;
import com.microsoft.rest.ServiceResponseCallback;
import retrofit.RestAdapter;
import retrofit.RetrofitError;
import retrofit.client.Response;
import fixtures.bodystring.models.Colors;
import fixtures.bodystring.models.Error;

public class EnumOperationsImpl implements EnumOperations {
    private EnumService service;
    AutoRestSwaggerBATService client;

    public EnumOperationsImpl(RestAdapter restAdapter, AutoRestSwaggerBATService client) {
        this.service = restAdapter.create(EnumService.class);
        this.client = client;
    }

    /**
     * Get enum value 'red color' from enumeration of 'red color', 'green-color', 'blue_color'.
     *
     * @return the Colors object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public Colors getNotExpandable() throws ServiceException {
        try {
            ServiceResponse<Colors> response = getNotExpandableDelegate(service.getNotExpandable(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Colors> response = getNotExpandableDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Get enum value 'red color' from enumeration of 'red color', 'green-color', 'blue_color'.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getNotExpandableAsync(final ServiceCallback<Colors> serviceCallback) {
        service.getNotExpandableAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getNotExpandableDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Colors> getNotExpandableDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Colors>()
                .register(200, new TypeToken<Colors>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Sends value 'red color' from enumeration of 'red color', 'green-color', 'blue_color'
     *
     * @param stringBody Possible values for this parameter include: 'red color', 'green-color', 'blue_color'
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void putNotExpandable(Colors stringBody) throws ServiceException {
        if (stringBody == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter stringBody is required and cannot be null."));
        }
        try {
            ServiceResponse<Void> response = putNotExpandableDelegate(service.putNotExpandable(stringBody), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = putNotExpandableDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Sends value 'red color' from enumeration of 'red color', 'green-color', 'blue_color'
     *
     * @param stringBody Possible values for this parameter include: 'red color', 'green-color', 'blue_color'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void putNotExpandableAsync(Colors stringBody, final ServiceCallback<Void> serviceCallback) {
        if (stringBody == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter stringBody is required and cannot be null.")));
        }
        service.putNotExpandableAsync(stringBody, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(putNotExpandableDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> putNotExpandableDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

}
