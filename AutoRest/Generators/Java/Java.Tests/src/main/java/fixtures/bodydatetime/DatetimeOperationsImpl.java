/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.bodydatetime;

import com.google.common.reflect.TypeToken;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceException;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseBuilder;
import com.microsoft.rest.ServiceResponseCallback;
import com.microsoft.rest.ServiceResponseEmptyCallback;
import com.squareup.okhttp.ResponseBody;
import retrofit.Retrofit;
import retrofit.Call;
import retrofit.Response;
import org.joda.time.DateTime;
import fixtures.bodydatetime.models.Error;

public class DatetimeOperationsImpl implements DatetimeOperations {
    private DatetimeService service;
    AutoRestDateTimeTestService client;

    public DatetimeOperationsImpl(Retrofit retrofit, AutoRestDateTimeTestService client) {
        this.service = retrofit.create(DatetimeService.class);
        this.client = client;
    }

    /**
     * Get null datetime value
     *
     * @return the DateTime object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public DateTime getNull() throws ServiceException {
        try {
            Call<ResponseBody> call = service.getNull();
            ServiceResponse<DateTime> response = getNullDelegate(call.execute(), null);
            return response.getBody();
        } catch (ServiceException ex) {
            throw ex;
        } catch (Exception ex) {
            throw new ServiceException(ex);
        }
    }

    /**
     * Get null datetime value
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public Call<ResponseBody> getNullAsync(final ServiceCallback<DateTime> serviceCallback) {
        Call<ResponseBody> call = service.getNull();
        call.enqueue(new ServiceResponseCallback<DateTime>(serviceCallback) {
            @Override
            public void onResponse(Response<ResponseBody> response, Retrofit retrofit) {
                try {
                    serviceCallback.success(getNullDelegate(response, retrofit));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<DateTime> getNullDelegate(Response<ResponseBody> response, Retrofit retrofit) throws ServiceException {
        return new ServiceResponseBuilder<DateTime>()
                .register(200, new TypeToken<DateTime>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, retrofit);
    }

    /**
     * Get invalid datetime value
     *
     * @return the DateTime object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public DateTime getInvalid() throws ServiceException {
        try {
            Call<ResponseBody> call = service.getInvalid();
            ServiceResponse<DateTime> response = getInvalidDelegate(call.execute(), null);
            return response.getBody();
        } catch (ServiceException ex) {
            throw ex;
        } catch (Exception ex) {
            throw new ServiceException(ex);
        }
    }

    /**
     * Get invalid datetime value
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public Call<ResponseBody> getInvalidAsync(final ServiceCallback<DateTime> serviceCallback) {
        Call<ResponseBody> call = service.getInvalid();
        call.enqueue(new ServiceResponseCallback<DateTime>(serviceCallback) {
            @Override
            public void onResponse(Response<ResponseBody> response, Retrofit retrofit) {
                try {
                    serviceCallback.success(getInvalidDelegate(response, retrofit));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<DateTime> getInvalidDelegate(Response<ResponseBody> response, Retrofit retrofit) throws ServiceException {
        return new ServiceResponseBuilder<DateTime>()
                .register(200, new TypeToken<DateTime>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, retrofit);
    }

    /**
     * Get overflow datetime value
     *
     * @return the DateTime object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public DateTime getOverflow() throws ServiceException {
        try {
            Call<ResponseBody> call = service.getOverflow();
            ServiceResponse<DateTime> response = getOverflowDelegate(call.execute(), null);
            return response.getBody();
        } catch (ServiceException ex) {
            throw ex;
        } catch (Exception ex) {
            throw new ServiceException(ex);
        }
    }

    /**
     * Get overflow datetime value
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public Call<ResponseBody> getOverflowAsync(final ServiceCallback<DateTime> serviceCallback) {
        Call<ResponseBody> call = service.getOverflow();
        call.enqueue(new ServiceResponseCallback<DateTime>(serviceCallback) {
            @Override
            public void onResponse(Response<ResponseBody> response, Retrofit retrofit) {
                try {
                    serviceCallback.success(getOverflowDelegate(response, retrofit));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<DateTime> getOverflowDelegate(Response<ResponseBody> response, Retrofit retrofit) throws ServiceException {
        return new ServiceResponseBuilder<DateTime>()
                .register(200, new TypeToken<DateTime>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, retrofit);
    }

    /**
     * Get underflow datetime value
     *
     * @return the DateTime object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public DateTime getUnderflow() throws ServiceException {
        try {
            Call<ResponseBody> call = service.getUnderflow();
            ServiceResponse<DateTime> response = getUnderflowDelegate(call.execute(), null);
            return response.getBody();
        } catch (ServiceException ex) {
            throw ex;
        } catch (Exception ex) {
            throw new ServiceException(ex);
        }
    }

    /**
     * Get underflow datetime value
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public Call<ResponseBody> getUnderflowAsync(final ServiceCallback<DateTime> serviceCallback) {
        Call<ResponseBody> call = service.getUnderflow();
        call.enqueue(new ServiceResponseCallback<DateTime>(serviceCallback) {
            @Override
            public void onResponse(Response<ResponseBody> response, Retrofit retrofit) {
                try {
                    serviceCallback.success(getUnderflowDelegate(response, retrofit));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<DateTime> getUnderflowDelegate(Response<ResponseBody> response, Retrofit retrofit) throws ServiceException {
        return new ServiceResponseBuilder<DateTime>()
                .register(200, new TypeToken<DateTime>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, retrofit);
    }

    /**
     * Put max datetime value 9999-12-31T23:59:59.9999999Z
     *
     * @param datetimeBody the DateTime value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void putUtcMaxDateTime(DateTime datetimeBody) throws ServiceException {
        if (datetimeBody == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter datetimeBody is required and cannot be null."));
        }
        try {
            Call<ResponseBody> call = service.putUtcMaxDateTime(datetimeBody);
            ServiceResponse<Void> response = putUtcMaxDateTimeDelegate(call.execute(), null);
            response.getBody();
        } catch (ServiceException ex) {
            throw ex;
        } catch (Exception ex) {
            throw new ServiceException(ex);
        }
    }

    /**
     * Put max datetime value 9999-12-31T23:59:59.9999999Z
     *
     * @param datetimeBody the DateTime value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public Call<ResponseBody> putUtcMaxDateTimeAsync(DateTime datetimeBody, final ServiceCallback<Void> serviceCallback) {
        if (datetimeBody == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter datetimeBody is required and cannot be null.")));
        }
        Call<ResponseBody> call = service.putUtcMaxDateTime(datetimeBody);
        call.enqueue(new ServiceResponseCallback<Void>(serviceCallback) {
            @Override
            public void onResponse(Response<ResponseBody> response, Retrofit retrofit) {
                try {
                    serviceCallback.success(putUtcMaxDateTimeDelegate(response, retrofit));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<Void> putUtcMaxDateTimeDelegate(Response<ResponseBody> response, Retrofit retrofit) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, retrofit);
    }

    /**
     * Get max datetime value 9999-12-31t23:59:59.9999999z
     *
     * @return the DateTime object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public DateTime getUtcLowercaseMaxDateTime() throws ServiceException {
        try {
            Call<ResponseBody> call = service.getUtcLowercaseMaxDateTime();
            ServiceResponse<DateTime> response = getUtcLowercaseMaxDateTimeDelegate(call.execute(), null);
            return response.getBody();
        } catch (ServiceException ex) {
            throw ex;
        } catch (Exception ex) {
            throw new ServiceException(ex);
        }
    }

    /**
     * Get max datetime value 9999-12-31t23:59:59.9999999z
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public Call<ResponseBody> getUtcLowercaseMaxDateTimeAsync(final ServiceCallback<DateTime> serviceCallback) {
        Call<ResponseBody> call = service.getUtcLowercaseMaxDateTime();
        call.enqueue(new ServiceResponseCallback<DateTime>(serviceCallback) {
            @Override
            public void onResponse(Response<ResponseBody> response, Retrofit retrofit) {
                try {
                    serviceCallback.success(getUtcLowercaseMaxDateTimeDelegate(response, retrofit));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<DateTime> getUtcLowercaseMaxDateTimeDelegate(Response<ResponseBody> response, Retrofit retrofit) throws ServiceException {
        return new ServiceResponseBuilder<DateTime>()
                .register(200, new TypeToken<DateTime>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, retrofit);
    }

    /**
     * Get max datetime value 9999-12-31T23:59:59.9999999Z
     *
     * @return the DateTime object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public DateTime getUtcUppercaseMaxDateTime() throws ServiceException {
        try {
            Call<ResponseBody> call = service.getUtcUppercaseMaxDateTime();
            ServiceResponse<DateTime> response = getUtcUppercaseMaxDateTimeDelegate(call.execute(), null);
            return response.getBody();
        } catch (ServiceException ex) {
            throw ex;
        } catch (Exception ex) {
            throw new ServiceException(ex);
        }
    }

    /**
     * Get max datetime value 9999-12-31T23:59:59.9999999Z
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public Call<ResponseBody> getUtcUppercaseMaxDateTimeAsync(final ServiceCallback<DateTime> serviceCallback) {
        Call<ResponseBody> call = service.getUtcUppercaseMaxDateTime();
        call.enqueue(new ServiceResponseCallback<DateTime>(serviceCallback) {
            @Override
            public void onResponse(Response<ResponseBody> response, Retrofit retrofit) {
                try {
                    serviceCallback.success(getUtcUppercaseMaxDateTimeDelegate(response, retrofit));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<DateTime> getUtcUppercaseMaxDateTimeDelegate(Response<ResponseBody> response, Retrofit retrofit) throws ServiceException {
        return new ServiceResponseBuilder<DateTime>()
                .register(200, new TypeToken<DateTime>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, retrofit);
    }

    /**
     * Put max datetime value with positive numoffset 9999-12-31t23:59:59.9999999+14:00
     *
     * @param datetimeBody the DateTime value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void putLocalPositiveOffsetMaxDateTime(DateTime datetimeBody) throws ServiceException {
        if (datetimeBody == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter datetimeBody is required and cannot be null."));
        }
        try {
            Call<ResponseBody> call = service.putLocalPositiveOffsetMaxDateTime(datetimeBody);
            ServiceResponse<Void> response = putLocalPositiveOffsetMaxDateTimeDelegate(call.execute(), null);
            response.getBody();
        } catch (ServiceException ex) {
            throw ex;
        } catch (Exception ex) {
            throw new ServiceException(ex);
        }
    }

    /**
     * Put max datetime value with positive numoffset 9999-12-31t23:59:59.9999999+14:00
     *
     * @param datetimeBody the DateTime value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public Call<ResponseBody> putLocalPositiveOffsetMaxDateTimeAsync(DateTime datetimeBody, final ServiceCallback<Void> serviceCallback) {
        if (datetimeBody == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter datetimeBody is required and cannot be null.")));
        }
        Call<ResponseBody> call = service.putLocalPositiveOffsetMaxDateTime(datetimeBody);
        call.enqueue(new ServiceResponseCallback<Void>(serviceCallback) {
            @Override
            public void onResponse(Response<ResponseBody> response, Retrofit retrofit) {
                try {
                    serviceCallback.success(putLocalPositiveOffsetMaxDateTimeDelegate(response, retrofit));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<Void> putLocalPositiveOffsetMaxDateTimeDelegate(Response<ResponseBody> response, Retrofit retrofit) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, retrofit);
    }

    /**
     * Get max datetime value with positive num offset 9999-12-31t23:59:59.9999999+14:00
     *
     * @return the DateTime object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public DateTime getLocalPositiveOffsetLowercaseMaxDateTime() throws ServiceException {
        try {
            Call<ResponseBody> call = service.getLocalPositiveOffsetLowercaseMaxDateTime();
            ServiceResponse<DateTime> response = getLocalPositiveOffsetLowercaseMaxDateTimeDelegate(call.execute(), null);
            return response.getBody();
        } catch (ServiceException ex) {
            throw ex;
        } catch (Exception ex) {
            throw new ServiceException(ex);
        }
    }

    /**
     * Get max datetime value with positive num offset 9999-12-31t23:59:59.9999999+14:00
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public Call<ResponseBody> getLocalPositiveOffsetLowercaseMaxDateTimeAsync(final ServiceCallback<DateTime> serviceCallback) {
        Call<ResponseBody> call = service.getLocalPositiveOffsetLowercaseMaxDateTime();
        call.enqueue(new ServiceResponseCallback<DateTime>(serviceCallback) {
            @Override
            public void onResponse(Response<ResponseBody> response, Retrofit retrofit) {
                try {
                    serviceCallback.success(getLocalPositiveOffsetLowercaseMaxDateTimeDelegate(response, retrofit));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<DateTime> getLocalPositiveOffsetLowercaseMaxDateTimeDelegate(Response<ResponseBody> response, Retrofit retrofit) throws ServiceException {
        return new ServiceResponseBuilder<DateTime>()
                .register(200, new TypeToken<DateTime>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, retrofit);
    }

    /**
     * Get max datetime value with positive num offset 9999-12-31T23:59:59.9999999+14:00
     *
     * @return the DateTime object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public DateTime getLocalPositiveOffsetUppercaseMaxDateTime() throws ServiceException {
        try {
            Call<ResponseBody> call = service.getLocalPositiveOffsetUppercaseMaxDateTime();
            ServiceResponse<DateTime> response = getLocalPositiveOffsetUppercaseMaxDateTimeDelegate(call.execute(), null);
            return response.getBody();
        } catch (ServiceException ex) {
            throw ex;
        } catch (Exception ex) {
            throw new ServiceException(ex);
        }
    }

    /**
     * Get max datetime value with positive num offset 9999-12-31T23:59:59.9999999+14:00
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public Call<ResponseBody> getLocalPositiveOffsetUppercaseMaxDateTimeAsync(final ServiceCallback<DateTime> serviceCallback) {
        Call<ResponseBody> call = service.getLocalPositiveOffsetUppercaseMaxDateTime();
        call.enqueue(new ServiceResponseCallback<DateTime>(serviceCallback) {
            @Override
            public void onResponse(Response<ResponseBody> response, Retrofit retrofit) {
                try {
                    serviceCallback.success(getLocalPositiveOffsetUppercaseMaxDateTimeDelegate(response, retrofit));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<DateTime> getLocalPositiveOffsetUppercaseMaxDateTimeDelegate(Response<ResponseBody> response, Retrofit retrofit) throws ServiceException {
        return new ServiceResponseBuilder<DateTime>()
                .register(200, new TypeToken<DateTime>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, retrofit);
    }

    /**
     * Put max datetime value with positive numoffset 9999-12-31t23:59:59.9999999-14:00
     *
     * @param datetimeBody the DateTime value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void putLocalNegativeOffsetMaxDateTime(DateTime datetimeBody) throws ServiceException {
        if (datetimeBody == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter datetimeBody is required and cannot be null."));
        }
        try {
            Call<ResponseBody> call = service.putLocalNegativeOffsetMaxDateTime(datetimeBody);
            ServiceResponse<Void> response = putLocalNegativeOffsetMaxDateTimeDelegate(call.execute(), null);
            response.getBody();
        } catch (ServiceException ex) {
            throw ex;
        } catch (Exception ex) {
            throw new ServiceException(ex);
        }
    }

    /**
     * Put max datetime value with positive numoffset 9999-12-31t23:59:59.9999999-14:00
     *
     * @param datetimeBody the DateTime value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public Call<ResponseBody> putLocalNegativeOffsetMaxDateTimeAsync(DateTime datetimeBody, final ServiceCallback<Void> serviceCallback) {
        if (datetimeBody == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter datetimeBody is required and cannot be null.")));
        }
        Call<ResponseBody> call = service.putLocalNegativeOffsetMaxDateTime(datetimeBody);
        call.enqueue(new ServiceResponseCallback<Void>(serviceCallback) {
            @Override
            public void onResponse(Response<ResponseBody> response, Retrofit retrofit) {
                try {
                    serviceCallback.success(putLocalNegativeOffsetMaxDateTimeDelegate(response, retrofit));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<Void> putLocalNegativeOffsetMaxDateTimeDelegate(Response<ResponseBody> response, Retrofit retrofit) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, retrofit);
    }

    /**
     * Get max datetime value with positive num offset 9999-12-31T23:59:59.9999999-14:00
     *
     * @return the DateTime object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public DateTime getLocalNegativeOffsetUppercaseMaxDateTime() throws ServiceException {
        try {
            Call<ResponseBody> call = service.getLocalNegativeOffsetUppercaseMaxDateTime();
            ServiceResponse<DateTime> response = getLocalNegativeOffsetUppercaseMaxDateTimeDelegate(call.execute(), null);
            return response.getBody();
        } catch (ServiceException ex) {
            throw ex;
        } catch (Exception ex) {
            throw new ServiceException(ex);
        }
    }

    /**
     * Get max datetime value with positive num offset 9999-12-31T23:59:59.9999999-14:00
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public Call<ResponseBody> getLocalNegativeOffsetUppercaseMaxDateTimeAsync(final ServiceCallback<DateTime> serviceCallback) {
        Call<ResponseBody> call = service.getLocalNegativeOffsetUppercaseMaxDateTime();
        call.enqueue(new ServiceResponseCallback<DateTime>(serviceCallback) {
            @Override
            public void onResponse(Response<ResponseBody> response, Retrofit retrofit) {
                try {
                    serviceCallback.success(getLocalNegativeOffsetUppercaseMaxDateTimeDelegate(response, retrofit));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<DateTime> getLocalNegativeOffsetUppercaseMaxDateTimeDelegate(Response<ResponseBody> response, Retrofit retrofit) throws ServiceException {
        return new ServiceResponseBuilder<DateTime>()
                .register(200, new TypeToken<DateTime>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, retrofit);
    }

    /**
     * Get max datetime value with positive num offset 9999-12-31t23:59:59.9999999-14:00
     *
     * @return the DateTime object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public DateTime getLocalNegativeOffsetLowercaseMaxDateTime() throws ServiceException {
        try {
            Call<ResponseBody> call = service.getLocalNegativeOffsetLowercaseMaxDateTime();
            ServiceResponse<DateTime> response = getLocalNegativeOffsetLowercaseMaxDateTimeDelegate(call.execute(), null);
            return response.getBody();
        } catch (ServiceException ex) {
            throw ex;
        } catch (Exception ex) {
            throw new ServiceException(ex);
        }
    }

    /**
     * Get max datetime value with positive num offset 9999-12-31t23:59:59.9999999-14:00
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public Call<ResponseBody> getLocalNegativeOffsetLowercaseMaxDateTimeAsync(final ServiceCallback<DateTime> serviceCallback) {
        Call<ResponseBody> call = service.getLocalNegativeOffsetLowercaseMaxDateTime();
        call.enqueue(new ServiceResponseCallback<DateTime>(serviceCallback) {
            @Override
            public void onResponse(Response<ResponseBody> response, Retrofit retrofit) {
                try {
                    serviceCallback.success(getLocalNegativeOffsetLowercaseMaxDateTimeDelegate(response, retrofit));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<DateTime> getLocalNegativeOffsetLowercaseMaxDateTimeDelegate(Response<ResponseBody> response, Retrofit retrofit) throws ServiceException {
        return new ServiceResponseBuilder<DateTime>()
                .register(200, new TypeToken<DateTime>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, retrofit);
    }

    /**
     * Put min datetime value 0001-01-01T00:00:00Z
     *
     * @param datetimeBody the DateTime value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void putUtcMinDateTime(DateTime datetimeBody) throws ServiceException {
        if (datetimeBody == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter datetimeBody is required and cannot be null."));
        }
        try {
            Call<ResponseBody> call = service.putUtcMinDateTime(datetimeBody);
            ServiceResponse<Void> response = putUtcMinDateTimeDelegate(call.execute(), null);
            response.getBody();
        } catch (ServiceException ex) {
            throw ex;
        } catch (Exception ex) {
            throw new ServiceException(ex);
        }
    }

    /**
     * Put min datetime value 0001-01-01T00:00:00Z
     *
     * @param datetimeBody the DateTime value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public Call<ResponseBody> putUtcMinDateTimeAsync(DateTime datetimeBody, final ServiceCallback<Void> serviceCallback) {
        if (datetimeBody == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter datetimeBody is required and cannot be null.")));
        }
        Call<ResponseBody> call = service.putUtcMinDateTime(datetimeBody);
        call.enqueue(new ServiceResponseCallback<Void>(serviceCallback) {
            @Override
            public void onResponse(Response<ResponseBody> response, Retrofit retrofit) {
                try {
                    serviceCallback.success(putUtcMinDateTimeDelegate(response, retrofit));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<Void> putUtcMinDateTimeDelegate(Response<ResponseBody> response, Retrofit retrofit) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, retrofit);
    }

    /**
     * Get min datetime value 0001-01-01T00:00:00Z
     *
     * @return the DateTime object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public DateTime getUtcMinDateTime() throws ServiceException {
        try {
            Call<ResponseBody> call = service.getUtcMinDateTime();
            ServiceResponse<DateTime> response = getUtcMinDateTimeDelegate(call.execute(), null);
            return response.getBody();
        } catch (ServiceException ex) {
            throw ex;
        } catch (Exception ex) {
            throw new ServiceException(ex);
        }
    }

    /**
     * Get min datetime value 0001-01-01T00:00:00Z
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public Call<ResponseBody> getUtcMinDateTimeAsync(final ServiceCallback<DateTime> serviceCallback) {
        Call<ResponseBody> call = service.getUtcMinDateTime();
        call.enqueue(new ServiceResponseCallback<DateTime>(serviceCallback) {
            @Override
            public void onResponse(Response<ResponseBody> response, Retrofit retrofit) {
                try {
                    serviceCallback.success(getUtcMinDateTimeDelegate(response, retrofit));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<DateTime> getUtcMinDateTimeDelegate(Response<ResponseBody> response, Retrofit retrofit) throws ServiceException {
        return new ServiceResponseBuilder<DateTime>()
                .register(200, new TypeToken<DateTime>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, retrofit);
    }

    /**
     * Put min datetime value 0001-01-01T00:00:00+14:00
     *
     * @param datetimeBody the DateTime value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void putLocalPositiveOffsetMinDateTime(DateTime datetimeBody) throws ServiceException {
        if (datetimeBody == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter datetimeBody is required and cannot be null."));
        }
        try {
            Call<ResponseBody> call = service.putLocalPositiveOffsetMinDateTime(datetimeBody);
            ServiceResponse<Void> response = putLocalPositiveOffsetMinDateTimeDelegate(call.execute(), null);
            response.getBody();
        } catch (ServiceException ex) {
            throw ex;
        } catch (Exception ex) {
            throw new ServiceException(ex);
        }
    }

    /**
     * Put min datetime value 0001-01-01T00:00:00+14:00
     *
     * @param datetimeBody the DateTime value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public Call<ResponseBody> putLocalPositiveOffsetMinDateTimeAsync(DateTime datetimeBody, final ServiceCallback<Void> serviceCallback) {
        if (datetimeBody == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter datetimeBody is required and cannot be null.")));
        }
        Call<ResponseBody> call = service.putLocalPositiveOffsetMinDateTime(datetimeBody);
        call.enqueue(new ServiceResponseCallback<Void>(serviceCallback) {
            @Override
            public void onResponse(Response<ResponseBody> response, Retrofit retrofit) {
                try {
                    serviceCallback.success(putLocalPositiveOffsetMinDateTimeDelegate(response, retrofit));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<Void> putLocalPositiveOffsetMinDateTimeDelegate(Response<ResponseBody> response, Retrofit retrofit) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, retrofit);
    }

    /**
     * Get min datetime value 0001-01-01T00:00:00+14:00
     *
     * @return the DateTime object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public DateTime getLocalPositiveOffsetMinDateTime() throws ServiceException {
        try {
            Call<ResponseBody> call = service.getLocalPositiveOffsetMinDateTime();
            ServiceResponse<DateTime> response = getLocalPositiveOffsetMinDateTimeDelegate(call.execute(), null);
            return response.getBody();
        } catch (ServiceException ex) {
            throw ex;
        } catch (Exception ex) {
            throw new ServiceException(ex);
        }
    }

    /**
     * Get min datetime value 0001-01-01T00:00:00+14:00
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public Call<ResponseBody> getLocalPositiveOffsetMinDateTimeAsync(final ServiceCallback<DateTime> serviceCallback) {
        Call<ResponseBody> call = service.getLocalPositiveOffsetMinDateTime();
        call.enqueue(new ServiceResponseCallback<DateTime>(serviceCallback) {
            @Override
            public void onResponse(Response<ResponseBody> response, Retrofit retrofit) {
                try {
                    serviceCallback.success(getLocalPositiveOffsetMinDateTimeDelegate(response, retrofit));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<DateTime> getLocalPositiveOffsetMinDateTimeDelegate(Response<ResponseBody> response, Retrofit retrofit) throws ServiceException {
        return new ServiceResponseBuilder<DateTime>()
                .register(200, new TypeToken<DateTime>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, retrofit);
    }

    /**
     * Put min datetime value 0001-01-01T00:00:00-14:00
     *
     * @param datetimeBody the DateTime value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void putLocalNegativeOffsetMinDateTime(DateTime datetimeBody) throws ServiceException {
        if (datetimeBody == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter datetimeBody is required and cannot be null."));
        }
        try {
            Call<ResponseBody> call = service.putLocalNegativeOffsetMinDateTime(datetimeBody);
            ServiceResponse<Void> response = putLocalNegativeOffsetMinDateTimeDelegate(call.execute(), null);
            response.getBody();
        } catch (ServiceException ex) {
            throw ex;
        } catch (Exception ex) {
            throw new ServiceException(ex);
        }
    }

    /**
     * Put min datetime value 0001-01-01T00:00:00-14:00
     *
     * @param datetimeBody the DateTime value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public Call<ResponseBody> putLocalNegativeOffsetMinDateTimeAsync(DateTime datetimeBody, final ServiceCallback<Void> serviceCallback) {
        if (datetimeBody == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter datetimeBody is required and cannot be null.")));
        }
        Call<ResponseBody> call = service.putLocalNegativeOffsetMinDateTime(datetimeBody);
        call.enqueue(new ServiceResponseCallback<Void>(serviceCallback) {
            @Override
            public void onResponse(Response<ResponseBody> response, Retrofit retrofit) {
                try {
                    serviceCallback.success(putLocalNegativeOffsetMinDateTimeDelegate(response, retrofit));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<Void> putLocalNegativeOffsetMinDateTimeDelegate(Response<ResponseBody> response, Retrofit retrofit) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, retrofit);
    }

    /**
     * Get min datetime value 0001-01-01T00:00:00-14:00
     *
     * @return the DateTime object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public DateTime getLocalNegativeOffsetMinDateTime() throws ServiceException {
        try {
            Call<ResponseBody> call = service.getLocalNegativeOffsetMinDateTime();
            ServiceResponse<DateTime> response = getLocalNegativeOffsetMinDateTimeDelegate(call.execute(), null);
            return response.getBody();
        } catch (ServiceException ex) {
            throw ex;
        } catch (Exception ex) {
            throw new ServiceException(ex);
        }
    }

    /**
     * Get min datetime value 0001-01-01T00:00:00-14:00
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public Call<ResponseBody> getLocalNegativeOffsetMinDateTimeAsync(final ServiceCallback<DateTime> serviceCallback) {
        Call<ResponseBody> call = service.getLocalNegativeOffsetMinDateTime();
        call.enqueue(new ServiceResponseCallback<DateTime>(serviceCallback) {
            @Override
            public void onResponse(Response<ResponseBody> response, Retrofit retrofit) {
                try {
                    serviceCallback.success(getLocalNegativeOffsetMinDateTimeDelegate(response, retrofit));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
        return call;
    }

    private ServiceResponse<DateTime> getLocalNegativeOffsetMinDateTimeDelegate(Response<ResponseBody> response, Retrofit retrofit) throws ServiceException {
        return new ServiceResponseBuilder<DateTime>()
                .register(200, new TypeToken<DateTime>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, retrofit);
    }

}
