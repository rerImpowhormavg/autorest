// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.


package fixtures.http;

import com.google.gson.reflect.TypeToken;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceException;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseBuilder;
import com.microsoft.rest.ServiceResponseCallback;
import retrofit.RestAdapter;
import retrofit.RetrofitError;
import retrofit.client.Response;
import fixtures.http.models.Error;

public class HttpServerFailureImpl implements HttpServerFailure {
    private HttpServerFailureService service;

    public HttpServerFailureImpl(RestAdapter restAdapter) {
        service = restAdapter.create(HttpServerFailureService.class);
    }

    /**
     * Return 501 status code - should be represented in the client as an error
     *
     * @return the Error object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public Error head501() throws ServiceException {
        try {
            ServiceResponse<Error> response = head501Delegate(service.head501(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Error> response = head501Delegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Return 501 status code - should be represented in the client as an error
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void head501Async(final ServiceCallback<Error> serviceCallback) {
        service.head501Async(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(head501Delegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Error> head501Delegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Error>()
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Return 501 status code - should be represented in the client as an error
     *
     * @return the Error object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public Error get501() throws ServiceException {
        try {
            ServiceResponse<Error> response = get501Delegate(service.get501(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Error> response = get501Delegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Return 501 status code - should be represented in the client as an error
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void get501Async(final ServiceCallback<Error> serviceCallback) {
        service.get501Async(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(get501Delegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Error> get501Delegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Error>()
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Return 505 status code - should be represented in the client as an error
     *
     * @param booleanValue Simple boolean value true
     * @return the Error object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public Error post505(boolean booleanValue) throws ServiceException {
        try {
            ServiceResponse<Error> response = post505Delegate(service.post505(booleanValue), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Error> response = post505Delegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Return 505 status code - should be represented in the client as an error
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void post505Async(boolean booleanValue, final ServiceCallback<Error> serviceCallback) {
        service.post505Async(booleanValue, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(post505Delegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Error> post505Delegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Error>()
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Return 505 status code - should be represented in the client as an error
     *
     * @param booleanValue Simple boolean value true
     * @return the Error object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public Error delete505(boolean booleanValue) throws ServiceException {
        try {
            ServiceResponse<Error> response = delete505Delegate(service.delete505(booleanValue), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Error> response = delete505Delegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Return 505 status code - should be represented in the client as an error
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void delete505Async(boolean booleanValue, final ServiceCallback<Error> serviceCallback) {
        service.delete505Async(booleanValue, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(delete505Delegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Error> delete505Delegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Error>()
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

}
