/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.http;

import com.google.gson.reflect.TypeToken;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceException;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseBuilder;
import com.microsoft.rest.ServiceResponseCallback;
import retrofit.RestAdapter;
import retrofit.RetrofitError;
import retrofit.client.Response;
import fixtures.http.models.A;
import fixtures.http.models.B;
import fixtures.http.models.C;
import fixtures.http.models.D;
import fixtures.http.models.Error;

public class MultipleResponsesImpl implements MultipleResponses {
    private MultipleResponsesService service;
    AutoRestHttpInfrastructureTestService client;

    public MultipleResponsesImpl(RestAdapter restAdapter, AutoRestHttpInfrastructureTestService client) {
        this.service = restAdapter.create(MultipleResponsesService.class);
        this.client = client;
    }

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}
     *
     * @return the A object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public A get200Model204NoModelDefaultError200Valid() throws ServiceException {
        try {
            ServiceResponse<A> response = get200Model204NoModelDefaultError200ValidDelegate(service.get200Model204NoModelDefaultError200Valid(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<A> response = get200Model204NoModelDefaultError200ValidDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void get200Model204NoModelDefaultError200ValidAsync(final ServiceCallback<A> serviceCallback) {
        service.get200Model204NoModelDefaultError200ValidAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(get200Model204NoModelDefaultError200ValidDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<A> get200Model204NoModelDefaultError200ValidDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<A>()
                .register(200, new TypeToken<A>(){}.getType())
                .register(204, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Send a 204 response with no payload
     *
     * @return the A object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public A get200Model204NoModelDefaultError204Valid() throws ServiceException {
        try {
            ServiceResponse<A> response = get200Model204NoModelDefaultError204ValidDelegate(service.get200Model204NoModelDefaultError204Valid(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<A> response = get200Model204NoModelDefaultError204ValidDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Send a 204 response with no payload
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void get200Model204NoModelDefaultError204ValidAsync(final ServiceCallback<A> serviceCallback) {
        service.get200Model204NoModelDefaultError204ValidAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(get200Model204NoModelDefaultError204ValidDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<A> get200Model204NoModelDefaultError204ValidDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<A>()
                .register(200, new TypeToken<A>(){}.getType())
                .register(204, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Send a 201 response with valid payload: {'statusCode': '201'}
     *
     * @return the A object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public A get200Model204NoModelDefaultError201Invalid() throws ServiceException {
        try {
            ServiceResponse<A> response = get200Model204NoModelDefaultError201InvalidDelegate(service.get200Model204NoModelDefaultError201Invalid(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<A> response = get200Model204NoModelDefaultError201InvalidDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Send a 201 response with valid payload: {'statusCode': '201'}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void get200Model204NoModelDefaultError201InvalidAsync(final ServiceCallback<A> serviceCallback) {
        service.get200Model204NoModelDefaultError201InvalidAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(get200Model204NoModelDefaultError201InvalidDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<A> get200Model204NoModelDefaultError201InvalidDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<A>()
                .register(200, new TypeToken<A>(){}.getType())
                .register(204, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Send a 202 response with no payload:
     *
     * @return the A object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public A get200Model204NoModelDefaultError202None() throws ServiceException {
        try {
            ServiceResponse<A> response = get200Model204NoModelDefaultError202NoneDelegate(service.get200Model204NoModelDefaultError202None(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<A> response = get200Model204NoModelDefaultError202NoneDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Send a 202 response with no payload:
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void get200Model204NoModelDefaultError202NoneAsync(final ServiceCallback<A> serviceCallback) {
        service.get200Model204NoModelDefaultError202NoneAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(get200Model204NoModelDefaultError202NoneDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<A> get200Model204NoModelDefaultError202NoneDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<A>()
                .register(200, new TypeToken<A>(){}.getType())
                .register(204, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Send a 400 response with valid error payload: {'status': 400, 'message': 'client error'}
     *
     * @return the A object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public A get200Model204NoModelDefaultError400Valid() throws ServiceException {
        try {
            ServiceResponse<A> response = get200Model204NoModelDefaultError400ValidDelegate(service.get200Model204NoModelDefaultError400Valid(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<A> response = get200Model204NoModelDefaultError400ValidDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Send a 400 response with valid error payload: {'status': 400, 'message': 'client error'}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void get200Model204NoModelDefaultError400ValidAsync(final ServiceCallback<A> serviceCallback) {
        service.get200Model204NoModelDefaultError400ValidAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(get200Model204NoModelDefaultError400ValidDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<A> get200Model204NoModelDefaultError400ValidDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<A>()
                .register(200, new TypeToken<A>(){}.getType())
                .register(204, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}
     *
     * @return the A object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public A get200Model201ModelDefaultError200Valid() throws ServiceException {
        try {
            ServiceResponse<A> response = get200Model201ModelDefaultError200ValidDelegate(service.get200Model201ModelDefaultError200Valid(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<A> response = get200Model201ModelDefaultError200ValidDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void get200Model201ModelDefaultError200ValidAsync(final ServiceCallback<A> serviceCallback) {
        service.get200Model201ModelDefaultError200ValidAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(get200Model201ModelDefaultError200ValidDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<A> get200Model201ModelDefaultError200ValidDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<A>()
                .register(200, new TypeToken<A>(){}.getType())
                .register(201, new TypeToken<B>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Send a 201 response with valid payload: {'statusCode': '201', 'textStatusCode': 'Created'}
     *
     * @return the A object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public A get200Model201ModelDefaultError201Valid() throws ServiceException {
        try {
            ServiceResponse<A> response = get200Model201ModelDefaultError201ValidDelegate(service.get200Model201ModelDefaultError201Valid(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<A> response = get200Model201ModelDefaultError201ValidDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Send a 201 response with valid payload: {'statusCode': '201', 'textStatusCode': 'Created'}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void get200Model201ModelDefaultError201ValidAsync(final ServiceCallback<A> serviceCallback) {
        service.get200Model201ModelDefaultError201ValidAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(get200Model201ModelDefaultError201ValidDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<A> get200Model201ModelDefaultError201ValidDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<A>()
                .register(200, new TypeToken<A>(){}.getType())
                .register(201, new TypeToken<B>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}
     *
     * @return the A object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public A get200Model201ModelDefaultError400Valid() throws ServiceException {
        try {
            ServiceResponse<A> response = get200Model201ModelDefaultError400ValidDelegate(service.get200Model201ModelDefaultError400Valid(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<A> response = get200Model201ModelDefaultError400ValidDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void get200Model201ModelDefaultError400ValidAsync(final ServiceCallback<A> serviceCallback) {
        service.get200Model201ModelDefaultError400ValidAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(get200Model201ModelDefaultError400ValidDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<A> get200Model201ModelDefaultError400ValidDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<A>()
                .register(200, new TypeToken<A>(){}.getType())
                .register(201, new TypeToken<B>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}
     *
     * @return the Object object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public Object get200ModelA201ModelC404ModelDDefaultError200Valid() throws ServiceException {
        try {
            ServiceResponse<Object> response = get200ModelA201ModelC404ModelDDefaultError200ValidDelegate(service.get200ModelA201ModelC404ModelDDefaultError200Valid(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Object> response = get200ModelA201ModelC404ModelDDefaultError200ValidDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void get200ModelA201ModelC404ModelDDefaultError200ValidAsync(final ServiceCallback<Object> serviceCallback) {
        service.get200ModelA201ModelC404ModelDDefaultError200ValidAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(get200ModelA201ModelC404ModelDDefaultError200ValidDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Object> get200ModelA201ModelC404ModelDDefaultError200ValidDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Object>()
                .register(200, new TypeToken<A>(){}.getType())
                .register(201, new TypeToken<C>(){}.getType())
                .register(404, new TypeToken<D>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Send a 200 response with valid payload: {'httpCode': '201'}
     *
     * @return the Object object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public Object get200ModelA201ModelC404ModelDDefaultError201Valid() throws ServiceException {
        try {
            ServiceResponse<Object> response = get200ModelA201ModelC404ModelDDefaultError201ValidDelegate(service.get200ModelA201ModelC404ModelDDefaultError201Valid(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Object> response = get200ModelA201ModelC404ModelDDefaultError201ValidDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Send a 200 response with valid payload: {'httpCode': '201'}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void get200ModelA201ModelC404ModelDDefaultError201ValidAsync(final ServiceCallback<Object> serviceCallback) {
        service.get200ModelA201ModelC404ModelDDefaultError201ValidAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(get200ModelA201ModelC404ModelDDefaultError201ValidDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Object> get200ModelA201ModelC404ModelDDefaultError201ValidDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Object>()
                .register(200, new TypeToken<A>(){}.getType())
                .register(201, new TypeToken<C>(){}.getType())
                .register(404, new TypeToken<D>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Send a 200 response with valid payload: {'httpStatusCode': '404'}
     *
     * @return the Object object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public Object get200ModelA201ModelC404ModelDDefaultError404Valid() throws ServiceException {
        try {
            ServiceResponse<Object> response = get200ModelA201ModelC404ModelDDefaultError404ValidDelegate(service.get200ModelA201ModelC404ModelDDefaultError404Valid(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Object> response = get200ModelA201ModelC404ModelDDefaultError404ValidDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Send a 200 response with valid payload: {'httpStatusCode': '404'}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void get200ModelA201ModelC404ModelDDefaultError404ValidAsync(final ServiceCallback<Object> serviceCallback) {
        service.get200ModelA201ModelC404ModelDDefaultError404ValidAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(get200ModelA201ModelC404ModelDDefaultError404ValidDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Object> get200ModelA201ModelC404ModelDDefaultError404ValidDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Object>()
                .register(200, new TypeToken<A>(){}.getType())
                .register(201, new TypeToken<C>(){}.getType())
                .register(404, new TypeToken<D>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}
     *
     * @return the Object object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public Object get200ModelA201ModelC404ModelDDefaultError400Valid() throws ServiceException {
        try {
            ServiceResponse<Object> response = get200ModelA201ModelC404ModelDDefaultError400ValidDelegate(service.get200ModelA201ModelC404ModelDDefaultError400Valid(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Object> response = get200ModelA201ModelC404ModelDDefaultError400ValidDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void get200ModelA201ModelC404ModelDDefaultError400ValidAsync(final ServiceCallback<Object> serviceCallback) {
        service.get200ModelA201ModelC404ModelDDefaultError400ValidAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(get200ModelA201ModelC404ModelDDefaultError400ValidDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Object> get200ModelA201ModelC404ModelDDefaultError400ValidDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Object>()
                .register(200, new TypeToken<A>(){}.getType())
                .register(201, new TypeToken<C>(){}.getType())
                .register(404, new TypeToken<D>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Send a 202 response with no payload
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void get202None204NoneDefaultError202None() throws ServiceException {
        try {
            ServiceResponse<Void> response = get202None204NoneDefaultError202NoneDelegate(service.get202None204NoneDefaultError202None(), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = get202None204NoneDefaultError202NoneDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Send a 202 response with no payload
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void get202None204NoneDefaultError202NoneAsync(final ServiceCallback<Void> serviceCallback) {
        service.get202None204NoneDefaultError202NoneAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(get202None204NoneDefaultError202NoneDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> get202None204NoneDefaultError202NoneDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(202, new TypeToken<Void>(){}.getType())
                .register(204, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Send a 204 response with no payload
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void get202None204NoneDefaultError204None() throws ServiceException {
        try {
            ServiceResponse<Void> response = get202None204NoneDefaultError204NoneDelegate(service.get202None204NoneDefaultError204None(), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = get202None204NoneDefaultError204NoneDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Send a 204 response with no payload
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void get202None204NoneDefaultError204NoneAsync(final ServiceCallback<Void> serviceCallback) {
        service.get202None204NoneDefaultError204NoneAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(get202None204NoneDefaultError204NoneDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> get202None204NoneDefaultError204NoneDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(202, new TypeToken<Void>(){}.getType())
                .register(204, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void get202None204NoneDefaultError400Valid() throws ServiceException {
        try {
            ServiceResponse<Void> response = get202None204NoneDefaultError400ValidDelegate(service.get202None204NoneDefaultError400Valid(), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = get202None204NoneDefaultError400ValidDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void get202None204NoneDefaultError400ValidAsync(final ServiceCallback<Void> serviceCallback) {
        service.get202None204NoneDefaultError400ValidAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(get202None204NoneDefaultError400ValidDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> get202None204NoneDefaultError400ValidDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(202, new TypeToken<Void>(){}.getType())
                .register(204, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Send a 202 response with an unexpected payload {'property': 'value'}
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void get202None204NoneDefaultNone202Invalid() throws ServiceException {
        try {
            ServiceResponse<Void> response = get202None204NoneDefaultNone202InvalidDelegate(service.get202None204NoneDefaultNone202Invalid(), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = get202None204NoneDefaultNone202InvalidDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Send a 202 response with an unexpected payload {'property': 'value'}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void get202None204NoneDefaultNone202InvalidAsync(final ServiceCallback<Void> serviceCallback) {
        service.get202None204NoneDefaultNone202InvalidAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(get202None204NoneDefaultNone202InvalidDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> get202None204NoneDefaultNone202InvalidDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(202, new TypeToken<Void>(){}.getType())
                .register(204, new TypeToken<Void>(){}.getType())
                .build(response, error);
    }

    /**
     * Send a 204 response with no payload
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void get202None204NoneDefaultNone204None() throws ServiceException {
        try {
            ServiceResponse<Void> response = get202None204NoneDefaultNone204NoneDelegate(service.get202None204NoneDefaultNone204None(), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = get202None204NoneDefaultNone204NoneDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Send a 204 response with no payload
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void get202None204NoneDefaultNone204NoneAsync(final ServiceCallback<Void> serviceCallback) {
        service.get202None204NoneDefaultNone204NoneAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(get202None204NoneDefaultNone204NoneDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> get202None204NoneDefaultNone204NoneDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(202, new TypeToken<Void>(){}.getType())
                .register(204, new TypeToken<Void>(){}.getType())
                .build(response, error);
    }

    /**
     * Send a 400 response with no payload
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void get202None204NoneDefaultNone400None() throws ServiceException {
        try {
            ServiceResponse<Void> response = get202None204NoneDefaultNone400NoneDelegate(service.get202None204NoneDefaultNone400None(), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = get202None204NoneDefaultNone400NoneDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Send a 400 response with no payload
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void get202None204NoneDefaultNone400NoneAsync(final ServiceCallback<Void> serviceCallback) {
        service.get202None204NoneDefaultNone400NoneAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(get202None204NoneDefaultNone400NoneDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> get202None204NoneDefaultNone400NoneDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(202, new TypeToken<Void>(){}.getType())
                .register(204, new TypeToken<Void>(){}.getType())
                .build(response, error);
    }

    /**
     * Send a 400 response with an unexpected payload {'property': 'value'}
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void get202None204NoneDefaultNone400Invalid() throws ServiceException {
        try {
            ServiceResponse<Void> response = get202None204NoneDefaultNone400InvalidDelegate(service.get202None204NoneDefaultNone400Invalid(), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = get202None204NoneDefaultNone400InvalidDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Send a 400 response with an unexpected payload {'property': 'value'}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void get202None204NoneDefaultNone400InvalidAsync(final ServiceCallback<Void> serviceCallback) {
        service.get202None204NoneDefaultNone400InvalidAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(get202None204NoneDefaultNone400InvalidDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> get202None204NoneDefaultNone400InvalidDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(202, new TypeToken<Void>(){}.getType())
                .register(204, new TypeToken<Void>(){}.getType())
                .build(response, error);
    }

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}
     *
     * @return the A object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public A getDefaultModelA200Valid() throws ServiceException {
        try {
            ServiceResponse<A> response = getDefaultModelA200ValidDelegate(service.getDefaultModelA200Valid(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<A> response = getDefaultModelA200ValidDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getDefaultModelA200ValidAsync(final ServiceCallback<A> serviceCallback) {
        service.getDefaultModelA200ValidAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getDefaultModelA200ValidDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<A> getDefaultModelA200ValidDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<A>()
                .registerError(new TypeToken<A>(){}.getType())
                .build(response, error);
    }

    /**
     * Send a 200 response with no payload
     *
     * @return the A object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public A getDefaultModelA200None() throws ServiceException {
        try {
            ServiceResponse<A> response = getDefaultModelA200NoneDelegate(service.getDefaultModelA200None(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<A> response = getDefaultModelA200NoneDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Send a 200 response with no payload
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getDefaultModelA200NoneAsync(final ServiceCallback<A> serviceCallback) {
        service.getDefaultModelA200NoneAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getDefaultModelA200NoneDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<A> getDefaultModelA200NoneDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<A>()
                .registerError(new TypeToken<A>(){}.getType())
                .build(response, error);
    }

    /**
     * Send a 400 response with valid payload: {'statusCode': '400'}
     *
     * @return the A object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public A getDefaultModelA400Valid() throws ServiceException {
        try {
            ServiceResponse<A> response = getDefaultModelA400ValidDelegate(service.getDefaultModelA400Valid(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<A> response = getDefaultModelA400ValidDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Send a 400 response with valid payload: {'statusCode': '400'}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getDefaultModelA400ValidAsync(final ServiceCallback<A> serviceCallback) {
        service.getDefaultModelA400ValidAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getDefaultModelA400ValidDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<A> getDefaultModelA400ValidDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<A>()
                .registerError(new TypeToken<A>(){}.getType())
                .build(response, error);
    }

    /**
     * Send a 400 response with no payload
     *
     * @return the A object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public A getDefaultModelA400None() throws ServiceException {
        try {
            ServiceResponse<A> response = getDefaultModelA400NoneDelegate(service.getDefaultModelA400None(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<A> response = getDefaultModelA400NoneDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Send a 400 response with no payload
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getDefaultModelA400NoneAsync(final ServiceCallback<A> serviceCallback) {
        service.getDefaultModelA400NoneAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getDefaultModelA400NoneDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<A> getDefaultModelA400NoneDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<A>()
                .registerError(new TypeToken<A>(){}.getType())
                .build(response, error);
    }

    /**
     * Send a 200 response with invalid payload: {'statusCode': '200'}
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void getDefaultNone200Invalid() throws ServiceException {
        try {
            ServiceResponse<Void> response = getDefaultNone200InvalidDelegate(service.getDefaultNone200Invalid(), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = getDefaultNone200InvalidDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Send a 200 response with invalid payload: {'statusCode': '200'}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getDefaultNone200InvalidAsync(final ServiceCallback<Void> serviceCallback) {
        service.getDefaultNone200InvalidAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getDefaultNone200InvalidDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> getDefaultNone200InvalidDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .build(response, error);
    }

    /**
     * Send a 200 response with no payload
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void getDefaultNone200None() throws ServiceException {
        try {
            ServiceResponse<Void> response = getDefaultNone200NoneDelegate(service.getDefaultNone200None(), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = getDefaultNone200NoneDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Send a 200 response with no payload
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getDefaultNone200NoneAsync(final ServiceCallback<Void> serviceCallback) {
        service.getDefaultNone200NoneAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getDefaultNone200NoneDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> getDefaultNone200NoneDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .build(response, error);
    }

    /**
     * Send a 400 response with valid payload: {'statusCode': '400'}
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void getDefaultNone400Invalid() throws ServiceException {
        try {
            ServiceResponse<Void> response = getDefaultNone400InvalidDelegate(service.getDefaultNone400Invalid(), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = getDefaultNone400InvalidDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Send a 400 response with valid payload: {'statusCode': '400'}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getDefaultNone400InvalidAsync(final ServiceCallback<Void> serviceCallback) {
        service.getDefaultNone400InvalidAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getDefaultNone400InvalidDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> getDefaultNone400InvalidDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .build(response, error);
    }

    /**
     * Send a 400 response with no payload
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void getDefaultNone400None() throws ServiceException {
        try {
            ServiceResponse<Void> response = getDefaultNone400NoneDelegate(service.getDefaultNone400None(), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = getDefaultNone400NoneDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Send a 400 response with no payload
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getDefaultNone400NoneAsync(final ServiceCallback<Void> serviceCallback) {
        service.getDefaultNone400NoneAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getDefaultNone400NoneDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> getDefaultNone400NoneDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .build(response, error);
    }

    /**
     * Send a 200 response with no payload, when a payload is expected - client should return a null object of thde type for model A
     *
     * @return the A object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public A get200ModelA200None() throws ServiceException {
        try {
            ServiceResponse<A> response = get200ModelA200NoneDelegate(service.get200ModelA200None(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<A> response = get200ModelA200NoneDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Send a 200 response with no payload, when a payload is expected - client should return a null object of thde type for model A
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void get200ModelA200NoneAsync(final ServiceCallback<A> serviceCallback) {
        service.get200ModelA200NoneAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(get200ModelA200NoneDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<A> get200ModelA200NoneDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<A>()
                .register(200, new TypeToken<A>(){}.getType())
                .build(response, error);
    }

    /**
     * Send a 200 response with payload {'statusCode': '200'}
     *
     * @return the A object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public A get200ModelA200Valid() throws ServiceException {
        try {
            ServiceResponse<A> response = get200ModelA200ValidDelegate(service.get200ModelA200Valid(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<A> response = get200ModelA200ValidDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Send a 200 response with payload {'statusCode': '200'}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void get200ModelA200ValidAsync(final ServiceCallback<A> serviceCallback) {
        service.get200ModelA200ValidAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(get200ModelA200ValidDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<A> get200ModelA200ValidDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<A>()
                .register(200, new TypeToken<A>(){}.getType())
                .build(response, error);
    }

    /**
     * Send a 200 response with invalid payload {'statusCodeInvalid': '200'}
     *
     * @return the A object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public A get200ModelA200Invalid() throws ServiceException {
        try {
            ServiceResponse<A> response = get200ModelA200InvalidDelegate(service.get200ModelA200Invalid(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<A> response = get200ModelA200InvalidDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Send a 200 response with invalid payload {'statusCodeInvalid': '200'}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void get200ModelA200InvalidAsync(final ServiceCallback<A> serviceCallback) {
        service.get200ModelA200InvalidAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(get200ModelA200InvalidDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<A> get200ModelA200InvalidDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<A>()
                .register(200, new TypeToken<A>(){}.getType())
                .build(response, error);
    }

    /**
     * Send a 400 response with no payload client should treat as an http error with no error model
     *
     * @return the A object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public A get200ModelA400None() throws ServiceException {
        try {
            ServiceResponse<A> response = get200ModelA400NoneDelegate(service.get200ModelA400None(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<A> response = get200ModelA400NoneDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Send a 400 response with no payload client should treat as an http error with no error model
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void get200ModelA400NoneAsync(final ServiceCallback<A> serviceCallback) {
        service.get200ModelA400NoneAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(get200ModelA400NoneDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<A> get200ModelA400NoneDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<A>()
                .register(200, new TypeToken<A>(){}.getType())
                .build(response, error);
    }

    /**
     * Send a 200 response with payload {'statusCode': '400'}
     *
     * @return the A object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public A get200ModelA400Valid() throws ServiceException {
        try {
            ServiceResponse<A> response = get200ModelA400ValidDelegate(service.get200ModelA400Valid(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<A> response = get200ModelA400ValidDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Send a 200 response with payload {'statusCode': '400'}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void get200ModelA400ValidAsync(final ServiceCallback<A> serviceCallback) {
        service.get200ModelA400ValidAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(get200ModelA400ValidDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<A> get200ModelA400ValidDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<A>()
                .register(200, new TypeToken<A>(){}.getType())
                .build(response, error);
    }

    /**
     * Send a 200 response with invalid payload {'statusCodeInvalid': '400'}
     *
     * @return the A object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public A get200ModelA400Invalid() throws ServiceException {
        try {
            ServiceResponse<A> response = get200ModelA400InvalidDelegate(service.get200ModelA400Invalid(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<A> response = get200ModelA400InvalidDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Send a 200 response with invalid payload {'statusCodeInvalid': '400'}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void get200ModelA400InvalidAsync(final ServiceCallback<A> serviceCallback) {
        service.get200ModelA400InvalidAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(get200ModelA400InvalidDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<A> get200ModelA400InvalidDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<A>()
                .register(200, new TypeToken<A>(){}.getType())
                .build(response, error);
    }

    /**
     * Send a 202 response with payload {'statusCode': '202'}
     *
     * @return the A object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public A get200ModelA202Valid() throws ServiceException {
        try {
            ServiceResponse<A> response = get200ModelA202ValidDelegate(service.get200ModelA202Valid(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<A> response = get200ModelA202ValidDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Send a 202 response with payload {'statusCode': '202'}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void get200ModelA202ValidAsync(final ServiceCallback<A> serviceCallback) {
        service.get200ModelA202ValidAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(get200ModelA202ValidDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<A> get200ModelA202ValidDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<A>()
                .register(200, new TypeToken<A>(){}.getType())
                .build(response, error);
    }

}
