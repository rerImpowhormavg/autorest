/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.http;

import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceException;
import retrofit.Call;
import com.squareup.okhttp.ResponseBody;
import fixtures.http.models.A;
import retrofit.http.GET;

/**
 * An instance of this class provides access to all the operations defined
 * in MultipleResponses.
 */
public interface MultipleResponses {
    /**
     * The interface defining all the services for MultipleResponses to be
     * used by Retrofit to perform actually REST calls.
     */
    interface MultipleResponsesService {
        @GET("/http/payloads/200/A/204/none/default/Error/response/200/valid")
        Call<ResponseBody> get200Model204NoModelDefaultError200Valid();

        @GET("/http/payloads/200/A/204/none/default/Error/response/204/none")
        Call<ResponseBody> get200Model204NoModelDefaultError204Valid();

        @GET("/http/payloads/200/A/204/none/default/Error/response/201/valid")
        Call<ResponseBody> get200Model204NoModelDefaultError201Invalid();

        @GET("/http/payloads/200/A/204/none/default/Error/response/202/none")
        Call<ResponseBody> get200Model204NoModelDefaultError202None();

        @GET("/http/payloads/200/A/204/none/default/Error/response/400/valid")
        Call<ResponseBody> get200Model204NoModelDefaultError400Valid();

        @GET("/http/payloads/200/A/201/B/default/Error/response/200/valid")
        Call<ResponseBody> get200Model201ModelDefaultError200Valid();

        @GET("/http/payloads/200/A/201/B/default/Error/response/201/valid")
        Call<ResponseBody> get200Model201ModelDefaultError201Valid();

        @GET("/http/payloads/200/A/201/B/default/Error/response/400/valid")
        Call<ResponseBody> get200Model201ModelDefaultError400Valid();

        @GET("/http/payloads/200/A/201/C/404/D/default/Error/response/200/valid")
        Call<ResponseBody> get200ModelA201ModelC404ModelDDefaultError200Valid();

        @GET("/http/payloads/200/A/201/C/404/D/default/Error/response/201/valid")
        Call<ResponseBody> get200ModelA201ModelC404ModelDDefaultError201Valid();

        @GET("/http/payloads/200/A/201/C/404/D/default/Error/response/404/valid")
        Call<ResponseBody> get200ModelA201ModelC404ModelDDefaultError404Valid();

        @GET("/http/payloads/200/A/201/C/404/D/default/Error/response/400/valid")
        Call<ResponseBody> get200ModelA201ModelC404ModelDDefaultError400Valid();

        @GET("/http/payloads/202/none/204/none/default/Error/response/202/none")
        Call<ResponseBody> get202None204NoneDefaultError202None();

        @GET("/http/payloads/202/none/204/none/default/Error/response/204/none")
        Call<ResponseBody> get202None204NoneDefaultError204None();

        @GET("/http/payloads/202/none/204/none/default/Error/response/400/valid")
        Call<ResponseBody> get202None204NoneDefaultError400Valid();

        @GET("/http/payloads/202/none/204/none/default/none/response/202/invalid")
        Call<ResponseBody> get202None204NoneDefaultNone202Invalid();

        @GET("/http/payloads/202/none/204/none/default/none/response/204/none")
        Call<ResponseBody> get202None204NoneDefaultNone204None();

        @GET("/http/payloads/202/none/204/none/default/none/response/400/none")
        Call<ResponseBody> get202None204NoneDefaultNone400None();

        @GET("/http/payloads/202/none/204/none/default/none/response/400/invalid")
        Call<ResponseBody> get202None204NoneDefaultNone400Invalid();

        @GET("/http/payloads/default/A/response/200/valid")
        Call<ResponseBody> getDefaultModelA200Valid();

        @GET("/http/payloads/default/A/response/200/none")
        Call<ResponseBody> getDefaultModelA200None();

        @GET("/http/payloads/default/A/response/400/valid")
        Call<ResponseBody> getDefaultModelA400Valid();

        @GET("/http/payloads/default/A/response/400/none")
        Call<ResponseBody> getDefaultModelA400None();

        @GET("/http/payloads/default/none/response/200/invalid")
        Call<ResponseBody> getDefaultNone200Invalid();

        @GET("/http/payloads/default/none/response/200/none")
        Call<ResponseBody> getDefaultNone200None();

        @GET("/http/payloads/default/none/response/400/invalid")
        Call<ResponseBody> getDefaultNone400Invalid();

        @GET("/http/payloads/default/none/response/400/none")
        Call<ResponseBody> getDefaultNone400None();

        @GET("/http/payloads/200/A/response/200/none")
        Call<ResponseBody> get200ModelA200None();

        @GET("/http/payloads/200/A/response/200/valid")
        Call<ResponseBody> get200ModelA200Valid();

        @GET("/http/payloads/200/A/response/200/invalid")
        Call<ResponseBody> get200ModelA200Invalid();

        @GET("/http/payloads/200/A/response/400/none")
        Call<ResponseBody> get200ModelA400None();

        @GET("/http/payloads/200/A/response/400/valid")
        Call<ResponseBody> get200ModelA400Valid();

        @GET("/http/payloads/200/A/response/400/invalid")
        Call<ResponseBody> get200ModelA400Invalid();

        @GET("/http/payloads/200/A/response/202/valid")
        Call<ResponseBody> get200ModelA202Valid();

    }
    /**
     *
     * @return the A object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    A get200Model204NoModelDefaultError200Valid() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> get200Model204NoModelDefaultError200ValidAsync(final ServiceCallback<A> serviceCallback);

    /**
     *
     * @return the A object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    A get200Model204NoModelDefaultError204Valid() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> get200Model204NoModelDefaultError204ValidAsync(final ServiceCallback<A> serviceCallback);

    /**
     *
     * @return the A object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    A get200Model204NoModelDefaultError201Invalid() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> get200Model204NoModelDefaultError201InvalidAsync(final ServiceCallback<A> serviceCallback);

    /**
     *
     * @return the A object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    A get200Model204NoModelDefaultError202None() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> get200Model204NoModelDefaultError202NoneAsync(final ServiceCallback<A> serviceCallback);

    /**
     *
     * @return the A object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    A get200Model204NoModelDefaultError400Valid() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> get200Model204NoModelDefaultError400ValidAsync(final ServiceCallback<A> serviceCallback);

    /**
     *
     * @return the A object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    A get200Model201ModelDefaultError200Valid() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> get200Model201ModelDefaultError200ValidAsync(final ServiceCallback<A> serviceCallback);

    /**
     *
     * @return the A object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    A get200Model201ModelDefaultError201Valid() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> get200Model201ModelDefaultError201ValidAsync(final ServiceCallback<A> serviceCallback);

    /**
     *
     * @return the A object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    A get200Model201ModelDefaultError400Valid() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> get200Model201ModelDefaultError400ValidAsync(final ServiceCallback<A> serviceCallback);

    /**
     *
     * @return the Object object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Object get200ModelA201ModelC404ModelDDefaultError200Valid() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> get200ModelA201ModelC404ModelDDefaultError200ValidAsync(final ServiceCallback<Object> serviceCallback);

    /**
     *
     * @return the Object object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Object get200ModelA201ModelC404ModelDDefaultError201Valid() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> get200ModelA201ModelC404ModelDDefaultError201ValidAsync(final ServiceCallback<Object> serviceCallback);

    /**
     *
     * @return the Object object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Object get200ModelA201ModelC404ModelDDefaultError404Valid() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> get200ModelA201ModelC404ModelDDefaultError404ValidAsync(final ServiceCallback<Object> serviceCallback);

    /**
     *
     * @return the Object object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Object get200ModelA201ModelC404ModelDDefaultError400Valid() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> get200ModelA201ModelC404ModelDDefaultError400ValidAsync(final ServiceCallback<Object> serviceCallback);

    /**
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void get202None204NoneDefaultError202None() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> get202None204NoneDefaultError202NoneAsync(final ServiceCallback<Void> serviceCallback);

    /**
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void get202None204NoneDefaultError204None() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> get202None204NoneDefaultError204NoneAsync(final ServiceCallback<Void> serviceCallback);

    /**
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void get202None204NoneDefaultError400Valid() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> get202None204NoneDefaultError400ValidAsync(final ServiceCallback<Void> serviceCallback);

    /**
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void get202None204NoneDefaultNone202Invalid() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> get202None204NoneDefaultNone202InvalidAsync(final ServiceCallback<Void> serviceCallback);

    /**
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void get202None204NoneDefaultNone204None() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> get202None204NoneDefaultNone204NoneAsync(final ServiceCallback<Void> serviceCallback);

    /**
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void get202None204NoneDefaultNone400None() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> get202None204NoneDefaultNone400NoneAsync(final ServiceCallback<Void> serviceCallback);

    /**
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void get202None204NoneDefaultNone400Invalid() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> get202None204NoneDefaultNone400InvalidAsync(final ServiceCallback<Void> serviceCallback);

    /**
     *
     * @return the A object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    A getDefaultModelA200Valid() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> getDefaultModelA200ValidAsync(final ServiceCallback<A> serviceCallback);

    /**
     *
     * @return the A object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    A getDefaultModelA200None() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> getDefaultModelA200NoneAsync(final ServiceCallback<A> serviceCallback);

    /**
     *
     * @return the A object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    A getDefaultModelA400Valid() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> getDefaultModelA400ValidAsync(final ServiceCallback<A> serviceCallback);

    /**
     *
     * @return the A object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    A getDefaultModelA400None() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> getDefaultModelA400NoneAsync(final ServiceCallback<A> serviceCallback);

    /**
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void getDefaultNone200Invalid() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> getDefaultNone200InvalidAsync(final ServiceCallback<Void> serviceCallback);

    /**
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void getDefaultNone200None() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> getDefaultNone200NoneAsync(final ServiceCallback<Void> serviceCallback);

    /**
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void getDefaultNone400Invalid() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> getDefaultNone400InvalidAsync(final ServiceCallback<Void> serviceCallback);

    /**
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void getDefaultNone400None() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> getDefaultNone400NoneAsync(final ServiceCallback<Void> serviceCallback);

    /**
     *
     * @return the A object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    A get200ModelA200None() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> get200ModelA200NoneAsync(final ServiceCallback<A> serviceCallback);

    /**
     *
     * @return the A object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    A get200ModelA200Valid() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> get200ModelA200ValidAsync(final ServiceCallback<A> serviceCallback);

    /**
     *
     * @return the A object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    A get200ModelA200Invalid() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> get200ModelA200InvalidAsync(final ServiceCallback<A> serviceCallback);

    /**
     *
     * @return the A object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    A get200ModelA400None() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> get200ModelA400NoneAsync(final ServiceCallback<A> serviceCallback);

    /**
     *
     * @return the A object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    A get200ModelA400Valid() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> get200ModelA400ValidAsync(final ServiceCallback<A> serviceCallback);

    /**
     *
     * @return the A object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    A get200ModelA400Invalid() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> get200ModelA400InvalidAsync(final ServiceCallback<A> serviceCallback);

    /**
     *
     * @return the A object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    A get200ModelA202Valid() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> get200ModelA202ValidAsync(final ServiceCallback<A> serviceCallback);

}
