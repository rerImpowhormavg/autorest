// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.


package fixtures.url;

import com.google.gson.reflect.TypeToken;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceException;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseBuilder;
import com.microsoft.rest.ServiceResponseCallback;
import retrofit.RestAdapter;
import retrofit.RetrofitError;
import retrofit.client.Response;
import fixtures.url.models.UriColor;
import org.apache.commons.lang3.ArrayUtils;
import java.util.Date;
import java.util.List;
import fixtures.url.models.Error;

public class QueriesImpl implements Queries {
    private QueriesService service;

    public QueriesImpl(RestAdapter restAdapter) {
        service = restAdapter.create(QueriesService.class);
    }

    public void getBooleanTrue(boolean boolQuery) throws ServiceException {
        try {
            ServiceResponse<Void> response = getBooleanTrueDelegate(service.getBooleanTrue(boolQuery), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = getBooleanTrueDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    public void getBooleanTrueAsync(boolean boolQuery, final ServiceCallback<Void> serviceCallback) {
        service.getBooleanTrueAsync(boolQuery, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getBooleanTrueDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> getBooleanTrueDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public void getBooleanFalse(boolean boolQuery) throws ServiceException {
        try {
            ServiceResponse<Void> response = getBooleanFalseDelegate(service.getBooleanFalse(boolQuery), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = getBooleanFalseDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    public void getBooleanFalseAsync(boolean boolQuery, final ServiceCallback<Void> serviceCallback) {
        service.getBooleanFalseAsync(boolQuery, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getBooleanFalseDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> getBooleanFalseDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public void getBooleanNull(boolean boolQuery) throws ServiceException {
        try {
            ServiceResponse<Void> response = getBooleanNullDelegate(service.getBooleanNull(boolQuery), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = getBooleanNullDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    public void getBooleanNullAsync(boolean boolQuery, final ServiceCallback<Void> serviceCallback) {
        service.getBooleanNullAsync(boolQuery, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getBooleanNullDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> getBooleanNullDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public void getIntOneMillion(int intQuery) throws ServiceException {
        try {
            ServiceResponse<Void> response = getIntOneMillionDelegate(service.getIntOneMillion(intQuery), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = getIntOneMillionDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    public void getIntOneMillionAsync(int intQuery, final ServiceCallback<Void> serviceCallback) {
        service.getIntOneMillionAsync(intQuery, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getIntOneMillionDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> getIntOneMillionDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public void getIntNegativeOneMillion(int intQuery) throws ServiceException {
        try {
            ServiceResponse<Void> response = getIntNegativeOneMillionDelegate(service.getIntNegativeOneMillion(intQuery), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = getIntNegativeOneMillionDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    public void getIntNegativeOneMillionAsync(int intQuery, final ServiceCallback<Void> serviceCallback) {
        service.getIntNegativeOneMillionAsync(intQuery, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getIntNegativeOneMillionDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> getIntNegativeOneMillionDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public void getIntNull(int intQuery) throws ServiceException {
        try {
            ServiceResponse<Void> response = getIntNullDelegate(service.getIntNull(intQuery), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = getIntNullDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    public void getIntNullAsync(int intQuery, final ServiceCallback<Void> serviceCallback) {
        service.getIntNullAsync(intQuery, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getIntNullDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> getIntNullDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public void getTenBillion(long longQuery) throws ServiceException {
        try {
            ServiceResponse<Void> response = getTenBillionDelegate(service.getTenBillion(longQuery), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = getTenBillionDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    public void getTenBillionAsync(long longQuery, final ServiceCallback<Void> serviceCallback) {
        service.getTenBillionAsync(longQuery, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getTenBillionDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> getTenBillionDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public void getNegativeTenBillion(long longQuery) throws ServiceException {
        try {
            ServiceResponse<Void> response = getNegativeTenBillionDelegate(service.getNegativeTenBillion(longQuery), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = getNegativeTenBillionDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    public void getNegativeTenBillionAsync(long longQuery, final ServiceCallback<Void> serviceCallback) {
        service.getNegativeTenBillionAsync(longQuery, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getNegativeTenBillionDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> getNegativeTenBillionDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public void getLongNull(long longQuery) throws ServiceException {
        try {
            ServiceResponse<Void> response = getLongNullDelegate(service.getLongNull(longQuery), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = getLongNullDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    public void getLongNullAsync(long longQuery, final ServiceCallback<Void> serviceCallback) {
        service.getLongNullAsync(longQuery, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getLongNullDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> getLongNullDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public void floatScientificPositive(double floatQuery) throws ServiceException {
        try {
            ServiceResponse<Void> response = floatScientificPositiveDelegate(service.floatScientificPositive(floatQuery), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = floatScientificPositiveDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    public void floatScientificPositiveAsync(double floatQuery, final ServiceCallback<Void> serviceCallback) {
        service.floatScientificPositiveAsync(floatQuery, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(floatScientificPositiveDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> floatScientificPositiveDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public void floatScientificNegative(double floatQuery) throws ServiceException {
        try {
            ServiceResponse<Void> response = floatScientificNegativeDelegate(service.floatScientificNegative(floatQuery), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = floatScientificNegativeDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    public void floatScientificNegativeAsync(double floatQuery, final ServiceCallback<Void> serviceCallback) {
        service.floatScientificNegativeAsync(floatQuery, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(floatScientificNegativeDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> floatScientificNegativeDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public void floatNull(double floatQuery) throws ServiceException {
        try {
            ServiceResponse<Void> response = floatNullDelegate(service.floatNull(floatQuery), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = floatNullDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    public void floatNullAsync(double floatQuery, final ServiceCallback<Void> serviceCallback) {
        service.floatNullAsync(floatQuery, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(floatNullDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> floatNullDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public void doubleDecimalPositive(double doubleQuery) throws ServiceException {
        try {
            ServiceResponse<Void> response = doubleDecimalPositiveDelegate(service.doubleDecimalPositive(doubleQuery), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = doubleDecimalPositiveDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    public void doubleDecimalPositiveAsync(double doubleQuery, final ServiceCallback<Void> serviceCallback) {
        service.doubleDecimalPositiveAsync(doubleQuery, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(doubleDecimalPositiveDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> doubleDecimalPositiveDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public void doubleDecimalNegative(double doubleQuery) throws ServiceException {
        try {
            ServiceResponse<Void> response = doubleDecimalNegativeDelegate(service.doubleDecimalNegative(doubleQuery), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = doubleDecimalNegativeDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    public void doubleDecimalNegativeAsync(double doubleQuery, final ServiceCallback<Void> serviceCallback) {
        service.doubleDecimalNegativeAsync(doubleQuery, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(doubleDecimalNegativeDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> doubleDecimalNegativeDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public void doubleNull(double doubleQuery) throws ServiceException {
        try {
            ServiceResponse<Void> response = doubleNullDelegate(service.doubleNull(doubleQuery), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = doubleNullDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    public void doubleNullAsync(double doubleQuery, final ServiceCallback<Void> serviceCallback) {
        service.doubleNullAsync(doubleQuery, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(doubleNullDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> doubleNullDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public void stringUnicode(String stringQuery) throws ServiceException {
        try {
            ServiceResponse<Void> response = stringUnicodeDelegate(service.stringUnicode(stringQuery), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = stringUnicodeDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    public void stringUnicodeAsync(String stringQuery, final ServiceCallback<Void> serviceCallback) {
        service.stringUnicodeAsync(stringQuery, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(stringUnicodeDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> stringUnicodeDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public void stringUrlEncoded(String stringQuery) throws ServiceException {
        try {
            ServiceResponse<Void> response = stringUrlEncodedDelegate(service.stringUrlEncoded(stringQuery), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = stringUrlEncodedDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    public void stringUrlEncodedAsync(String stringQuery, final ServiceCallback<Void> serviceCallback) {
        service.stringUrlEncodedAsync(stringQuery, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(stringUrlEncodedDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> stringUrlEncodedDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public void stringEmpty(String stringQuery) throws ServiceException {
        try {
            ServiceResponse<Void> response = stringEmptyDelegate(service.stringEmpty(stringQuery), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = stringEmptyDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    public void stringEmptyAsync(String stringQuery, final ServiceCallback<Void> serviceCallback) {
        service.stringEmptyAsync(stringQuery, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(stringEmptyDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> stringEmptyDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public void stringNull(String stringQuery) throws ServiceException {
        try {
            ServiceResponse<Void> response = stringNullDelegate(service.stringNull(stringQuery), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = stringNullDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    public void stringNullAsync(String stringQuery, final ServiceCallback<Void> serviceCallback) {
        service.stringNullAsync(stringQuery, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(stringNullDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> stringNullDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public void enumValid(UriColor enumQuery) throws ServiceException {
        try {
            ServiceResponse<Void> response = enumValidDelegate(service.enumValid(enumQuery), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = enumValidDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    public void enumValidAsync(UriColor enumQuery, final ServiceCallback<Void> serviceCallback) {
        service.enumValidAsync(enumQuery, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(enumValidDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> enumValidDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public void enumNull(UriColor enumQuery) throws ServiceException {
        try {
            ServiceResponse<Void> response = enumNullDelegate(service.enumNull(enumQuery), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = enumNullDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    public void enumNullAsync(UriColor enumQuery, final ServiceCallback<Void> serviceCallback) {
        service.enumNullAsync(enumQuery, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(enumNullDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> enumNullDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public void byteMultiByte(byte[] byteQuery) throws ServiceException {
        try {
            ServiceResponse<Void> response = byteMultiByteDelegate(service.byteMultiByte(byteQuery), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = byteMultiByteDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    public void byteMultiByteAsync(byte[] byteQuery, final ServiceCallback<Void> serviceCallback) {
        service.byteMultiByteAsync(byteQuery, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(byteMultiByteDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> byteMultiByteDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public void byteEmpty(byte[] byteQuery) throws ServiceException {
        try {
            ServiceResponse<Void> response = byteEmptyDelegate(service.byteEmpty(byteQuery), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = byteEmptyDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    public void byteEmptyAsync(byte[] byteQuery, final ServiceCallback<Void> serviceCallback) {
        service.byteEmptyAsync(byteQuery, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(byteEmptyDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> byteEmptyDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public void byteNull(byte[] byteQuery) throws ServiceException {
        try {
            ServiceResponse<Void> response = byteNullDelegate(service.byteNull(byteQuery), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = byteNullDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    public void byteNullAsync(byte[] byteQuery, final ServiceCallback<Void> serviceCallback) {
        service.byteNullAsync(byteQuery, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(byteNullDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> byteNullDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public void dateValid(Date dateQuery) throws ServiceException {
        try {
            ServiceResponse<Void> response = dateValidDelegate(service.dateValid(dateQuery), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = dateValidDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    public void dateValidAsync(Date dateQuery, final ServiceCallback<Void> serviceCallback) {
        service.dateValidAsync(dateQuery, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(dateValidDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> dateValidDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public void dateNull(Date dateQuery) throws ServiceException {
        try {
            ServiceResponse<Void> response = dateNullDelegate(service.dateNull(dateQuery), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = dateNullDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    public void dateNullAsync(Date dateQuery, final ServiceCallback<Void> serviceCallback) {
        service.dateNullAsync(dateQuery, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(dateNullDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> dateNullDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public void dateTimeValid(Date dateTimeQuery) throws ServiceException {
        try {
            ServiceResponse<Void> response = dateTimeValidDelegate(service.dateTimeValid(dateTimeQuery), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = dateTimeValidDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    public void dateTimeValidAsync(Date dateTimeQuery, final ServiceCallback<Void> serviceCallback) {
        service.dateTimeValidAsync(dateTimeQuery, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(dateTimeValidDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> dateTimeValidDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public void dateTimeNull(Date dateTimeQuery) throws ServiceException {
        try {
            ServiceResponse<Void> response = dateTimeNullDelegate(service.dateTimeNull(dateTimeQuery), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = dateTimeNullDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    public void dateTimeNullAsync(Date dateTimeQuery, final ServiceCallback<Void> serviceCallback) {
        service.dateTimeNullAsync(dateTimeQuery, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(dateTimeNullDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> dateTimeNullDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public void arrayStringCsvValid(List<String> arrayQuery) throws ServiceException {
        try {
            ServiceResponse<Void> response = arrayStringCsvValidDelegate(service.arrayStringCsvValid(arrayQuery), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = arrayStringCsvValidDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    public void arrayStringCsvValidAsync(List<String> arrayQuery, final ServiceCallback<Void> serviceCallback) {
        service.arrayStringCsvValidAsync(arrayQuery, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(arrayStringCsvValidDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> arrayStringCsvValidDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public void arrayStringCsvNull(List<String> arrayQuery) throws ServiceException {
        try {
            ServiceResponse<Void> response = arrayStringCsvNullDelegate(service.arrayStringCsvNull(arrayQuery), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = arrayStringCsvNullDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    public void arrayStringCsvNullAsync(List<String> arrayQuery, final ServiceCallback<Void> serviceCallback) {
        service.arrayStringCsvNullAsync(arrayQuery, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(arrayStringCsvNullDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> arrayStringCsvNullDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public void arrayStringCsvEmpty(List<String> arrayQuery) throws ServiceException {
        try {
            ServiceResponse<Void> response = arrayStringCsvEmptyDelegate(service.arrayStringCsvEmpty(arrayQuery), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = arrayStringCsvEmptyDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    public void arrayStringCsvEmptyAsync(List<String> arrayQuery, final ServiceCallback<Void> serviceCallback) {
        service.arrayStringCsvEmptyAsync(arrayQuery, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(arrayStringCsvEmptyDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> arrayStringCsvEmptyDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public void arrayStringSsvValid(List<String> arrayQuery) throws ServiceException {
        try {
            ServiceResponse<Void> response = arrayStringSsvValidDelegate(service.arrayStringSsvValid(arrayQuery), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = arrayStringSsvValidDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    public void arrayStringSsvValidAsync(List<String> arrayQuery, final ServiceCallback<Void> serviceCallback) {
        service.arrayStringSsvValidAsync(arrayQuery, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(arrayStringSsvValidDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> arrayStringSsvValidDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public void arrayStringTsvValid(List<String> arrayQuery) throws ServiceException {
        try {
            ServiceResponse<Void> response = arrayStringTsvValidDelegate(service.arrayStringTsvValid(arrayQuery), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = arrayStringTsvValidDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    public void arrayStringTsvValidAsync(List<String> arrayQuery, final ServiceCallback<Void> serviceCallback) {
        service.arrayStringTsvValidAsync(arrayQuery, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(arrayStringTsvValidDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> arrayStringTsvValidDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public void arrayStringPipesValid(List<String> arrayQuery) throws ServiceException {
        try {
            ServiceResponse<Void> response = arrayStringPipesValidDelegate(service.arrayStringPipesValid(arrayQuery), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = arrayStringPipesValidDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    public void arrayStringPipesValidAsync(List<String> arrayQuery, final ServiceCallback<Void> serviceCallback) {
        service.arrayStringPipesValidAsync(arrayQuery, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(arrayStringPipesValidDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> arrayStringPipesValidDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

}
