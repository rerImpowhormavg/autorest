/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.bodydatetime;

import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceException;
import com.microsoft.rest.ServiceResponseCallback;
import retrofit.client.Response;
import org.joda.time.DateTime;
import retrofit.http.GET;
import retrofit.http.PUT;
import retrofit.http.Body;

/**
 * An instance of this class provides access to all the operations defined
 * in DatetimeOperations.
 */
public interface DatetimeOperations {
    /**
     * The interface defining all the services for DatetimeOperations to be
     * used by Retrofit to perform actually REST calls.
     */
    interface DatetimeService {
        @GET("/datetime/null")
        Response getNull() throws ServiceException;

        @GET("/datetime/null")
        void getNullAsync(ServiceResponseCallback cb);

        @GET("/datetime/invalid")
        Response getInvalid() throws ServiceException;

        @GET("/datetime/invalid")
        void getInvalidAsync(ServiceResponseCallback cb);

        @GET("/datetime/overflow")
        Response getOverflow() throws ServiceException;

        @GET("/datetime/overflow")
        void getOverflowAsync(ServiceResponseCallback cb);

        @GET("/datetime/underflow")
        Response getUnderflow() throws ServiceException;

        @GET("/datetime/underflow")
        void getUnderflowAsync(ServiceResponseCallback cb);

        @PUT("/datetime/max/utc")
        Response putUtcMaxDateTime(@Body DateTime datetimeBody) throws ServiceException;

        @PUT("/datetime/max/utc")
        void putUtcMaxDateTimeAsync(@Body DateTime datetimeBody, ServiceResponseCallback cb);

        @GET("/datetime/max/utc/lowercase")
        Response getUtcLowercaseMaxDateTime() throws ServiceException;

        @GET("/datetime/max/utc/lowercase")
        void getUtcLowercaseMaxDateTimeAsync(ServiceResponseCallback cb);

        @GET("/datetime/max/utc/uppercase")
        Response getUtcUppercaseMaxDateTime() throws ServiceException;

        @GET("/datetime/max/utc/uppercase")
        void getUtcUppercaseMaxDateTimeAsync(ServiceResponseCallback cb);

        @PUT("/datetime/max/localpositiveoffset")
        Response putLocalPositiveOffsetMaxDateTime(@Body DateTime datetimeBody) throws ServiceException;

        @PUT("/datetime/max/localpositiveoffset")
        void putLocalPositiveOffsetMaxDateTimeAsync(@Body DateTime datetimeBody, ServiceResponseCallback cb);

        @GET("/datetime/max/localpositiveoffset/lowercase")
        Response getLocalPositiveOffsetLowercaseMaxDateTime() throws ServiceException;

        @GET("/datetime/max/localpositiveoffset/lowercase")
        void getLocalPositiveOffsetLowercaseMaxDateTimeAsync(ServiceResponseCallback cb);

        @GET("/datetime/max/localpositiveoffset/uppercase")
        Response getLocalPositiveOffsetUppercaseMaxDateTime() throws ServiceException;

        @GET("/datetime/max/localpositiveoffset/uppercase")
        void getLocalPositiveOffsetUppercaseMaxDateTimeAsync(ServiceResponseCallback cb);

        @PUT("/datetime/max/localnegativeoffset")
        Response putLocalNegativeOffsetMaxDateTime(@Body DateTime datetimeBody) throws ServiceException;

        @PUT("/datetime/max/localnegativeoffset")
        void putLocalNegativeOffsetMaxDateTimeAsync(@Body DateTime datetimeBody, ServiceResponseCallback cb);

        @GET("/datetime/max/localnegativeoffset/uppercase")
        Response getLocalNegativeOffsetUppercaseMaxDateTime() throws ServiceException;

        @GET("/datetime/max/localnegativeoffset/uppercase")
        void getLocalNegativeOffsetUppercaseMaxDateTimeAsync(ServiceResponseCallback cb);

        @GET("/datetime/max/localnegativeoffset/lowercase")
        Response getLocalNegativeOffsetLowercaseMaxDateTime() throws ServiceException;

        @GET("/datetime/max/localnegativeoffset/lowercase")
        void getLocalNegativeOffsetLowercaseMaxDateTimeAsync(ServiceResponseCallback cb);

        @PUT("/datetime/min/utc")
        Response putUtcMinDateTime(@Body DateTime datetimeBody) throws ServiceException;

        @PUT("/datetime/min/utc")
        void putUtcMinDateTimeAsync(@Body DateTime datetimeBody, ServiceResponseCallback cb);

        @GET("/datetime/min/utc")
        Response getUtcMinDateTime() throws ServiceException;

        @GET("/datetime/min/utc")
        void getUtcMinDateTimeAsync(ServiceResponseCallback cb);

        @PUT("/datetime/min/localpositiveoffset")
        Response putLocalPositiveOffsetMinDateTime(@Body DateTime datetimeBody) throws ServiceException;

        @PUT("/datetime/min/localpositiveoffset")
        void putLocalPositiveOffsetMinDateTimeAsync(@Body DateTime datetimeBody, ServiceResponseCallback cb);

        @GET("/datetime/min/localpositiveoffset")
        Response getLocalPositiveOffsetMinDateTime() throws ServiceException;

        @GET("/datetime/min/localpositiveoffset")
        void getLocalPositiveOffsetMinDateTimeAsync(ServiceResponseCallback cb);

        @PUT("/datetime/min/localnegativeoffset")
        Response putLocalNegativeOffsetMinDateTime(@Body DateTime datetimeBody) throws ServiceException;

        @PUT("/datetime/min/localnegativeoffset")
        void putLocalNegativeOffsetMinDateTimeAsync(@Body DateTime datetimeBody, ServiceResponseCallback cb);

        @GET("/datetime/min/localnegativeoffset")
        Response getLocalNegativeOffsetMinDateTime() throws ServiceException;

        @GET("/datetime/min/localnegativeoffset")
        void getLocalNegativeOffsetMinDateTimeAsync(ServiceResponseCallback cb);

    }
    /**
     * Get null datetime value
     *
     * @return the DateTime object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    DateTime getNull() throws ServiceException;

    /**
     * Get null datetime value
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getNullAsync(final ServiceCallback<DateTime> serviceCallback);

    /**
     * Get invalid datetime value
     *
     * @return the DateTime object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    DateTime getInvalid() throws ServiceException;

    /**
     * Get invalid datetime value
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getInvalidAsync(final ServiceCallback<DateTime> serviceCallback);

    /**
     * Get overflow datetime value
     *
     * @return the DateTime object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    DateTime getOverflow() throws ServiceException;

    /**
     * Get overflow datetime value
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getOverflowAsync(final ServiceCallback<DateTime> serviceCallback);

    /**
     * Get underflow datetime value
     *
     * @return the DateTime object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    DateTime getUnderflow() throws ServiceException;

    /**
     * Get underflow datetime value
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getUnderflowAsync(final ServiceCallback<DateTime> serviceCallback);

    /**
     * Put max datetime value 9999-12-31T23:59:59.9999999Z
     *
     * @param datetimeBody the DateTime value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void putUtcMaxDateTime(DateTime datetimeBody) throws ServiceException;

    /**
     * Put max datetime value 9999-12-31T23:59:59.9999999Z
     *
     * @param datetimeBody the DateTime value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void putUtcMaxDateTimeAsync(DateTime datetimeBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Get max datetime value 9999-12-31t23:59:59.9999999z
     *
     * @return the DateTime object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    DateTime getUtcLowercaseMaxDateTime() throws ServiceException;

    /**
     * Get max datetime value 9999-12-31t23:59:59.9999999z
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getUtcLowercaseMaxDateTimeAsync(final ServiceCallback<DateTime> serviceCallback);

    /**
     * Get max datetime value 9999-12-31T23:59:59.9999999Z
     *
     * @return the DateTime object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    DateTime getUtcUppercaseMaxDateTime() throws ServiceException;

    /**
     * Get max datetime value 9999-12-31T23:59:59.9999999Z
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getUtcUppercaseMaxDateTimeAsync(final ServiceCallback<DateTime> serviceCallback);

    /**
     * Put max datetime value with positive numoffset 9999-12-31t23:59:59.9999999+14:00
     *
     * @param datetimeBody the DateTime value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void putLocalPositiveOffsetMaxDateTime(DateTime datetimeBody) throws ServiceException;

    /**
     * Put max datetime value with positive numoffset 9999-12-31t23:59:59.9999999+14:00
     *
     * @param datetimeBody the DateTime value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void putLocalPositiveOffsetMaxDateTimeAsync(DateTime datetimeBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Get max datetime value with positive num offset 9999-12-31t23:59:59.9999999+14:00
     *
     * @return the DateTime object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    DateTime getLocalPositiveOffsetLowercaseMaxDateTime() throws ServiceException;

    /**
     * Get max datetime value with positive num offset 9999-12-31t23:59:59.9999999+14:00
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getLocalPositiveOffsetLowercaseMaxDateTimeAsync(final ServiceCallback<DateTime> serviceCallback);

    /**
     * Get max datetime value with positive num offset 9999-12-31T23:59:59.9999999+14:00
     *
     * @return the DateTime object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    DateTime getLocalPositiveOffsetUppercaseMaxDateTime() throws ServiceException;

    /**
     * Get max datetime value with positive num offset 9999-12-31T23:59:59.9999999+14:00
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getLocalPositiveOffsetUppercaseMaxDateTimeAsync(final ServiceCallback<DateTime> serviceCallback);

    /**
     * Put max datetime value with positive numoffset 9999-12-31t23:59:59.9999999-14:00
     *
     * @param datetimeBody the DateTime value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void putLocalNegativeOffsetMaxDateTime(DateTime datetimeBody) throws ServiceException;

    /**
     * Put max datetime value with positive numoffset 9999-12-31t23:59:59.9999999-14:00
     *
     * @param datetimeBody the DateTime value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void putLocalNegativeOffsetMaxDateTimeAsync(DateTime datetimeBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Get max datetime value with positive num offset 9999-12-31T23:59:59.9999999-14:00
     *
     * @return the DateTime object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    DateTime getLocalNegativeOffsetUppercaseMaxDateTime() throws ServiceException;

    /**
     * Get max datetime value with positive num offset 9999-12-31T23:59:59.9999999-14:00
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getLocalNegativeOffsetUppercaseMaxDateTimeAsync(final ServiceCallback<DateTime> serviceCallback);

    /**
     * Get max datetime value with positive num offset 9999-12-31t23:59:59.9999999-14:00
     *
     * @return the DateTime object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    DateTime getLocalNegativeOffsetLowercaseMaxDateTime() throws ServiceException;

    /**
     * Get max datetime value with positive num offset 9999-12-31t23:59:59.9999999-14:00
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getLocalNegativeOffsetLowercaseMaxDateTimeAsync(final ServiceCallback<DateTime> serviceCallback);

    /**
     * Put min datetime value 0001-01-01T00:00:00Z
     *
     * @param datetimeBody the DateTime value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void putUtcMinDateTime(DateTime datetimeBody) throws ServiceException;

    /**
     * Put min datetime value 0001-01-01T00:00:00Z
     *
     * @param datetimeBody the DateTime value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void putUtcMinDateTimeAsync(DateTime datetimeBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Get min datetime value 0001-01-01T00:00:00Z
     *
     * @return the DateTime object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    DateTime getUtcMinDateTime() throws ServiceException;

    /**
     * Get min datetime value 0001-01-01T00:00:00Z
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getUtcMinDateTimeAsync(final ServiceCallback<DateTime> serviceCallback);

    /**
     * Put min datetime value 0001-01-01T00:00:00+14:00
     *
     * @param datetimeBody the DateTime value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void putLocalPositiveOffsetMinDateTime(DateTime datetimeBody) throws ServiceException;

    /**
     * Put min datetime value 0001-01-01T00:00:00+14:00
     *
     * @param datetimeBody the DateTime value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void putLocalPositiveOffsetMinDateTimeAsync(DateTime datetimeBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Get min datetime value 0001-01-01T00:00:00+14:00
     *
     * @return the DateTime object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    DateTime getLocalPositiveOffsetMinDateTime() throws ServiceException;

    /**
     * Get min datetime value 0001-01-01T00:00:00+14:00
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getLocalPositiveOffsetMinDateTimeAsync(final ServiceCallback<DateTime> serviceCallback);

    /**
     * Put min datetime value 0001-01-01T00:00:00-14:00
     *
     * @param datetimeBody the DateTime value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void putLocalNegativeOffsetMinDateTime(DateTime datetimeBody) throws ServiceException;

    /**
     * Put min datetime value 0001-01-01T00:00:00-14:00
     *
     * @param datetimeBody the DateTime value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void putLocalNegativeOffsetMinDateTimeAsync(DateTime datetimeBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Get min datetime value 0001-01-01T00:00:00-14:00
     *
     * @return the DateTime object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    DateTime getLocalNegativeOffsetMinDateTime() throws ServiceException;

    /**
     * Get min datetime value 0001-01-01T00:00:00-14:00
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getLocalNegativeOffsetMinDateTimeAsync(final ServiceCallback<DateTime> serviceCallback);

}
