/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.requiredoptional;

import com.google.gson.reflect.TypeToken;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceException;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseBuilder;
import com.microsoft.rest.ServiceResponseCallback;
import retrofit.RestAdapter;
import retrofit.RetrofitError;
import retrofit.client.Response;
import fixtures.requiredoptional.models.IntWrapper;
import fixtures.requiredoptional.models.IntOptionalWrapper;
import fixtures.requiredoptional.models.StringWrapper;
import fixtures.requiredoptional.models.StringOptionalWrapper;
import fixtures.requiredoptional.models.Product;
import fixtures.requiredoptional.models.ClassWrapper;
import fixtures.requiredoptional.models.ClassOptionalWrapper;
import java.util.List;
import fixtures.requiredoptional.models.ArrayWrapper;
import fixtures.requiredoptional.models.ArrayOptionalWrapper;
import fixtures.requiredoptional.models.Error;
import com.microsoft.rest.Validator;
import com.microsoft.rest.serializer.JacksonHelper;
import com.microsoft.rest.serializer.CollectionFormat;

public class ExplicitImpl implements Explicit {
    private ExplicitService service;
    AutoRestRequiredOptionalTestService client;

    public ExplicitImpl(RestAdapter restAdapter, AutoRestRequiredOptionalTestService client) {
        this.service = restAdapter.create(ExplicitService.class);
        this.client = client;
    }

    /**
     * Test explicitly required integer. Please put null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the int value
     * @return the Error object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public Error postRequiredIntegerParameter(int bodyParameter) throws ServiceException {
        try {
            ServiceResponse<Error> response = postRequiredIntegerParameterDelegate(service.postRequiredIntegerParameter(bodyParameter), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Error> response = postRequiredIntegerParameterDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Test explicitly required integer. Please put null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the int value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void postRequiredIntegerParameterAsync(int bodyParameter, final ServiceCallback<Error> serviceCallback) {
        service.postRequiredIntegerParameterAsync(bodyParameter, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(postRequiredIntegerParameterDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Error> postRequiredIntegerParameterDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Error>()
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Test explicitly optional integer. Please put null.
     *
     * @param bodyParameter the Integer value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void postOptionalIntegerParameter(Integer bodyParameter) throws ServiceException {
        try {
            ServiceResponse<Void> response = postOptionalIntegerParameterDelegate(service.postOptionalIntegerParameter(bodyParameter), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = postOptionalIntegerParameterDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Test explicitly optional integer. Please put null.
     *
     * @param bodyParameter the Integer value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void postOptionalIntegerParameterAsync(Integer bodyParameter, final ServiceCallback<Void> serviceCallback) {
        service.postOptionalIntegerParameterAsync(bodyParameter, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(postOptionalIntegerParameterDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> postOptionalIntegerParameterDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Test explicitly required integer. Please put a valid int-wrapper with 'value' = null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the IntWrapper value
     * @return the Error object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public Error postRequiredIntegerProperty(IntWrapper bodyParameter) throws ServiceException {
        if (bodyParameter == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter bodyParameter is required and cannot be null."));
        }
        Validator.validate(bodyParameter);
        try {
            ServiceResponse<Error> response = postRequiredIntegerPropertyDelegate(service.postRequiredIntegerProperty(bodyParameter), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Error> response = postRequiredIntegerPropertyDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Test explicitly required integer. Please put a valid int-wrapper with 'value' = null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the IntWrapper value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void postRequiredIntegerPropertyAsync(IntWrapper bodyParameter, final ServiceCallback<Error> serviceCallback) {
        if (bodyParameter == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter bodyParameter is required and cannot be null.")));
        }
        Validator.validate(bodyParameter, serviceCallback);
        service.postRequiredIntegerPropertyAsync(bodyParameter, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(postRequiredIntegerPropertyDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Error> postRequiredIntegerPropertyDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Error>()
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Test explicitly optional integer. Please put a valid int-wrapper with 'value' = null.
     *
     * @param bodyParameter the IntOptionalWrapper value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void postOptionalIntegerProperty(IntOptionalWrapper bodyParameter) throws ServiceException {
        try {
            ServiceResponse<Void> response = postOptionalIntegerPropertyDelegate(service.postOptionalIntegerProperty(bodyParameter), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = postOptionalIntegerPropertyDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Test explicitly optional integer. Please put a valid int-wrapper with 'value' = null.
     *
     * @param bodyParameter the IntOptionalWrapper value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void postOptionalIntegerPropertyAsync(IntOptionalWrapper bodyParameter, final ServiceCallback<Void> serviceCallback) {
        service.postOptionalIntegerPropertyAsync(bodyParameter, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(postOptionalIntegerPropertyDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> postOptionalIntegerPropertyDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Test explicitly required integer. Please put a header 'headerParameter' =&gt; null and the client library should throw before the request is sent.
     *
     * @param headerParameter the int value
     * @return the Error object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public Error postRequiredIntegerHeader(int headerParameter) throws ServiceException {
        try {
            ServiceResponse<Error> response = postRequiredIntegerHeaderDelegate(service.postRequiredIntegerHeader(headerParameter), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Error> response = postRequiredIntegerHeaderDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Test explicitly required integer. Please put a header 'headerParameter' =&gt; null and the client library should throw before the request is sent.
     *
     * @param headerParameter the int value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void postRequiredIntegerHeaderAsync(int headerParameter, final ServiceCallback<Error> serviceCallback) {
        service.postRequiredIntegerHeaderAsync(headerParameter, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(postRequiredIntegerHeaderDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Error> postRequiredIntegerHeaderDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Error>()
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Test explicitly optional integer. Please put a header 'headerParameter' =&gt; null.
     *
     * @param headerParameter the Integer value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void postOptionalIntegerHeader(Integer headerParameter) throws ServiceException {
        try {
            ServiceResponse<Void> response = postOptionalIntegerHeaderDelegate(service.postOptionalIntegerHeader(headerParameter), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = postOptionalIntegerHeaderDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Test explicitly optional integer. Please put a header 'headerParameter' =&gt; null.
     *
     * @param headerParameter the Integer value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void postOptionalIntegerHeaderAsync(Integer headerParameter, final ServiceCallback<Void> serviceCallback) {
        service.postOptionalIntegerHeaderAsync(headerParameter, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(postOptionalIntegerHeaderDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> postOptionalIntegerHeaderDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Test explicitly required string. Please put null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the String value
     * @return the Error object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public Error postRequiredStringParameter(String bodyParameter) throws ServiceException {
        if (bodyParameter == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter bodyParameter is required and cannot be null."));
        }
        try {
            ServiceResponse<Error> response = postRequiredStringParameterDelegate(service.postRequiredStringParameter(bodyParameter), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Error> response = postRequiredStringParameterDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Test explicitly required string. Please put null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void postRequiredStringParameterAsync(String bodyParameter, final ServiceCallback<Error> serviceCallback) {
        if (bodyParameter == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter bodyParameter is required and cannot be null.")));
        }
        service.postRequiredStringParameterAsync(bodyParameter, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(postRequiredStringParameterDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Error> postRequiredStringParameterDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Error>()
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Test explicitly optional string. Please put null.
     *
     * @param bodyParameter the String value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void postOptionalStringParameter(String bodyParameter) throws ServiceException {
        try {
            ServiceResponse<Void> response = postOptionalStringParameterDelegate(service.postOptionalStringParameter(bodyParameter), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = postOptionalStringParameterDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Test explicitly optional string. Please put null.
     *
     * @param bodyParameter the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void postOptionalStringParameterAsync(String bodyParameter, final ServiceCallback<Void> serviceCallback) {
        service.postOptionalStringParameterAsync(bodyParameter, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(postOptionalStringParameterDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> postOptionalStringParameterDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Test explicitly required string. Please put a valid string-wrapper with 'value' = null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the StringWrapper value
     * @return the Error object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public Error postRequiredStringProperty(StringWrapper bodyParameter) throws ServiceException {
        if (bodyParameter == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter bodyParameter is required and cannot be null."));
        }
        Validator.validate(bodyParameter);
        try {
            ServiceResponse<Error> response = postRequiredStringPropertyDelegate(service.postRequiredStringProperty(bodyParameter), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Error> response = postRequiredStringPropertyDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Test explicitly required string. Please put a valid string-wrapper with 'value' = null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the StringWrapper value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void postRequiredStringPropertyAsync(StringWrapper bodyParameter, final ServiceCallback<Error> serviceCallback) {
        if (bodyParameter == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter bodyParameter is required and cannot be null.")));
        }
        Validator.validate(bodyParameter, serviceCallback);
        service.postRequiredStringPropertyAsync(bodyParameter, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(postRequiredStringPropertyDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Error> postRequiredStringPropertyDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Error>()
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Test explicitly optional integer. Please put a valid string-wrapper with 'value' = null.
     *
     * @param bodyParameter the StringOptionalWrapper value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void postOptionalStringProperty(StringOptionalWrapper bodyParameter) throws ServiceException {
        try {
            ServiceResponse<Void> response = postOptionalStringPropertyDelegate(service.postOptionalStringProperty(bodyParameter), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = postOptionalStringPropertyDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Test explicitly optional integer. Please put a valid string-wrapper with 'value' = null.
     *
     * @param bodyParameter the StringOptionalWrapper value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void postOptionalStringPropertyAsync(StringOptionalWrapper bodyParameter, final ServiceCallback<Void> serviceCallback) {
        service.postOptionalStringPropertyAsync(bodyParameter, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(postOptionalStringPropertyDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> postOptionalStringPropertyDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Test explicitly required string. Please put a header 'headerParameter' =&gt; null and the client library should throw before the request is sent.
     *
     * @param headerParameter the String value
     * @return the Error object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public Error postRequiredStringHeader(String headerParameter) throws ServiceException {
        if (headerParameter == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter headerParameter is required and cannot be null."));
        }
        try {
            ServiceResponse<Error> response = postRequiredStringHeaderDelegate(service.postRequiredStringHeader(headerParameter), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Error> response = postRequiredStringHeaderDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Test explicitly required string. Please put a header 'headerParameter' =&gt; null and the client library should throw before the request is sent.
     *
     * @param headerParameter the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void postRequiredStringHeaderAsync(String headerParameter, final ServiceCallback<Error> serviceCallback) {
        if (headerParameter == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter headerParameter is required and cannot be null.")));
        }
        service.postRequiredStringHeaderAsync(headerParameter, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(postRequiredStringHeaderDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Error> postRequiredStringHeaderDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Error>()
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Test explicitly optional string. Please put a header 'headerParameter' =&gt; null.
     *
     * @param bodyParameter the String value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void postOptionalStringHeader(String bodyParameter) throws ServiceException {
        try {
            ServiceResponse<Void> response = postOptionalStringHeaderDelegate(service.postOptionalStringHeader(bodyParameter), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = postOptionalStringHeaderDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Test explicitly optional string. Please put a header 'headerParameter' =&gt; null.
     *
     * @param bodyParameter the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void postOptionalStringHeaderAsync(String bodyParameter, final ServiceCallback<Void> serviceCallback) {
        service.postOptionalStringHeaderAsync(bodyParameter, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(postOptionalStringHeaderDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> postOptionalStringHeaderDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Test explicitly required complex object. Please put null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the Product value
     * @return the Error object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public Error postRequiredClassParameter(Product bodyParameter) throws ServiceException {
        if (bodyParameter == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter bodyParameter is required and cannot be null."));
        }
        Validator.validate(bodyParameter);
        try {
            ServiceResponse<Error> response = postRequiredClassParameterDelegate(service.postRequiredClassParameter(bodyParameter), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Error> response = postRequiredClassParameterDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Test explicitly required complex object. Please put null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the Product value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void postRequiredClassParameterAsync(Product bodyParameter, final ServiceCallback<Error> serviceCallback) {
        if (bodyParameter == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter bodyParameter is required and cannot be null.")));
        }
        Validator.validate(bodyParameter, serviceCallback);
        service.postRequiredClassParameterAsync(bodyParameter, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(postRequiredClassParameterDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Error> postRequiredClassParameterDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Error>()
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Test explicitly optional complex object. Please put null.
     *
     * @param bodyParameter the Product value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void postOptionalClassParameter(Product bodyParameter) throws ServiceException {
        try {
            ServiceResponse<Void> response = postOptionalClassParameterDelegate(service.postOptionalClassParameter(bodyParameter), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = postOptionalClassParameterDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Test explicitly optional complex object. Please put null.
     *
     * @param bodyParameter the Product value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void postOptionalClassParameterAsync(Product bodyParameter, final ServiceCallback<Void> serviceCallback) {
        service.postOptionalClassParameterAsync(bodyParameter, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(postOptionalClassParameterDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> postOptionalClassParameterDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Test explicitly required complex object. Please put a valid class-wrapper with 'value' = null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the ClassWrapper value
     * @return the Error object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public Error postRequiredClassProperty(ClassWrapper bodyParameter) throws ServiceException {
        if (bodyParameter == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter bodyParameter is required and cannot be null."));
        }
        Validator.validate(bodyParameter);
        try {
            ServiceResponse<Error> response = postRequiredClassPropertyDelegate(service.postRequiredClassProperty(bodyParameter), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Error> response = postRequiredClassPropertyDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Test explicitly required complex object. Please put a valid class-wrapper with 'value' = null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the ClassWrapper value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void postRequiredClassPropertyAsync(ClassWrapper bodyParameter, final ServiceCallback<Error> serviceCallback) {
        if (bodyParameter == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter bodyParameter is required and cannot be null.")));
        }
        Validator.validate(bodyParameter, serviceCallback);
        service.postRequiredClassPropertyAsync(bodyParameter, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(postRequiredClassPropertyDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Error> postRequiredClassPropertyDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Error>()
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Test explicitly optional complex object. Please put a valid class-wrapper with 'value' = null.
     *
     * @param bodyParameter the ClassOptionalWrapper value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void postOptionalClassProperty(ClassOptionalWrapper bodyParameter) throws ServiceException {
        try {
            ServiceResponse<Void> response = postOptionalClassPropertyDelegate(service.postOptionalClassProperty(bodyParameter), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = postOptionalClassPropertyDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Test explicitly optional complex object. Please put a valid class-wrapper with 'value' = null.
     *
     * @param bodyParameter the ClassOptionalWrapper value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void postOptionalClassPropertyAsync(ClassOptionalWrapper bodyParameter, final ServiceCallback<Void> serviceCallback) {
        service.postOptionalClassPropertyAsync(bodyParameter, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(postOptionalClassPropertyDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> postOptionalClassPropertyDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Test explicitly required array. Please put null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the List&lt;String&gt; value
     * @return the Error object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public Error postRequiredArrayParameter(List<String> bodyParameter) throws ServiceException {
        if (bodyParameter == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter bodyParameter is required and cannot be null."));
        }
        Validator.validate(bodyParameter);
        try {
            ServiceResponse<Error> response = postRequiredArrayParameterDelegate(service.postRequiredArrayParameter(bodyParameter), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Error> response = postRequiredArrayParameterDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Test explicitly required array. Please put null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the List&lt;String&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void postRequiredArrayParameterAsync(List<String> bodyParameter, final ServiceCallback<Error> serviceCallback) {
        if (bodyParameter == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter bodyParameter is required and cannot be null.")));
        }
        Validator.validate(bodyParameter, serviceCallback);
        service.postRequiredArrayParameterAsync(bodyParameter, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(postRequiredArrayParameterDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Error> postRequiredArrayParameterDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Error>()
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Test explicitly optional array. Please put null.
     *
     * @param bodyParameter the List&lt;String&gt; value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void postOptionalArrayParameter(List<String> bodyParameter) throws ServiceException {
        try {
            ServiceResponse<Void> response = postOptionalArrayParameterDelegate(service.postOptionalArrayParameter(bodyParameter), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = postOptionalArrayParameterDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Test explicitly optional array. Please put null.
     *
     * @param bodyParameter the List&lt;String&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void postOptionalArrayParameterAsync(List<String> bodyParameter, final ServiceCallback<Void> serviceCallback) {
        service.postOptionalArrayParameterAsync(bodyParameter, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(postOptionalArrayParameterDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> postOptionalArrayParameterDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Test explicitly required array. Please put a valid array-wrapper with 'value' = null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the ArrayWrapper value
     * @return the Error object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public Error postRequiredArrayProperty(ArrayWrapper bodyParameter) throws ServiceException {
        if (bodyParameter == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter bodyParameter is required and cannot be null."));
        }
        Validator.validate(bodyParameter);
        try {
            ServiceResponse<Error> response = postRequiredArrayPropertyDelegate(service.postRequiredArrayProperty(bodyParameter), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Error> response = postRequiredArrayPropertyDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Test explicitly required array. Please put a valid array-wrapper with 'value' = null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the ArrayWrapper value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void postRequiredArrayPropertyAsync(ArrayWrapper bodyParameter, final ServiceCallback<Error> serviceCallback) {
        if (bodyParameter == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter bodyParameter is required and cannot be null.")));
        }
        Validator.validate(bodyParameter, serviceCallback);
        service.postRequiredArrayPropertyAsync(bodyParameter, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(postRequiredArrayPropertyDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Error> postRequiredArrayPropertyDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Error>()
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Test explicitly optional array. Please put a valid array-wrapper with 'value' = null.
     *
     * @param bodyParameter the ArrayOptionalWrapper value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void postOptionalArrayProperty(ArrayOptionalWrapper bodyParameter) throws ServiceException {
        try {
            ServiceResponse<Void> response = postOptionalArrayPropertyDelegate(service.postOptionalArrayProperty(bodyParameter), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = postOptionalArrayPropertyDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Test explicitly optional array. Please put a valid array-wrapper with 'value' = null.
     *
     * @param bodyParameter the ArrayOptionalWrapper value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void postOptionalArrayPropertyAsync(ArrayOptionalWrapper bodyParameter, final ServiceCallback<Void> serviceCallback) {
        service.postOptionalArrayPropertyAsync(bodyParameter, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(postOptionalArrayPropertyDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> postOptionalArrayPropertyDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Test explicitly required array. Please put a header 'headerParameter' =&gt; null and the client library should throw before the request is sent.
     *
     * @param headerParameter the List&lt;String&gt; value
     * @return the Error object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public Error postRequiredArrayHeader(List<String> headerParameter) throws ServiceException {
        if (headerParameter == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter headerParameter is required and cannot be null."));
        }
        Validator.validate(headerParameter);
        try {
            ServiceResponse<Error> response = postRequiredArrayHeaderDelegate(service.postRequiredArrayHeader(JacksonHelper.serializeList(headerParameter, CollectionFormat.CSV)), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Error> response = postRequiredArrayHeaderDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Test explicitly required array. Please put a header 'headerParameter' =&gt; null and the client library should throw before the request is sent.
     *
     * @param headerParameter the List&lt;String&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void postRequiredArrayHeaderAsync(List<String> headerParameter, final ServiceCallback<Error> serviceCallback) {
        if (headerParameter == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter headerParameter is required and cannot be null.")));
        }
        Validator.validate(headerParameter, serviceCallback);
        service.postRequiredArrayHeaderAsync(JacksonHelper.serializeList(headerParameter, CollectionFormat.CSV), new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(postRequiredArrayHeaderDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Error> postRequiredArrayHeaderDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Error>()
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Test explicitly optional integer. Please put a header 'headerParameter' =&gt; null.
     *
     * @param headerParameter the List&lt;String&gt; value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void postOptionalArrayHeader(List<String> headerParameter) throws ServiceException {
        try {
            ServiceResponse<Void> response = postOptionalArrayHeaderDelegate(service.postOptionalArrayHeader(JacksonHelper.serializeList(headerParameter, CollectionFormat.CSV)), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = postOptionalArrayHeaderDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Test explicitly optional integer. Please put a header 'headerParameter' =&gt; null.
     *
     * @param headerParameter the List&lt;String&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void postOptionalArrayHeaderAsync(List<String> headerParameter, final ServiceCallback<Void> serviceCallback) {
        service.postOptionalArrayHeaderAsync(JacksonHelper.serializeList(headerParameter, CollectionFormat.CSV), new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(postOptionalArrayHeaderDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> postOptionalArrayHeaderDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

}
