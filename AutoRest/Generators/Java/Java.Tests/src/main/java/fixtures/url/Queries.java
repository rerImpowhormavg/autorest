// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.


package fixtures.url;

import com.microsoft.rest.ServiceException;
import retrofit.Callback;
import retrofit.client.Response;

public interface queries {
    @GET("/queries/bool/true")
     getBooleanTrue(Boolean boolQuery);

    @GET("/queries/bool/true")
    void getBooleanTrueAsync(Boolean boolQuery, Callback<Response> cb);

    @GET("/queries/bool/false")
     getBooleanFalse(Boolean boolQuery);

    @GET("/queries/bool/false")
    void getBooleanFalseAsync(Boolean boolQuery, Callback<Response> cb);

    @GET("/queries/bool/null")
     getBooleanNull(Boolean boolQuery);

    @GET("/queries/bool/null")
    void getBooleanNullAsync(Boolean boolQuery, Callback<Response> cb);

    @GET("/queries/int/1000000")
     getIntOneMillion(Integer intQuery);

    @GET("/queries/int/1000000")
    void getIntOneMillionAsync(Integer intQuery, Callback<Response> cb);

    @GET("/queries/int/-1000000")
     getIntNegativeOneMillion(Integer intQuery);

    @GET("/queries/int/-1000000")
    void getIntNegativeOneMillionAsync(Integer intQuery, Callback<Response> cb);

    @GET("/queries/int/null")
     getIntNull(Integer intQuery);

    @GET("/queries/int/null")
    void getIntNullAsync(Integer intQuery, Callback<Response> cb);

    @GET("/queries/long/10000000000")
     getTenBillion(Long longQuery);

    @GET("/queries/long/10000000000")
    void getTenBillionAsync(Long longQuery, Callback<Response> cb);

    @GET("/queries/long/-10000000000")
     getNegativeTenBillion(Long longQuery);

    @GET("/queries/long/-10000000000")
    void getNegativeTenBillionAsync(Long longQuery, Callback<Response> cb);

    @GET("/queries/long/null")
     getLongNull(Long longQuery);

    @GET("/queries/long/null")
    void getLongNullAsync(Long longQuery, Callback<Response> cb);

    @GET("/queries/float/1.034E+20")
     floatScientificPositive(Double floatQuery);

    @GET("/queries/float/1.034E+20")
    void floatScientificPositiveAsync(Double floatQuery, Callback<Response> cb);

    @GET("/queries/float/-1.034E-20")
     floatScientificNegative(Double floatQuery);

    @GET("/queries/float/-1.034E-20")
    void floatScientificNegativeAsync(Double floatQuery, Callback<Response> cb);

    @GET("/queries/float/null")
     floatNull(Double floatQuery);

    @GET("/queries/float/null")
    void floatNullAsync(Double floatQuery, Callback<Response> cb);

    @GET("/queries/double/9999999.999")
     doubleDecimalPositive(Double doubleQuery);

    @GET("/queries/double/9999999.999")
    void doubleDecimalPositiveAsync(Double doubleQuery, Callback<Response> cb);

    @GET("/queries/double/-9999999.999")
     doubleDecimalNegative(Double doubleQuery);

    @GET("/queries/double/-9999999.999")
    void doubleDecimalNegativeAsync(Double doubleQuery, Callback<Response> cb);

    @GET("/queries/double/null")
     doubleNull(Double doubleQuery);

    @GET("/queries/double/null")
    void doubleNullAsync(Double doubleQuery, Callback<Response> cb);

    @GET("/queries/string/unicode/")
     stringUnicode(String stringQuery);

    @GET("/queries/string/unicode/")
    void stringUnicodeAsync(String stringQuery, Callback<Response> cb);

    @GET("/queries/string/begin%21%2A%27%28%29%3B%3A%40%20%26%3D%2B%24%2C%2F%3F%23%5B%5Dend")
     stringUrlEncoded(String stringQuery);

    @GET("/queries/string/begin%21%2A%27%28%29%3B%3A%40%20%26%3D%2B%24%2C%2F%3F%23%5B%5Dend")
    void stringUrlEncodedAsync(String stringQuery, Callback<Response> cb);

    @GET("/queries/string/empty")
     stringEmpty(String stringQuery);

    @GET("/queries/string/empty")
    void stringEmptyAsync(String stringQuery, Callback<Response> cb);

    @GET("/queries/string/null")
     stringNull(String stringQuery);

    @GET("/queries/string/null")
    void stringNullAsync(String stringQuery, Callback<Response> cb);

    @GET("/queries/enum/green%20color")
     enumValid(UriColor enumQuery);

    @GET("/queries/enum/green%20color")
    void enumValidAsync(UriColor enumQuery, Callback<Response> cb);

    @GET("/queries/enum/null")
     enumNull(UriColor enumQuery);

    @GET("/queries/enum/null")
    void enumNullAsync(UriColor enumQuery, Callback<Response> cb);

    @GET("/queries/byte/multibyte")
     byteMultiByte(Buffer byteQuery);

    @GET("/queries/byte/multibyte")
    void byteMultiByteAsync(Buffer byteQuery, Callback<Response> cb);

    @GET("/queries/byte/empty")
     byteEmpty(Buffer byteQuery);

    @GET("/queries/byte/empty")
    void byteEmptyAsync(Buffer byteQuery, Callback<Response> cb);

    @GET("/queries/byte/null")
     byteNull(Buffer byteQuery);

    @GET("/queries/byte/null")
    void byteNullAsync(Buffer byteQuery, Callback<Response> cb);

    @GET("/queries/date/2012-01-01")
     dateValid(Date dateQuery);

    @GET("/queries/date/2012-01-01")
    void dateValidAsync(Date dateQuery, Callback<Response> cb);

    @GET("/queries/date/null")
     dateNull(Date dateQuery);

    @GET("/queries/date/null")
    void dateNullAsync(Date dateQuery, Callback<Response> cb);

    @GET("/queries/datetime/2012-01-01T01%3A01%3A01Z")
     dateTimeValid(Date dateTimeQuery);

    @GET("/queries/datetime/2012-01-01T01%3A01%3A01Z")
    void dateTimeValidAsync(Date dateTimeQuery, Callback<Response> cb);

    @GET("/queries/datetime/null")
     dateTimeNull(Date dateTimeQuery);

    @GET("/queries/datetime/null")
    void dateTimeNullAsync(Date dateTimeQuery, Callback<Response> cb);

    @GET("/queries/array/csv/string/valid")
     arrayStringCsvValid(Array arrayQuery);

    @GET("/queries/array/csv/string/valid")
    void arrayStringCsvValidAsync(Array arrayQuery, Callback<Response> cb);

    @GET("/queries/array/csv/string/null")
     arrayStringCsvNull(Array arrayQuery);

    @GET("/queries/array/csv/string/null")
    void arrayStringCsvNullAsync(Array arrayQuery, Callback<Response> cb);

    @GET("/queries/array/csv/string/empty")
     arrayStringCsvEmpty(Array arrayQuery);

    @GET("/queries/array/csv/string/empty")
    void arrayStringCsvEmptyAsync(Array arrayQuery, Callback<Response> cb);

    @GET("/queries/array/ssv/string/valid")
     arrayStringSsvValid(Array arrayQuery);

    @GET("/queries/array/ssv/string/valid")
    void arrayStringSsvValidAsync(Array arrayQuery, Callback<Response> cb);

    @GET("/queries/array/tsv/string/valid")
     arrayStringTsvValid(Array arrayQuery);

    @GET("/queries/array/tsv/string/valid")
    void arrayStringTsvValidAsync(Array arrayQuery, Callback<Response> cb);

    @GET("/queries/array/pipes/string/valid")
     arrayStringPipesValid(Array arrayQuery);

    @GET("/queries/array/pipes/string/valid")
    void arrayStringPipesValidAsync(Array arrayQuery, Callback<Response> cb);

}
