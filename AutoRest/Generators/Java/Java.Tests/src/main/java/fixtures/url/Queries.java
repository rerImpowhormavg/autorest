// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.


package fixtures.url;

import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceException;
import com.microsoft.rest.ServiceResponseCallback;
import retrofit.client.Response;
import fixtures.url.models.UriColor;
import java.util.Date;
import java.util.List;
import retrofit.http.GET;
import retrofit.http.Query;

public interface Queries {
    interface QueriesService {
        @GET("/queries/bool/true")
        Response getBooleanTrue(@Query("boolQuery") boolean boolQuery) throws ServiceException;

        @GET("/queries/bool/true")
        void getBooleanTrueAsync(@Query("boolQuery") boolean boolQuery, ServiceResponseCallback cb);

        @GET("/queries/bool/false")
        Response getBooleanFalse(@Query("boolQuery") boolean boolQuery) throws ServiceException;

        @GET("/queries/bool/false")
        void getBooleanFalseAsync(@Query("boolQuery") boolean boolQuery, ServiceResponseCallback cb);

        @GET("/queries/bool/null")
        Response getBooleanNull(@Query("boolQuery") boolean boolQuery) throws ServiceException;

        @GET("/queries/bool/null")
        void getBooleanNullAsync(@Query("boolQuery") boolean boolQuery, ServiceResponseCallback cb);

        @GET("/queries/int/1000000")
        Response getIntOneMillion(@Query("intQuery") int intQuery) throws ServiceException;

        @GET("/queries/int/1000000")
        void getIntOneMillionAsync(@Query("intQuery") int intQuery, ServiceResponseCallback cb);

        @GET("/queries/int/-1000000")
        Response getIntNegativeOneMillion(@Query("intQuery") int intQuery) throws ServiceException;

        @GET("/queries/int/-1000000")
        void getIntNegativeOneMillionAsync(@Query("intQuery") int intQuery, ServiceResponseCallback cb);

        @GET("/queries/int/null")
        Response getIntNull(@Query("intQuery") int intQuery) throws ServiceException;

        @GET("/queries/int/null")
        void getIntNullAsync(@Query("intQuery") int intQuery, ServiceResponseCallback cb);

        @GET("/queries/long/10000000000")
        Response getTenBillion(@Query("longQuery") long longQuery) throws ServiceException;

        @GET("/queries/long/10000000000")
        void getTenBillionAsync(@Query("longQuery") long longQuery, ServiceResponseCallback cb);

        @GET("/queries/long/-10000000000")
        Response getNegativeTenBillion(@Query("longQuery") long longQuery) throws ServiceException;

        @GET("/queries/long/-10000000000")
        void getNegativeTenBillionAsync(@Query("longQuery") long longQuery, ServiceResponseCallback cb);

        @GET("/queries/long/null")
        Response getLongNull(@Query("longQuery") long longQuery) throws ServiceException;

        @GET("/queries/long/null")
        void getLongNullAsync(@Query("longQuery") long longQuery, ServiceResponseCallback cb);

        @GET("/queries/float/1.034E+20")
        Response floatScientificPositive(@Query("floatQuery") double floatQuery) throws ServiceException;

        @GET("/queries/float/1.034E+20")
        void floatScientificPositiveAsync(@Query("floatQuery") double floatQuery, ServiceResponseCallback cb);

        @GET("/queries/float/-1.034E-20")
        Response floatScientificNegative(@Query("floatQuery") double floatQuery) throws ServiceException;

        @GET("/queries/float/-1.034E-20")
        void floatScientificNegativeAsync(@Query("floatQuery") double floatQuery, ServiceResponseCallback cb);

        @GET("/queries/float/null")
        Response floatNull(@Query("floatQuery") double floatQuery) throws ServiceException;

        @GET("/queries/float/null")
        void floatNullAsync(@Query("floatQuery") double floatQuery, ServiceResponseCallback cb);

        @GET("/queries/double/9999999.999")
        Response doubleDecimalPositive(@Query("doubleQuery") double doubleQuery) throws ServiceException;

        @GET("/queries/double/9999999.999")
        void doubleDecimalPositiveAsync(@Query("doubleQuery") double doubleQuery, ServiceResponseCallback cb);

        @GET("/queries/double/-9999999.999")
        Response doubleDecimalNegative(@Query("doubleQuery") double doubleQuery) throws ServiceException;

        @GET("/queries/double/-9999999.999")
        void doubleDecimalNegativeAsync(@Query("doubleQuery") double doubleQuery, ServiceResponseCallback cb);

        @GET("/queries/double/null")
        Response doubleNull(@Query("doubleQuery") double doubleQuery) throws ServiceException;

        @GET("/queries/double/null")
        void doubleNullAsync(@Query("doubleQuery") double doubleQuery, ServiceResponseCallback cb);

        @GET("/queries/string/unicode/")
        Response stringUnicode(@Query("stringQuery") String stringQuery) throws ServiceException;

        @GET("/queries/string/unicode/")
        void stringUnicodeAsync(@Query("stringQuery") String stringQuery, ServiceResponseCallback cb);

        @GET("/queries/string/begin%21%2A%27%28%29%3B%3A%40%20%26%3D%2B%24%2C%2F%3F%23%5B%5Dend")
        Response stringUrlEncoded(@Query("stringQuery") String stringQuery) throws ServiceException;

        @GET("/queries/string/begin%21%2A%27%28%29%3B%3A%40%20%26%3D%2B%24%2C%2F%3F%23%5B%5Dend")
        void stringUrlEncodedAsync(@Query("stringQuery") String stringQuery, ServiceResponseCallback cb);

        @GET("/queries/string/empty")
        Response stringEmpty(@Query("stringQuery") String stringQuery) throws ServiceException;

        @GET("/queries/string/empty")
        void stringEmptyAsync(@Query("stringQuery") String stringQuery, ServiceResponseCallback cb);

        @GET("/queries/string/null")
        Response stringNull(@Query("stringQuery") String stringQuery) throws ServiceException;

        @GET("/queries/string/null")
        void stringNullAsync(@Query("stringQuery") String stringQuery, ServiceResponseCallback cb);

        @GET("/queries/enum/green%20color")
        Response enumValid(@Query("enumQuery") UriColor enumQuery) throws ServiceException;

        @GET("/queries/enum/green%20color")
        void enumValidAsync(@Query("enumQuery") UriColor enumQuery, ServiceResponseCallback cb);

        @GET("/queries/enum/null")
        Response enumNull(@Query("enumQuery") UriColor enumQuery) throws ServiceException;

        @GET("/queries/enum/null")
        void enumNullAsync(@Query("enumQuery") UriColor enumQuery, ServiceResponseCallback cb);

        @GET("/queries/byte/multibyte")
        Response byteMultiByte(@Query("byteQuery") byte[] byteQuery) throws ServiceException;

        @GET("/queries/byte/multibyte")
        void byteMultiByteAsync(@Query("byteQuery") byte[] byteQuery, ServiceResponseCallback cb);

        @GET("/queries/byte/empty")
        Response byteEmpty(@Query("byteQuery") byte[] byteQuery) throws ServiceException;

        @GET("/queries/byte/empty")
        void byteEmptyAsync(@Query("byteQuery") byte[] byteQuery, ServiceResponseCallback cb);

        @GET("/queries/byte/null")
        Response byteNull(@Query("byteQuery") byte[] byteQuery) throws ServiceException;

        @GET("/queries/byte/null")
        void byteNullAsync(@Query("byteQuery") byte[] byteQuery, ServiceResponseCallback cb);

        @GET("/queries/date/2012-01-01")
        Response dateValid(@Query("dateQuery") Date dateQuery) throws ServiceException;

        @GET("/queries/date/2012-01-01")
        void dateValidAsync(@Query("dateQuery") Date dateQuery, ServiceResponseCallback cb);

        @GET("/queries/date/null")
        Response dateNull(@Query("dateQuery") Date dateQuery) throws ServiceException;

        @GET("/queries/date/null")
        void dateNullAsync(@Query("dateQuery") Date dateQuery, ServiceResponseCallback cb);

        @GET("/queries/datetime/2012-01-01T01%3A01%3A01Z")
        Response dateTimeValid(@Query("dateTimeQuery") Date dateTimeQuery) throws ServiceException;

        @GET("/queries/datetime/2012-01-01T01%3A01%3A01Z")
        void dateTimeValidAsync(@Query("dateTimeQuery") Date dateTimeQuery, ServiceResponseCallback cb);

        @GET("/queries/datetime/null")
        Response dateTimeNull(@Query("dateTimeQuery") Date dateTimeQuery) throws ServiceException;

        @GET("/queries/datetime/null")
        void dateTimeNullAsync(@Query("dateTimeQuery") Date dateTimeQuery, ServiceResponseCallback cb);

        @GET("/queries/array/csv/string/valid")
        Response arrayStringCsvValid(@Query("arrayQuery") List<String> arrayQuery) throws ServiceException;

        @GET("/queries/array/csv/string/valid")
        void arrayStringCsvValidAsync(@Query("arrayQuery") List<String> arrayQuery, ServiceResponseCallback cb);

        @GET("/queries/array/csv/string/null")
        Response arrayStringCsvNull(@Query("arrayQuery") List<String> arrayQuery) throws ServiceException;

        @GET("/queries/array/csv/string/null")
        void arrayStringCsvNullAsync(@Query("arrayQuery") List<String> arrayQuery, ServiceResponseCallback cb);

        @GET("/queries/array/csv/string/empty")
        Response arrayStringCsvEmpty(@Query("arrayQuery") List<String> arrayQuery) throws ServiceException;

        @GET("/queries/array/csv/string/empty")
        void arrayStringCsvEmptyAsync(@Query("arrayQuery") List<String> arrayQuery, ServiceResponseCallback cb);

        @GET("/queries/array/ssv/string/valid")
        Response arrayStringSsvValid(@Query("arrayQuery") List<String> arrayQuery) throws ServiceException;

        @GET("/queries/array/ssv/string/valid")
        void arrayStringSsvValidAsync(@Query("arrayQuery") List<String> arrayQuery, ServiceResponseCallback cb);

        @GET("/queries/array/tsv/string/valid")
        Response arrayStringTsvValid(@Query("arrayQuery") List<String> arrayQuery) throws ServiceException;

        @GET("/queries/array/tsv/string/valid")
        void arrayStringTsvValidAsync(@Query("arrayQuery") List<String> arrayQuery, ServiceResponseCallback cb);

        @GET("/queries/array/pipes/string/valid")
        Response arrayStringPipesValid(@Query("arrayQuery") List<String> arrayQuery) throws ServiceException;

        @GET("/queries/array/pipes/string/valid")
        void arrayStringPipesValidAsync(@Query("arrayQuery") List<String> arrayQuery, ServiceResponseCallback cb);

    }
    void getBooleanTrue(boolean boolQuery) throws ServiceException;

    void getBooleanTrueAsync(boolean boolQuery, final ServiceCallback<Void> serviceCallback);

    void getBooleanFalse(boolean boolQuery) throws ServiceException;

    void getBooleanFalseAsync(boolean boolQuery, final ServiceCallback<Void> serviceCallback);

    void getBooleanNull(boolean boolQuery) throws ServiceException;

    void getBooleanNullAsync(boolean boolQuery, final ServiceCallback<Void> serviceCallback);

    void getIntOneMillion(int intQuery) throws ServiceException;

    void getIntOneMillionAsync(int intQuery, final ServiceCallback<Void> serviceCallback);

    void getIntNegativeOneMillion(int intQuery) throws ServiceException;

    void getIntNegativeOneMillionAsync(int intQuery, final ServiceCallback<Void> serviceCallback);

    void getIntNull(int intQuery) throws ServiceException;

    void getIntNullAsync(int intQuery, final ServiceCallback<Void> serviceCallback);

    void getTenBillion(long longQuery) throws ServiceException;

    void getTenBillionAsync(long longQuery, final ServiceCallback<Void> serviceCallback);

    void getNegativeTenBillion(long longQuery) throws ServiceException;

    void getNegativeTenBillionAsync(long longQuery, final ServiceCallback<Void> serviceCallback);

    void getLongNull(long longQuery) throws ServiceException;

    void getLongNullAsync(long longQuery, final ServiceCallback<Void> serviceCallback);

    void floatScientificPositive(double floatQuery) throws ServiceException;

    void floatScientificPositiveAsync(double floatQuery, final ServiceCallback<Void> serviceCallback);

    void floatScientificNegative(double floatQuery) throws ServiceException;

    void floatScientificNegativeAsync(double floatQuery, final ServiceCallback<Void> serviceCallback);

    void floatNull(double floatQuery) throws ServiceException;

    void floatNullAsync(double floatQuery, final ServiceCallback<Void> serviceCallback);

    void doubleDecimalPositive(double doubleQuery) throws ServiceException;

    void doubleDecimalPositiveAsync(double doubleQuery, final ServiceCallback<Void> serviceCallback);

    void doubleDecimalNegative(double doubleQuery) throws ServiceException;

    void doubleDecimalNegativeAsync(double doubleQuery, final ServiceCallback<Void> serviceCallback);

    void doubleNull(double doubleQuery) throws ServiceException;

    void doubleNullAsync(double doubleQuery, final ServiceCallback<Void> serviceCallback);

    void stringUnicode(String stringQuery) throws ServiceException;

    void stringUnicodeAsync(String stringQuery, final ServiceCallback<Void> serviceCallback);

    void stringUrlEncoded(String stringQuery) throws ServiceException;

    void stringUrlEncodedAsync(String stringQuery, final ServiceCallback<Void> serviceCallback);

    void stringEmpty(String stringQuery) throws ServiceException;

    void stringEmptyAsync(String stringQuery, final ServiceCallback<Void> serviceCallback);

    void stringNull(String stringQuery) throws ServiceException;

    void stringNullAsync(String stringQuery, final ServiceCallback<Void> serviceCallback);

    void enumValid(UriColor enumQuery) throws ServiceException;

    void enumValidAsync(UriColor enumQuery, final ServiceCallback<Void> serviceCallback);

    void enumNull(UriColor enumQuery) throws ServiceException;

    void enumNullAsync(UriColor enumQuery, final ServiceCallback<Void> serviceCallback);

    void byteMultiByte(byte[] byteQuery) throws ServiceException;

    void byteMultiByteAsync(byte[] byteQuery, final ServiceCallback<Void> serviceCallback);

    void byteEmpty(byte[] byteQuery) throws ServiceException;

    void byteEmptyAsync(byte[] byteQuery, final ServiceCallback<Void> serviceCallback);

    void byteNull(byte[] byteQuery) throws ServiceException;

    void byteNullAsync(byte[] byteQuery, final ServiceCallback<Void> serviceCallback);

    void dateValid(Date dateQuery) throws ServiceException;

    void dateValidAsync(Date dateQuery, final ServiceCallback<Void> serviceCallback);

    void dateNull(Date dateQuery) throws ServiceException;

    void dateNullAsync(Date dateQuery, final ServiceCallback<Void> serviceCallback);

    void dateTimeValid(Date dateTimeQuery) throws ServiceException;

    void dateTimeValidAsync(Date dateTimeQuery, final ServiceCallback<Void> serviceCallback);

    void dateTimeNull(Date dateTimeQuery) throws ServiceException;

    void dateTimeNullAsync(Date dateTimeQuery, final ServiceCallback<Void> serviceCallback);

    void arrayStringCsvValid(List<String> arrayQuery) throws ServiceException;

    void arrayStringCsvValidAsync(List<String> arrayQuery, final ServiceCallback<Void> serviceCallback);

    void arrayStringCsvNull(List<String> arrayQuery) throws ServiceException;

    void arrayStringCsvNullAsync(List<String> arrayQuery, final ServiceCallback<Void> serviceCallback);

    void arrayStringCsvEmpty(List<String> arrayQuery) throws ServiceException;

    void arrayStringCsvEmptyAsync(List<String> arrayQuery, final ServiceCallback<Void> serviceCallback);

    void arrayStringSsvValid(List<String> arrayQuery) throws ServiceException;

    void arrayStringSsvValidAsync(List<String> arrayQuery, final ServiceCallback<Void> serviceCallback);

    void arrayStringTsvValid(List<String> arrayQuery) throws ServiceException;

    void arrayStringTsvValidAsync(List<String> arrayQuery, final ServiceCallback<Void> serviceCallback);

    void arrayStringPipesValid(List<String> arrayQuery) throws ServiceException;

    void arrayStringPipesValidAsync(List<String> arrayQuery, final ServiceCallback<Void> serviceCallback);

}
