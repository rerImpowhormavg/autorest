// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.


package fixtures.url;

import com.microsoft.rest.ServiceException;
import retrofit.Callback;
import retrofit.client.Response;
import fixtures.url.models.UriColor;
import java.util.Date;
import java.util.List;
import retrofit.http.GET;
import retrofit.http.Query;

public interface Queries {
    @GET("/queries/bool/true")
    Response getBooleanTrue(@Query("boolQuery") boolean boolQuery) throws ServiceException;

    @GET("/queries/bool/true")
    void getBooleanTrueAsync(@Query("boolQuery") boolean boolQuery, Callback<Response> cb);

    @GET("/queries/bool/false")
    Response getBooleanFalse(@Query("boolQuery") boolean boolQuery) throws ServiceException;

    @GET("/queries/bool/false")
    void getBooleanFalseAsync(@Query("boolQuery") boolean boolQuery, Callback<Response> cb);

    @GET("/queries/bool/null")
    Response getBooleanNull(@Query("boolQuery") boolean boolQuery) throws ServiceException;

    @GET("/queries/bool/null")
    void getBooleanNullAsync(@Query("boolQuery") boolean boolQuery, Callback<Response> cb);

    @GET("/queries/int/1000000")
    Response getIntOneMillion(@Query("intQuery") int intQuery) throws ServiceException;

    @GET("/queries/int/1000000")
    void getIntOneMillionAsync(@Query("intQuery") int intQuery, Callback<Response> cb);

    @GET("/queries/int/-1000000")
    Response getIntNegativeOneMillion(@Query("intQuery") int intQuery) throws ServiceException;

    @GET("/queries/int/-1000000")
    void getIntNegativeOneMillionAsync(@Query("intQuery") int intQuery, Callback<Response> cb);

    @GET("/queries/int/null")
    Response getIntNull(@Query("intQuery") int intQuery) throws ServiceException;

    @GET("/queries/int/null")
    void getIntNullAsync(@Query("intQuery") int intQuery, Callback<Response> cb);

    @GET("/queries/long/10000000000")
    Response getTenBillion(@Query("longQuery") long longQuery) throws ServiceException;

    @GET("/queries/long/10000000000")
    void getTenBillionAsync(@Query("longQuery") long longQuery, Callback<Response> cb);

    @GET("/queries/long/-10000000000")
    Response getNegativeTenBillion(@Query("longQuery") long longQuery) throws ServiceException;

    @GET("/queries/long/-10000000000")
    void getNegativeTenBillionAsync(@Query("longQuery") long longQuery, Callback<Response> cb);

    @GET("/queries/long/null")
    Response getLongNull(@Query("longQuery") long longQuery) throws ServiceException;

    @GET("/queries/long/null")
    void getLongNullAsync(@Query("longQuery") long longQuery, Callback<Response> cb);

    @GET("/queries/float/1.034E+20")
    Response floatScientificPositive(@Query("floatQuery") double floatQuery) throws ServiceException;

    @GET("/queries/float/1.034E+20")
    void floatScientificPositiveAsync(@Query("floatQuery") double floatQuery, Callback<Response> cb);

    @GET("/queries/float/-1.034E-20")
    Response floatScientificNegative(@Query("floatQuery") double floatQuery) throws ServiceException;

    @GET("/queries/float/-1.034E-20")
    void floatScientificNegativeAsync(@Query("floatQuery") double floatQuery, Callback<Response> cb);

    @GET("/queries/float/null")
    Response floatNull(@Query("floatQuery") double floatQuery) throws ServiceException;

    @GET("/queries/float/null")
    void floatNullAsync(@Query("floatQuery") double floatQuery, Callback<Response> cb);

    @GET("/queries/double/9999999.999")
    Response doubleDecimalPositive(@Query("doubleQuery") double doubleQuery) throws ServiceException;

    @GET("/queries/double/9999999.999")
    void doubleDecimalPositiveAsync(@Query("doubleQuery") double doubleQuery, Callback<Response> cb);

    @GET("/queries/double/-9999999.999")
    Response doubleDecimalNegative(@Query("doubleQuery") double doubleQuery) throws ServiceException;

    @GET("/queries/double/-9999999.999")
    void doubleDecimalNegativeAsync(@Query("doubleQuery") double doubleQuery, Callback<Response> cb);

    @GET("/queries/double/null")
    Response doubleNull(@Query("doubleQuery") double doubleQuery) throws ServiceException;

    @GET("/queries/double/null")
    void doubleNullAsync(@Query("doubleQuery") double doubleQuery, Callback<Response> cb);

    @GET("/queries/string/unicode/")
    Response stringUnicode(@Query("stringQuery") String stringQuery) throws ServiceException;

    @GET("/queries/string/unicode/")
    void stringUnicodeAsync(@Query("stringQuery") String stringQuery, Callback<Response> cb);

    @GET("/queries/string/begin%21%2A%27%28%29%3B%3A%40%20%26%3D%2B%24%2C%2F%3F%23%5B%5Dend")
    Response stringUrlEncoded(@Query("stringQuery") String stringQuery) throws ServiceException;

    @GET("/queries/string/begin%21%2A%27%28%29%3B%3A%40%20%26%3D%2B%24%2C%2F%3F%23%5B%5Dend")
    void stringUrlEncodedAsync(@Query("stringQuery") String stringQuery, Callback<Response> cb);

    @GET("/queries/string/empty")
    Response stringEmpty(@Query("stringQuery") String stringQuery) throws ServiceException;

    @GET("/queries/string/empty")
    void stringEmptyAsync(@Query("stringQuery") String stringQuery, Callback<Response> cb);

    @GET("/queries/string/null")
    Response stringNull(@Query("stringQuery") String stringQuery) throws ServiceException;

    @GET("/queries/string/null")
    void stringNullAsync(@Query("stringQuery") String stringQuery, Callback<Response> cb);

    @GET("/queries/enum/green%20color")
    Response enumValid(@Query("enumQuery") UriColor enumQuery) throws ServiceException;

    @GET("/queries/enum/green%20color")
    void enumValidAsync(@Query("enumQuery") UriColor enumQuery, Callback<Response> cb);

    @GET("/queries/enum/null")
    Response enumNull(@Query("enumQuery") UriColor enumQuery) throws ServiceException;

    @GET("/queries/enum/null")
    void enumNullAsync(@Query("enumQuery") UriColor enumQuery, Callback<Response> cb);

    @GET("/queries/byte/multibyte")
    Response byteMultiByte(@Query("byteQuery") byte[] byteQuery) throws ServiceException;

    @GET("/queries/byte/multibyte")
    void byteMultiByteAsync(@Query("byteQuery") byte[] byteQuery, Callback<Response> cb);

    @GET("/queries/byte/empty")
    Response byteEmpty(@Query("byteQuery") byte[] byteQuery) throws ServiceException;

    @GET("/queries/byte/empty")
    void byteEmptyAsync(@Query("byteQuery") byte[] byteQuery, Callback<Response> cb);

    @GET("/queries/byte/null")
    Response byteNull(@Query("byteQuery") byte[] byteQuery) throws ServiceException;

    @GET("/queries/byte/null")
    void byteNullAsync(@Query("byteQuery") byte[] byteQuery, Callback<Response> cb);

    @GET("/queries/date/2012-01-01")
    Response dateValid(@Query("dateQuery") Date dateQuery) throws ServiceException;

    @GET("/queries/date/2012-01-01")
    void dateValidAsync(@Query("dateQuery") Date dateQuery, Callback<Response> cb);

    @GET("/queries/date/null")
    Response dateNull(@Query("dateQuery") Date dateQuery) throws ServiceException;

    @GET("/queries/date/null")
    void dateNullAsync(@Query("dateQuery") Date dateQuery, Callback<Response> cb);

    @GET("/queries/datetime/2012-01-01T01%3A01%3A01Z")
    Response dateTimeValid(@Query("dateTimeQuery") Date dateTimeQuery) throws ServiceException;

    @GET("/queries/datetime/2012-01-01T01%3A01%3A01Z")
    void dateTimeValidAsync(@Query("dateTimeQuery") Date dateTimeQuery, Callback<Response> cb);

    @GET("/queries/datetime/null")
    Response dateTimeNull(@Query("dateTimeQuery") Date dateTimeQuery) throws ServiceException;

    @GET("/queries/datetime/null")
    void dateTimeNullAsync(@Query("dateTimeQuery") Date dateTimeQuery, Callback<Response> cb);

    @GET("/queries/array/csv/string/valid")
    Response arrayStringCsvValid(@Query("arrayQuery") List<String> arrayQuery) throws ServiceException;

    @GET("/queries/array/csv/string/valid")
    void arrayStringCsvValidAsync(@Query("arrayQuery") List<String> arrayQuery, Callback<Response> cb);

    @GET("/queries/array/csv/string/null")
    Response arrayStringCsvNull(@Query("arrayQuery") List<String> arrayQuery) throws ServiceException;

    @GET("/queries/array/csv/string/null")
    void arrayStringCsvNullAsync(@Query("arrayQuery") List<String> arrayQuery, Callback<Response> cb);

    @GET("/queries/array/csv/string/empty")
    Response arrayStringCsvEmpty(@Query("arrayQuery") List<String> arrayQuery) throws ServiceException;

    @GET("/queries/array/csv/string/empty")
    void arrayStringCsvEmptyAsync(@Query("arrayQuery") List<String> arrayQuery, Callback<Response> cb);

    @GET("/queries/array/ssv/string/valid")
    Response arrayStringSsvValid(@Query("arrayQuery") List<String> arrayQuery) throws ServiceException;

    @GET("/queries/array/ssv/string/valid")
    void arrayStringSsvValidAsync(@Query("arrayQuery") List<String> arrayQuery, Callback<Response> cb);

    @GET("/queries/array/tsv/string/valid")
    Response arrayStringTsvValid(@Query("arrayQuery") List<String> arrayQuery) throws ServiceException;

    @GET("/queries/array/tsv/string/valid")
    void arrayStringTsvValidAsync(@Query("arrayQuery") List<String> arrayQuery, Callback<Response> cb);

    @GET("/queries/array/pipes/string/valid")
    Response arrayStringPipesValid(@Query("arrayQuery") List<String> arrayQuery) throws ServiceException;

    @GET("/queries/array/pipes/string/valid")
    void arrayStringPipesValidAsync(@Query("arrayQuery") List<String> arrayQuery, Callback<Response> cb);

}
