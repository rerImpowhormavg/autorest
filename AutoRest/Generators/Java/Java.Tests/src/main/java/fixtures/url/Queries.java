// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.


package fixtures.url;

import com.microsoft.rest.ServiceException;
import retrofit.Callback;
import retrofit.client.Response;

public interface Queries {
    @GET("/queries/bool/true")
    void getBooleanTrue(boolean boolQuery);

    @GET("/queries/bool/true")
    void getBooleanTrueAsync(boolean boolQuery, Callback<Response> cb);

    @GET("/queries/bool/false")
    void getBooleanFalse(boolean boolQuery);

    @GET("/queries/bool/false")
    void getBooleanFalseAsync(boolean boolQuery, Callback<Response> cb);

    @GET("/queries/bool/null")
    void getBooleanNull(boolean boolQuery);

    @GET("/queries/bool/null")
    void getBooleanNullAsync(boolean boolQuery, Callback<Response> cb);

    @GET("/queries/int/1000000")
    void getIntOneMillion(int intQuery);

    @GET("/queries/int/1000000")
    void getIntOneMillionAsync(int intQuery, Callback<Response> cb);

    @GET("/queries/int/-1000000")
    void getIntNegativeOneMillion(int intQuery);

    @GET("/queries/int/-1000000")
    void getIntNegativeOneMillionAsync(int intQuery, Callback<Response> cb);

    @GET("/queries/int/null")
    void getIntNull(int intQuery);

    @GET("/queries/int/null")
    void getIntNullAsync(int intQuery, Callback<Response> cb);

    @GET("/queries/long/10000000000")
    void getTenBillion(long longQuery);

    @GET("/queries/long/10000000000")
    void getTenBillionAsync(long longQuery, Callback<Response> cb);

    @GET("/queries/long/-10000000000")
    void getNegativeTenBillion(long longQuery);

    @GET("/queries/long/-10000000000")
    void getNegativeTenBillionAsync(long longQuery, Callback<Response> cb);

    @GET("/queries/long/null")
    void getLongNull(long longQuery);

    @GET("/queries/long/null")
    void getLongNullAsync(long longQuery, Callback<Response> cb);

    @GET("/queries/float/1.034E+20")
    void floatScientificPositive(double floatQuery);

    @GET("/queries/float/1.034E+20")
    void floatScientificPositiveAsync(double floatQuery, Callback<Response> cb);

    @GET("/queries/float/-1.034E-20")
    void floatScientificNegative(double floatQuery);

    @GET("/queries/float/-1.034E-20")
    void floatScientificNegativeAsync(double floatQuery, Callback<Response> cb);

    @GET("/queries/float/null")
    void floatNull(double floatQuery);

    @GET("/queries/float/null")
    void floatNullAsync(double floatQuery, Callback<Response> cb);

    @GET("/queries/double/9999999.999")
    void doubleDecimalPositive(double doubleQuery);

    @GET("/queries/double/9999999.999")
    void doubleDecimalPositiveAsync(double doubleQuery, Callback<Response> cb);

    @GET("/queries/double/-9999999.999")
    void doubleDecimalNegative(double doubleQuery);

    @GET("/queries/double/-9999999.999")
    void doubleDecimalNegativeAsync(double doubleQuery, Callback<Response> cb);

    @GET("/queries/double/null")
    void doubleNull(double doubleQuery);

    @GET("/queries/double/null")
    void doubleNullAsync(double doubleQuery, Callback<Response> cb);

    @GET("/queries/string/unicode/")
    void stringUnicode(String stringQuery);

    @GET("/queries/string/unicode/")
    void stringUnicodeAsync(String stringQuery, Callback<Response> cb);

    @GET("/queries/string/begin%21%2A%27%28%29%3B%3A%40%20%26%3D%2B%24%2C%2F%3F%23%5B%5Dend")
    void stringUrlEncoded(String stringQuery);

    @GET("/queries/string/begin%21%2A%27%28%29%3B%3A%40%20%26%3D%2B%24%2C%2F%3F%23%5B%5Dend")
    void stringUrlEncodedAsync(String stringQuery, Callback<Response> cb);

    @GET("/queries/string/empty")
    void stringEmpty(String stringQuery);

    @GET("/queries/string/empty")
    void stringEmptyAsync(String stringQuery, Callback<Response> cb);

    @GET("/queries/string/null")
    void stringNull(String stringQuery);

    @GET("/queries/string/null")
    void stringNullAsync(String stringQuery, Callback<Response> cb);

    @GET("/queries/enum/green%20color")
    void enumValid(UriColor enumQuery);

    @GET("/queries/enum/green%20color")
    void enumValidAsync(UriColor enumQuery, Callback<Response> cb);

    @GET("/queries/enum/null")
    void enumNull(UriColor enumQuery);

    @GET("/queries/enum/null")
    void enumNullAsync(UriColor enumQuery, Callback<Response> cb);

    @GET("/queries/byte/multibyte")
    void byteMultiByte(byte[] byteQuery);

    @GET("/queries/byte/multibyte")
    void byteMultiByteAsync(byte[] byteQuery, Callback<Response> cb);

    @GET("/queries/byte/empty")
    void byteEmpty(byte[] byteQuery);

    @GET("/queries/byte/empty")
    void byteEmptyAsync(byte[] byteQuery, Callback<Response> cb);

    @GET("/queries/byte/null")
    void byteNull(byte[] byteQuery);

    @GET("/queries/byte/null")
    void byteNullAsync(byte[] byteQuery, Callback<Response> cb);

    @GET("/queries/date/2012-01-01")
    void dateValid(Date dateQuery);

    @GET("/queries/date/2012-01-01")
    void dateValidAsync(Date dateQuery, Callback<Response> cb);

    @GET("/queries/date/null")
    void dateNull(Date dateQuery);

    @GET("/queries/date/null")
    void dateNullAsync(Date dateQuery, Callback<Response> cb);

    @GET("/queries/datetime/2012-01-01T01%3A01%3A01Z")
    void dateTimeValid(Date dateTimeQuery);

    @GET("/queries/datetime/2012-01-01T01%3A01%3A01Z")
    void dateTimeValidAsync(Date dateTimeQuery, Callback<Response> cb);

    @GET("/queries/datetime/null")
    void dateTimeNull(Date dateTimeQuery);

    @GET("/queries/datetime/null")
    void dateTimeNullAsync(Date dateTimeQuery, Callback<Response> cb);

    @GET("/queries/array/csv/string/valid")
    void arrayStringCsvValid(List<String> arrayQuery);

    @GET("/queries/array/csv/string/valid")
    void arrayStringCsvValidAsync(List<String> arrayQuery, Callback<Response> cb);

    @GET("/queries/array/csv/string/null")
    void arrayStringCsvNull(List<String> arrayQuery);

    @GET("/queries/array/csv/string/null")
    void arrayStringCsvNullAsync(List<String> arrayQuery, Callback<Response> cb);

    @GET("/queries/array/csv/string/empty")
    void arrayStringCsvEmpty(List<String> arrayQuery);

    @GET("/queries/array/csv/string/empty")
    void arrayStringCsvEmptyAsync(List<String> arrayQuery, Callback<Response> cb);

    @GET("/queries/array/ssv/string/valid")
    void arrayStringSsvValid(List<String> arrayQuery);

    @GET("/queries/array/ssv/string/valid")
    void arrayStringSsvValidAsync(List<String> arrayQuery, Callback<Response> cb);

    @GET("/queries/array/tsv/string/valid")
    void arrayStringTsvValid(List<String> arrayQuery);

    @GET("/queries/array/tsv/string/valid")
    void arrayStringTsvValidAsync(List<String> arrayQuery, Callback<Response> cb);

    @GET("/queries/array/pipes/string/valid")
    void arrayStringPipesValid(List<String> arrayQuery);

    @GET("/queries/array/pipes/string/valid")
    void arrayStringPipesValidAsync(List<String> arrayQuery, Callback<Response> cb);

}
