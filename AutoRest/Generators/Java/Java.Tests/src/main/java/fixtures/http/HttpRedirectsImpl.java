/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.http;

import com.google.gson.reflect.TypeToken;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceException;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseBuilder;
import com.microsoft.rest.ServiceResponseCallback;
import retrofit.RestAdapter;
import retrofit.RetrofitError;
import retrofit.client.Response;
import java.util.List;
import fixtures.http.models.Error;

public class HttpRedirectsImpl implements HttpRedirects {
    private HttpRedirectsService service;
    AutoRestHttpInfrastructureTestService client;

    public HttpRedirectsImpl(RestAdapter restAdapter, AutoRestHttpInfrastructureTestService client) {
        this.service = restAdapter.create(HttpRedirectsService.class);
        this.client = client;
    }

    /**
     * Return 300 status code and redirect to /http/success/200
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void head300() throws ServiceException {
        try {
            ServiceResponse<Void> response = head300Delegate(service.head300(), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = head300Delegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Return 300 status code and redirect to /http/success/200
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void head300Async(final ServiceCallback<Void> serviceCallback) {
        service.head300Async(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(head300Delegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> head300Delegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .register(300, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Return 300 status code and redirect to /http/success/200
     *
     * @return the List&lt;String&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public List<String> get300() throws ServiceException {
        try {
            ServiceResponse<List<String>> response = get300Delegate(service.get300(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<List<String>> response = get300Delegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Return 300 status code and redirect to /http/success/200
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void get300Async(final ServiceCallback<List<String>> serviceCallback) {
        service.get300Async(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(get300Delegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<List<String>> get300Delegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<List<String>>()
                .register(200, new TypeToken<Void>(){}.getType())
                .register(300, new TypeToken<List<String>>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Return 301 status code and redirect to /http/success/200
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void head301() throws ServiceException {
        try {
            ServiceResponse<Void> response = head301Delegate(service.head301(), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = head301Delegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Return 301 status code and redirect to /http/success/200
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void head301Async(final ServiceCallback<Void> serviceCallback) {
        service.head301Async(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(head301Delegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> head301Delegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .register(301, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Return 301 status code and redirect to /http/success/200
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void get301() throws ServiceException {
        try {
            ServiceResponse<Void> response = get301Delegate(service.get301(), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = get301Delegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Return 301 status code and redirect to /http/success/200
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void get301Async(final ServiceCallback<Void> serviceCallback) {
        service.get301Async(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(get301Delegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> get301Delegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .register(301, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Put true Boolean value in request returns 301.  This request should not be automatically redirected, but should return the received 301 to the caller for evaluation
     *
     * @param booleanValue Simple boolean value true
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void put301(Boolean booleanValue) throws ServiceException {
        try {
            ServiceResponse<Void> response = put301Delegate(service.put301(booleanValue), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = put301Delegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Put true Boolean value in request returns 301.  This request should not be automatically redirected, but should return the received 301 to the caller for evaluation
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void put301Async(Boolean booleanValue, final ServiceCallback<Void> serviceCallback) {
        service.put301Async(booleanValue, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(put301Delegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> put301Delegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(301, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Return 302 status code and redirect to /http/success/200
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void head302() throws ServiceException {
        try {
            ServiceResponse<Void> response = head302Delegate(service.head302(), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = head302Delegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Return 302 status code and redirect to /http/success/200
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void head302Async(final ServiceCallback<Void> serviceCallback) {
        service.head302Async(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(head302Delegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> head302Delegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .register(302, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Return 302 status code and redirect to /http/success/200
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void get302() throws ServiceException {
        try {
            ServiceResponse<Void> response = get302Delegate(service.get302(), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = get302Delegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Return 302 status code and redirect to /http/success/200
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void get302Async(final ServiceCallback<Void> serviceCallback) {
        service.get302Async(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(get302Delegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> get302Delegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .register(302, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Patch true Boolean value in request returns 302.  This request should not be automatically redirected, but should return the received 302 to the caller for evaluation
     *
     * @param booleanValue Simple boolean value true
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void patch302(Boolean booleanValue) throws ServiceException {
        try {
            ServiceResponse<Void> response = patch302Delegate(service.patch302(booleanValue), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = patch302Delegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Patch true Boolean value in request returns 302.  This request should not be automatically redirected, but should return the received 302 to the caller for evaluation
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void patch302Async(Boolean booleanValue, final ServiceCallback<Void> serviceCallback) {
        service.patch302Async(booleanValue, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(patch302Delegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> patch302Delegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(302, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Post true Boolean value in request returns 303.  This request should be automatically redirected usign a get, ultimately returning a 200 status code
     *
     * @param booleanValue Simple boolean value true
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void post303(Boolean booleanValue) throws ServiceException {
        try {
            ServiceResponse<Void> response = post303Delegate(service.post303(booleanValue), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = post303Delegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Post true Boolean value in request returns 303.  This request should be automatically redirected usign a get, ultimately returning a 200 status code
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void post303Async(Boolean booleanValue, final ServiceCallback<Void> serviceCallback) {
        service.post303Async(booleanValue, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(post303Delegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> post303Delegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .register(303, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Redirect with 307, resulting in a 200 success
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void head307() throws ServiceException {
        try {
            ServiceResponse<Void> response = head307Delegate(service.head307(), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = head307Delegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Redirect with 307, resulting in a 200 success
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void head307Async(final ServiceCallback<Void> serviceCallback) {
        service.head307Async(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(head307Delegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> head307Delegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .register(307, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Redirect get with 307, resulting in a 200 success
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void get307() throws ServiceException {
        try {
            ServiceResponse<Void> response = get307Delegate(service.get307(), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = get307Delegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Redirect get with 307, resulting in a 200 success
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void get307Async(final ServiceCallback<Void> serviceCallback) {
        service.get307Async(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(get307Delegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> get307Delegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .register(307, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Put redirected with 307, resulting in a 200 after redirect
     *
     * @param booleanValue Simple boolean value true
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void put307(Boolean booleanValue) throws ServiceException {
        try {
            ServiceResponse<Void> response = put307Delegate(service.put307(booleanValue), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = put307Delegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Put redirected with 307, resulting in a 200 after redirect
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void put307Async(Boolean booleanValue, final ServiceCallback<Void> serviceCallback) {
        service.put307Async(booleanValue, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(put307Delegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> put307Delegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .register(307, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Patch redirected with 307, resulting in a 200 after redirect
     *
     * @param booleanValue Simple boolean value true
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void patch307(Boolean booleanValue) throws ServiceException {
        try {
            ServiceResponse<Void> response = patch307Delegate(service.patch307(booleanValue), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = patch307Delegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Patch redirected with 307, resulting in a 200 after redirect
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void patch307Async(Boolean booleanValue, final ServiceCallback<Void> serviceCallback) {
        service.patch307Async(booleanValue, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(patch307Delegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> patch307Delegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .register(307, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Post redirected with 307, resulting in a 200 after redirect
     *
     * @param booleanValue Simple boolean value true
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void post307(Boolean booleanValue) throws ServiceException {
        try {
            ServiceResponse<Void> response = post307Delegate(service.post307(booleanValue), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = post307Delegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Post redirected with 307, resulting in a 200 after redirect
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void post307Async(Boolean booleanValue, final ServiceCallback<Void> serviceCallback) {
        service.post307Async(booleanValue, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(post307Delegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> post307Delegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .register(307, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Delete redirected with 307, resulting in a 200 after redirect
     *
     * @param booleanValue Simple boolean value true
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void delete307(Boolean booleanValue) throws ServiceException {
        try {
            ServiceResponse<Void> response = delete307Delegate(service.delete307(booleanValue), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = delete307Delegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Delete redirected with 307, resulting in a 200 after redirect
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void delete307Async(Boolean booleanValue, final ServiceCallback<Void> serviceCallback) {
        service.delete307Async(booleanValue, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(delete307Delegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> delete307Delegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .register(307, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

}
