/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.http;

import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceException;
import com.microsoft.rest.ServiceResponseCallback;
import retrofit.client.Response;
import retrofit.http.HEAD;
import retrofit.http.PUT;
import retrofit.http.Body;
import retrofit.http.PATCH;
import retrofit.http.GET;
import retrofit.http.POST;
import retrofit.http.DELETE;

/**
 * An instance of this class provides access to all the operations defined
 * in HttpRetry.
 */
public interface HttpRetry {
    /**
     * The interface defining all the services for HttpRetry to be
     * used by Retrofit to perform actually REST calls.
     */
    interface HttpRetryService {
        @HEAD("/http/retry/408")
        Response head408() throws ServiceException;

        @HEAD("/http/retry/408")
        void head408Async(ServiceResponseCallback cb);

        @PUT("/http/retry/500")
        Response put500(@Body boolean booleanValue) throws ServiceException;

        @PUT("/http/retry/500")
        void put500Async(@Body boolean booleanValue, ServiceResponseCallback cb);

        @PATCH("/http/retry/500")
        Response patch500(@Body boolean booleanValue) throws ServiceException;

        @PATCH("/http/retry/500")
        void patch500Async(@Body boolean booleanValue, ServiceResponseCallback cb);

        @GET("/http/retry/502")
        Response get502() throws ServiceException;

        @GET("/http/retry/502")
        void get502Async(ServiceResponseCallback cb);

        @POST("/http/retry/503")
        Response post503(@Body boolean booleanValue) throws ServiceException;

        @POST("/http/retry/503")
        void post503Async(@Body boolean booleanValue, ServiceResponseCallback cb);

        @DELETE("/http/retry/503")
        Response delete503(@Body boolean booleanValue) throws ServiceException;

        @DELETE("/http/retry/503")
        void delete503Async(@Body boolean booleanValue, ServiceResponseCallback cb);

        @PUT("/http/retry/504")
        Response put504(@Body boolean booleanValue) throws ServiceException;

        @PUT("/http/retry/504")
        void put504Async(@Body boolean booleanValue, ServiceResponseCallback cb);

        @PATCH("/http/retry/504")
        Response patch504(@Body boolean booleanValue) throws ServiceException;

        @PATCH("/http/retry/504")
        void patch504Async(@Body boolean booleanValue, ServiceResponseCallback cb);

    }
    /**
     * Return 408 status code, then 200 after retry
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void head408() throws ServiceException;

    /**
     * Return 408 status code, then 200 after retry
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void head408Async(final ServiceCallback<Void> serviceCallback);

    /**
     * Return 500 status code, then 200 after retry
     *
     * @param booleanValue Simple boolean value true
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void put500(boolean booleanValue) throws ServiceException;

    /**
     * Return 500 status code, then 200 after retry
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void put500Async(boolean booleanValue, final ServiceCallback<Void> serviceCallback);

    /**
     * Return 500 status code, then 200 after retry
     *
     * @param booleanValue Simple boolean value true
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void patch500(boolean booleanValue) throws ServiceException;

    /**
     * Return 500 status code, then 200 after retry
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void patch500Async(boolean booleanValue, final ServiceCallback<Void> serviceCallback);

    /**
     * Return 502 status code, then 200 after retry
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void get502() throws ServiceException;

    /**
     * Return 502 status code, then 200 after retry
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void get502Async(final ServiceCallback<Void> serviceCallback);

    /**
     * Return 503 status code, then 200 after retry
     *
     * @param booleanValue Simple boolean value true
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void post503(boolean booleanValue) throws ServiceException;

    /**
     * Return 503 status code, then 200 after retry
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void post503Async(boolean booleanValue, final ServiceCallback<Void> serviceCallback);

    /**
     * Return 503 status code, then 200 after retry
     *
     * @param booleanValue Simple boolean value true
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void delete503(boolean booleanValue) throws ServiceException;

    /**
     * Return 503 status code, then 200 after retry
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void delete503Async(boolean booleanValue, final ServiceCallback<Void> serviceCallback);

    /**
     * Return 504 status code, then 200 after retry
     *
     * @param booleanValue Simple boolean value true
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void put504(boolean booleanValue) throws ServiceException;

    /**
     * Return 504 status code, then 200 after retry
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void put504Async(boolean booleanValue, final ServiceCallback<Void> serviceCallback);

    /**
     * Return 504 status code, then 200 after retry
     *
     * @param booleanValue Simple boolean value true
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void patch504(boolean booleanValue) throws ServiceException;

    /**
     * Return 504 status code, then 200 after retry
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void patch504Async(boolean booleanValue, final ServiceCallback<Void> serviceCallback);

}
