/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.bodydictionary;

import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceException;
import com.microsoft.rest.ServiceResponseCallback;
import retrofit.client.Response;
import java.util.Map;
import org.joda.time.LocalDate;
import org.joda.time.DateTime;
import fixtures.bodydictionary.models.Widget;
import java.util.List;
import retrofit.http.GET;
import retrofit.http.PUT;
import retrofit.http.Body;

/**
 * An instance of this class provides access to all the operations defined
 * in Dictionary.
 */
public interface Dictionary {
    /**
     * The interface defining all the services for Dictionary to be
     * used by Retrofit to perform actually REST calls.
     */
    interface DictionaryService {
        @GET("/dictionary/null")
        Response getNull() throws ServiceException;

        @GET("/dictionary/null")
        void getNullAsync(ServiceResponseCallback cb);

        @GET("/dictionary/empty")
        Response getEmpty() throws ServiceException;

        @GET("/dictionary/empty")
        void getEmptyAsync(ServiceResponseCallback cb);

        @PUT("/dictionary/empty")
        Response putEmpty(@Body Map<String, String> arrayBody) throws ServiceException;

        @PUT("/dictionary/empty")
        void putEmptyAsync(@Body Map<String, String> arrayBody, ServiceResponseCallback cb);

        @GET("/dictionary/nullvalue")
        Response getNullValue() throws ServiceException;

        @GET("/dictionary/nullvalue")
        void getNullValueAsync(ServiceResponseCallback cb);

        @GET("/dictionary/nullkey")
        Response getNullKey() throws ServiceException;

        @GET("/dictionary/nullkey")
        void getNullKeyAsync(ServiceResponseCallback cb);

        @GET("/dictionary/keyemptystring")
        Response getEmptyStringKey() throws ServiceException;

        @GET("/dictionary/keyemptystring")
        void getEmptyStringKeyAsync(ServiceResponseCallback cb);

        @GET("/dictionary/invalid")
        Response getInvalid() throws ServiceException;

        @GET("/dictionary/invalid")
        void getInvalidAsync(ServiceResponseCallback cb);

        @GET("/dictionary/prim/boolean/tfft")
        Response getBooleanTfft() throws ServiceException;

        @GET("/dictionary/prim/boolean/tfft")
        void getBooleanTfftAsync(ServiceResponseCallback cb);

        @PUT("/dictionary/prim/boolean/tfft")
        Response putBooleanTfft(@Body Map<String, Boolean> arrayBody) throws ServiceException;

        @PUT("/dictionary/prim/boolean/tfft")
        void putBooleanTfftAsync(@Body Map<String, Boolean> arrayBody, ServiceResponseCallback cb);

        @GET("/dictionary/prim/boolean/true.null.false")
        Response getBooleanInvalidNull() throws ServiceException;

        @GET("/dictionary/prim/boolean/true.null.false")
        void getBooleanInvalidNullAsync(ServiceResponseCallback cb);

        @GET("/dictionary/prim/boolean/true.boolean.false")
        Response getBooleanInvalidString() throws ServiceException;

        @GET("/dictionary/prim/boolean/true.boolean.false")
        void getBooleanInvalidStringAsync(ServiceResponseCallback cb);

        @GET("/dictionary/prim/integer/1.-1.3.300")
        Response getIntegerValid() throws ServiceException;

        @GET("/dictionary/prim/integer/1.-1.3.300")
        void getIntegerValidAsync(ServiceResponseCallback cb);

        @PUT("/dictionary/prim/integer/1.-1.3.300")
        Response putIntegerValid(@Body Map<String, Integer> arrayBody) throws ServiceException;

        @PUT("/dictionary/prim/integer/1.-1.3.300")
        void putIntegerValidAsync(@Body Map<String, Integer> arrayBody, ServiceResponseCallback cb);

        @GET("/dictionary/prim/integer/1.null.zero")
        Response getIntInvalidNull() throws ServiceException;

        @GET("/dictionary/prim/integer/1.null.zero")
        void getIntInvalidNullAsync(ServiceResponseCallback cb);

        @GET("/dictionary/prim/integer/1.integer.0")
        Response getIntInvalidString() throws ServiceException;

        @GET("/dictionary/prim/integer/1.integer.0")
        void getIntInvalidStringAsync(ServiceResponseCallback cb);

        @GET("/dictionary/prim/long/1.-1.3.300")
        Response getLongValid() throws ServiceException;

        @GET("/dictionary/prim/long/1.-1.3.300")
        void getLongValidAsync(ServiceResponseCallback cb);

        @PUT("/dictionary/prim/long/1.-1.3.300")
        Response putLongValid(@Body Map<String, Long> arrayBody) throws ServiceException;

        @PUT("/dictionary/prim/long/1.-1.3.300")
        void putLongValidAsync(@Body Map<String, Long> arrayBody, ServiceResponseCallback cb);

        @GET("/dictionary/prim/long/1.null.zero")
        Response getLongInvalidNull() throws ServiceException;

        @GET("/dictionary/prim/long/1.null.zero")
        void getLongInvalidNullAsync(ServiceResponseCallback cb);

        @GET("/dictionary/prim/long/1.integer.0")
        Response getLongInvalidString() throws ServiceException;

        @GET("/dictionary/prim/long/1.integer.0")
        void getLongInvalidStringAsync(ServiceResponseCallback cb);

        @GET("/dictionary/prim/float/0--0.01-1.2e20")
        Response getFloatValid() throws ServiceException;

        @GET("/dictionary/prim/float/0--0.01-1.2e20")
        void getFloatValidAsync(ServiceResponseCallback cb);

        @PUT("/dictionary/prim/float/0--0.01-1.2e20")
        Response putFloatValid(@Body Map<String, Double> arrayBody) throws ServiceException;

        @PUT("/dictionary/prim/float/0--0.01-1.2e20")
        void putFloatValidAsync(@Body Map<String, Double> arrayBody, ServiceResponseCallback cb);

        @GET("/dictionary/prim/float/0.0-null-1.2e20")
        Response getFloatInvalidNull() throws ServiceException;

        @GET("/dictionary/prim/float/0.0-null-1.2e20")
        void getFloatInvalidNullAsync(ServiceResponseCallback cb);

        @GET("/dictionary/prim/float/1.number.0")
        Response getFloatInvalidString() throws ServiceException;

        @GET("/dictionary/prim/float/1.number.0")
        void getFloatInvalidStringAsync(ServiceResponseCallback cb);

        @GET("/dictionary/prim/double/0--0.01-1.2e20")
        Response getDoubleValid() throws ServiceException;

        @GET("/dictionary/prim/double/0--0.01-1.2e20")
        void getDoubleValidAsync(ServiceResponseCallback cb);

        @PUT("/dictionary/prim/double/0--0.01-1.2e20")
        Response putDoubleValid(@Body Map<String, Double> arrayBody) throws ServiceException;

        @PUT("/dictionary/prim/double/0--0.01-1.2e20")
        void putDoubleValidAsync(@Body Map<String, Double> arrayBody, ServiceResponseCallback cb);

        @GET("/dictionary/prim/double/0.0-null-1.2e20")
        Response getDoubleInvalidNull() throws ServiceException;

        @GET("/dictionary/prim/double/0.0-null-1.2e20")
        void getDoubleInvalidNullAsync(ServiceResponseCallback cb);

        @GET("/dictionary/prim/double/1.number.0")
        Response getDoubleInvalidString() throws ServiceException;

        @GET("/dictionary/prim/double/1.number.0")
        void getDoubleInvalidStringAsync(ServiceResponseCallback cb);

        @GET("/dictionary/prim/string/foo1.foo2.foo3")
        Response getStringValid() throws ServiceException;

        @GET("/dictionary/prim/string/foo1.foo2.foo3")
        void getStringValidAsync(ServiceResponseCallback cb);

        @PUT("/dictionary/prim/string/foo1.foo2.foo3")
        Response putStringValid(@Body Map<String, String> arrayBody) throws ServiceException;

        @PUT("/dictionary/prim/string/foo1.foo2.foo3")
        void putStringValidAsync(@Body Map<String, String> arrayBody, ServiceResponseCallback cb);

        @GET("/dictionary/prim/string/foo.null.foo2")
        Response getStringWithNull() throws ServiceException;

        @GET("/dictionary/prim/string/foo.null.foo2")
        void getStringWithNullAsync(ServiceResponseCallback cb);

        @GET("/dictionary/prim/string/foo.123.foo2")
        Response getStringWithInvalid() throws ServiceException;

        @GET("/dictionary/prim/string/foo.123.foo2")
        void getStringWithInvalidAsync(ServiceResponseCallback cb);

        @GET("/dictionary/prim/date/valid")
        Response getDateValid() throws ServiceException;

        @GET("/dictionary/prim/date/valid")
        void getDateValidAsync(ServiceResponseCallback cb);

        @PUT("/dictionary/prim/date/valid")
        Response putDateValid(@Body Map<String, LocalDate> arrayBody) throws ServiceException;

        @PUT("/dictionary/prim/date/valid")
        void putDateValidAsync(@Body Map<String, LocalDate> arrayBody, ServiceResponseCallback cb);

        @GET("/dictionary/prim/date/invalidnull")
        Response getDateInvalidNull() throws ServiceException;

        @GET("/dictionary/prim/date/invalidnull")
        void getDateInvalidNullAsync(ServiceResponseCallback cb);

        @GET("/dictionary/prim/date/invalidchars")
        Response getDateInvalidChars() throws ServiceException;

        @GET("/dictionary/prim/date/invalidchars")
        void getDateInvalidCharsAsync(ServiceResponseCallback cb);

        @GET("/dictionary/prim/date-time/valid")
        Response getDateTimeValid() throws ServiceException;

        @GET("/dictionary/prim/date-time/valid")
        void getDateTimeValidAsync(ServiceResponseCallback cb);

        @PUT("/dictionary/prim/date-time/valid")
        Response putDateTimeValid(@Body Map<String, DateTime> arrayBody) throws ServiceException;

        @PUT("/dictionary/prim/date-time/valid")
        void putDateTimeValidAsync(@Body Map<String, DateTime> arrayBody, ServiceResponseCallback cb);

        @GET("/dictionary/prim/date-time/invalidnull")
        Response getDateTimeInvalidNull() throws ServiceException;

        @GET("/dictionary/prim/date-time/invalidnull")
        void getDateTimeInvalidNullAsync(ServiceResponseCallback cb);

        @GET("/dictionary/prim/date-time/invalidchars")
        Response getDateTimeInvalidChars() throws ServiceException;

        @GET("/dictionary/prim/date-time/invalidchars")
        void getDateTimeInvalidCharsAsync(ServiceResponseCallback cb);

        @GET("/dictionary/prim/byte/valid")
        Response getByteValid() throws ServiceException;

        @GET("/dictionary/prim/byte/valid")
        void getByteValidAsync(ServiceResponseCallback cb);

        @PUT("/dictionary/prim/byte/valid")
        Response putByteValid(@Body Map<String, byte[]> arrayBody) throws ServiceException;

        @PUT("/dictionary/prim/byte/valid")
        void putByteValidAsync(@Body Map<String, byte[]> arrayBody, ServiceResponseCallback cb);

        @GET("/dictionary/prim/byte/invalidnull")
        Response getByteInvalidNull() throws ServiceException;

        @GET("/dictionary/prim/byte/invalidnull")
        void getByteInvalidNullAsync(ServiceResponseCallback cb);

        @GET("/dictionary/complex/null")
        Response getComplexNull() throws ServiceException;

        @GET("/dictionary/complex/null")
        void getComplexNullAsync(ServiceResponseCallback cb);

        @GET("/dictionary/complex/empty")
        Response getComplexEmpty() throws ServiceException;

        @GET("/dictionary/complex/empty")
        void getComplexEmptyAsync(ServiceResponseCallback cb);

        @GET("/dictionary/complex/itemnull")
        Response getComplexItemNull() throws ServiceException;

        @GET("/dictionary/complex/itemnull")
        void getComplexItemNullAsync(ServiceResponseCallback cb);

        @GET("/dictionary/complex/itemempty")
        Response getComplexItemEmpty() throws ServiceException;

        @GET("/dictionary/complex/itemempty")
        void getComplexItemEmptyAsync(ServiceResponseCallback cb);

        @GET("/dictionary/complex/valid")
        Response getComplexValid() throws ServiceException;

        @GET("/dictionary/complex/valid")
        void getComplexValidAsync(ServiceResponseCallback cb);

        @PUT("/dictionary/complex/valid")
        Response putComplexValid(@Body Map<String, Widget> arrayBody) throws ServiceException;

        @PUT("/dictionary/complex/valid")
        void putComplexValidAsync(@Body Map<String, Widget> arrayBody, ServiceResponseCallback cb);

        @GET("/dictionary/array/null")
        Response getArrayNull() throws ServiceException;

        @GET("/dictionary/array/null")
        void getArrayNullAsync(ServiceResponseCallback cb);

        @GET("/dictionary/array/empty")
        Response getArrayEmpty() throws ServiceException;

        @GET("/dictionary/array/empty")
        void getArrayEmptyAsync(ServiceResponseCallback cb);

        @GET("/dictionary/array/itemnull")
        Response getArrayItemNull() throws ServiceException;

        @GET("/dictionary/array/itemnull")
        void getArrayItemNullAsync(ServiceResponseCallback cb);

        @GET("/dictionary/array/itemempty")
        Response getArrayItemEmpty() throws ServiceException;

        @GET("/dictionary/array/itemempty")
        void getArrayItemEmptyAsync(ServiceResponseCallback cb);

        @GET("/dictionary/array/valid")
        Response getArrayValid() throws ServiceException;

        @GET("/dictionary/array/valid")
        void getArrayValidAsync(ServiceResponseCallback cb);

        @PUT("/dictionary/array/valid")
        Response putArrayValid(@Body Map<String, List<String>> arrayBody) throws ServiceException;

        @PUT("/dictionary/array/valid")
        void putArrayValidAsync(@Body Map<String, List<String>> arrayBody, ServiceResponseCallback cb);

        @GET("/dictionary/dictionary/null")
        Response getDictionaryNull() throws ServiceException;

        @GET("/dictionary/dictionary/null")
        void getDictionaryNullAsync(ServiceResponseCallback cb);

        @GET("/dictionary/dictionary/empty")
        Response getDictionaryEmpty() throws ServiceException;

        @GET("/dictionary/dictionary/empty")
        void getDictionaryEmptyAsync(ServiceResponseCallback cb);

        @GET("/dictionary/dictionary/itemnull")
        Response getDictionaryItemNull() throws ServiceException;

        @GET("/dictionary/dictionary/itemnull")
        void getDictionaryItemNullAsync(ServiceResponseCallback cb);

        @GET("/dictionary/dictionary/itemempty")
        Response getDictionaryItemEmpty() throws ServiceException;

        @GET("/dictionary/dictionary/itemempty")
        void getDictionaryItemEmptyAsync(ServiceResponseCallback cb);

        @GET("/dictionary/dictionary/valid")
        Response getDictionaryValid() throws ServiceException;

        @GET("/dictionary/dictionary/valid")
        void getDictionaryValidAsync(ServiceResponseCallback cb);

        @PUT("/dictionary/dictionary/valid")
        Response putDictionaryValid(@Body Map<String, Map<String, String>> arrayBody) throws ServiceException;

        @PUT("/dictionary/dictionary/valid")
        void putDictionaryValidAsync(@Body Map<String, Map<String, String>> arrayBody, ServiceResponseCallback cb);

    }
    /**
     * Get null dictionary value
     *
     * @return the Map&lt;String, Integer&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Map<String, Integer> getNull() throws ServiceException;

    /**
     * Get null dictionary value
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getNullAsync(final ServiceCallback<Map<String, Integer>> serviceCallback);

    /**
     * Get empty dictionary value {}
     *
     * @return the Map&lt;String, Integer&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Map<String, Integer> getEmpty() throws ServiceException;

    /**
     * Get empty dictionary value {}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getEmptyAsync(final ServiceCallback<Map<String, Integer>> serviceCallback);

    /**
     * Set dictionary value empty {}
     *
     * @param arrayBody the Map&lt;String, String&gt; value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void putEmpty(Map<String, String> arrayBody) throws ServiceException;

    /**
     * Set dictionary value empty {}
     *
     * @param arrayBody the Map&lt;String, String&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void putEmptyAsync(Map<String, String> arrayBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Get Dictionary with null value
     *
     * @return the Map&lt;String, String&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Map<String, String> getNullValue() throws ServiceException;

    /**
     * Get Dictionary with null value
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getNullValueAsync(final ServiceCallback<Map<String, String>> serviceCallback);

    /**
     * Get Dictionary with null key
     *
     * @return the Map&lt;String, String&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Map<String, String> getNullKey() throws ServiceException;

    /**
     * Get Dictionary with null key
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getNullKeyAsync(final ServiceCallback<Map<String, String>> serviceCallback);

    /**
     * Get Dictionary with key as empty string
     *
     * @return the Map&lt;String, String&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Map<String, String> getEmptyStringKey() throws ServiceException;

    /**
     * Get Dictionary with key as empty string
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getEmptyStringKeyAsync(final ServiceCallback<Map<String, String>> serviceCallback);

    /**
     * Get invalid Dictionary value
     *
     * @return the Map&lt;String, String&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Map<String, String> getInvalid() throws ServiceException;

    /**
     * Get invalid Dictionary value
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getInvalidAsync(final ServiceCallback<Map<String, String>> serviceCallback);

    /**
     * Get boolean dictionary value {"0": true, "1": false, "2": false, "3": true }
     *
     * @return the Map&lt;String, Boolean&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Map<String, Boolean> getBooleanTfft() throws ServiceException;

    /**
     * Get boolean dictionary value {"0": true, "1": false, "2": false, "3": true }
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getBooleanTfftAsync(final ServiceCallback<Map<String, Boolean>> serviceCallback);

    /**
     * Set dictionary value empty {"0": true, "1": false, "2": false, "3": true }
     *
     * @param arrayBody the Map&lt;String, Boolean&gt; value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void putBooleanTfft(Map<String, Boolean> arrayBody) throws ServiceException;

    /**
     * Set dictionary value empty {"0": true, "1": false, "2": false, "3": true }
     *
     * @param arrayBody the Map&lt;String, Boolean&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void putBooleanTfftAsync(Map<String, Boolean> arrayBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Get boolean dictionary value {"0": true, "1": null, "2": false }
     *
     * @return the Map&lt;String, Boolean&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Map<String, Boolean> getBooleanInvalidNull() throws ServiceException;

    /**
     * Get boolean dictionary value {"0": true, "1": null, "2": false }
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getBooleanInvalidNullAsync(final ServiceCallback<Map<String, Boolean>> serviceCallback);

    /**
     * Get boolean dictionary value '{"0": true, "1": "boolean", "2": false}'
     *
     * @return the Map&lt;String, Boolean&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Map<String, Boolean> getBooleanInvalidString() throws ServiceException;

    /**
     * Get boolean dictionary value '{"0": true, "1": "boolean", "2": false}'
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getBooleanInvalidStringAsync(final ServiceCallback<Map<String, Boolean>> serviceCallback);

    /**
     * Get integer dictionary value {"0": 1, "1": -1, "2": 3, "3": 300}
     *
     * @return the Map&lt;String, Integer&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Map<String, Integer> getIntegerValid() throws ServiceException;

    /**
     * Get integer dictionary value {"0": 1, "1": -1, "2": 3, "3": 300}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getIntegerValidAsync(final ServiceCallback<Map<String, Integer>> serviceCallback);

    /**
     * Set dictionary value empty {"0": 1, "1": -1, "2": 3, "3": 300}
     *
     * @param arrayBody the Map&lt;String, Integer&gt; value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void putIntegerValid(Map<String, Integer> arrayBody) throws ServiceException;

    /**
     * Set dictionary value empty {"0": 1, "1": -1, "2": 3, "3": 300}
     *
     * @param arrayBody the Map&lt;String, Integer&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void putIntegerValidAsync(Map<String, Integer> arrayBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Get integer dictionary value {"0": 1, "1": null, "2": 0}
     *
     * @return the Map&lt;String, Integer&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Map<String, Integer> getIntInvalidNull() throws ServiceException;

    /**
     * Get integer dictionary value {"0": 1, "1": null, "2": 0}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getIntInvalidNullAsync(final ServiceCallback<Map<String, Integer>> serviceCallback);

    /**
     * Get integer dictionary value {"0": 1, "1": "integer", "2": 0}
     *
     * @return the Map&lt;String, Integer&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Map<String, Integer> getIntInvalidString() throws ServiceException;

    /**
     * Get integer dictionary value {"0": 1, "1": "integer", "2": 0}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getIntInvalidStringAsync(final ServiceCallback<Map<String, Integer>> serviceCallback);

    /**
     * Get integer dictionary value {"0": 1, "1": -1, "2": 3, "3": 300}
     *
     * @return the Map&lt;String, Long&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Map<String, Long> getLongValid() throws ServiceException;

    /**
     * Get integer dictionary value {"0": 1, "1": -1, "2": 3, "3": 300}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getLongValidAsync(final ServiceCallback<Map<String, Long>> serviceCallback);

    /**
     * Set dictionary value empty {"0": 1, "1": -1, "2": 3, "3": 300}
     *
     * @param arrayBody the Map&lt;String, Long&gt; value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void putLongValid(Map<String, Long> arrayBody) throws ServiceException;

    /**
     * Set dictionary value empty {"0": 1, "1": -1, "2": 3, "3": 300}
     *
     * @param arrayBody the Map&lt;String, Long&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void putLongValidAsync(Map<String, Long> arrayBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Get long dictionary value {"0": 1, "1": null, "2": 0}
     *
     * @return the Map&lt;String, Long&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Map<String, Long> getLongInvalidNull() throws ServiceException;

    /**
     * Get long dictionary value {"0": 1, "1": null, "2": 0}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getLongInvalidNullAsync(final ServiceCallback<Map<String, Long>> serviceCallback);

    /**
     * Get long dictionary value {"0": 1, "1": "integer", "2": 0}
     *
     * @return the Map&lt;String, Long&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Map<String, Long> getLongInvalidString() throws ServiceException;

    /**
     * Get long dictionary value {"0": 1, "1": "integer", "2": 0}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getLongInvalidStringAsync(final ServiceCallback<Map<String, Long>> serviceCallback);

    /**
     * Get float dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
     *
     * @return the Map&lt;String, Double&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Map<String, Double> getFloatValid() throws ServiceException;

    /**
     * Get float dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getFloatValidAsync(final ServiceCallback<Map<String, Double>> serviceCallback);

    /**
     * Set dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
     *
     * @param arrayBody the Map&lt;String, Double&gt; value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void putFloatValid(Map<String, Double> arrayBody) throws ServiceException;

    /**
     * Set dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
     *
     * @param arrayBody the Map&lt;String, Double&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void putFloatValidAsync(Map<String, Double> arrayBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Get float dictionary value {"0": 0.0, "1": null, "2": 1.2e20}
     *
     * @return the Map&lt;String, Double&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Map<String, Double> getFloatInvalidNull() throws ServiceException;

    /**
     * Get float dictionary value {"0": 0.0, "1": null, "2": 1.2e20}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getFloatInvalidNullAsync(final ServiceCallback<Map<String, Double>> serviceCallback);

    /**
     * Get boolean dictionary value {"0": 1.0, "1": "number", "2": 0.0}
     *
     * @return the Map&lt;String, Double&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Map<String, Double> getFloatInvalidString() throws ServiceException;

    /**
     * Get boolean dictionary value {"0": 1.0, "1": "number", "2": 0.0}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getFloatInvalidStringAsync(final ServiceCallback<Map<String, Double>> serviceCallback);

    /**
     * Get float dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
     *
     * @return the Map&lt;String, Double&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Map<String, Double> getDoubleValid() throws ServiceException;

    /**
     * Get float dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getDoubleValidAsync(final ServiceCallback<Map<String, Double>> serviceCallback);

    /**
     * Set dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
     *
     * @param arrayBody the Map&lt;String, Double&gt; value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void putDoubleValid(Map<String, Double> arrayBody) throws ServiceException;

    /**
     * Set dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
     *
     * @param arrayBody the Map&lt;String, Double&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void putDoubleValidAsync(Map<String, Double> arrayBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Get float dictionary value {"0": 0.0, "1": null, "2": 1.2e20}
     *
     * @return the Map&lt;String, Double&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Map<String, Double> getDoubleInvalidNull() throws ServiceException;

    /**
     * Get float dictionary value {"0": 0.0, "1": null, "2": 1.2e20}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getDoubleInvalidNullAsync(final ServiceCallback<Map<String, Double>> serviceCallback);

    /**
     * Get boolean dictionary value {"0": 1.0, "1": "number", "2": 0.0}
     *
     * @return the Map&lt;String, Double&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Map<String, Double> getDoubleInvalidString() throws ServiceException;

    /**
     * Get boolean dictionary value {"0": 1.0, "1": "number", "2": 0.0}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getDoubleInvalidStringAsync(final ServiceCallback<Map<String, Double>> serviceCallback);

    /**
     * Get string dictionary value {"0": "foo1", "1": "foo2", "2": "foo3"}
     *
     * @return the Map&lt;String, String&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Map<String, String> getStringValid() throws ServiceException;

    /**
     * Get string dictionary value {"0": "foo1", "1": "foo2", "2": "foo3"}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getStringValidAsync(final ServiceCallback<Map<String, String>> serviceCallback);

    /**
     * Set dictionary value {"0": "foo1", "1": "foo2", "2": "foo3"}
     *
     * @param arrayBody the Map&lt;String, String&gt; value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void putStringValid(Map<String, String> arrayBody) throws ServiceException;

    /**
     * Set dictionary value {"0": "foo1", "1": "foo2", "2": "foo3"}
     *
     * @param arrayBody the Map&lt;String, String&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void putStringValidAsync(Map<String, String> arrayBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Get string dictionary value {"0": "foo", "1": null, "2": "foo2"}
     *
     * @return the Map&lt;String, String&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Map<String, String> getStringWithNull() throws ServiceException;

    /**
     * Get string dictionary value {"0": "foo", "1": null, "2": "foo2"}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getStringWithNullAsync(final ServiceCallback<Map<String, String>> serviceCallback);

    /**
     * Get string dictionary value {"0": "foo", "1": 123, "2": "foo2"}
     *
     * @return the Map&lt;String, String&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Map<String, String> getStringWithInvalid() throws ServiceException;

    /**
     * Get string dictionary value {"0": "foo", "1": 123, "2": "foo2"}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getStringWithInvalidAsync(final ServiceCallback<Map<String, String>> serviceCallback);

    /**
     * Get integer dictionary value {"0": "2000-12-01", "1": "1980-01-02", "2": "1492-10-12"}
     *
     * @return the Map&lt;String, LocalDate&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Map<String, LocalDate> getDateValid() throws ServiceException;

    /**
     * Get integer dictionary value {"0": "2000-12-01", "1": "1980-01-02", "2": "1492-10-12"}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getDateValidAsync(final ServiceCallback<Map<String, LocalDate>> serviceCallback);

    /**
     * Set dictionary value  {"0": "2000-12-01", "1": "1980-01-02", "2": "1492-10-12"}
     *
     * @param arrayBody the Map&lt;String, LocalDate&gt; value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void putDateValid(Map<String, LocalDate> arrayBody) throws ServiceException;

    /**
     * Set dictionary value  {"0": "2000-12-01", "1": "1980-01-02", "2": "1492-10-12"}
     *
     * @param arrayBody the Map&lt;String, LocalDate&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void putDateValidAsync(Map<String, LocalDate> arrayBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Get date dictionary value {"0": "2012-01-01", "1": null, "2": "1776-07-04"}
     *
     * @return the Map&lt;String, LocalDate&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Map<String, LocalDate> getDateInvalidNull() throws ServiceException;

    /**
     * Get date dictionary value {"0": "2012-01-01", "1": null, "2": "1776-07-04"}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getDateInvalidNullAsync(final ServiceCallback<Map<String, LocalDate>> serviceCallback);

    /**
     * Get date dictionary value {"0": "2011-03-22", "1": "date"}
     *
     * @return the Map&lt;String, LocalDate&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Map<String, LocalDate> getDateInvalidChars() throws ServiceException;

    /**
     * Get date dictionary value {"0": "2011-03-22", "1": "date"}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getDateInvalidCharsAsync(final ServiceCallback<Map<String, LocalDate>> serviceCallback);

    /**
     * Get date-time dictionary value {"0": "2000-12-01t00:00:01z", "1": "1980-01-02T00:11:35+01:00", "2": "1492-10-12T10:15:01-08:00"}
     *
     * @return the Map&lt;String, DateTime&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Map<String, DateTime> getDateTimeValid() throws ServiceException;

    /**
     * Get date-time dictionary value {"0": "2000-12-01t00:00:01z", "1": "1980-01-02T00:11:35+01:00", "2": "1492-10-12T10:15:01-08:00"}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getDateTimeValidAsync(final ServiceCallback<Map<String, DateTime>> serviceCallback);

    /**
     * Set dictionary value  {"0": "2000-12-01t00:00:01z", "1": "1980-01-02T00:11:35+01:00", "2": "1492-10-12T10:15:01-08:00"}
     *
     * @param arrayBody the Map&lt;String, DateTime&gt; value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void putDateTimeValid(Map<String, DateTime> arrayBody) throws ServiceException;

    /**
     * Set dictionary value  {"0": "2000-12-01t00:00:01z", "1": "1980-01-02T00:11:35+01:00", "2": "1492-10-12T10:15:01-08:00"}
     *
     * @param arrayBody the Map&lt;String, DateTime&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void putDateTimeValidAsync(Map<String, DateTime> arrayBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Get date dictionary value {"0": "2000-12-01t00:00:01z", "1": null}
     *
     * @return the Map&lt;String, DateTime&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Map<String, DateTime> getDateTimeInvalidNull() throws ServiceException;

    /**
     * Get date dictionary value {"0": "2000-12-01t00:00:01z", "1": null}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getDateTimeInvalidNullAsync(final ServiceCallback<Map<String, DateTime>> serviceCallback);

    /**
     * Get date dictionary value {"0": "2000-12-01t00:00:01z", "1": "date-time"}
     *
     * @return the Map&lt;String, DateTime&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Map<String, DateTime> getDateTimeInvalidChars() throws ServiceException;

    /**
     * Get date dictionary value {"0": "2000-12-01t00:00:01z", "1": "date-time"}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getDateTimeInvalidCharsAsync(final ServiceCallback<Map<String, DateTime>> serviceCallback);

    /**
     * Get byte dictionary value {"0": hex(FF FF FF FA), "1": hex(01 02 03), "2": hex (25, 29, 43)} with each item encoded in base64
     *
     * @return the Map&lt;String, byte[]&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Map<String, byte[]> getByteValid() throws ServiceException;

    /**
     * Get byte dictionary value {"0": hex(FF FF FF FA), "1": hex(01 02 03), "2": hex (25, 29, 43)} with each item encoded in base64
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getByteValidAsync(final ServiceCallback<Map<String, byte[]>> serviceCallback);

    /**
     * Put the dictionary value {"0": hex(FF FF FF FA), "1": hex(01 02 03), "2": hex (25, 29, 43)} with each elementencoded in base 64
     *
     * @param arrayBody the Map&lt;String, byte[]&gt; value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void putByteValid(Map<String, byte[]> arrayBody) throws ServiceException;

    /**
     * Put the dictionary value {"0": hex(FF FF FF FA), "1": hex(01 02 03), "2": hex (25, 29, 43)} with each elementencoded in base 64
     *
     * @param arrayBody the Map&lt;String, byte[]&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void putByteValidAsync(Map<String, byte[]> arrayBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Get byte dictionary value {"0": hex(FF FF FF FA), "1": null} with the first item base64 encoded
     *
     * @return the Map&lt;String, byte[]&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Map<String, byte[]> getByteInvalidNull() throws ServiceException;

    /**
     * Get byte dictionary value {"0": hex(FF FF FF FA), "1": null} with the first item base64 encoded
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getByteInvalidNullAsync(final ServiceCallback<Map<String, byte[]>> serviceCallback);

    /**
     * Get dictionary of complex type null value
     *
     * @return the Map&lt;String, Widget&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Map<String, Widget> getComplexNull() throws ServiceException;

    /**
     * Get dictionary of complex type null value
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getComplexNullAsync(final ServiceCallback<Map<String, Widget>> serviceCallback);

    /**
     * Get empty dictionary of complex type {}
     *
     * @return the Map&lt;String, Widget&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Map<String, Widget> getComplexEmpty() throws ServiceException;

    /**
     * Get empty dictionary of complex type {}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getComplexEmptyAsync(final ServiceCallback<Map<String, Widget>> serviceCallback);

    /**
     * Get dictionary of complex type with null item {"0": {"integer": 1, "string": "2"}, "1": null, "2": {"integer": 5, "string": "6"}}
     *
     * @return the Map&lt;String, Widget&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Map<String, Widget> getComplexItemNull() throws ServiceException;

    /**
     * Get dictionary of complex type with null item {"0": {"integer": 1, "string": "2"}, "1": null, "2": {"integer": 5, "string": "6"}}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getComplexItemNullAsync(final ServiceCallback<Map<String, Widget>> serviceCallback);

    /**
     * Get dictionary of complex type with empty item {"0": {"integer": 1, "string": "2"}, "1:" {}, "2": {"integer": 5, "string": "6"}}
     *
     * @return the Map&lt;String, Widget&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Map<String, Widget> getComplexItemEmpty() throws ServiceException;

    /**
     * Get dictionary of complex type with empty item {"0": {"integer": 1, "string": "2"}, "1:" {}, "2": {"integer": 5, "string": "6"}}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getComplexItemEmptyAsync(final ServiceCallback<Map<String, Widget>> serviceCallback);

    /**
     * Get dictionary of complex type with {"0": {"integer": 1, "string": "2"}, "1": {"integer": 3, "string": "4"}, "2": {"integer": 5, "string": "6"}}
     *
     * @return the Map&lt;String, Widget&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Map<String, Widget> getComplexValid() throws ServiceException;

    /**
     * Get dictionary of complex type with {"0": {"integer": 1, "string": "2"}, "1": {"integer": 3, "string": "4"}, "2": {"integer": 5, "string": "6"}}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getComplexValidAsync(final ServiceCallback<Map<String, Widget>> serviceCallback);

    /**
     * Put an dictionary of complex type with values {"0": {"integer": 1, "string": "2"}, "1": {"integer": 3, "string": "4"}, "2": {"integer": 5, "string": "6"}}
     *
     * @param arrayBody the Map&lt;String, Widget&gt; value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void putComplexValid(Map<String, Widget> arrayBody) throws ServiceException;

    /**
     * Put an dictionary of complex type with values {"0": {"integer": 1, "string": "2"}, "1": {"integer": 3, "string": "4"}, "2": {"integer": 5, "string": "6"}}
     *
     * @param arrayBody the Map&lt;String, Widget&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void putComplexValidAsync(Map<String, Widget> arrayBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Get a null array
     *
     * @return the Map&lt;String, List&lt;String&gt;&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Map<String, List<String>> getArrayNull() throws ServiceException;

    /**
     * Get a null array
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getArrayNullAsync(final ServiceCallback<Map<String, List<String>>> serviceCallback);

    /**
     * Get an empty dictionary {}
     *
     * @return the Map&lt;String, List&lt;String&gt;&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Map<String, List<String>> getArrayEmpty() throws ServiceException;

    /**
     * Get an empty dictionary {}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getArrayEmptyAsync(final ServiceCallback<Map<String, List<String>>> serviceCallback);

    /**
     * Get an dictionary of array of strings {"0": ["1", "2", "3"], "1": null, "2": ["7", "8", "9"]}
     *
     * @return the Map&lt;String, List&lt;String&gt;&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Map<String, List<String>> getArrayItemNull() throws ServiceException;

    /**
     * Get an dictionary of array of strings {"0": ["1", "2", "3"], "1": null, "2": ["7", "8", "9"]}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getArrayItemNullAsync(final ServiceCallback<Map<String, List<String>>> serviceCallback);

    /**
     * Get an array of array of strings [{"0": ["1", "2", "3"], "1": [], "2": ["7", "8", "9"]}
     *
     * @return the Map&lt;String, List&lt;String&gt;&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Map<String, List<String>> getArrayItemEmpty() throws ServiceException;

    /**
     * Get an array of array of strings [{"0": ["1", "2", "3"], "1": [], "2": ["7", "8", "9"]}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getArrayItemEmptyAsync(final ServiceCallback<Map<String, List<String>>> serviceCallback);

    /**
     * Get an array of array of strings {"0": ["1", "2", "3"], "1": ["4", "5", "6"], "2": ["7", "8", "9"]}
     *
     * @return the Map&lt;String, List&lt;String&gt;&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Map<String, List<String>> getArrayValid() throws ServiceException;

    /**
     * Get an array of array of strings {"0": ["1", "2", "3"], "1": ["4", "5", "6"], "2": ["7", "8", "9"]}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getArrayValidAsync(final ServiceCallback<Map<String, List<String>>> serviceCallback);

    /**
     * Put An array of array of strings {"0": ["1", "2", "3"], "1": ["4", "5", "6"], "2": ["7", "8", "9"]}
     *
     * @param arrayBody the Map&lt;String, List&lt;String&gt;&gt; value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void putArrayValid(Map<String, List<String>> arrayBody) throws ServiceException;

    /**
     * Put An array of array of strings {"0": ["1", "2", "3"], "1": ["4", "5", "6"], "2": ["7", "8", "9"]}
     *
     * @param arrayBody the Map&lt;String, List&lt;String&gt;&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void putArrayValidAsync(Map<String, List<String>> arrayBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Get an dictionaries of dictionaries with value null
     *
     * @return the Map&lt;String, Map&lt;String, String&gt;&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Map<String, Map<String, String>> getDictionaryNull() throws ServiceException;

    /**
     * Get an dictionaries of dictionaries with value null
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getDictionaryNullAsync(final ServiceCallback<Map<String, Map<String, String>>> serviceCallback);

    /**
     * Get an dictionaries of dictionaries of type &lt;string, string&gt; with value {}
     *
     * @return the Map&lt;String, Map&lt;String, String&gt;&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Map<String, Map<String, String>> getDictionaryEmpty() throws ServiceException;

    /**
     * Get an dictionaries of dictionaries of type &lt;string, string&gt; with value {}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getDictionaryEmptyAsync(final ServiceCallback<Map<String, Map<String, String>>> serviceCallback);

    /**
     * Get an dictionaries of dictionaries of type &lt;string, string&gt; with value {"0": {"1": "one", "2": "two", "3": "three"}, "1": null, "2": {"7": "seven", "8": "eight", "9": "nine"}}
     *
     * @return the Map&lt;String, Map&lt;String, String&gt;&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Map<String, Map<String, String>> getDictionaryItemNull() throws ServiceException;

    /**
     * Get an dictionaries of dictionaries of type &lt;string, string&gt; with value {"0": {"1": "one", "2": "two", "3": "three"}, "1": null, "2": {"7": "seven", "8": "eight", "9": "nine"}}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getDictionaryItemNullAsync(final ServiceCallback<Map<String, Map<String, String>>> serviceCallback);

    /**
     * Get an dictionaries of dictionaries of type &lt;string, string&gt; with value {"0": {"1": "one", "2": "two", "3": "three"}, "1": {}, "2": {"7": "seven", "8": "eight", "9": "nine"}}
     *
     * @return the Map&lt;String, Map&lt;String, String&gt;&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Map<String, Map<String, String>> getDictionaryItemEmpty() throws ServiceException;

    /**
     * Get an dictionaries of dictionaries of type &lt;string, string&gt; with value {"0": {"1": "one", "2": "two", "3": "three"}, "1": {}, "2": {"7": "seven", "8": "eight", "9": "nine"}}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getDictionaryItemEmptyAsync(final ServiceCallback<Map<String, Map<String, String>>> serviceCallback);

    /**
     * Get an dictionaries of dictionaries of type &lt;string, string&gt; with value {"0": {"1": "one", "2": "two", "3": "three"}, "1": {"4": "four", "5": "five", "6": "six"}, "2": {"7": "seven", "8": "eight", "9": "nine"}}
     *
     * @return the Map&lt;String, Map&lt;String, String&gt;&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Map<String, Map<String, String>> getDictionaryValid() throws ServiceException;

    /**
     * Get an dictionaries of dictionaries of type &lt;string, string&gt; with value {"0": {"1": "one", "2": "two", "3": "three"}, "1": {"4": "four", "5": "five", "6": "six"}, "2": {"7": "seven", "8": "eight", "9": "nine"}}
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getDictionaryValidAsync(final ServiceCallback<Map<String, Map<String, String>>> serviceCallback);

    /**
     * Get an dictionaries of dictionaries of type &lt;string, string&gt; with value {"0": {"1": "one", "2": "two", "3": "three"}, "1": {"4": "four", "5": "five", "6": "six"}, "2": {"7": "seven", "8": "eight", "9": "nine"}}
     *
     * @param arrayBody the Map&lt;String, Map&lt;String, String&gt;&gt; value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void putDictionaryValid(Map<String, Map<String, String>> arrayBody) throws ServiceException;

    /**
     * Get an dictionaries of dictionaries of type &lt;string, string&gt; with value {"0": {"1": "one", "2": "two", "3": "three"}, "1": {"4": "four", "5": "five", "6": "six"}, "2": {"7": "seven", "8": "eight", "9": "nine"}}
     *
     * @param arrayBody the Map&lt;String, Map&lt;String, String&gt;&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void putDictionaryValidAsync(Map<String, Map<String, String>> arrayBody, final ServiceCallback<Void> serviceCallback);

}
