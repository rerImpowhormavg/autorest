/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.bodycomplex;

import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceException;
import retrofit.Call;
import com.squareup.okhttp.ResponseBody;
import fixtures.bodycomplex.models.Siamese;
import retrofit.http.GET;
import retrofit.http.PUT;
import retrofit.http.Body;

/**
 * An instance of this class provides access to all the operations defined
 * in Inheritance.
 */
public interface Inheritance {
    /**
     * The interface defining all the services for Inheritance to be
     * used by Retrofit to perform actually REST calls.
     */
    interface InheritanceService {
        @GET("/complex/inheritance/valid")
        Call<ResponseBody> getValid();

        @PUT("/complex/inheritance/valid")
        Call<ResponseBody> putValid(@Body Siamese complexBody);

    }
    /**
     * Get complex types that extend others
     *
     * @return the Siamese object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Siamese getValid() throws ServiceException;

    /**
     * Get complex types that extend others
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getValidAsync(final ServiceCallback<Siamese> serviceCallback);

    /**
     * Put complex types that extend others
     *
     * @param complexBody Please put a siamese with id=2, name="Siameee", color=green, breed=persion, which hates 2 dogs, the 1st one named "Potato" with id=1 and food="tomato", and the 2nd one named "Tomato" with id=-1 and food="french fries".
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void putValid(Siamese complexBody) throws ServiceException;

    /**
     * Put complex types that extend others
     *
     * @param complexBody Please put a siamese with id=2, name="Siameee", color=green, breed=persion, which hates 2 dogs, the 1st one named "Potato" with id=1 and food="tomato", and the 2nd one named "Tomato" with id=-1 and food="french fries".
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> putValidAsync(Siamese complexBody, final ServiceCallback<Void> serviceCallback);

}
