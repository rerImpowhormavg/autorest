// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.


package fixtures.requiredoptional;

import com.microsoft.rest.ServiceClient;
import com.squareup.okhtpp.OkHttpClient;
import retrofit.RestAdapter;

/**
 * Initializes a new instance of the AutoRestRequiredOptionalTestService class.
 */
public class AutoRestRequiredOptionalTestServiceImpl extends ServiceClient<AutoRestRequiredOptionalTestService> implements AutoRestRequiredOptionalTestService {
    private String baseUri;

    /**
     * Gets the URI used as the base for all cloud service requests.
     * @return The BaseUri value.
     */
    public String getBaseUri();

    private String requiredGlobalPath;

    /**
     * number of items to skip
     * @return the requiredGlobalPath value.
     */
    public String getRequiredGlobalPath();

    private String requiredGlobalQuery;

    /**
     * number of items to skip
     * @return the requiredGlobalQuery value.
     */
    public String getRequiredGlobalQuery();

    private Implicit implicit;

    /**
     * Test Infrastructure for AutoRest
     * @return the implicit value.
     */
    Implicit getImplicit();

    private Explicit explicit;

    /**
     * Test Infrastructure for AutoRest
     * @return the explicit value.
     */
    Explicit getExplicit();

    public AutoRestRequiredOptionalTestService() {
        this("http://localhost");
    }

    public AutoRestRequiredOptionalTestService(String baseUri) {
        super();
        this.baseUri = baseUri;
        initialize();
    }

    public AutoRestRequiredOptionalTestService(String baseUri, OkHttpClient client, RestAdapter.Builder restAdapterBuilder) {
        super(client, restAdapterBuilder);
        this.baseUri = baseUri();
        initialize();
    }

    private void initialize() {
        RestAdapter restAdapter = restAdapterBuilder.setEndpoint(baseUri).build();
        this.implicit = restAdapter.create(Implicit.class);
        this.explicit = restAdapter.create(Explicit.class);
    }
}
