// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.


package fixtures.bodynumber;

import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceException;
import com.microsoft.rest.ServiceResponseCallback;
import retrofit.client.Response;
import retrofit.http.GET;
import retrofit.http.PUT;
import retrofit.http.Body;

public interface Number {
    interface NumberService {
        @GET("/number/null")
        Response getNull() throws ServiceException;

        @GET("/number/null")
        void getNullAsync(ServiceResponseCallback cb);

        @GET("/number/invalidfloat")
        Response getInvalidFloat() throws ServiceException;

        @GET("/number/invalidfloat")
        void getInvalidFloatAsync(ServiceResponseCallback cb);

        @GET("/number/invaliddouble")
        Response getInvalidDouble() throws ServiceException;

        @GET("/number/invaliddouble")
        void getInvalidDoubleAsync(ServiceResponseCallback cb);

        @PUT("/number/big/float/3.402823e+20")
        Response putBigFloat(@Body double numberBody) throws ServiceException;

        @PUT("/number/big/float/3.402823e+20")
        void putBigFloatAsync(@Body double numberBody, ServiceResponseCallback cb);

        @GET("/number/big/float/3.402823e+20")
        Response getBigFloat() throws ServiceException;

        @GET("/number/big/float/3.402823e+20")
        void getBigFloatAsync(ServiceResponseCallback cb);

        @PUT("/number/big/double/2.5976931e+101")
        Response putBigDouble(@Body double numberBody) throws ServiceException;

        @PUT("/number/big/double/2.5976931e+101")
        void putBigDoubleAsync(@Body double numberBody, ServiceResponseCallback cb);

        @GET("/number/big/double/2.5976931e+101")
        Response getBigDouble() throws ServiceException;

        @GET("/number/big/double/2.5976931e+101")
        void getBigDoubleAsync(ServiceResponseCallback cb);

        @PUT("/number/big/double/99999999.99")
        Response putBigDoublePositiveDecimal(@Body double numberBody) throws ServiceException;

        @PUT("/number/big/double/99999999.99")
        void putBigDoublePositiveDecimalAsync(@Body double numberBody, ServiceResponseCallback cb);

        @GET("/number/big/double/99999999.99")
        Response getBigDoublePositiveDecimal() throws ServiceException;

        @GET("/number/big/double/99999999.99")
        void getBigDoublePositiveDecimalAsync(ServiceResponseCallback cb);

        @PUT("/number/big/double/-99999999.99")
        Response putBigDoubleNegativeDecimal(@Body double numberBody) throws ServiceException;

        @PUT("/number/big/double/-99999999.99")
        void putBigDoubleNegativeDecimalAsync(@Body double numberBody, ServiceResponseCallback cb);

        @GET("/number/big/double/-99999999.99")
        Response getBigDoubleNegativeDecimal() throws ServiceException;

        @GET("/number/big/double/-99999999.99")
        void getBigDoubleNegativeDecimalAsync(ServiceResponseCallback cb);

        @PUT("/number/small/float/3.402823e-20")
        Response putSmallFloat(@Body double numberBody) throws ServiceException;

        @PUT("/number/small/float/3.402823e-20")
        void putSmallFloatAsync(@Body double numberBody, ServiceResponseCallback cb);

        @GET("/number/small/float/3.402823e-20")
        Response getSmallFloat() throws ServiceException;

        @GET("/number/small/float/3.402823e-20")
        void getSmallFloatAsync(ServiceResponseCallback cb);

        @PUT("/number/small/double/2.5976931e-101")
        Response putSmallDouble(@Body double numberBody) throws ServiceException;

        @PUT("/number/small/double/2.5976931e-101")
        void putSmallDoubleAsync(@Body double numberBody, ServiceResponseCallback cb);

        @GET("/number/small/double/2.5976931e-101")
        Response getSmallDouble() throws ServiceException;

        @GET("/number/small/double/2.5976931e-101")
        void getSmallDoubleAsync(ServiceResponseCallback cb);

    }
    double getNull() throws ServiceException;

    void getNullAsync(final ServiceCallback<Double> serviceCallback);

    double getInvalidFloat() throws ServiceException;

    void getInvalidFloatAsync(final ServiceCallback<Double> serviceCallback);

    double getInvalidDouble() throws ServiceException;

    void getInvalidDoubleAsync(final ServiceCallback<Double> serviceCallback);

    void putBigFloat(double numberBody) throws ServiceException;

    void putBigFloatAsync(double numberBody, final ServiceCallback<Void> serviceCallback);

    double getBigFloat() throws ServiceException;

    void getBigFloatAsync(final ServiceCallback<Double> serviceCallback);

    void putBigDouble(double numberBody) throws ServiceException;

    void putBigDoubleAsync(double numberBody, final ServiceCallback<Void> serviceCallback);

    double getBigDouble() throws ServiceException;

    void getBigDoubleAsync(final ServiceCallback<Double> serviceCallback);

    void putBigDoublePositiveDecimal(double numberBody) throws ServiceException;

    void putBigDoublePositiveDecimalAsync(double numberBody, final ServiceCallback<Void> serviceCallback);

    double getBigDoublePositiveDecimal() throws ServiceException;

    void getBigDoublePositiveDecimalAsync(final ServiceCallback<Double> serviceCallback);

    void putBigDoubleNegativeDecimal(double numberBody) throws ServiceException;

    void putBigDoubleNegativeDecimalAsync(double numberBody, final ServiceCallback<Void> serviceCallback);

    double getBigDoubleNegativeDecimal() throws ServiceException;

    void getBigDoubleNegativeDecimalAsync(final ServiceCallback<Double> serviceCallback);

    void putSmallFloat(double numberBody) throws ServiceException;

    void putSmallFloatAsync(double numberBody, final ServiceCallback<Void> serviceCallback);

    double getSmallFloat() throws ServiceException;

    void getSmallFloatAsync(final ServiceCallback<Double> serviceCallback);

    void putSmallDouble(double numberBody) throws ServiceException;

    void putSmallDoubleAsync(double numberBody, final ServiceCallback<Void> serviceCallback);

    double getSmallDouble() throws ServiceException;

    void getSmallDoubleAsync(final ServiceCallback<Double> serviceCallback);

}
