// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.


package fixtures.bodynumber;

import com.google.gson.reflect.TypeToken;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceException;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseBuilder;
import com.microsoft.rest.ServiceResponseCallback;
import retrofit.client.Response;
import retrofit.RestAdapter;
import retrofit.RetrofitError;
import retrofit.http.GET;
import retrofit.http.PUT;
import retrofit.http.Body;

public class Number {
    private NumberService service;

    public Number(RestAdapter restAdapter) {
        service = restAdapter.create(NumberService.class);
    }

    public interface NumberService {
        @GET("/number/null")
        Response getNull() throws ServiceException;

        @GET("/number/null")
        void getNullAsync(ServiceResponseCallback cb);

        @GET("/number/invalidfloat")
        Response getInvalidFloat() throws ServiceException;

        @GET("/number/invalidfloat")
        void getInvalidFloatAsync(ServiceResponseCallback cb);

        @GET("/number/invaliddouble")
        Response getInvalidDouble() throws ServiceException;

        @GET("/number/invaliddouble")
        void getInvalidDoubleAsync(ServiceResponseCallback cb);

        @PUT("/number/big/float/3.402823e+20")
        Response putBigFloat(@Body Double numberBody) throws ServiceException;

        @PUT("/number/big/float/3.402823e+20")
        void putBigFloatAsync(@Body Double numberBody, ServiceResponseCallback cb);

        @GET("/number/big/float/3.402823e+20")
        Response getBigFloat() throws ServiceException;

        @GET("/number/big/float/3.402823e+20")
        void getBigFloatAsync(ServiceResponseCallback cb);

        @PUT("/number/big/double/2.5976931e+101")
        Response putBigDouble(@Body Double numberBody) throws ServiceException;

        @PUT("/number/big/double/2.5976931e+101")
        void putBigDoubleAsync(@Body Double numberBody, ServiceResponseCallback cb);

        @GET("/number/big/double/2.5976931e+101")
        Response getBigDouble() throws ServiceException;

        @GET("/number/big/double/2.5976931e+101")
        void getBigDoubleAsync(ServiceResponseCallback cb);

        @PUT("/number/big/double/99999999.99")
        Response putBigDoublePositiveDecimal(@Body Double numberBody) throws ServiceException;

        @PUT("/number/big/double/99999999.99")
        void putBigDoublePositiveDecimalAsync(@Body Double numberBody, ServiceResponseCallback cb);

        @GET("/number/big/double/99999999.99")
        Response getBigDoublePositiveDecimal() throws ServiceException;

        @GET("/number/big/double/99999999.99")
        void getBigDoublePositiveDecimalAsync(ServiceResponseCallback cb);

        @PUT("/number/big/double/-99999999.99")
        Response putBigDoubleNegativeDecimal(@Body Double numberBody) throws ServiceException;

        @PUT("/number/big/double/-99999999.99")
        void putBigDoubleNegativeDecimalAsync(@Body Double numberBody, ServiceResponseCallback cb);

        @GET("/number/big/double/-99999999.99")
        Response getBigDoubleNegativeDecimal() throws ServiceException;

        @GET("/number/big/double/-99999999.99")
        void getBigDoubleNegativeDecimalAsync(ServiceResponseCallback cb);

        @PUT("/number/small/float/3.402823e-20")
        Response putSmallFloat(@Body Double numberBody) throws ServiceException;

        @PUT("/number/small/float/3.402823e-20")
        void putSmallFloatAsync(@Body Double numberBody, ServiceResponseCallback cb);

        @GET("/number/small/float/3.402823e-20")
        Response getSmallFloat() throws ServiceException;

        @GET("/number/small/float/3.402823e-20")
        void getSmallFloatAsync(ServiceResponseCallback cb);

        @PUT("/number/small/double/2.5976931e-101")
        Response putSmallDouble(@Body Double numberBody) throws ServiceException;

        @PUT("/number/small/double/2.5976931e-101")
        void putSmallDoubleAsync(@Body Double numberBody, ServiceResponseCallback cb);

        @GET("/number/small/double/2.5976931e-101")
        Response getSmallDouble() throws ServiceException;

        @GET("/number/small/double/2.5976931e-101")
        void getSmallDoubleAsync(ServiceResponseCallback cb);

    }
    public Double getNull() throws ServiceException {
        try {
            return getNullDelegate(service.getNull(), null).getBody();
        } catch (RetrofitError error) {
            return getNullDelegate(error.getResponse(), error).getBody();
        }
    }

    public void getNullAsync(final ServiceCallback<Double> serviceCallback) {
        service.getNullAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getNullDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Double> getNullDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Double>()
                .register(200, new TypeToken<Double>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public Double getInvalidFloat() throws ServiceException {
        try {
            return getInvalidFloatDelegate(service.getInvalidFloat(), null).getBody();
        } catch (RetrofitError error) {
            return getInvalidFloatDelegate(error.getResponse(), error).getBody();
        }
    }

    public void getInvalidFloatAsync(final ServiceCallback<Double> serviceCallback) {
        service.getInvalidFloatAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getInvalidFloatDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Double> getInvalidFloatDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Double>()
                .register(200, new TypeToken<Double>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public Double getInvalidDouble() throws ServiceException {
        try {
            return getInvalidDoubleDelegate(service.getInvalidDouble(), null).getBody();
        } catch (RetrofitError error) {
            return getInvalidDoubleDelegate(error.getResponse(), error).getBody();
        }
    }

    public void getInvalidDoubleAsync(final ServiceCallback<Double> serviceCallback) {
        service.getInvalidDoubleAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getInvalidDoubleDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Double> getInvalidDoubleDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Double>()
                .register(200, new TypeToken<Double>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public void putBigFloat(Double numberBody) throws ServiceException {
        try {
            putBigFloatDelegate(service.putBigFloat(numberBody), null).getBody();
        } catch (RetrofitError error) {
            putBigFloatDelegate(error.getResponse(), error).getBody();
        }
    }

    public void putBigFloatAsync(Double numberBody, final ServiceCallback<Void> serviceCallback) {
        service.putBigFloatAsync(numberBody, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(putBigFloatDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> putBigFloatDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public Double getBigFloat() throws ServiceException {
        try {
            return getBigFloatDelegate(service.getBigFloat(), null).getBody();
        } catch (RetrofitError error) {
            return getBigFloatDelegate(error.getResponse(), error).getBody();
        }
    }

    public void getBigFloatAsync(final ServiceCallback<Double> serviceCallback) {
        service.getBigFloatAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getBigFloatDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Double> getBigFloatDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Double>()
                .register(200, new TypeToken<Double>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public void putBigDouble(Double numberBody) throws ServiceException {
        try {
            putBigDoubleDelegate(service.putBigDouble(numberBody), null).getBody();
        } catch (RetrofitError error) {
            putBigDoubleDelegate(error.getResponse(), error).getBody();
        }
    }

    public void putBigDoubleAsync(Double numberBody, final ServiceCallback<Void> serviceCallback) {
        service.putBigDoubleAsync(numberBody, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(putBigDoubleDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> putBigDoubleDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public Double getBigDouble() throws ServiceException {
        try {
            return getBigDoubleDelegate(service.getBigDouble(), null).getBody();
        } catch (RetrofitError error) {
            return getBigDoubleDelegate(error.getResponse(), error).getBody();
        }
    }

    public void getBigDoubleAsync(final ServiceCallback<Double> serviceCallback) {
        service.getBigDoubleAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getBigDoubleDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Double> getBigDoubleDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Double>()
                .register(200, new TypeToken<Double>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public void putBigDoublePositiveDecimal(Double numberBody) throws ServiceException {
        try {
            putBigDoublePositiveDecimalDelegate(service.putBigDoublePositiveDecimal(numberBody), null).getBody();
        } catch (RetrofitError error) {
            putBigDoublePositiveDecimalDelegate(error.getResponse(), error).getBody();
        }
    }

    public void putBigDoublePositiveDecimalAsync(Double numberBody, final ServiceCallback<Void> serviceCallback) {
        service.putBigDoublePositiveDecimalAsync(numberBody, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(putBigDoublePositiveDecimalDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> putBigDoublePositiveDecimalDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public Double getBigDoublePositiveDecimal() throws ServiceException {
        try {
            return getBigDoublePositiveDecimalDelegate(service.getBigDoublePositiveDecimal(), null).getBody();
        } catch (RetrofitError error) {
            return getBigDoublePositiveDecimalDelegate(error.getResponse(), error).getBody();
        }
    }

    public void getBigDoublePositiveDecimalAsync(final ServiceCallback<Double> serviceCallback) {
        service.getBigDoublePositiveDecimalAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getBigDoublePositiveDecimalDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Double> getBigDoublePositiveDecimalDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Double>()
                .register(200, new TypeToken<Double>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public void putBigDoubleNegativeDecimal(Double numberBody) throws ServiceException {
        try {
            putBigDoubleNegativeDecimalDelegate(service.putBigDoubleNegativeDecimal(numberBody), null).getBody();
        } catch (RetrofitError error) {
            putBigDoubleNegativeDecimalDelegate(error.getResponse(), error).getBody();
        }
    }

    public void putBigDoubleNegativeDecimalAsync(Double numberBody, final ServiceCallback<Void> serviceCallback) {
        service.putBigDoubleNegativeDecimalAsync(numberBody, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(putBigDoubleNegativeDecimalDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> putBigDoubleNegativeDecimalDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public Double getBigDoubleNegativeDecimal() throws ServiceException {
        try {
            return getBigDoubleNegativeDecimalDelegate(service.getBigDoubleNegativeDecimal(), null).getBody();
        } catch (RetrofitError error) {
            return getBigDoubleNegativeDecimalDelegate(error.getResponse(), error).getBody();
        }
    }

    public void getBigDoubleNegativeDecimalAsync(final ServiceCallback<Double> serviceCallback) {
        service.getBigDoubleNegativeDecimalAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getBigDoubleNegativeDecimalDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Double> getBigDoubleNegativeDecimalDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Double>()
                .register(200, new TypeToken<Double>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public void putSmallFloat(Double numberBody) throws ServiceException {
        try {
            putSmallFloatDelegate(service.putSmallFloat(numberBody), null).getBody();
        } catch (RetrofitError error) {
            putSmallFloatDelegate(error.getResponse(), error).getBody();
        }
    }

    public void putSmallFloatAsync(Double numberBody, final ServiceCallback<Void> serviceCallback) {
        service.putSmallFloatAsync(numberBody, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(putSmallFloatDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> putSmallFloatDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public Double getSmallFloat() throws ServiceException {
        try {
            return getSmallFloatDelegate(service.getSmallFloat(), null).getBody();
        } catch (RetrofitError error) {
            return getSmallFloatDelegate(error.getResponse(), error).getBody();
        }
    }

    public void getSmallFloatAsync(final ServiceCallback<Double> serviceCallback) {
        service.getSmallFloatAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getSmallFloatDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Double> getSmallFloatDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Double>()
                .register(200, new TypeToken<Double>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public void putSmallDouble(Double numberBody) throws ServiceException {
        try {
            putSmallDoubleDelegate(service.putSmallDouble(numberBody), null).getBody();
        } catch (RetrofitError error) {
            putSmallDoubleDelegate(error.getResponse(), error).getBody();
        }
    }

    public void putSmallDoubleAsync(Double numberBody, final ServiceCallback<Void> serviceCallback) {
        service.putSmallDoubleAsync(numberBody, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(putSmallDoubleDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> putSmallDoubleDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public Double getSmallDouble() throws ServiceException {
        try {
            return getSmallDoubleDelegate(service.getSmallDouble(), null).getBody();
        } catch (RetrofitError error) {
            return getSmallDoubleDelegate(error.getResponse(), error).getBody();
        }
    }

    public void getSmallDoubleAsync(final ServiceCallback<Double> serviceCallback) {
        service.getSmallDoubleAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getSmallDoubleDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Double> getSmallDoubleDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Double>()
                .register(200, new TypeToken<Double>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

}
