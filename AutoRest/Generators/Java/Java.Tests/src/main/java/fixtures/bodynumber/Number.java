// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.


package fixtures.bodynumber;

import com.microsoft.rest.ServiceException;
import retrofit.Callback;
import retrofit.client.Response;

public interface number {
    @GET("/number/null")
    double getNull();

    @GET("/number/null")
    void getNullAsync(Callback<Double> cb);

    @GET("/number/invalidfloat")
    Double getInvalidFloat();

    @GET("/number/invalidfloat")
    void getInvalidFloatAsync(Callback<Double> cb);

    @GET("/number/invaliddouble")
    Double getInvalidDouble();

    @GET("/number/invaliddouble")
    void getInvalidDoubleAsync(Callback<Double> cb);

    @PUT("/number/big/float/3.402823e+20")
    void putBigFloat(Double numberBody);

    @PUT("/number/big/float/3.402823e+20")
    void putBigFloatAsync(Double numberBody, Callback<Response> cb);

    @GET("/number/big/float/3.402823e+20")
    Double getBigFloat();

    @GET("/number/big/float/3.402823e+20")
    void getBigFloatAsync(Callback<Double> cb);

    @PUT("/number/big/double/2.5976931e+101")
    void putBigDouble(Double numberBody);

    @PUT("/number/big/double/2.5976931e+101")
    void putBigDoubleAsync(Double numberBody, Callback<Response> cb);

    @GET("/number/big/double/2.5976931e+101")
    Double getBigDouble();

    @GET("/number/big/double/2.5976931e+101")
    void getBigDoubleAsync(Callback<Double> cb);

    @PUT("/number/big/double/99999999.99")
    void putBigDoublePositiveDecimal(Double numberBody);

    @PUT("/number/big/double/99999999.99")
    void putBigDoublePositiveDecimalAsync(Double numberBody, Callback<Response> cb);

    @GET("/number/big/double/99999999.99")
    Double getBigDoublePositiveDecimal();

    @GET("/number/big/double/99999999.99")
    void getBigDoublePositiveDecimalAsync(Callback<Double> cb);

    @PUT("/number/big/double/-99999999.99")
    void putBigDoubleNegativeDecimal(Double numberBody);

    @PUT("/number/big/double/-99999999.99")
    void putBigDoubleNegativeDecimalAsync(Double numberBody, Callback<Response> cb);

    @GET("/number/big/double/-99999999.99")
    Double getBigDoubleNegativeDecimal();

    @GET("/number/big/double/-99999999.99")
    void getBigDoubleNegativeDecimalAsync(Callback<Double> cb);

    @PUT("/number/small/float/3.402823e-20")
    void putSmallFloat(Double numberBody);

    @PUT("/number/small/float/3.402823e-20")
    void putSmallFloatAsync(Double numberBody, Callback<Response> cb);

    @GET("/number/small/float/3.402823e-20")
    Double getSmallFloat();

    @GET("/number/small/float/3.402823e-20")
    void getSmallFloatAsync(Callback<Double> cb);

    @PUT("/number/small/double/2.5976931e-101")
    void putSmallDouble(Double numberBody);

    @PUT("/number/small/double/2.5976931e-101")
    void putSmallDoubleAsync(Double numberBody, Callback<Response> cb);

    @GET("/number/small/double/2.5976931e-101")
    Double getSmallDouble();

    @GET("/number/small/double/2.5976931e-101")
    void getSmallDoubleAsync(Callback<Double> cb);

}
