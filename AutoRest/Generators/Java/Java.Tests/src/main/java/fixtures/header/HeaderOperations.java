// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.


package fixtures.header;

import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceException;
import com.microsoft.rest.ServiceResponseCallback;
import retrofit.client.Response;
import java.util.Date;
import fixtures.header.models.GreyscaleColors;
import retrofit.http.POST;
import retrofit.http.Header;

public interface HeaderOperations {
    interface HeaderService {
        @POST("/header/param/existingkey")
        Response paramExistingKey(@Header("User-Agent") String userAgent) throws ServiceException;

        @POST("/header/param/existingkey")
        void paramExistingKeyAsync(@Header("User-Agent") String userAgent, ServiceResponseCallback cb);

        @POST("/header/response/existingkey")
        Response responseExistingKey() throws ServiceException;

        @POST("/header/response/existingkey")
        void responseExistingKeyAsync(ServiceResponseCallback cb);

        @POST("/header/param/protectedkey")
        Response paramProtectedKey(@Header("Content-Type") String contentType) throws ServiceException;

        @POST("/header/param/protectedkey")
        void paramProtectedKeyAsync(@Header("Content-Type") String contentType, ServiceResponseCallback cb);

        @POST("/header/response/protectedkey")
        Response responseProtectedKey() throws ServiceException;

        @POST("/header/response/protectedkey")
        void responseProtectedKeyAsync(ServiceResponseCallback cb);

        @POST("/header/param/prim/integer")
        Response paramInteger(@Header("scenario") String scenario, @Header("value") int value) throws ServiceException;

        @POST("/header/param/prim/integer")
        void paramIntegerAsync(@Header("scenario") String scenario, @Header("value") int value, ServiceResponseCallback cb);

        @POST("/header/response/prim/integer")
        Response responseInteger(@Header("scenario") String scenario) throws ServiceException;

        @POST("/header/response/prim/integer")
        void responseIntegerAsync(@Header("scenario") String scenario, ServiceResponseCallback cb);

        @POST("/header/param/prim/long")
        Response paramLong(@Header("scenario") String scenario, @Header("value") long value) throws ServiceException;

        @POST("/header/param/prim/long")
        void paramLongAsync(@Header("scenario") String scenario, @Header("value") long value, ServiceResponseCallback cb);

        @POST("/header/response/prim/long")
        Response responseLong(@Header("scenario") String scenario) throws ServiceException;

        @POST("/header/response/prim/long")
        void responseLongAsync(@Header("scenario") String scenario, ServiceResponseCallback cb);

        @POST("/header/param/prim/float")
        Response paramFloat(@Header("scenario") String scenario, @Header("value") double value) throws ServiceException;

        @POST("/header/param/prim/float")
        void paramFloatAsync(@Header("scenario") String scenario, @Header("value") double value, ServiceResponseCallback cb);

        @POST("/header/response/prim/float")
        Response responseFloat(@Header("scenario") String scenario) throws ServiceException;

        @POST("/header/response/prim/float")
        void responseFloatAsync(@Header("scenario") String scenario, ServiceResponseCallback cb);

        @POST("/header/param/prim/double")
        Response paramDouble(@Header("scenario") String scenario, @Header("value") double value) throws ServiceException;

        @POST("/header/param/prim/double")
        void paramDoubleAsync(@Header("scenario") String scenario, @Header("value") double value, ServiceResponseCallback cb);

        @POST("/header/response/prim/double")
        Response responseDouble(@Header("scenario") String scenario) throws ServiceException;

        @POST("/header/response/prim/double")
        void responseDoubleAsync(@Header("scenario") String scenario, ServiceResponseCallback cb);

        @POST("/header/param/prim/bool")
        Response paramBool(@Header("scenario") String scenario, @Header("value") boolean value) throws ServiceException;

        @POST("/header/param/prim/bool")
        void paramBoolAsync(@Header("scenario") String scenario, @Header("value") boolean value, ServiceResponseCallback cb);

        @POST("/header/response/prim/bool")
        Response responseBool(@Header("scenario") String scenario) throws ServiceException;

        @POST("/header/response/prim/bool")
        void responseBoolAsync(@Header("scenario") String scenario, ServiceResponseCallback cb);

        @POST("/header/param/prim/string")
        Response paramString(@Header("scenario") String scenario, @Header("value") String value) throws ServiceException;

        @POST("/header/param/prim/string")
        void paramStringAsync(@Header("scenario") String scenario, @Header("value") String value, ServiceResponseCallback cb);

        @POST("/header/response/prim/string")
        Response responseString(@Header("scenario") String scenario) throws ServiceException;

        @POST("/header/response/prim/string")
        void responseStringAsync(@Header("scenario") String scenario, ServiceResponseCallback cb);

        @POST("/header/param/prim/date")
        Response paramDate(@Header("scenario") String scenario, @Header("value") Date value) throws ServiceException;

        @POST("/header/param/prim/date")
        void paramDateAsync(@Header("scenario") String scenario, @Header("value") Date value, ServiceResponseCallback cb);

        @POST("/header/response/prim/date")
        Response responseDate(@Header("scenario") String scenario) throws ServiceException;

        @POST("/header/response/prim/date")
        void responseDateAsync(@Header("scenario") String scenario, ServiceResponseCallback cb);

        @POST("/header/param/prim/datetime")
        Response paramDatetime(@Header("scenario") String scenario, @Header("value") Date value) throws ServiceException;

        @POST("/header/param/prim/datetime")
        void paramDatetimeAsync(@Header("scenario") String scenario, @Header("value") Date value, ServiceResponseCallback cb);

        @POST("/header/response/prim/datetime")
        Response responseDatetime(@Header("scenario") String scenario) throws ServiceException;

        @POST("/header/response/prim/datetime")
        void responseDatetimeAsync(@Header("scenario") String scenario, ServiceResponseCallback cb);

        @POST("/header/param/prim/byte")
        Response paramByte(@Header("scenario") String scenario, @Header("value") byte[] value) throws ServiceException;

        @POST("/header/param/prim/byte")
        void paramByteAsync(@Header("scenario") String scenario, @Header("value") byte[] value, ServiceResponseCallback cb);

        @POST("/header/response/prim/byte")
        Response responseByte(@Header("scenario") String scenario) throws ServiceException;

        @POST("/header/response/prim/byte")
        void responseByteAsync(@Header("scenario") String scenario, ServiceResponseCallback cb);

        @POST("/header/param/prim/enum")
        Response paramEnum(@Header("scenario") String scenario, @Header("value") GreyscaleColors value) throws ServiceException;

        @POST("/header/param/prim/enum")
        void paramEnumAsync(@Header("scenario") String scenario, @Header("value") GreyscaleColors value, ServiceResponseCallback cb);

        @POST("/header/response/prim/enum")
        Response responseEnum(@Header("scenario") String scenario) throws ServiceException;

        @POST("/header/response/prim/enum")
        void responseEnumAsync(@Header("scenario") String scenario, ServiceResponseCallback cb);

        @POST("/header/custom/x-ms-client-request-id/9C4D50EE-2D56-4CD3-8152-34347DC9F2B0")
        Response customRequestId() throws ServiceException;

        @POST("/header/custom/x-ms-client-request-id/9C4D50EE-2D56-4CD3-8152-34347DC9F2B0")
        void customRequestIdAsync(ServiceResponseCallback cb);

    }
    void paramExistingKey(String userAgent) throws ServiceException;

    void paramExistingKeyAsync(String userAgent, final ServiceCallback<Void> serviceCallback);

    void responseExistingKey() throws ServiceException;

    void responseExistingKeyAsync(final ServiceCallback<Void> serviceCallback);

    void paramProtectedKey(String contentType) throws ServiceException;

    void paramProtectedKeyAsync(String contentType, final ServiceCallback<Void> serviceCallback);

    void responseProtectedKey() throws ServiceException;

    void responseProtectedKeyAsync(final ServiceCallback<Void> serviceCallback);

    void paramInteger(String scenario, int value) throws ServiceException;

    void paramIntegerAsync(String scenario, int value, final ServiceCallback<Void> serviceCallback);

    void responseInteger(String scenario) throws ServiceException;

    void responseIntegerAsync(String scenario, final ServiceCallback<Void> serviceCallback);

    void paramLong(String scenario, long value) throws ServiceException;

    void paramLongAsync(String scenario, long value, final ServiceCallback<Void> serviceCallback);

    void responseLong(String scenario) throws ServiceException;

    void responseLongAsync(String scenario, final ServiceCallback<Void> serviceCallback);

    void paramFloat(String scenario, double value) throws ServiceException;

    void paramFloatAsync(String scenario, double value, final ServiceCallback<Void> serviceCallback);

    void responseFloat(String scenario) throws ServiceException;

    void responseFloatAsync(String scenario, final ServiceCallback<Void> serviceCallback);

    void paramDouble(String scenario, double value) throws ServiceException;

    void paramDoubleAsync(String scenario, double value, final ServiceCallback<Void> serviceCallback);

    void responseDouble(String scenario) throws ServiceException;

    void responseDoubleAsync(String scenario, final ServiceCallback<Void> serviceCallback);

    void paramBool(String scenario, boolean value) throws ServiceException;

    void paramBoolAsync(String scenario, boolean value, final ServiceCallback<Void> serviceCallback);

    void responseBool(String scenario) throws ServiceException;

    void responseBoolAsync(String scenario, final ServiceCallback<Void> serviceCallback);

    void paramString(String scenario, String value) throws ServiceException;

    void paramStringAsync(String scenario, String value, final ServiceCallback<Void> serviceCallback);

    void responseString(String scenario) throws ServiceException;

    void responseStringAsync(String scenario, final ServiceCallback<Void> serviceCallback);

    void paramDate(String scenario, Date value) throws ServiceException;

    void paramDateAsync(String scenario, Date value, final ServiceCallback<Void> serviceCallback);

    void responseDate(String scenario) throws ServiceException;

    void responseDateAsync(String scenario, final ServiceCallback<Void> serviceCallback);

    void paramDatetime(String scenario, Date value) throws ServiceException;

    void paramDatetimeAsync(String scenario, Date value, final ServiceCallback<Void> serviceCallback);

    void responseDatetime(String scenario) throws ServiceException;

    void responseDatetimeAsync(String scenario, final ServiceCallback<Void> serviceCallback);

    void paramByte(String scenario, byte[] value) throws ServiceException;

    void paramByteAsync(String scenario, byte[] value, final ServiceCallback<Void> serviceCallback);

    void responseByte(String scenario) throws ServiceException;

    void responseByteAsync(String scenario, final ServiceCallback<Void> serviceCallback);

    void paramEnum(String scenario, GreyscaleColors value) throws ServiceException;

    void paramEnumAsync(String scenario, GreyscaleColors value, final ServiceCallback<Void> serviceCallback);

    void responseEnum(String scenario) throws ServiceException;

    void responseEnumAsync(String scenario, final ServiceCallback<Void> serviceCallback);

    void customRequestId() throws ServiceException;

    void customRequestIdAsync(final ServiceCallback<Void> serviceCallback);

}
