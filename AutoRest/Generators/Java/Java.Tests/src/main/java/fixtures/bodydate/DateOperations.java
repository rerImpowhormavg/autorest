// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.


package fixtures.bodydate;

import com.google.gson.reflect.TypeToken;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceException;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseBuilder;
import com.microsoft.rest.ServiceResponseCallback;
import retrofit.client.Response;
import retrofit.RestAdapter;
import retrofit.RetrofitError;
import java.util.Date;
import retrofit.http.GET;
import retrofit.http.PUT;
import retrofit.http.Body;

public class DateOperations {
    private DateService service;

    public DateOperations(RestAdapter restAdapter) {
        service = restAdapter.create(DateService.class);
    }

    public interface DateService {
        @GET("/date/null")
        Response getNull() throws ServiceException;

        @GET("/date/null")
        void getNullAsync(ServiceResponseCallback cb);

        @GET("/date/invaliddate")
        Response getInvalidDate() throws ServiceException;

        @GET("/date/invaliddate")
        void getInvalidDateAsync(ServiceResponseCallback cb);

        @GET("/date/overflowdate")
        Response getOverflowDate() throws ServiceException;

        @GET("/date/overflowdate")
        void getOverflowDateAsync(ServiceResponseCallback cb);

        @GET("/date/underflowdate")
        Response getUnderflowDate() throws ServiceException;

        @GET("/date/underflowdate")
        void getUnderflowDateAsync(ServiceResponseCallback cb);

        @PUT("/date/max")
        Response putMaxDate(@Body Date dateBody) throws ServiceException;

        @PUT("/date/max")
        void putMaxDateAsync(@Body Date dateBody, ServiceResponseCallback cb);

        @GET("/date/max")
        Response getMaxDate() throws ServiceException;

        @GET("/date/max")
        void getMaxDateAsync(ServiceResponseCallback cb);

        @PUT("/date/min")
        Response putMinDate(@Body Date dateBody) throws ServiceException;

        @PUT("/date/min")
        void putMinDateAsync(@Body Date dateBody, ServiceResponseCallback cb);

        @GET("/date/min")
        Response getMinDate() throws ServiceException;

        @GET("/date/min")
        void getMinDateAsync(ServiceResponseCallback cb);

    }
    public Date getNull() throws ServiceException {
        try {
            return getNullDelegate(service.getNull(), null).getBody();
        } catch (RetrofitError error) {
            return getNullDelegate(error.getResponse(), error).getBody();
        }
    }

    public void getNullAsync(final ServiceCallback<Date> serviceCallback) {
        service.getNullAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getNullDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Date> getNullDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Date>()
                .register(200, new TypeToken<Date>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public Date getInvalidDate() throws ServiceException {
        try {
            return getInvalidDateDelegate(service.getInvalidDate(), null).getBody();
        } catch (RetrofitError error) {
            return getInvalidDateDelegate(error.getResponse(), error).getBody();
        }
    }

    public void getInvalidDateAsync(final ServiceCallback<Date> serviceCallback) {
        service.getInvalidDateAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getInvalidDateDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Date> getInvalidDateDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Date>()
                .register(200, new TypeToken<Date>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public Date getOverflowDate() throws ServiceException {
        try {
            return getOverflowDateDelegate(service.getOverflowDate(), null).getBody();
        } catch (RetrofitError error) {
            return getOverflowDateDelegate(error.getResponse(), error).getBody();
        }
    }

    public void getOverflowDateAsync(final ServiceCallback<Date> serviceCallback) {
        service.getOverflowDateAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getOverflowDateDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Date> getOverflowDateDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Date>()
                .register(200, new TypeToken<Date>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public Date getUnderflowDate() throws ServiceException {
        try {
            return getUnderflowDateDelegate(service.getUnderflowDate(), null).getBody();
        } catch (RetrofitError error) {
            return getUnderflowDateDelegate(error.getResponse(), error).getBody();
        }
    }

    public void getUnderflowDateAsync(final ServiceCallback<Date> serviceCallback) {
        service.getUnderflowDateAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getUnderflowDateDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Date> getUnderflowDateDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Date>()
                .register(200, new TypeToken<Date>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public void putMaxDate(Date dateBody) throws ServiceException {
        try {
            putMaxDateDelegate(service.putMaxDate(dateBody), null).getBody();
        } catch (RetrofitError error) {
            putMaxDateDelegate(error.getResponse(), error).getBody();
        }
    }

    public void putMaxDateAsync(Date dateBody, final ServiceCallback<Void> serviceCallback) {
        service.putMaxDateAsync(dateBody, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(putMaxDateDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> putMaxDateDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public Date getMaxDate() throws ServiceException {
        try {
            return getMaxDateDelegate(service.getMaxDate(), null).getBody();
        } catch (RetrofitError error) {
            return getMaxDateDelegate(error.getResponse(), error).getBody();
        }
    }

    public void getMaxDateAsync(final ServiceCallback<Date> serviceCallback) {
        service.getMaxDateAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getMaxDateDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Date> getMaxDateDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Date>()
                .register(200, new TypeToken<Date>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public void putMinDate(Date dateBody) throws ServiceException {
        try {
            putMinDateDelegate(service.putMinDate(dateBody), null).getBody();
        } catch (RetrofitError error) {
            putMinDateDelegate(error.getResponse(), error).getBody();
        }
    }

    public void putMinDateAsync(Date dateBody, final ServiceCallback<Void> serviceCallback) {
        service.putMinDateAsync(dateBody, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(putMinDateDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> putMinDateDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public Date getMinDate() throws ServiceException {
        try {
            return getMinDateDelegate(service.getMinDate(), null).getBody();
        } catch (RetrofitError error) {
            return getMinDateDelegate(error.getResponse(), error).getBody();
        }
    }

    public void getMinDateAsync(final ServiceCallback<Date> serviceCallback) {
        service.getMinDateAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getMinDateDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Date> getMinDateDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Date>()
                .register(200, new TypeToken<Date>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

}
