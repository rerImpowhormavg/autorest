/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator 0.15.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.bodydate;

import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceResponse;
import com.squareup.okhttp.ResponseBody;
import fixtures.bodydate.models.ErrorException;
import java.io.IOException;
import org.joda.time.LocalDate;
import retrofit.Call;
import retrofit.http.Body;
import retrofit.http.GET;
import retrofit.http.Headers;
import retrofit.http.PUT;

/**
 * An instance of this class provides access to all the operations defined
 * in DateOperations.
 */
public interface DateOperations {
    /**
     * The interface defining all the services for DateOperations to be
     * used by Retrofit to perform actually REST calls.
     */
    interface DateService {
        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("date/null")
        Call<ResponseBody> getNull();

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("date/invaliddate")
        Call<ResponseBody> getInvalidDate();

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("date/overflowdate")
        Call<ResponseBody> getOverflowDate();

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("date/underflowdate")
        Call<ResponseBody> getUnderflowDate();

        @Headers("Content-Type: application/json; charset=utf-8")
        @PUT("date/max")
        Call<ResponseBody> putMaxDate(@Body LocalDate dateBody);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("date/max")
        Call<ResponseBody> getMaxDate();

        @Headers("Content-Type: application/json; charset=utf-8")
        @PUT("date/min")
        Call<ResponseBody> putMinDate(@Body LocalDate dateBody);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("date/min")
        Call<ResponseBody> getMinDate();

    }
    /**
     * Get null date value.
     *
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the LocalDate object wrapped in {@link ServiceResponse} if successful.
     */
    ServiceResponse<LocalDate> getNull() throws ErrorException, IOException;

    /**
     * Get null date value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getNullAsync(final ServiceCallback<LocalDate> serviceCallback);

    /**
     * Get invalid date value.
     *
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the LocalDate object wrapped in {@link ServiceResponse} if successful.
     */
    ServiceResponse<LocalDate> getInvalidDate() throws ErrorException, IOException;

    /**
     * Get invalid date value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getInvalidDateAsync(final ServiceCallback<LocalDate> serviceCallback);

    /**
     * Get overflow date value.
     *
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the LocalDate object wrapped in {@link ServiceResponse} if successful.
     */
    ServiceResponse<LocalDate> getOverflowDate() throws ErrorException, IOException;

    /**
     * Get overflow date value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getOverflowDateAsync(final ServiceCallback<LocalDate> serviceCallback);

    /**
     * Get underflow date value.
     *
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the LocalDate object wrapped in {@link ServiceResponse} if successful.
     */
    ServiceResponse<LocalDate> getUnderflowDate() throws ErrorException, IOException;

    /**
     * Get underflow date value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getUnderflowDateAsync(final ServiceCallback<LocalDate> serviceCallback);

    /**
     * Put max date value 9999-12-31.
     *
     * @param dateBody the LocalDate value
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the {@link ServiceResponse} object if successful.
     */
    ServiceResponse<Void> putMaxDate(LocalDate dateBody) throws ErrorException, IOException, IllegalArgumentException;

    /**
     * Put max date value 9999-12-31.
     *
     * @param dateBody the LocalDate value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> putMaxDateAsync(LocalDate dateBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Get max date value 9999-12-31.
     *
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the LocalDate object wrapped in {@link ServiceResponse} if successful.
     */
    ServiceResponse<LocalDate> getMaxDate() throws ErrorException, IOException;

    /**
     * Get max date value 9999-12-31.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getMaxDateAsync(final ServiceCallback<LocalDate> serviceCallback);

    /**
     * Put min date value 0000-01-01.
     *
     * @param dateBody the LocalDate value
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the {@link ServiceResponse} object if successful.
     */
    ServiceResponse<Void> putMinDate(LocalDate dateBody) throws ErrorException, IOException, IllegalArgumentException;

    /**
     * Put min date value 0000-01-01.
     *
     * @param dateBody the LocalDate value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> putMinDateAsync(LocalDate dateBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Get min date value 0000-01-01.
     *
     * @throws ErrorException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @return the LocalDate object wrapped in {@link ServiceResponse} if successful.
     */
    ServiceResponse<LocalDate> getMinDate() throws ErrorException, IOException;

    /**
     * Get min date value 0000-01-01.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link Call} object
     */
    Call<ResponseBody> getMinDateAsync(final ServiceCallback<LocalDate> serviceCallback);

}
