// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.


package fixtures.bodyboolean;

import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceException;
import com.microsoft.rest.ServiceResponseCallback;
import retrofit.client.Response;
import retrofit.http.GET;
import retrofit.http.PUT;
import retrofit.http.Body;

public interface Bool {
    interface BoolService {
        @GET("/bool/true")
        Response getTrue() throws ServiceException;

        @GET("/bool/true")
        void getTrueAsync(ServiceResponseCallback cb);

        @PUT("/bool/true")
        Response putTrue(@Body boolean boolBody) throws ServiceException;

        @PUT("/bool/true")
        void putTrueAsync(@Body boolean boolBody, ServiceResponseCallback cb);

        @GET("/bool/false")
        Response getFalse() throws ServiceException;

        @GET("/bool/false")
        void getFalseAsync(ServiceResponseCallback cb);

        @PUT("/bool/false")
        Response putFalse(@Body boolean boolBody) throws ServiceException;

        @PUT("/bool/false")
        void putFalseAsync(@Body boolean boolBody, ServiceResponseCallback cb);

        @GET("/bool/null")
        Response getNull() throws ServiceException;

        @GET("/bool/null")
        void getNullAsync(ServiceResponseCallback cb);

        @GET("/bool/invalid")
        Response getInvalid() throws ServiceException;

        @GET("/bool/invalid")
        void getInvalidAsync(ServiceResponseCallback cb);

    }
    boolean getTrue() throws ServiceException;

    void getTrueAsync(final ServiceCallback<Boolean> serviceCallback);

    void putTrue(boolean boolBody) throws ServiceException;

    void putTrueAsync(boolean boolBody, final ServiceCallback<Void> serviceCallback);

    boolean getFalse() throws ServiceException;

    void getFalseAsync(final ServiceCallback<Boolean> serviceCallback);

    void putFalse(boolean boolBody) throws ServiceException;

    void putFalseAsync(boolean boolBody, final ServiceCallback<Void> serviceCallback);

    boolean getNull() throws ServiceException;

    void getNullAsync(final ServiceCallback<Boolean> serviceCallback);

    boolean getInvalid() throws ServiceException;

    void getInvalidAsync(final ServiceCallback<Boolean> serviceCallback);

}
