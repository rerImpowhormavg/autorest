/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.bodyboolean;

import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceException;
import retrofit.Call;
import com.squareup.okhttp.ResponseBody;
import retrofit.http.GET;
import retrofit.http.PUT;
import retrofit.http.Body;

/**
 * An instance of this class provides access to all the operations defined
 * in Bool.
 */
public interface Bool {
    /**
     * The interface defining all the services for Bool to be
     * used by Retrofit to perform actually REST calls.
     */
    interface BoolService {
        @GET("/bool/true")
        Call<ResponseBody> getTrue();

        @PUT("/bool/true")
        Call<ResponseBody> putTrue(@Body boolean boolBody);

        @GET("/bool/false")
        Call<ResponseBody> getFalse();

        @PUT("/bool/false")
        Call<ResponseBody> putFalse(@Body boolean boolBody);

        @GET("/bool/null")
        Call<ResponseBody> getNull();

        @GET("/bool/invalid")
        Call<ResponseBody> getInvalid();

    }
    /**
     *
     * @return the Boolean object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Boolean getTrue() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> getTrueAsync(final ServiceCallback<Boolean> serviceCallback);

    /**
     *
     * @param boolBody the boolean value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void putTrue(boolean boolBody) throws ServiceException;

    /**
     *
     * @param boolBody the boolean value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> putTrueAsync(boolean boolBody, final ServiceCallback<Void> serviceCallback);

    /**
     *
     * @return the Boolean object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Boolean getFalse() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> getFalseAsync(final ServiceCallback<Boolean> serviceCallback);

    /**
     *
     * @param boolBody the boolean value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void putFalse(boolean boolBody) throws ServiceException;

    /**
     *
     * @param boolBody the boolean value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> putFalseAsync(boolean boolBody, final ServiceCallback<Void> serviceCallback);

    /**
     *
     * @return the Boolean object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Boolean getNull() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> getNullAsync(final ServiceCallback<Boolean> serviceCallback);

    /**
     *
     * @return the Boolean object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    Boolean getInvalid() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> getInvalidAsync(final ServiceCallback<Boolean> serviceCallback);

}
