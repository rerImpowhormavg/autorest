// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.


package fixtures.bodycomplex;

import com.microsoft.rest.ServiceException;
import retrofit.Callback;
import retrofit.client.Response;

public interface primitive {
    @GET("/complex/primitive/integer")
    IntWrapper getInt();

    @GET("/complex/primitive/integer")
    void getIntAsync(Callback<Response> cb);

    @PUT("/complex/primitive/integer")
     putInt(IntWrapper complexBody);

    @PUT("/complex/primitive/integer")
    void putIntAsync(IntWrapper complexBody, Callback<Response> cb);

    @GET("/complex/primitive/long")
    LongWrapper getLong();

    @GET("/complex/primitive/long")
    void getLongAsync(Callback<Response> cb);

    @PUT("/complex/primitive/long")
     putLong(LongWrapper complexBody);

    @PUT("/complex/primitive/long")
    void putLongAsync(LongWrapper complexBody, Callback<Response> cb);

    @GET("/complex/primitive/float")
    FloatWrapper getFloat();

    @GET("/complex/primitive/float")
    void getFloatAsync(Callback<Response> cb);

    @PUT("/complex/primitive/float")
     putFloat(FloatWrapper complexBody);

    @PUT("/complex/primitive/float")
    void putFloatAsync(FloatWrapper complexBody, Callback<Response> cb);

    @GET("/complex/primitive/double")
    DoubleWrapper getDouble();

    @GET("/complex/primitive/double")
    void getDoubleAsync(Callback<Response> cb);

    @PUT("/complex/primitive/double")
     putDouble(DoubleWrapper complexBody);

    @PUT("/complex/primitive/double")
    void putDoubleAsync(DoubleWrapper complexBody, Callback<Response> cb);

    @GET("/complex/primitive/bool")
    BooleanWrapper getBool();

    @GET("/complex/primitive/bool")
    void getBoolAsync(Callback<Response> cb);

    @PUT("/complex/primitive/bool")
     putBool(BooleanWrapper complexBody);

    @PUT("/complex/primitive/bool")
    void putBoolAsync(BooleanWrapper complexBody, Callback<Response> cb);

    @GET("/complex/primitive/string")
    StringWrapper getString();

    @GET("/complex/primitive/string")
    void getStringAsync(Callback<Response> cb);

    @PUT("/complex/primitive/string")
     putString(StringWrapper complexBody);

    @PUT("/complex/primitive/string")
    void putStringAsync(StringWrapper complexBody, Callback<Response> cb);

    @GET("/complex/primitive/date")
    DateWrapper getDate();

    @GET("/complex/primitive/date")
    void getDateAsync(Callback<Response> cb);

    @PUT("/complex/primitive/date")
     putDate(DateWrapper complexBody);

    @PUT("/complex/primitive/date")
    void putDateAsync(DateWrapper complexBody, Callback<Response> cb);

    @GET("/complex/primitive/datetime")
    DatetimeWrapper getDateTime();

    @GET("/complex/primitive/datetime")
    void getDateTimeAsync(Callback<Response> cb);

    @PUT("/complex/primitive/datetime")
     putDateTime(DatetimeWrapper complexBody);

    @PUT("/complex/primitive/datetime")
    void putDateTimeAsync(DatetimeWrapper complexBody, Callback<Response> cb);

    @GET("/complex/primitive/byte")
    ByteWrapper getByte();

    @GET("/complex/primitive/byte")
    void getByteAsync(Callback<Response> cb);

    @PUT("/complex/primitive/byte")
     putByte(ByteWrapper complexBody);

    @PUT("/complex/primitive/byte")
    void putByteAsync(ByteWrapper complexBody, Callback<Response> cb);

}
