// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.


package fixtures.bodycomplex;

import com.google.gson.reflect.TypeToken;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceException;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseBuilder;
import com.microsoft.rest.ServiceResponseCallback;
import retrofit.client.Response;
import retrofit.RestAdapter;
import retrofit.RetrofitError;
import fixtures.bodycomplex.models.IntWrapper;
import fixtures.bodycomplex.models.LongWrapper;
import fixtures.bodycomplex.models.FloatWrapper;
import fixtures.bodycomplex.models.DoubleWrapper;
import fixtures.bodycomplex.models.BooleanWrapper;
import fixtures.bodycomplex.models.StringWrapper;
import fixtures.bodycomplex.models.DateWrapper;
import fixtures.bodycomplex.models.DatetimeWrapper;
import fixtures.bodycomplex.models.ByteWrapper;
import retrofit.http.GET;
import retrofit.http.PUT;
import retrofit.http.Body;

public class Primitive {
    private PrimitiveService service;

    public Primitive(RestAdapter restAdapter) {
        service = restAdapter.create(PrimitiveService.class);
    }

    public interface PrimitiveService {
        @GET("/complex/primitive/integer")
        Response getInt() throws ServiceException;

        @GET("/complex/primitive/integer")
        void getIntAsync(ServiceResponseCallback cb);

        @PUT("/complex/primitive/integer")
        Response putInt(@Body IntWrapper complexBody) throws ServiceException;

        @PUT("/complex/primitive/integer")
        void putIntAsync(@Body IntWrapper complexBody, ServiceResponseCallback cb);

        @GET("/complex/primitive/long")
        Response getLong() throws ServiceException;

        @GET("/complex/primitive/long")
        void getLongAsync(ServiceResponseCallback cb);

        @PUT("/complex/primitive/long")
        Response putLong(@Body LongWrapper complexBody) throws ServiceException;

        @PUT("/complex/primitive/long")
        void putLongAsync(@Body LongWrapper complexBody, ServiceResponseCallback cb);

        @GET("/complex/primitive/float")
        Response getFloat() throws ServiceException;

        @GET("/complex/primitive/float")
        void getFloatAsync(ServiceResponseCallback cb);

        @PUT("/complex/primitive/float")
        Response putFloat(@Body FloatWrapper complexBody) throws ServiceException;

        @PUT("/complex/primitive/float")
        void putFloatAsync(@Body FloatWrapper complexBody, ServiceResponseCallback cb);

        @GET("/complex/primitive/double")
        Response getDouble() throws ServiceException;

        @GET("/complex/primitive/double")
        void getDoubleAsync(ServiceResponseCallback cb);

        @PUT("/complex/primitive/double")
        Response putDouble(@Body DoubleWrapper complexBody) throws ServiceException;

        @PUT("/complex/primitive/double")
        void putDoubleAsync(@Body DoubleWrapper complexBody, ServiceResponseCallback cb);

        @GET("/complex/primitive/bool")
        Response getBool() throws ServiceException;

        @GET("/complex/primitive/bool")
        void getBoolAsync(ServiceResponseCallback cb);

        @PUT("/complex/primitive/bool")
        Response putBool(@Body BooleanWrapper complexBody) throws ServiceException;

        @PUT("/complex/primitive/bool")
        void putBoolAsync(@Body BooleanWrapper complexBody, ServiceResponseCallback cb);

        @GET("/complex/primitive/string")
        Response getString() throws ServiceException;

        @GET("/complex/primitive/string")
        void getStringAsync(ServiceResponseCallback cb);

        @PUT("/complex/primitive/string")
        Response putString(@Body StringWrapper complexBody) throws ServiceException;

        @PUT("/complex/primitive/string")
        void putStringAsync(@Body StringWrapper complexBody, ServiceResponseCallback cb);

        @GET("/complex/primitive/date")
        Response getDate() throws ServiceException;

        @GET("/complex/primitive/date")
        void getDateAsync(ServiceResponseCallback cb);

        @PUT("/complex/primitive/date")
        Response putDate(@Body DateWrapper complexBody) throws ServiceException;

        @PUT("/complex/primitive/date")
        void putDateAsync(@Body DateWrapper complexBody, ServiceResponseCallback cb);

        @GET("/complex/primitive/datetime")
        Response getDateTime() throws ServiceException;

        @GET("/complex/primitive/datetime")
        void getDateTimeAsync(ServiceResponseCallback cb);

        @PUT("/complex/primitive/datetime")
        Response putDateTime(@Body DatetimeWrapper complexBody) throws ServiceException;

        @PUT("/complex/primitive/datetime")
        void putDateTimeAsync(@Body DatetimeWrapper complexBody, ServiceResponseCallback cb);

        @GET("/complex/primitive/byte")
        Response getByte() throws ServiceException;

        @GET("/complex/primitive/byte")
        void getByteAsync(ServiceResponseCallback cb);

        @PUT("/complex/primitive/byte")
        Response putByte(@Body ByteWrapper complexBody) throws ServiceException;

        @PUT("/complex/primitive/byte")
        void putByteAsync(@Body ByteWrapper complexBody, ServiceResponseCallback cb);

    }
    public IntWrapper getInt() throws ServiceException {
        try {
            return getIntDelegate(service.getInt(), null).getBody();
        } catch (RetrofitError error) {
            return getIntDelegate(error.getResponse(), error).getBody();
        }
    }

    public void getIntAsync(final ServiceCallback<IntWrapper> serviceCallback) {
        service.getIntAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getIntDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<IntWrapper> getIntDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<IntWrapper>()
                .register(200, new TypeToken<IntWrapper>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public void putInt(IntWrapper complexBody) throws ServiceException {
        try {
            putIntDelegate(service.putInt(complexBody), null).getBody();
        } catch (RetrofitError error) {
            putIntDelegate(error.getResponse(), error).getBody();
        }
    }

    public void putIntAsync(IntWrapper complexBody, final ServiceCallback<Void> serviceCallback) {
        service.putIntAsync(complexBody, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(putIntDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> putIntDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public LongWrapper getLong() throws ServiceException {
        try {
            return getLongDelegate(service.getLong(), null).getBody();
        } catch (RetrofitError error) {
            return getLongDelegate(error.getResponse(), error).getBody();
        }
    }

    public void getLongAsync(final ServiceCallback<LongWrapper> serviceCallback) {
        service.getLongAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getLongDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<LongWrapper> getLongDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<LongWrapper>()
                .register(200, new TypeToken<LongWrapper>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public void putLong(LongWrapper complexBody) throws ServiceException {
        try {
            putLongDelegate(service.putLong(complexBody), null).getBody();
        } catch (RetrofitError error) {
            putLongDelegate(error.getResponse(), error).getBody();
        }
    }

    public void putLongAsync(LongWrapper complexBody, final ServiceCallback<Void> serviceCallback) {
        service.putLongAsync(complexBody, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(putLongDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> putLongDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public FloatWrapper getFloat() throws ServiceException {
        try {
            return getFloatDelegate(service.getFloat(), null).getBody();
        } catch (RetrofitError error) {
            return getFloatDelegate(error.getResponse(), error).getBody();
        }
    }

    public void getFloatAsync(final ServiceCallback<FloatWrapper> serviceCallback) {
        service.getFloatAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getFloatDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<FloatWrapper> getFloatDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<FloatWrapper>()
                .register(200, new TypeToken<FloatWrapper>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public void putFloat(FloatWrapper complexBody) throws ServiceException {
        try {
            putFloatDelegate(service.putFloat(complexBody), null).getBody();
        } catch (RetrofitError error) {
            putFloatDelegate(error.getResponse(), error).getBody();
        }
    }

    public void putFloatAsync(FloatWrapper complexBody, final ServiceCallback<Void> serviceCallback) {
        service.putFloatAsync(complexBody, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(putFloatDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> putFloatDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public DoubleWrapper getDouble() throws ServiceException {
        try {
            return getDoubleDelegate(service.getDouble(), null).getBody();
        } catch (RetrofitError error) {
            return getDoubleDelegate(error.getResponse(), error).getBody();
        }
    }

    public void getDoubleAsync(final ServiceCallback<DoubleWrapper> serviceCallback) {
        service.getDoubleAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getDoubleDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<DoubleWrapper> getDoubleDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<DoubleWrapper>()
                .register(200, new TypeToken<DoubleWrapper>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public void putDouble(DoubleWrapper complexBody) throws ServiceException {
        try {
            putDoubleDelegate(service.putDouble(complexBody), null).getBody();
        } catch (RetrofitError error) {
            putDoubleDelegate(error.getResponse(), error).getBody();
        }
    }

    public void putDoubleAsync(DoubleWrapper complexBody, final ServiceCallback<Void> serviceCallback) {
        service.putDoubleAsync(complexBody, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(putDoubleDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> putDoubleDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public BooleanWrapper getBool() throws ServiceException {
        try {
            return getBoolDelegate(service.getBool(), null).getBody();
        } catch (RetrofitError error) {
            return getBoolDelegate(error.getResponse(), error).getBody();
        }
    }

    public void getBoolAsync(final ServiceCallback<BooleanWrapper> serviceCallback) {
        service.getBoolAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getBoolDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<BooleanWrapper> getBoolDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<BooleanWrapper>()
                .register(200, new TypeToken<BooleanWrapper>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public void putBool(BooleanWrapper complexBody) throws ServiceException {
        try {
            putBoolDelegate(service.putBool(complexBody), null).getBody();
        } catch (RetrofitError error) {
            putBoolDelegate(error.getResponse(), error).getBody();
        }
    }

    public void putBoolAsync(BooleanWrapper complexBody, final ServiceCallback<Void> serviceCallback) {
        service.putBoolAsync(complexBody, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(putBoolDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> putBoolDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public StringWrapper getString() throws ServiceException {
        try {
            return getStringDelegate(service.getString(), null).getBody();
        } catch (RetrofitError error) {
            return getStringDelegate(error.getResponse(), error).getBody();
        }
    }

    public void getStringAsync(final ServiceCallback<StringWrapper> serviceCallback) {
        service.getStringAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getStringDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<StringWrapper> getStringDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<StringWrapper>()
                .register(200, new TypeToken<StringWrapper>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public void putString(StringWrapper complexBody) throws ServiceException {
        try {
            putStringDelegate(service.putString(complexBody), null).getBody();
        } catch (RetrofitError error) {
            putStringDelegate(error.getResponse(), error).getBody();
        }
    }

    public void putStringAsync(StringWrapper complexBody, final ServiceCallback<Void> serviceCallback) {
        service.putStringAsync(complexBody, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(putStringDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> putStringDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public DateWrapper getDate() throws ServiceException {
        try {
            return getDateDelegate(service.getDate(), null).getBody();
        } catch (RetrofitError error) {
            return getDateDelegate(error.getResponse(), error).getBody();
        }
    }

    public void getDateAsync(final ServiceCallback<DateWrapper> serviceCallback) {
        service.getDateAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getDateDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<DateWrapper> getDateDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<DateWrapper>()
                .register(200, new TypeToken<DateWrapper>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public void putDate(DateWrapper complexBody) throws ServiceException {
        try {
            putDateDelegate(service.putDate(complexBody), null).getBody();
        } catch (RetrofitError error) {
            putDateDelegate(error.getResponse(), error).getBody();
        }
    }

    public void putDateAsync(DateWrapper complexBody, final ServiceCallback<Void> serviceCallback) {
        service.putDateAsync(complexBody, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(putDateDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> putDateDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public DatetimeWrapper getDateTime() throws ServiceException {
        try {
            return getDateTimeDelegate(service.getDateTime(), null).getBody();
        } catch (RetrofitError error) {
            return getDateTimeDelegate(error.getResponse(), error).getBody();
        }
    }

    public void getDateTimeAsync(final ServiceCallback<DatetimeWrapper> serviceCallback) {
        service.getDateTimeAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getDateTimeDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<DatetimeWrapper> getDateTimeDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<DatetimeWrapper>()
                .register(200, new TypeToken<DatetimeWrapper>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public void putDateTime(DatetimeWrapper complexBody) throws ServiceException {
        try {
            putDateTimeDelegate(service.putDateTime(complexBody), null).getBody();
        } catch (RetrofitError error) {
            putDateTimeDelegate(error.getResponse(), error).getBody();
        }
    }

    public void putDateTimeAsync(DatetimeWrapper complexBody, final ServiceCallback<Void> serviceCallback) {
        service.putDateTimeAsync(complexBody, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(putDateTimeDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> putDateTimeDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public ByteWrapper getByte() throws ServiceException {
        try {
            return getByteDelegate(service.getByte(), null).getBody();
        } catch (RetrofitError error) {
            return getByteDelegate(error.getResponse(), error).getBody();
        }
    }

    public void getByteAsync(final ServiceCallback<ByteWrapper> serviceCallback) {
        service.getByteAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getByteDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<ByteWrapper> getByteDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<ByteWrapper>()
                .register(200, new TypeToken<ByteWrapper>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    public void putByte(ByteWrapper complexBody) throws ServiceException {
        try {
            putByteDelegate(service.putByte(complexBody), null).getBody();
        } catch (RetrofitError error) {
            putByteDelegate(error.getResponse(), error).getBody();
        }
    }

    public void putByteAsync(ByteWrapper complexBody, final ServiceCallback<Void> serviceCallback) {
        service.putByteAsync(complexBody, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(putByteDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> putByteDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

}
