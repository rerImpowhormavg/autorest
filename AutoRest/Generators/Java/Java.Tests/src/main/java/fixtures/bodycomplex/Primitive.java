// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.


package fixtures.bodycomplex;

import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceException;
import com.microsoft.rest.ServiceResponseCallback;
import retrofit.client.Response;
import fixtures.bodycomplex.models.IntWrapper;
import fixtures.bodycomplex.models.LongWrapper;
import fixtures.bodycomplex.models.FloatWrapper;
import fixtures.bodycomplex.models.DoubleWrapper;
import fixtures.bodycomplex.models.BooleanWrapper;
import fixtures.bodycomplex.models.StringWrapper;
import fixtures.bodycomplex.models.DateWrapper;
import fixtures.bodycomplex.models.DatetimeWrapper;
import fixtures.bodycomplex.models.ByteWrapper;
import retrofit.http.GET;
import retrofit.http.PUT;
import retrofit.http.Body;

/**
 * An instance of this class provides access to all the operations defined
 * in Primitive.
 */
public interface Primitive {
    /**
     * The interface defining all the services for Primitive to be
     * used by Retrofit to perform actually REST calls.
     */
    interface PrimitiveService {
        @GET("/complex/primitive/integer")
        Response getInt() throws ServiceException;

        @GET("/complex/primitive/integer")
        void getIntAsync(ServiceResponseCallback cb);

        @PUT("/complex/primitive/integer")
        Response putInt(@Body IntWrapper complexBody) throws ServiceException;

        @PUT("/complex/primitive/integer")
        void putIntAsync(@Body IntWrapper complexBody, ServiceResponseCallback cb);

        @GET("/complex/primitive/long")
        Response getLong() throws ServiceException;

        @GET("/complex/primitive/long")
        void getLongAsync(ServiceResponseCallback cb);

        @PUT("/complex/primitive/long")
        Response putLong(@Body LongWrapper complexBody) throws ServiceException;

        @PUT("/complex/primitive/long")
        void putLongAsync(@Body LongWrapper complexBody, ServiceResponseCallback cb);

        @GET("/complex/primitive/float")
        Response getFloat() throws ServiceException;

        @GET("/complex/primitive/float")
        void getFloatAsync(ServiceResponseCallback cb);

        @PUT("/complex/primitive/float")
        Response putFloat(@Body FloatWrapper complexBody) throws ServiceException;

        @PUT("/complex/primitive/float")
        void putFloatAsync(@Body FloatWrapper complexBody, ServiceResponseCallback cb);

        @GET("/complex/primitive/double")
        Response getDouble() throws ServiceException;

        @GET("/complex/primitive/double")
        void getDoubleAsync(ServiceResponseCallback cb);

        @PUT("/complex/primitive/double")
        Response putDouble(@Body DoubleWrapper complexBody) throws ServiceException;

        @PUT("/complex/primitive/double")
        void putDoubleAsync(@Body DoubleWrapper complexBody, ServiceResponseCallback cb);

        @GET("/complex/primitive/bool")
        Response getBool() throws ServiceException;

        @GET("/complex/primitive/bool")
        void getBoolAsync(ServiceResponseCallback cb);

        @PUT("/complex/primitive/bool")
        Response putBool(@Body BooleanWrapper complexBody) throws ServiceException;

        @PUT("/complex/primitive/bool")
        void putBoolAsync(@Body BooleanWrapper complexBody, ServiceResponseCallback cb);

        @GET("/complex/primitive/string")
        Response getString() throws ServiceException;

        @GET("/complex/primitive/string")
        void getStringAsync(ServiceResponseCallback cb);

        @PUT("/complex/primitive/string")
        Response putString(@Body StringWrapper complexBody) throws ServiceException;

        @PUT("/complex/primitive/string")
        void putStringAsync(@Body StringWrapper complexBody, ServiceResponseCallback cb);

        @GET("/complex/primitive/date")
        Response getDate() throws ServiceException;

        @GET("/complex/primitive/date")
        void getDateAsync(ServiceResponseCallback cb);

        @PUT("/complex/primitive/date")
        Response putDate(@Body DateWrapper complexBody) throws ServiceException;

        @PUT("/complex/primitive/date")
        void putDateAsync(@Body DateWrapper complexBody, ServiceResponseCallback cb);

        @GET("/complex/primitive/datetime")
        Response getDateTime() throws ServiceException;

        @GET("/complex/primitive/datetime")
        void getDateTimeAsync(ServiceResponseCallback cb);

        @PUT("/complex/primitive/datetime")
        Response putDateTime(@Body DatetimeWrapper complexBody) throws ServiceException;

        @PUT("/complex/primitive/datetime")
        void putDateTimeAsync(@Body DatetimeWrapper complexBody, ServiceResponseCallback cb);

        @GET("/complex/primitive/byte")
        Response getByte() throws ServiceException;

        @GET("/complex/primitive/byte")
        void getByteAsync(ServiceResponseCallback cb);

        @PUT("/complex/primitive/byte")
        Response putByte(@Body ByteWrapper complexBody) throws ServiceException;

        @PUT("/complex/primitive/byte")
        void putByteAsync(@Body ByteWrapper complexBody, ServiceResponseCallback cb);

    }
    /**
     * Get complex types with integer properties
     *
     * @return the IntWrapper object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    IntWrapper getInt() throws ServiceException;

    /**
     * Get complex types with integer properties
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getIntAsync(final ServiceCallback<IntWrapper> serviceCallback);

    /**
     * Put complex types with integer properties
     *
     * @param complexBody Please put -1 and 2
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void putInt(IntWrapper complexBody) throws ServiceException;

    /**
     * Put complex types with integer properties
     *
     * @param complexBody Please put -1 and 2
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void putIntAsync(IntWrapper complexBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Get complex types with long properties
     *
     * @return the LongWrapper object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    LongWrapper getLong() throws ServiceException;

    /**
     * Get complex types with long properties
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getLongAsync(final ServiceCallback<LongWrapper> serviceCallback);

    /**
     * Put complex types with long properties
     *
     * @param complexBody Please put 1099511627775 and -999511627788
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void putLong(LongWrapper complexBody) throws ServiceException;

    /**
     * Put complex types with long properties
     *
     * @param complexBody Please put 1099511627775 and -999511627788
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void putLongAsync(LongWrapper complexBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Get complex types with float properties
     *
     * @return the FloatWrapper object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    FloatWrapper getFloat() throws ServiceException;

    /**
     * Get complex types with float properties
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getFloatAsync(final ServiceCallback<FloatWrapper> serviceCallback);

    /**
     * Put complex types with float properties
     *
     * @param complexBody Please put 1.05 and -0.003
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void putFloat(FloatWrapper complexBody) throws ServiceException;

    /**
     * Put complex types with float properties
     *
     * @param complexBody Please put 1.05 and -0.003
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void putFloatAsync(FloatWrapper complexBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Get complex types with double properties
     *
     * @return the DoubleWrapper object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    DoubleWrapper getDouble() throws ServiceException;

    /**
     * Get complex types with double properties
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getDoubleAsync(final ServiceCallback<DoubleWrapper> serviceCallback);

    /**
     * Put complex types with double properties
     *
     * @param complexBody Please put 3e-100 and -0.000000000000000000000000000000000000000000000000000000005
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void putDouble(DoubleWrapper complexBody) throws ServiceException;

    /**
     * Put complex types with double properties
     *
     * @param complexBody Please put 3e-100 and -0.000000000000000000000000000000000000000000000000000000005
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void putDoubleAsync(DoubleWrapper complexBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Get complex types with bool properties
     *
     * @return the BooleanWrapper object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    BooleanWrapper getBool() throws ServiceException;

    /**
     * Get complex types with bool properties
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getBoolAsync(final ServiceCallback<BooleanWrapper> serviceCallback);

    /**
     * Put complex types with bool properties
     *
     * @param complexBody Please put true and false
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void putBool(BooleanWrapper complexBody) throws ServiceException;

    /**
     * Put complex types with bool properties
     *
     * @param complexBody Please put true and false
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void putBoolAsync(BooleanWrapper complexBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Get complex types with string properties
     *
     * @return the StringWrapper object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    StringWrapper getString() throws ServiceException;

    /**
     * Get complex types with string properties
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getStringAsync(final ServiceCallback<StringWrapper> serviceCallback);

    /**
     * Put complex types with string properties
     *
     * @param complexBody Please put 'goodrequest', '', and null
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void putString(StringWrapper complexBody) throws ServiceException;

    /**
     * Put complex types with string properties
     *
     * @param complexBody Please put 'goodrequest', '', and null
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void putStringAsync(StringWrapper complexBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Get complex types with date properties
     *
     * @return the DateWrapper object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    DateWrapper getDate() throws ServiceException;

    /**
     * Get complex types with date properties
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getDateAsync(final ServiceCallback<DateWrapper> serviceCallback);

    /**
     * Put complex types with date properties
     *
     * @param complexBody Please put '0001-01-01' and '2016-02-29'
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void putDate(DateWrapper complexBody) throws ServiceException;

    /**
     * Put complex types with date properties
     *
     * @param complexBody Please put '0001-01-01' and '2016-02-29'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void putDateAsync(DateWrapper complexBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Get complex types with datetime properties
     *
     * @return the DatetimeWrapper object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    DatetimeWrapper getDateTime() throws ServiceException;

    /**
     * Get complex types with datetime properties
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getDateTimeAsync(final ServiceCallback<DatetimeWrapper> serviceCallback);

    /**
     * Put complex types with datetime properties
     *
     * @param complexBody Please put '0001-01-01T12:00:00-04:00' and '2015-05-18T11:38:00-08:00'
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void putDateTime(DatetimeWrapper complexBody) throws ServiceException;

    /**
     * Put complex types with datetime properties
     *
     * @param complexBody Please put '0001-01-01T12:00:00-04:00' and '2015-05-18T11:38:00-08:00'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void putDateTimeAsync(DatetimeWrapper complexBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Get complex types with byte properties
     *
     * @return the ByteWrapper object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    ByteWrapper getByte() throws ServiceException;

    /**
     * Get complex types with byte properties
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void getByteAsync(final ServiceCallback<ByteWrapper> serviceCallback);

    /**
     * Put complex types with byte properties
     *
     * @param complexBody Please put non-ascii byte string hex(FF FE FD FC 00 FA F9 F8 F7 F6)
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void putByte(ByteWrapper complexBody) throws ServiceException;

    /**
     * Put complex types with byte properties
     *
     * @param complexBody Please put non-ascii byte string hex(FF FE FD FC 00 FA F9 F8 F7 F6)
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    void putByteAsync(ByteWrapper complexBody, final ServiceCallback<Void> serviceCallback);

}
