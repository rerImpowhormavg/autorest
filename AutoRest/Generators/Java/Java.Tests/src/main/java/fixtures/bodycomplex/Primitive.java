// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.


package fixtures.bodycomplex;

import com.microsoft.rest.ServiceException;
import retrofit.Callback;
import retrofit.client.Response;
import fixtures.bodycomplex.models.IntWrapper;
import fixtures.bodycomplex.models.LongWrapper;
import fixtures.bodycomplex.models.FloatWrapper;
import fixtures.bodycomplex.models.DoubleWrapper;
import fixtures.bodycomplex.models.BooleanWrapper;
import fixtures.bodycomplex.models.StringWrapper;
import fixtures.bodycomplex.models.DateWrapper;
import fixtures.bodycomplex.models.DatetimeWrapper;
import fixtures.bodycomplex.models.ByteWrapper;
import retrofit.http.GET;
import retrofit.http.PUT;
import retrofit.http.Body;

public interface Primitive {
    @GET("/complex/primitive/integer")
    IntWrapper getInt() throws ServiceException;

    @GET("/complex/primitive/integer")
    void getIntAsync(Callback<IntWrapper> cb);

    @PUT("/complex/primitive/integer")
    Response putInt(@Body IntWrapper complexBody) throws ServiceException;

    @PUT("/complex/primitive/integer")
    void putIntAsync(@Body IntWrapper complexBody, Callback<Response> cb);

    @GET("/complex/primitive/long")
    LongWrapper getLong() throws ServiceException;

    @GET("/complex/primitive/long")
    void getLongAsync(Callback<LongWrapper> cb);

    @PUT("/complex/primitive/long")
    Response putLong(@Body LongWrapper complexBody) throws ServiceException;

    @PUT("/complex/primitive/long")
    void putLongAsync(@Body LongWrapper complexBody, Callback<Response> cb);

    @GET("/complex/primitive/float")
    FloatWrapper getFloat() throws ServiceException;

    @GET("/complex/primitive/float")
    void getFloatAsync(Callback<FloatWrapper> cb);

    @PUT("/complex/primitive/float")
    Response putFloat(@Body FloatWrapper complexBody) throws ServiceException;

    @PUT("/complex/primitive/float")
    void putFloatAsync(@Body FloatWrapper complexBody, Callback<Response> cb);

    @GET("/complex/primitive/double")
    DoubleWrapper getDouble() throws ServiceException;

    @GET("/complex/primitive/double")
    void getDoubleAsync(Callback<DoubleWrapper> cb);

    @PUT("/complex/primitive/double")
    Response putDouble(@Body DoubleWrapper complexBody) throws ServiceException;

    @PUT("/complex/primitive/double")
    void putDoubleAsync(@Body DoubleWrapper complexBody, Callback<Response> cb);

    @GET("/complex/primitive/bool")
    BooleanWrapper getBool() throws ServiceException;

    @GET("/complex/primitive/bool")
    void getBoolAsync(Callback<BooleanWrapper> cb);

    @PUT("/complex/primitive/bool")
    Response putBool(@Body BooleanWrapper complexBody) throws ServiceException;

    @PUT("/complex/primitive/bool")
    void putBoolAsync(@Body BooleanWrapper complexBody, Callback<Response> cb);

    @GET("/complex/primitive/string")
    StringWrapper getString() throws ServiceException;

    @GET("/complex/primitive/string")
    void getStringAsync(Callback<StringWrapper> cb);

    @PUT("/complex/primitive/string")
    Response putString(@Body StringWrapper complexBody) throws ServiceException;

    @PUT("/complex/primitive/string")
    void putStringAsync(@Body StringWrapper complexBody, Callback<Response> cb);

    @GET("/complex/primitive/date")
    DateWrapper getDate() throws ServiceException;

    @GET("/complex/primitive/date")
    void getDateAsync(Callback<DateWrapper> cb);

    @PUT("/complex/primitive/date")
    Response putDate(@Body DateWrapper complexBody) throws ServiceException;

    @PUT("/complex/primitive/date")
    void putDateAsync(@Body DateWrapper complexBody, Callback<Response> cb);

    @GET("/complex/primitive/datetime")
    DatetimeWrapper getDateTime() throws ServiceException;

    @GET("/complex/primitive/datetime")
    void getDateTimeAsync(Callback<DatetimeWrapper> cb);

    @PUT("/complex/primitive/datetime")
    Response putDateTime(@Body DatetimeWrapper complexBody) throws ServiceException;

    @PUT("/complex/primitive/datetime")
    void putDateTimeAsync(@Body DatetimeWrapper complexBody, Callback<Response> cb);

    @GET("/complex/primitive/byte")
    ByteWrapper getByte() throws ServiceException;

    @GET("/complex/primitive/byte")
    void getByteAsync(Callback<ByteWrapper> cb);

    @PUT("/complex/primitive/byte")
    Response putByte(@Body ByteWrapper complexBody) throws ServiceException;

    @PUT("/complex/primitive/byte")
    void putByteAsync(@Body ByteWrapper complexBody, Callback<Response> cb);

}
