// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.


package fixtures.bodycomplex;

import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceException;
import com.microsoft.rest.ServiceResponseCallback;
import retrofit.client.Response;
import fixtures.bodycomplex.models.IntWrapper;
import fixtures.bodycomplex.models.LongWrapper;
import fixtures.bodycomplex.models.FloatWrapper;
import fixtures.bodycomplex.models.DoubleWrapper;
import fixtures.bodycomplex.models.BooleanWrapper;
import fixtures.bodycomplex.models.StringWrapper;
import fixtures.bodycomplex.models.DateWrapper;
import fixtures.bodycomplex.models.DatetimeWrapper;
import fixtures.bodycomplex.models.ByteWrapper;
import retrofit.http.GET;
import retrofit.http.PUT;
import retrofit.http.Body;

public interface Primitive {
    interface PrimitiveService {
        @GET("/complex/primitive/integer")
        Response getInt() throws ServiceException;

        @GET("/complex/primitive/integer")
        void getIntAsync(ServiceResponseCallback cb);

        @PUT("/complex/primitive/integer")
        Response putInt(@Body IntWrapper complexBody) throws ServiceException;

        @PUT("/complex/primitive/integer")
        void putIntAsync(@Body IntWrapper complexBody, ServiceResponseCallback cb);

        @GET("/complex/primitive/long")
        Response getLong() throws ServiceException;

        @GET("/complex/primitive/long")
        void getLongAsync(ServiceResponseCallback cb);

        @PUT("/complex/primitive/long")
        Response putLong(@Body LongWrapper complexBody) throws ServiceException;

        @PUT("/complex/primitive/long")
        void putLongAsync(@Body LongWrapper complexBody, ServiceResponseCallback cb);

        @GET("/complex/primitive/float")
        Response getFloat() throws ServiceException;

        @GET("/complex/primitive/float")
        void getFloatAsync(ServiceResponseCallback cb);

        @PUT("/complex/primitive/float")
        Response putFloat(@Body FloatWrapper complexBody) throws ServiceException;

        @PUT("/complex/primitive/float")
        void putFloatAsync(@Body FloatWrapper complexBody, ServiceResponseCallback cb);

        @GET("/complex/primitive/double")
        Response getDouble() throws ServiceException;

        @GET("/complex/primitive/double")
        void getDoubleAsync(ServiceResponseCallback cb);

        @PUT("/complex/primitive/double")
        Response putDouble(@Body DoubleWrapper complexBody) throws ServiceException;

        @PUT("/complex/primitive/double")
        void putDoubleAsync(@Body DoubleWrapper complexBody, ServiceResponseCallback cb);

        @GET("/complex/primitive/bool")
        Response getBool() throws ServiceException;

        @GET("/complex/primitive/bool")
        void getBoolAsync(ServiceResponseCallback cb);

        @PUT("/complex/primitive/bool")
        Response putBool(@Body BooleanWrapper complexBody) throws ServiceException;

        @PUT("/complex/primitive/bool")
        void putBoolAsync(@Body BooleanWrapper complexBody, ServiceResponseCallback cb);

        @GET("/complex/primitive/string")
        Response getString() throws ServiceException;

        @GET("/complex/primitive/string")
        void getStringAsync(ServiceResponseCallback cb);

        @PUT("/complex/primitive/string")
        Response putString(@Body StringWrapper complexBody) throws ServiceException;

        @PUT("/complex/primitive/string")
        void putStringAsync(@Body StringWrapper complexBody, ServiceResponseCallback cb);

        @GET("/complex/primitive/date")
        Response getDate() throws ServiceException;

        @GET("/complex/primitive/date")
        void getDateAsync(ServiceResponseCallback cb);

        @PUT("/complex/primitive/date")
        Response putDate(@Body DateWrapper complexBody) throws ServiceException;

        @PUT("/complex/primitive/date")
        void putDateAsync(@Body DateWrapper complexBody, ServiceResponseCallback cb);

        @GET("/complex/primitive/datetime")
        Response getDateTime() throws ServiceException;

        @GET("/complex/primitive/datetime")
        void getDateTimeAsync(ServiceResponseCallback cb);

        @PUT("/complex/primitive/datetime")
        Response putDateTime(@Body DatetimeWrapper complexBody) throws ServiceException;

        @PUT("/complex/primitive/datetime")
        void putDateTimeAsync(@Body DatetimeWrapper complexBody, ServiceResponseCallback cb);

        @GET("/complex/primitive/byte")
        Response getByte() throws ServiceException;

        @GET("/complex/primitive/byte")
        void getByteAsync(ServiceResponseCallback cb);

        @PUT("/complex/primitive/byte")
        Response putByte(@Body ByteWrapper complexBody) throws ServiceException;

        @PUT("/complex/primitive/byte")
        void putByteAsync(@Body ByteWrapper complexBody, ServiceResponseCallback cb);

    }
    IntWrapper getInt() throws ServiceException;

    void getIntAsync(final ServiceCallback<IntWrapper> serviceCallback);

    void putInt(IntWrapper complexBody) throws ServiceException;

    void putIntAsync(IntWrapper complexBody, final ServiceCallback<Void> serviceCallback);

    LongWrapper getLong() throws ServiceException;

    void getLongAsync(final ServiceCallback<LongWrapper> serviceCallback);

    void putLong(LongWrapper complexBody) throws ServiceException;

    void putLongAsync(LongWrapper complexBody, final ServiceCallback<Void> serviceCallback);

    FloatWrapper getFloat() throws ServiceException;

    void getFloatAsync(final ServiceCallback<FloatWrapper> serviceCallback);

    void putFloat(FloatWrapper complexBody) throws ServiceException;

    void putFloatAsync(FloatWrapper complexBody, final ServiceCallback<Void> serviceCallback);

    DoubleWrapper getDouble() throws ServiceException;

    void getDoubleAsync(final ServiceCallback<DoubleWrapper> serviceCallback);

    void putDouble(DoubleWrapper complexBody) throws ServiceException;

    void putDoubleAsync(DoubleWrapper complexBody, final ServiceCallback<Void> serviceCallback);

    BooleanWrapper getBool() throws ServiceException;

    void getBoolAsync(final ServiceCallback<BooleanWrapper> serviceCallback);

    void putBool(BooleanWrapper complexBody) throws ServiceException;

    void putBoolAsync(BooleanWrapper complexBody, final ServiceCallback<Void> serviceCallback);

    StringWrapper getString() throws ServiceException;

    void getStringAsync(final ServiceCallback<StringWrapper> serviceCallback);

    void putString(StringWrapper complexBody) throws ServiceException;

    void putStringAsync(StringWrapper complexBody, final ServiceCallback<Void> serviceCallback);

    DateWrapper getDate() throws ServiceException;

    void getDateAsync(final ServiceCallback<DateWrapper> serviceCallback);

    void putDate(DateWrapper complexBody) throws ServiceException;

    void putDateAsync(DateWrapper complexBody, final ServiceCallback<Void> serviceCallback);

    DatetimeWrapper getDateTime() throws ServiceException;

    void getDateTimeAsync(final ServiceCallback<DatetimeWrapper> serviceCallback);

    void putDateTime(DatetimeWrapper complexBody) throws ServiceException;

    void putDateTimeAsync(DatetimeWrapper complexBody, final ServiceCallback<Void> serviceCallback);

    ByteWrapper getByte() throws ServiceException;

    void getByteAsync(final ServiceCallback<ByteWrapper> serviceCallback);

    void putByte(ByteWrapper complexBody) throws ServiceException;

    void putByteAsync(ByteWrapper complexBody, final ServiceCallback<Void> serviceCallback);

}
