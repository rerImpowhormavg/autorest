/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.header;

import com.google.gson.reflect.TypeToken;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceException;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseBuilder;
import com.microsoft.rest.ServiceResponseCallback;
import retrofit.RestAdapter;
import retrofit.RetrofitError;
import retrofit.client.Response;
import org.joda.time.LocalDate;
import org.joda.time.DateTime;
import fixtures.header.models.GreyscaleColors;
import fixtures.header.models.Error;
import com.microsoft.rest.serializer.JacksonHelper;
import org.apache.commons.codec.binary.Base64;

public class HeaderOperationsImpl implements HeaderOperations {
    private HeaderService service;
    AutoRestSwaggerBATHeaderService client;

    public HeaderOperationsImpl(RestAdapter restAdapter, AutoRestSwaggerBATHeaderService client) {
        this.service = restAdapter.create(HeaderService.class);
        this.client = client;
    }

    /**
     * Send a post request with header value "User-Agent": "overwrite"
     *
     * @param userAgent Send a post request with header value "User-Agent": "overwrite"
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void paramExistingKey(String userAgent) throws ServiceException {
        if (userAgent == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter userAgent is required and cannot be null."));
        }
        try {
            ServiceResponse<Void> response = paramExistingKeyDelegate(service.paramExistingKey(userAgent), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = paramExistingKeyDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Send a post request with header value "User-Agent": "overwrite"
     *
     * @param userAgent Send a post request with header value "User-Agent": "overwrite"
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void paramExistingKeyAsync(String userAgent, final ServiceCallback<Void> serviceCallback) {
        if (userAgent == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter userAgent is required and cannot be null.")));
        }
        service.paramExistingKeyAsync(userAgent, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(paramExistingKeyDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> paramExistingKeyDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get a response with header value "User-Agent": "overwrite"
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void responseExistingKey() throws ServiceException {
        try {
            ServiceResponse<Void> response = responseExistingKeyDelegate(service.responseExistingKey(), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = responseExistingKeyDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Get a response with header value "User-Agent": "overwrite"
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void responseExistingKeyAsync(final ServiceCallback<Void> serviceCallback) {
        service.responseExistingKeyAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(responseExistingKeyDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> responseExistingKeyDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Send a post request with header value "Content-Type": "text/html"
     *
     * @param contentType Send a post request with header value "Content-Type": "text/html"
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void paramProtectedKey(String contentType) throws ServiceException {
        if (contentType == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter contentType is required and cannot be null."));
        }
        try {
            ServiceResponse<Void> response = paramProtectedKeyDelegate(service.paramProtectedKey(contentType), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = paramProtectedKeyDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Send a post request with header value "Content-Type": "text/html"
     *
     * @param contentType Send a post request with header value "Content-Type": "text/html"
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void paramProtectedKeyAsync(String contentType, final ServiceCallback<Void> serviceCallback) {
        if (contentType == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter contentType is required and cannot be null.")));
        }
        service.paramProtectedKeyAsync(contentType, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(paramProtectedKeyDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> paramProtectedKeyDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get a response with header value "Content-Type": "text/html"
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void responseProtectedKey() throws ServiceException {
        try {
            ServiceResponse<Void> response = responseProtectedKeyDelegate(service.responseProtectedKey(), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = responseProtectedKeyDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Get a response with header value "Content-Type": "text/html"
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void responseProtectedKeyAsync(final ServiceCallback<Void> serviceCallback) {
        service.responseProtectedKeyAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(responseProtectedKeyDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> responseProtectedKeyDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Send a post request with header values "scenario": "positive", "value": 1 or "scenario": "negative", "value": -2 
     *
     * @param scenario Send a post request with header values "scenario": "positive" or "negative"
     * @param value Send a post request with header values 1 or -2
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void paramInteger(String scenario, int value) throws ServiceException {
        if (scenario == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter scenario is required and cannot be null."));
        }
        try {
            ServiceResponse<Void> response = paramIntegerDelegate(service.paramInteger(scenario, value), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = paramIntegerDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Send a post request with header values "scenario": "positive", "value": 1 or "scenario": "negative", "value": -2 
     *
     * @param scenario Send a post request with header values "scenario": "positive" or "negative"
     * @param value Send a post request with header values 1 or -2
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void paramIntegerAsync(String scenario, int value, final ServiceCallback<Void> serviceCallback) {
        if (scenario == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter scenario is required and cannot be null.")));
        }
        service.paramIntegerAsync(scenario, value, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(paramIntegerDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> paramIntegerDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get a response with header value "value": 1 or -2
     *
     * @param scenario Send a post request with header values "scenario": "positive" or "negative"
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void responseInteger(String scenario) throws ServiceException {
        if (scenario == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter scenario is required and cannot be null."));
        }
        try {
            ServiceResponse<Void> response = responseIntegerDelegate(service.responseInteger(scenario), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = responseIntegerDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Get a response with header value "value": 1 or -2
     *
     * @param scenario Send a post request with header values "scenario": "positive" or "negative"
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void responseIntegerAsync(String scenario, final ServiceCallback<Void> serviceCallback) {
        if (scenario == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter scenario is required and cannot be null.")));
        }
        service.responseIntegerAsync(scenario, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(responseIntegerDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> responseIntegerDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Send a post request with header values "scenario": "positive", "value": 105 or "scenario": "negative", "value": -2 
     *
     * @param scenario Send a post request with header values "scenario": "positive" or "negative"
     * @param value Send a post request with header values 105 or -2
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void paramLong(String scenario, long value) throws ServiceException {
        if (scenario == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter scenario is required and cannot be null."));
        }
        try {
            ServiceResponse<Void> response = paramLongDelegate(service.paramLong(scenario, value), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = paramLongDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Send a post request with header values "scenario": "positive", "value": 105 or "scenario": "negative", "value": -2 
     *
     * @param scenario Send a post request with header values "scenario": "positive" or "negative"
     * @param value Send a post request with header values 105 or -2
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void paramLongAsync(String scenario, long value, final ServiceCallback<Void> serviceCallback) {
        if (scenario == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter scenario is required and cannot be null.")));
        }
        service.paramLongAsync(scenario, value, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(paramLongDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> paramLongDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get a response with header value "value": 105 or -2
     *
     * @param scenario Send a post request with header values "scenario": "positive" or "negative"
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void responseLong(String scenario) throws ServiceException {
        if (scenario == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter scenario is required and cannot be null."));
        }
        try {
            ServiceResponse<Void> response = responseLongDelegate(service.responseLong(scenario), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = responseLongDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Get a response with header value "value": 105 or -2
     *
     * @param scenario Send a post request with header values "scenario": "positive" or "negative"
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void responseLongAsync(String scenario, final ServiceCallback<Void> serviceCallback) {
        if (scenario == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter scenario is required and cannot be null.")));
        }
        service.responseLongAsync(scenario, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(responseLongDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> responseLongDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Send a post request with header values "scenario": "positive", "value": 0.07 or "scenario": "negative", "value": -3.0
     *
     * @param scenario Send a post request with header values "scenario": "positive" or "negative"
     * @param value Send a post request with header values 0.07 or -3.0
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void paramFloat(String scenario, double value) throws ServiceException {
        if (scenario == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter scenario is required and cannot be null."));
        }
        try {
            ServiceResponse<Void> response = paramFloatDelegate(service.paramFloat(scenario, value), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = paramFloatDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Send a post request with header values "scenario": "positive", "value": 0.07 or "scenario": "negative", "value": -3.0
     *
     * @param scenario Send a post request with header values "scenario": "positive" or "negative"
     * @param value Send a post request with header values 0.07 or -3.0
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void paramFloatAsync(String scenario, double value, final ServiceCallback<Void> serviceCallback) {
        if (scenario == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter scenario is required and cannot be null.")));
        }
        service.paramFloatAsync(scenario, value, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(paramFloatDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> paramFloatDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get a response with header value "value": 0.07 or -3.0
     *
     * @param scenario Send a post request with header values "scenario": "positive" or "negative"
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void responseFloat(String scenario) throws ServiceException {
        if (scenario == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter scenario is required and cannot be null."));
        }
        try {
            ServiceResponse<Void> response = responseFloatDelegate(service.responseFloat(scenario), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = responseFloatDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Get a response with header value "value": 0.07 or -3.0
     *
     * @param scenario Send a post request with header values "scenario": "positive" or "negative"
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void responseFloatAsync(String scenario, final ServiceCallback<Void> serviceCallback) {
        if (scenario == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter scenario is required and cannot be null.")));
        }
        service.responseFloatAsync(scenario, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(responseFloatDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> responseFloatDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Send a post request with header values "scenario": "positive", "value": 7e120 or "scenario": "negative", "value": -3.0
     *
     * @param scenario Send a post request with header values "scenario": "positive" or "negative"
     * @param value Send a post request with header values 7e120 or -3.0
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void paramDouble(String scenario, double value) throws ServiceException {
        if (scenario == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter scenario is required and cannot be null."));
        }
        try {
            ServiceResponse<Void> response = paramDoubleDelegate(service.paramDouble(scenario, value), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = paramDoubleDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Send a post request with header values "scenario": "positive", "value": 7e120 or "scenario": "negative", "value": -3.0
     *
     * @param scenario Send a post request with header values "scenario": "positive" or "negative"
     * @param value Send a post request with header values 7e120 or -3.0
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void paramDoubleAsync(String scenario, double value, final ServiceCallback<Void> serviceCallback) {
        if (scenario == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter scenario is required and cannot be null.")));
        }
        service.paramDoubleAsync(scenario, value, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(paramDoubleDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> paramDoubleDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get a response with header value "value": 7e120 or -3.0
     *
     * @param scenario Send a post request with header values "scenario": "positive" or "negative"
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void responseDouble(String scenario) throws ServiceException {
        if (scenario == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter scenario is required and cannot be null."));
        }
        try {
            ServiceResponse<Void> response = responseDoubleDelegate(service.responseDouble(scenario), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = responseDoubleDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Get a response with header value "value": 7e120 or -3.0
     *
     * @param scenario Send a post request with header values "scenario": "positive" or "negative"
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void responseDoubleAsync(String scenario, final ServiceCallback<Void> serviceCallback) {
        if (scenario == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter scenario is required and cannot be null.")));
        }
        service.responseDoubleAsync(scenario, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(responseDoubleDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> responseDoubleDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Send a post request with header values "scenario": "true", "value": true or "scenario": "false", "value": false
     *
     * @param scenario Send a post request with header values "scenario": "true" or "false"
     * @param value Send a post request with header values true or false
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void paramBool(String scenario, boolean value) throws ServiceException {
        if (scenario == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter scenario is required and cannot be null."));
        }
        try {
            ServiceResponse<Void> response = paramBoolDelegate(service.paramBool(scenario, value), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = paramBoolDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Send a post request with header values "scenario": "true", "value": true or "scenario": "false", "value": false
     *
     * @param scenario Send a post request with header values "scenario": "true" or "false"
     * @param value Send a post request with header values true or false
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void paramBoolAsync(String scenario, boolean value, final ServiceCallback<Void> serviceCallback) {
        if (scenario == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter scenario is required and cannot be null.")));
        }
        service.paramBoolAsync(scenario, value, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(paramBoolDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> paramBoolDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get a response with header value "value": true or false
     *
     * @param scenario Send a post request with header values "scenario": "true" or "false"
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void responseBool(String scenario) throws ServiceException {
        if (scenario == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter scenario is required and cannot be null."));
        }
        try {
            ServiceResponse<Void> response = responseBoolDelegate(service.responseBool(scenario), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = responseBoolDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Get a response with header value "value": true or false
     *
     * @param scenario Send a post request with header values "scenario": "true" or "false"
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void responseBoolAsync(String scenario, final ServiceCallback<Void> serviceCallback) {
        if (scenario == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter scenario is required and cannot be null.")));
        }
        service.responseBoolAsync(scenario, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(responseBoolDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> responseBoolDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Send a post request with header values "scenario": "valid", "value": "The quick brown fox jumps over the lazy dog" or "scenario": "null", "value": null or "scenario": "empty", "value": ""
     *
     * @param scenario Send a post request with header values "scenario": "valid" or "null" or "empty"
     * @param value Send a post request with header values "The quick brown fox jumps over the lazy dog" or null or ""
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void paramString(String scenario, String value) throws ServiceException {
        if (scenario == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter scenario is required and cannot be null."));
        }
        try {
            ServiceResponse<Void> response = paramStringDelegate(service.paramString(scenario, value), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = paramStringDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Send a post request with header values "scenario": "valid", "value": "The quick brown fox jumps over the lazy dog" or "scenario": "null", "value": null or "scenario": "empty", "value": ""
     *
     * @param scenario Send a post request with header values "scenario": "valid" or "null" or "empty"
     * @param value Send a post request with header values "The quick brown fox jumps over the lazy dog" or null or ""
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void paramStringAsync(String scenario, String value, final ServiceCallback<Void> serviceCallback) {
        if (scenario == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter scenario is required and cannot be null.")));
        }
        service.paramStringAsync(scenario, value, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(paramStringDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> paramStringDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get a response with header values "The quick brown fox jumps over the lazy dog" or null or ""
     *
     * @param scenario Send a post request with header values "scenario": "valid" or "null" or "empty"
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void responseString(String scenario) throws ServiceException {
        if (scenario == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter scenario is required and cannot be null."));
        }
        try {
            ServiceResponse<Void> response = responseStringDelegate(service.responseString(scenario), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = responseStringDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Get a response with header values "The quick brown fox jumps over the lazy dog" or null or ""
     *
     * @param scenario Send a post request with header values "scenario": "valid" or "null" or "empty"
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void responseStringAsync(String scenario, final ServiceCallback<Void> serviceCallback) {
        if (scenario == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter scenario is required and cannot be null.")));
        }
        service.responseStringAsync(scenario, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(responseStringDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> responseStringDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Send a post request with header values "scenario": "valid", "value": "2010-01-01" or "scenario": "min", "value": "0001-01-01"
     *
     * @param scenario Send a post request with header values "scenario": "valid" or "min"
     * @param value Send a post request with header values "2010-01-01" or "0001-01-01"
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void paramDate(String scenario, LocalDate value) throws ServiceException {
        if (scenario == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter scenario is required and cannot be null."));
        }
        if (value == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter value is required and cannot be null."));
        }
        try {
            ServiceResponse<Void> response = paramDateDelegate(service.paramDate(scenario, JacksonHelper.serializeRaw(value)), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = paramDateDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Send a post request with header values "scenario": "valid", "value": "2010-01-01" or "scenario": "min", "value": "0001-01-01"
     *
     * @param scenario Send a post request with header values "scenario": "valid" or "min"
     * @param value Send a post request with header values "2010-01-01" or "0001-01-01"
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void paramDateAsync(String scenario, LocalDate value, final ServiceCallback<Void> serviceCallback) {
        if (scenario == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter scenario is required and cannot be null.")));
        }
        if (value == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter value is required and cannot be null.")));
        }
        service.paramDateAsync(scenario, JacksonHelper.serializeRaw(value), new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(paramDateDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> paramDateDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get a response with header values "2010-01-01" or "0001-01-01"
     *
     * @param scenario Send a post request with header values "scenario": "valid" or "min"
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void responseDate(String scenario) throws ServiceException {
        if (scenario == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter scenario is required and cannot be null."));
        }
        try {
            ServiceResponse<Void> response = responseDateDelegate(service.responseDate(scenario), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = responseDateDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Get a response with header values "2010-01-01" or "0001-01-01"
     *
     * @param scenario Send a post request with header values "scenario": "valid" or "min"
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void responseDateAsync(String scenario, final ServiceCallback<Void> serviceCallback) {
        if (scenario == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter scenario is required and cannot be null.")));
        }
        service.responseDateAsync(scenario, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(responseDateDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> responseDateDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Send a post request with header values "scenario": "valid", "value": "2010-01-01T12:34:56Z" or "scenario": "min", "value": "0001-01-01T00:00:00Z"
     *
     * @param scenario Send a post request with header values "scenario": "valid" or "min"
     * @param value Send a post request with header values "2010-01-01T12:34:56Z" or "0001-01-01T00:00:00Z"
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void paramDatetime(String scenario, DateTime value) throws ServiceException {
        if (scenario == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter scenario is required and cannot be null."));
        }
        if (value == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter value is required and cannot be null."));
        }
        try {
            ServiceResponse<Void> response = paramDatetimeDelegate(service.paramDatetime(scenario, JacksonHelper.serializeRaw(value)), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = paramDatetimeDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Send a post request with header values "scenario": "valid", "value": "2010-01-01T12:34:56Z" or "scenario": "min", "value": "0001-01-01T00:00:00Z"
     *
     * @param scenario Send a post request with header values "scenario": "valid" or "min"
     * @param value Send a post request with header values "2010-01-01T12:34:56Z" or "0001-01-01T00:00:00Z"
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void paramDatetimeAsync(String scenario, DateTime value, final ServiceCallback<Void> serviceCallback) {
        if (scenario == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter scenario is required and cannot be null.")));
        }
        if (value == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter value is required and cannot be null.")));
        }
        service.paramDatetimeAsync(scenario, JacksonHelper.serializeRaw(value), new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(paramDatetimeDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> paramDatetimeDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get a response with header values "2010-01-01T12:34:56Z" or "0001-01-01T00:00:00Z"
     *
     * @param scenario Send a post request with header values "scenario": "valid" or "min"
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void responseDatetime(String scenario) throws ServiceException {
        if (scenario == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter scenario is required and cannot be null."));
        }
        try {
            ServiceResponse<Void> response = responseDatetimeDelegate(service.responseDatetime(scenario), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = responseDatetimeDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Get a response with header values "2010-01-01T12:34:56Z" or "0001-01-01T00:00:00Z"
     *
     * @param scenario Send a post request with header values "scenario": "valid" or "min"
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void responseDatetimeAsync(String scenario, final ServiceCallback<Void> serviceCallback) {
        if (scenario == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter scenario is required and cannot be null.")));
        }
        service.responseDatetimeAsync(scenario, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(responseDatetimeDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> responseDatetimeDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Send a post request with header values "scenario": "valid", "value": "啊齄丂狛狜隣郎隣兀﨩"
     *
     * @param scenario Send a post request with header values "scenario": "valid"
     * @param value Send a post request with header values "啊齄丂狛狜隣郎隣兀﨩"
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void paramByte(String scenario, byte[] value) throws ServiceException {
        if (scenario == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter scenario is required and cannot be null."));
        }
        if (value == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter value is required and cannot be null."));
        }
        try {
            ServiceResponse<Void> response = paramByteDelegate(service.paramByte(scenario, Base64.encodeBase64String(value)), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = paramByteDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Send a post request with header values "scenario": "valid", "value": "啊齄丂狛狜隣郎隣兀﨩"
     *
     * @param scenario Send a post request with header values "scenario": "valid"
     * @param value Send a post request with header values "啊齄丂狛狜隣郎隣兀﨩"
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void paramByteAsync(String scenario, byte[] value, final ServiceCallback<Void> serviceCallback) {
        if (scenario == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter scenario is required and cannot be null.")));
        }
        if (value == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter value is required and cannot be null.")));
        }
        service.paramByteAsync(scenario, Base64.encodeBase64String(value), new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(paramByteDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> paramByteDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get a response with header values "啊齄丂狛狜隣郎隣兀﨩"
     *
     * @param scenario Send a post request with header values "scenario": "valid"
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void responseByte(String scenario) throws ServiceException {
        if (scenario == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter scenario is required and cannot be null."));
        }
        try {
            ServiceResponse<Void> response = responseByteDelegate(service.responseByte(scenario), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = responseByteDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Get a response with header values "啊齄丂狛狜隣郎隣兀﨩"
     *
     * @param scenario Send a post request with header values "scenario": "valid"
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void responseByteAsync(String scenario, final ServiceCallback<Void> serviceCallback) {
        if (scenario == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter scenario is required and cannot be null.")));
        }
        service.responseByteAsync(scenario, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(responseByteDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> responseByteDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Send a post request with header values "scenario": "valid", "value": "GREY" or "scenario": "null", "value": null
     *
     * @param scenario Send a post request with header values "scenario": "valid" or "null" or "empty"
     * @param value Send a post request with header values 'GREY' . Possible values for this parameter include: 'White', 'black', 'GREY'
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void paramEnum(String scenario, GreyscaleColors value) throws ServiceException {
        if (scenario == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter scenario is required and cannot be null."));
        }
        try {
            ServiceResponse<Void> response = paramEnumDelegate(service.paramEnum(scenario, JacksonHelper.serializeRaw(value)), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = paramEnumDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Send a post request with header values "scenario": "valid", "value": "GREY" or "scenario": "null", "value": null
     *
     * @param scenario Send a post request with header values "scenario": "valid" or "null" or "empty"
     * @param value Send a post request with header values 'GREY' . Possible values for this parameter include: 'White', 'black', 'GREY'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void paramEnumAsync(String scenario, GreyscaleColors value, final ServiceCallback<Void> serviceCallback) {
        if (scenario == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter scenario is required and cannot be null.")));
        }
        service.paramEnumAsync(scenario, JacksonHelper.serializeRaw(value), new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(paramEnumDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> paramEnumDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get a response with header values "GREY" or null
     *
     * @param scenario Send a post request with header values "scenario": "valid" or "null" or "empty"
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void responseEnum(String scenario) throws ServiceException {
        if (scenario == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter scenario is required and cannot be null."));
        }
        try {
            ServiceResponse<Void> response = responseEnumDelegate(service.responseEnum(scenario), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = responseEnumDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Get a response with header values "GREY" or null
     *
     * @param scenario Send a post request with header values "scenario": "valid" or "null" or "empty"
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void responseEnumAsync(String scenario, final ServiceCallback<Void> serviceCallback) {
        if (scenario == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter scenario is required and cannot be null.")));
        }
        service.responseEnumAsync(scenario, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(responseEnumDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> responseEnumDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Send x-ms-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 in the header of the request
     *
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void customRequestId() throws ServiceException {
        try {
            ServiceResponse<Void> response = customRequestIdDelegate(service.customRequestId(), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = customRequestIdDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Send x-ms-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 in the header of the request
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void customRequestIdAsync(final ServiceCallback<Void> serviceCallback) {
        service.customRequestIdAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(customRequestIdDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> customRequestIdDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

}
