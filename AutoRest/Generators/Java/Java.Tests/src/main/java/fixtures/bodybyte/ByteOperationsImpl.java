/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.bodybyte;

import com.google.gson.reflect.TypeToken;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceException;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseBuilder;
import com.microsoft.rest.ServiceResponseCallback;
import retrofit.RestAdapter;
import retrofit.RetrofitError;
import retrofit.client.Response;
import org.apache.commons.lang3.ArrayUtils;
import fixtures.bodybyte.models.Error;

public class ByteOperationsImpl implements ByteOperations {
    private ByteService service;
    AutoRestSwaggerBATByteService client;

    public ByteOperationsImpl(RestAdapter restAdapter, AutoRestSwaggerBATByteService client) {
        this.service = restAdapter.create(ByteService.class);
        this.client = client;
    }

    /**
     * Get null byte value
     *
     * @return the Byte[] object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public Byte[] getNull() throws ServiceException {
        try {
            ServiceResponse<Byte[]> response = getNullDelegate(service.getNull(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Byte[]> response = getNullDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Get null byte value
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getNullAsync(final ServiceCallback<Byte[]> serviceCallback) {
        service.getNullAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getNullDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Byte[]> getNullDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Byte[]>()
                .register(200, new TypeToken<Byte[]>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get empty byte value ''
     *
     * @return the Byte[] object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public Byte[] getEmpty() throws ServiceException {
        try {
            ServiceResponse<Byte[]> response = getEmptyDelegate(service.getEmpty(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Byte[]> response = getEmptyDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Get empty byte value ''
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getEmptyAsync(final ServiceCallback<Byte[]> serviceCallback) {
        service.getEmptyAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getEmptyDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Byte[]> getEmptyDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Byte[]>()
                .register(200, new TypeToken<Byte[]>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get non-ascii byte string hex(FF FE FD FC FB FA F9 F8 F7 F6)
     *
     * @return the Byte[] object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public Byte[] getNonAscii() throws ServiceException {
        try {
            ServiceResponse<Byte[]> response = getNonAsciiDelegate(service.getNonAscii(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Byte[]> response = getNonAsciiDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Get non-ascii byte string hex(FF FE FD FC FB FA F9 F8 F7 F6)
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getNonAsciiAsync(final ServiceCallback<Byte[]> serviceCallback) {
        service.getNonAsciiAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getNonAsciiDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Byte[]> getNonAsciiDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Byte[]>()
                .register(200, new TypeToken<Byte[]>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Put non-ascii byte string hex(FF FE FD FC FB FA F9 F8 F7 F6)
     *
     * @param byteBody Base64-encoded non-ascii byte string hex(FF FE FD FC FB FA F9 F8 F7 F6)
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void putNonAscii(byte[] byteBody) throws ServiceException {
        if (byteBody == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter byteBody is required and cannot be null."));
        }
        try {
            ServiceResponse<Void> response = putNonAsciiDelegate(service.putNonAscii(byteBody), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = putNonAsciiDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Put non-ascii byte string hex(FF FE FD FC FB FA F9 F8 F7 F6)
     *
     * @param byteBody Base64-encoded non-ascii byte string hex(FF FE FD FC FB FA F9 F8 F7 F6)
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void putNonAsciiAsync(byte[] byteBody, final ServiceCallback<Void> serviceCallback) {
        if (byteBody == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter byteBody is required and cannot be null.")));
        }
        service.putNonAsciiAsync(byteBody, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(putNonAsciiDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> putNonAsciiDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get invalid byte value ':::SWAGGER::::'
     *
     * @return the Byte[] object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public Byte[] getInvalid() throws ServiceException {
        try {
            ServiceResponse<Byte[]> response = getInvalidDelegate(service.getInvalid(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Byte[]> response = getInvalidDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Get invalid byte value ':::SWAGGER::::'
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getInvalidAsync(final ServiceCallback<Byte[]> serviceCallback) {
        service.getInvalidAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getInvalidDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Byte[]> getInvalidDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Byte[]>()
                .register(200, new TypeToken<Byte[]>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

}
