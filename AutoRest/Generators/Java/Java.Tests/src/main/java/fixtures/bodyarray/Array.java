/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.bodyarray;

import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceException;
import retrofit.Call;
import com.squareup.okhttp.ResponseBody;
import java.util.List;
import org.joda.time.LocalDate;
import org.joda.time.DateTime;
import fixtures.bodyarray.models.Product;
import java.util.Map;
import retrofit.http.GET;
import retrofit.http.PUT;
import retrofit.http.Body;

/**
 * An instance of this class provides access to all the operations defined
 * in Array.
 */
public interface Array {
    /**
     * The interface defining all the services for Array to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ArrayService {
        @GET("/array/null")
        Call<ResponseBody> getNull();

        @GET("/array/invalid")
        Call<ResponseBody> getInvalid();

        @GET("/array/empty")
        Call<ResponseBody> getEmpty();

        @PUT("/array/empty")
        Call<ResponseBody> putEmpty(@Body List<String> arrayBody);

        @GET("/array/prim/boolean/tfft")
        Call<ResponseBody> getBooleanTfft();

        @PUT("/array/prim/boolean/tfft")
        Call<ResponseBody> putBooleanTfft(@Body List<Boolean> arrayBody);

        @GET("/array/prim/boolean/true.null.false")
        Call<ResponseBody> getBooleanInvalidNull();

        @GET("/array/prim/boolean/true.boolean.false")
        Call<ResponseBody> getBooleanInvalidString();

        @GET("/array/prim/integer/1.-1.3.300")
        Call<ResponseBody> getIntegerValid();

        @PUT("/array/prim/integer/1.-1.3.300")
        Call<ResponseBody> putIntegerValid(@Body List<Integer> arrayBody);

        @GET("/array/prim/integer/1.null.zero")
        Call<ResponseBody> getIntInvalidNull();

        @GET("/array/prim/integer/1.integer.0")
        Call<ResponseBody> getIntInvalidString();

        @GET("/array/prim/long/1.-1.3.300")
        Call<ResponseBody> getLongValid();

        @PUT("/array/prim/long/1.-1.3.300")
        Call<ResponseBody> putLongValid(@Body List<Long> arrayBody);

        @GET("/array/prim/long/1.null.zero")
        Call<ResponseBody> getLongInvalidNull();

        @GET("/array/prim/long/1.integer.0")
        Call<ResponseBody> getLongInvalidString();

        @GET("/array/prim/float/0--0.01-1.2e20")
        Call<ResponseBody> getFloatValid();

        @PUT("/array/prim/float/0--0.01-1.2e20")
        Call<ResponseBody> putFloatValid(@Body List<Double> arrayBody);

        @GET("/array/prim/float/0.0-null-1.2e20")
        Call<ResponseBody> getFloatInvalidNull();

        @GET("/array/prim/float/1.number.0")
        Call<ResponseBody> getFloatInvalidString();

        @GET("/array/prim/double/0--0.01-1.2e20")
        Call<ResponseBody> getDoubleValid();

        @PUT("/array/prim/double/0--0.01-1.2e20")
        Call<ResponseBody> putDoubleValid(@Body List<Double> arrayBody);

        @GET("/array/prim/double/0.0-null-1.2e20")
        Call<ResponseBody> getDoubleInvalidNull();

        @GET("/array/prim/double/1.number.0")
        Call<ResponseBody> getDoubleInvalidString();

        @GET("/array/prim/string/foo1.foo2.foo3")
        Call<ResponseBody> getStringValid();

        @PUT("/array/prim/string/foo1.foo2.foo3")
        Call<ResponseBody> putStringValid(@Body List<String> arrayBody);

        @GET("/array/prim/string/foo.null.foo2")
        Call<ResponseBody> getStringWithNull();

        @GET("/array/prim/string/foo.123.foo2")
        Call<ResponseBody> getStringWithInvalid();

        @GET("/array/prim/date/valid")
        Call<ResponseBody> getDateValid();

        @PUT("/array/prim/date/valid")
        Call<ResponseBody> putDateValid(@Body List<LocalDate> arrayBody);

        @GET("/array/prim/date/invalidnull")
        Call<ResponseBody> getDateInvalidNull();

        @GET("/array/prim/date/invalidchars")
        Call<ResponseBody> getDateInvalidChars();

        @GET("/array/prim/date-time/valid")
        Call<ResponseBody> getDateTimeValid();

        @PUT("/array/prim/date-time/valid")
        Call<ResponseBody> putDateTimeValid(@Body List<DateTime> arrayBody);

        @GET("/array/prim/date-time/invalidnull")
        Call<ResponseBody> getDateTimeInvalidNull();

        @GET("/array/prim/date-time/invalidchars")
        Call<ResponseBody> getDateTimeInvalidChars();

        @GET("/array/prim/byte/valid")
        Call<ResponseBody> getByteValid();

        @PUT("/array/prim/byte/valid")
        Call<ResponseBody> putByteValid(@Body List<byte[]> arrayBody);

        @GET("/array/prim/byte/invalidnull")
        Call<ResponseBody> getByteInvalidNull();

        @GET("/array/complex/null")
        Call<ResponseBody> getComplexNull();

        @GET("/array/complex/empty")
        Call<ResponseBody> getComplexEmpty();

        @GET("/array/complex/itemnull")
        Call<ResponseBody> getComplexItemNull();

        @GET("/array/complex/itemempty")
        Call<ResponseBody> getComplexItemEmpty();

        @GET("/array/complex/valid")
        Call<ResponseBody> getComplexValid();

        @PUT("/array/complex/valid")
        Call<ResponseBody> putComplexValid(@Body List<Product> arrayBody);

        @GET("/array/array/null")
        Call<ResponseBody> getArrayNull();

        @GET("/array/array/empty")
        Call<ResponseBody> getArrayEmpty();

        @GET("/array/array/itemnull")
        Call<ResponseBody> getArrayItemNull();

        @GET("/array/array/itemempty")
        Call<ResponseBody> getArrayItemEmpty();

        @GET("/array/array/valid")
        Call<ResponseBody> getArrayValid();

        @PUT("/array/array/valid")
        Call<ResponseBody> putArrayValid(@Body List<List<String>> arrayBody);

        @GET("/array/dictionary/null")
        Call<ResponseBody> getDictionaryNull();

        @GET("/array/dictionary/empty")
        Call<ResponseBody> getDictionaryEmpty();

        @GET("/array/dictionary/itemnull")
        Call<ResponseBody> getDictionaryItemNull();

        @GET("/array/dictionary/itemempty")
        Call<ResponseBody> getDictionaryItemEmpty();

        @GET("/array/dictionary/valid")
        Call<ResponseBody> getDictionaryValid();

        @PUT("/array/dictionary/valid")
        Call<ResponseBody> putDictionaryValid(@Body List<Map<String, String>> arrayBody);

    }
    /**
     *
     * @return the List&lt;Integer&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    List<Integer> getNull() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> getNullAsync(final ServiceCallback<List<Integer>> serviceCallback);

    /**
     *
     * @return the List&lt;Integer&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    List<Integer> getInvalid() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> getInvalidAsync(final ServiceCallback<List<Integer>> serviceCallback);

    /**
     *
     * @return the List&lt;Integer&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    List<Integer> getEmpty() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> getEmptyAsync(final ServiceCallback<List<Integer>> serviceCallback);

    /**
     *
     * @param arrayBody the List&lt;String&gt; value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void putEmpty(List<String> arrayBody) throws ServiceException;

    /**
     *
     * @param arrayBody the List&lt;String&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> putEmptyAsync(List<String> arrayBody, final ServiceCallback<Void> serviceCallback);

    /**
     *
     * @return the List&lt;Boolean&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    List<Boolean> getBooleanTfft() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> getBooleanTfftAsync(final ServiceCallback<List<Boolean>> serviceCallback);

    /**
     *
     * @param arrayBody the List&lt;Boolean&gt; value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void putBooleanTfft(List<Boolean> arrayBody) throws ServiceException;

    /**
     *
     * @param arrayBody the List&lt;Boolean&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> putBooleanTfftAsync(List<Boolean> arrayBody, final ServiceCallback<Void> serviceCallback);

    /**
     *
     * @return the List&lt;Boolean&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    List<Boolean> getBooleanInvalidNull() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> getBooleanInvalidNullAsync(final ServiceCallback<List<Boolean>> serviceCallback);

    /**
     *
     * @return the List&lt;Boolean&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    List<Boolean> getBooleanInvalidString() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> getBooleanInvalidStringAsync(final ServiceCallback<List<Boolean>> serviceCallback);

    /**
     *
     * @return the List&lt;Integer&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    List<Integer> getIntegerValid() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> getIntegerValidAsync(final ServiceCallback<List<Integer>> serviceCallback);

    /**
     *
     * @param arrayBody the List&lt;Integer&gt; value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void putIntegerValid(List<Integer> arrayBody) throws ServiceException;

    /**
     *
     * @param arrayBody the List&lt;Integer&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> putIntegerValidAsync(List<Integer> arrayBody, final ServiceCallback<Void> serviceCallback);

    /**
     *
     * @return the List&lt;Integer&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    List<Integer> getIntInvalidNull() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> getIntInvalidNullAsync(final ServiceCallback<List<Integer>> serviceCallback);

    /**
     *
     * @return the List&lt;Integer&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    List<Integer> getIntInvalidString() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> getIntInvalidStringAsync(final ServiceCallback<List<Integer>> serviceCallback);

    /**
     *
     * @return the List&lt;Long&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    List<Long> getLongValid() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> getLongValidAsync(final ServiceCallback<List<Long>> serviceCallback);

    /**
     *
     * @param arrayBody the List&lt;Long&gt; value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void putLongValid(List<Long> arrayBody) throws ServiceException;

    /**
     *
     * @param arrayBody the List&lt;Long&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> putLongValidAsync(List<Long> arrayBody, final ServiceCallback<Void> serviceCallback);

    /**
     *
     * @return the List&lt;Long&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    List<Long> getLongInvalidNull() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> getLongInvalidNullAsync(final ServiceCallback<List<Long>> serviceCallback);

    /**
     *
     * @return the List&lt;Long&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    List<Long> getLongInvalidString() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> getLongInvalidStringAsync(final ServiceCallback<List<Long>> serviceCallback);

    /**
     *
     * @return the List&lt;Double&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    List<Double> getFloatValid() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> getFloatValidAsync(final ServiceCallback<List<Double>> serviceCallback);

    /**
     *
     * @param arrayBody the List&lt;Double&gt; value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void putFloatValid(List<Double> arrayBody) throws ServiceException;

    /**
     *
     * @param arrayBody the List&lt;Double&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> putFloatValidAsync(List<Double> arrayBody, final ServiceCallback<Void> serviceCallback);

    /**
     *
     * @return the List&lt;Double&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    List<Double> getFloatInvalidNull() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> getFloatInvalidNullAsync(final ServiceCallback<List<Double>> serviceCallback);

    /**
     *
     * @return the List&lt;Double&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    List<Double> getFloatInvalidString() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> getFloatInvalidStringAsync(final ServiceCallback<List<Double>> serviceCallback);

    /**
     *
     * @return the List&lt;Double&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    List<Double> getDoubleValid() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> getDoubleValidAsync(final ServiceCallback<List<Double>> serviceCallback);

    /**
     *
     * @param arrayBody the List&lt;Double&gt; value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void putDoubleValid(List<Double> arrayBody) throws ServiceException;

    /**
     *
     * @param arrayBody the List&lt;Double&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> putDoubleValidAsync(List<Double> arrayBody, final ServiceCallback<Void> serviceCallback);

    /**
     *
     * @return the List&lt;Double&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    List<Double> getDoubleInvalidNull() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> getDoubleInvalidNullAsync(final ServiceCallback<List<Double>> serviceCallback);

    /**
     *
     * @return the List&lt;Double&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    List<Double> getDoubleInvalidString() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> getDoubleInvalidStringAsync(final ServiceCallback<List<Double>> serviceCallback);

    /**
     *
     * @return the List&lt;String&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    List<String> getStringValid() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> getStringValidAsync(final ServiceCallback<List<String>> serviceCallback);

    /**
     *
     * @param arrayBody the List&lt;String&gt; value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void putStringValid(List<String> arrayBody) throws ServiceException;

    /**
     *
     * @param arrayBody the List&lt;String&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> putStringValidAsync(List<String> arrayBody, final ServiceCallback<Void> serviceCallback);

    /**
     *
     * @return the List&lt;String&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    List<String> getStringWithNull() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> getStringWithNullAsync(final ServiceCallback<List<String>> serviceCallback);

    /**
     *
     * @return the List&lt;String&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    List<String> getStringWithInvalid() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> getStringWithInvalidAsync(final ServiceCallback<List<String>> serviceCallback);

    /**
     *
     * @return the List&lt;LocalDate&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    List<LocalDate> getDateValid() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> getDateValidAsync(final ServiceCallback<List<LocalDate>> serviceCallback);

    /**
     *
     * @param arrayBody the List&lt;LocalDate&gt; value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void putDateValid(List<LocalDate> arrayBody) throws ServiceException;

    /**
     *
     * @param arrayBody the List&lt;LocalDate&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> putDateValidAsync(List<LocalDate> arrayBody, final ServiceCallback<Void> serviceCallback);

    /**
     *
     * @return the List&lt;LocalDate&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    List<LocalDate> getDateInvalidNull() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> getDateInvalidNullAsync(final ServiceCallback<List<LocalDate>> serviceCallback);

    /**
     *
     * @return the List&lt;LocalDate&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    List<LocalDate> getDateInvalidChars() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> getDateInvalidCharsAsync(final ServiceCallback<List<LocalDate>> serviceCallback);

    /**
     *
     * @return the List&lt;DateTime&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    List<DateTime> getDateTimeValid() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> getDateTimeValidAsync(final ServiceCallback<List<DateTime>> serviceCallback);

    /**
     *
     * @param arrayBody the List&lt;DateTime&gt; value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void putDateTimeValid(List<DateTime> arrayBody) throws ServiceException;

    /**
     *
     * @param arrayBody the List&lt;DateTime&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> putDateTimeValidAsync(List<DateTime> arrayBody, final ServiceCallback<Void> serviceCallback);

    /**
     *
     * @return the List&lt;DateTime&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    List<DateTime> getDateTimeInvalidNull() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> getDateTimeInvalidNullAsync(final ServiceCallback<List<DateTime>> serviceCallback);

    /**
     *
     * @return the List&lt;DateTime&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    List<DateTime> getDateTimeInvalidChars() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> getDateTimeInvalidCharsAsync(final ServiceCallback<List<DateTime>> serviceCallback);

    /**
     *
     * @return the List&lt;byte[]&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    List<byte[]> getByteValid() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> getByteValidAsync(final ServiceCallback<List<byte[]>> serviceCallback);

    /**
     *
     * @param arrayBody the List&lt;byte[]&gt; value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void putByteValid(List<byte[]> arrayBody) throws ServiceException;

    /**
     *
     * @param arrayBody the List&lt;byte[]&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> putByteValidAsync(List<byte[]> arrayBody, final ServiceCallback<Void> serviceCallback);

    /**
     *
     * @return the List&lt;byte[]&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    List<byte[]> getByteInvalidNull() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> getByteInvalidNullAsync(final ServiceCallback<List<byte[]>> serviceCallback);

    /**
     *
     * @return the List&lt;Product&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    List<Product> getComplexNull() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> getComplexNullAsync(final ServiceCallback<List<Product>> serviceCallback);

    /**
     *
     * @return the List&lt;Product&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    List<Product> getComplexEmpty() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> getComplexEmptyAsync(final ServiceCallback<List<Product>> serviceCallback);

    /**
     *
     * @return the List&lt;Product&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    List<Product> getComplexItemNull() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> getComplexItemNullAsync(final ServiceCallback<List<Product>> serviceCallback);

    /**
     *
     * @return the List&lt;Product&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    List<Product> getComplexItemEmpty() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> getComplexItemEmptyAsync(final ServiceCallback<List<Product>> serviceCallback);

    /**
     *
     * @return the List&lt;Product&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    List<Product> getComplexValid() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> getComplexValidAsync(final ServiceCallback<List<Product>> serviceCallback);

    /**
     *
     * @param arrayBody the List&lt;Product&gt; value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void putComplexValid(List<Product> arrayBody) throws ServiceException;

    /**
     *
     * @param arrayBody the List&lt;Product&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> putComplexValidAsync(List<Product> arrayBody, final ServiceCallback<Void> serviceCallback);

    /**
     *
     * @return the List&lt;List&lt;String&gt;&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    List<List<String>> getArrayNull() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> getArrayNullAsync(final ServiceCallback<List<List<String>>> serviceCallback);

    /**
     *
     * @return the List&lt;List&lt;String&gt;&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    List<List<String>> getArrayEmpty() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> getArrayEmptyAsync(final ServiceCallback<List<List<String>>> serviceCallback);

    /**
     *
     * @return the List&lt;List&lt;String&gt;&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    List<List<String>> getArrayItemNull() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> getArrayItemNullAsync(final ServiceCallback<List<List<String>>> serviceCallback);

    /**
     *
     * @return the List&lt;List&lt;String&gt;&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    List<List<String>> getArrayItemEmpty() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> getArrayItemEmptyAsync(final ServiceCallback<List<List<String>>> serviceCallback);

    /**
     *
     * @return the List&lt;List&lt;String&gt;&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    List<List<String>> getArrayValid() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> getArrayValidAsync(final ServiceCallback<List<List<String>>> serviceCallback);

    /**
     *
     * @param arrayBody the List&lt;List&lt;String&gt;&gt; value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void putArrayValid(List<List<String>> arrayBody) throws ServiceException;

    /**
     *
     * @param arrayBody the List&lt;List&lt;String&gt;&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> putArrayValidAsync(List<List<String>> arrayBody, final ServiceCallback<Void> serviceCallback);

    /**
     *
     * @return the List&lt;Map&lt;String, String&gt;&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    List<Map<String, String>> getDictionaryNull() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> getDictionaryNullAsync(final ServiceCallback<List<Map<String, String>>> serviceCallback);

    /**
     *
     * @return the List&lt;Map&lt;String, String&gt;&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    List<Map<String, String>> getDictionaryEmpty() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> getDictionaryEmptyAsync(final ServiceCallback<List<Map<String, String>>> serviceCallback);

    /**
     *
     * @return the List&lt;Map&lt;String, String&gt;&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    List<Map<String, String>> getDictionaryItemNull() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> getDictionaryItemNullAsync(final ServiceCallback<List<Map<String, String>>> serviceCallback);

    /**
     *
     * @return the List&lt;Map&lt;String, String&gt;&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    List<Map<String, String>> getDictionaryItemEmpty() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> getDictionaryItemEmptyAsync(final ServiceCallback<List<Map<String, String>>> serviceCallback);

    /**
     *
     * @return the List&lt;Map&lt;String, String&gt;&gt; object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    List<Map<String, String>> getDictionaryValid() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> getDictionaryValidAsync(final ServiceCallback<List<Map<String, String>>> serviceCallback);

    /**
     *
     * @param arrayBody the List&lt;Map&lt;String, String&gt;&gt; value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void putDictionaryValid(List<Map<String, String>> arrayBody) throws ServiceException;

    /**
     *
     * @param arrayBody the List&lt;Map&lt;String, String&gt;&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> putDictionaryValidAsync(List<Map<String, String>> arrayBody, final ServiceCallback<Void> serviceCallback);

}
