/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.bodynumber;

import com.google.gson.reflect.TypeToken;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceException;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseBuilder;
import com.microsoft.rest.ServiceResponseCallback;
import retrofit.RestAdapter;
import retrofit.RetrofitError;
import retrofit.client.Response;
import fixtures.bodynumber.models.Error;

public class NumberImpl implements Number {
    private NumberService service;
    AutoRestNumberTestService client;

    public NumberImpl(RestAdapter restAdapter, AutoRestNumberTestService client) {
        this.service = restAdapter.create(NumberService.class);
        this.client = client;
    }

    /**
     * Get null Number value
     *
     * @return the Double object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public Double getNull() throws ServiceException {
        try {
            ServiceResponse<Double> response = getNullDelegate(service.getNull(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Double> response = getNullDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Get null Number value
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getNullAsync(final ServiceCallback<Double> serviceCallback) {
        service.getNullAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getNullDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Double> getNullDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Double>()
                .register(200, new TypeToken<Double>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get invalid float Number value
     *
     * @return the Double object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public Double getInvalidFloat() throws ServiceException {
        try {
            ServiceResponse<Double> response = getInvalidFloatDelegate(service.getInvalidFloat(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Double> response = getInvalidFloatDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Get invalid float Number value
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getInvalidFloatAsync(final ServiceCallback<Double> serviceCallback) {
        service.getInvalidFloatAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getInvalidFloatDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Double> getInvalidFloatDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Double>()
                .register(200, new TypeToken<Double>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get invalid double Number value
     *
     * @return the Double object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public Double getInvalidDouble() throws ServiceException {
        try {
            ServiceResponse<Double> response = getInvalidDoubleDelegate(service.getInvalidDouble(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Double> response = getInvalidDoubleDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Get invalid double Number value
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getInvalidDoubleAsync(final ServiceCallback<Double> serviceCallback) {
        service.getInvalidDoubleAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getInvalidDoubleDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Double> getInvalidDoubleDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Double>()
                .register(200, new TypeToken<Double>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Put big float value 3.402823e+20
     *
     * @param numberBody the double value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void putBigFloat(double numberBody) throws ServiceException {
        try {
            ServiceResponse<Void> response = putBigFloatDelegate(service.putBigFloat(numberBody), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = putBigFloatDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Put big float value 3.402823e+20
     *
     * @param numberBody the double value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void putBigFloatAsync(double numberBody, final ServiceCallback<Void> serviceCallback) {
        service.putBigFloatAsync(numberBody, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(putBigFloatDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> putBigFloatDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get big float value 3.402823e+20
     *
     * @return the Double object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public Double getBigFloat() throws ServiceException {
        try {
            ServiceResponse<Double> response = getBigFloatDelegate(service.getBigFloat(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Double> response = getBigFloatDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Get big float value 3.402823e+20
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getBigFloatAsync(final ServiceCallback<Double> serviceCallback) {
        service.getBigFloatAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getBigFloatDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Double> getBigFloatDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Double>()
                .register(200, new TypeToken<Double>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Put big double value 2.5976931e+101
     *
     * @param numberBody the double value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void putBigDouble(double numberBody) throws ServiceException {
        try {
            ServiceResponse<Void> response = putBigDoubleDelegate(service.putBigDouble(numberBody), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = putBigDoubleDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Put big double value 2.5976931e+101
     *
     * @param numberBody the double value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void putBigDoubleAsync(double numberBody, final ServiceCallback<Void> serviceCallback) {
        service.putBigDoubleAsync(numberBody, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(putBigDoubleDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> putBigDoubleDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get big double value 2.5976931e+101
     *
     * @return the Double object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public Double getBigDouble() throws ServiceException {
        try {
            ServiceResponse<Double> response = getBigDoubleDelegate(service.getBigDouble(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Double> response = getBigDoubleDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Get big double value 2.5976931e+101
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getBigDoubleAsync(final ServiceCallback<Double> serviceCallback) {
        service.getBigDoubleAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getBigDoubleDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Double> getBigDoubleDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Double>()
                .register(200, new TypeToken<Double>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Put big double value 99999999.99
     *
     * @param numberBody the double value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void putBigDoublePositiveDecimal(double numberBody) throws ServiceException {
        try {
            ServiceResponse<Void> response = putBigDoublePositiveDecimalDelegate(service.putBigDoublePositiveDecimal(numberBody), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = putBigDoublePositiveDecimalDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Put big double value 99999999.99
     *
     * @param numberBody the double value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void putBigDoublePositiveDecimalAsync(double numberBody, final ServiceCallback<Void> serviceCallback) {
        service.putBigDoublePositiveDecimalAsync(numberBody, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(putBigDoublePositiveDecimalDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> putBigDoublePositiveDecimalDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get big double value 99999999.99
     *
     * @return the Double object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public Double getBigDoublePositiveDecimal() throws ServiceException {
        try {
            ServiceResponse<Double> response = getBigDoublePositiveDecimalDelegate(service.getBigDoublePositiveDecimal(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Double> response = getBigDoublePositiveDecimalDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Get big double value 99999999.99
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getBigDoublePositiveDecimalAsync(final ServiceCallback<Double> serviceCallback) {
        service.getBigDoublePositiveDecimalAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getBigDoublePositiveDecimalDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Double> getBigDoublePositiveDecimalDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Double>()
                .register(200, new TypeToken<Double>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Put big double value -99999999.99
     *
     * @param numberBody the double value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void putBigDoubleNegativeDecimal(double numberBody) throws ServiceException {
        try {
            ServiceResponse<Void> response = putBigDoubleNegativeDecimalDelegate(service.putBigDoubleNegativeDecimal(numberBody), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = putBigDoubleNegativeDecimalDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Put big double value -99999999.99
     *
     * @param numberBody the double value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void putBigDoubleNegativeDecimalAsync(double numberBody, final ServiceCallback<Void> serviceCallback) {
        service.putBigDoubleNegativeDecimalAsync(numberBody, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(putBigDoubleNegativeDecimalDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> putBigDoubleNegativeDecimalDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get big double value -99999999.99
     *
     * @return the Double object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public Double getBigDoubleNegativeDecimal() throws ServiceException {
        try {
            ServiceResponse<Double> response = getBigDoubleNegativeDecimalDelegate(service.getBigDoubleNegativeDecimal(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Double> response = getBigDoubleNegativeDecimalDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Get big double value -99999999.99
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getBigDoubleNegativeDecimalAsync(final ServiceCallback<Double> serviceCallback) {
        service.getBigDoubleNegativeDecimalAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getBigDoubleNegativeDecimalDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Double> getBigDoubleNegativeDecimalDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Double>()
                .register(200, new TypeToken<Double>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Put small float value 3.402823e-20
     *
     * @param numberBody the double value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void putSmallFloat(double numberBody) throws ServiceException {
        try {
            ServiceResponse<Void> response = putSmallFloatDelegate(service.putSmallFloat(numberBody), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = putSmallFloatDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Put small float value 3.402823e-20
     *
     * @param numberBody the double value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void putSmallFloatAsync(double numberBody, final ServiceCallback<Void> serviceCallback) {
        service.putSmallFloatAsync(numberBody, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(putSmallFloatDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> putSmallFloatDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get big double value 3.402823e-20
     *
     * @return the Double object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public Double getSmallFloat() throws ServiceException {
        try {
            ServiceResponse<Double> response = getSmallFloatDelegate(service.getSmallFloat(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Double> response = getSmallFloatDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Get big double value 3.402823e-20
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getSmallFloatAsync(final ServiceCallback<Double> serviceCallback) {
        service.getSmallFloatAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getSmallFloatDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Double> getSmallFloatDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Double>()
                .register(200, new TypeToken<Double>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Put small double value 2.5976931e-101
     *
     * @param numberBody the double value
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void putSmallDouble(double numberBody) throws ServiceException {
        try {
            ServiceResponse<Void> response = putSmallDoubleDelegate(service.putSmallDouble(numberBody), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = putSmallDoubleDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Put small double value 2.5976931e-101
     *
     * @param numberBody the double value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void putSmallDoubleAsync(double numberBody, final ServiceCallback<Void> serviceCallback) {
        service.putSmallDoubleAsync(numberBody, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(putSmallDoubleDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> putSmallDoubleDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get big double value 2.5976931e-101
     *
     * @return the Double object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public Double getSmallDouble() throws ServiceException {
        try {
            ServiceResponse<Double> response = getSmallDoubleDelegate(service.getSmallDouble(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Double> response = getSmallDoubleDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Get big double value 2.5976931e-101
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getSmallDoubleAsync(final ServiceCallback<Double> serviceCallback) {
        service.getSmallDoubleAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getSmallDoubleDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Double> getSmallDoubleDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Double>()
                .register(200, new TypeToken<Double>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

}
