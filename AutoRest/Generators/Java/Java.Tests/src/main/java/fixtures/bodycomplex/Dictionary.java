/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.bodycomplex;

import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceException;
import retrofit.Call;
import com.squareup.okhttp.ResponseBody;
import fixtures.bodycomplex.models.DictionaryWrapper;
import retrofit.http.GET;
import retrofit.http.PUT;
import retrofit.http.Body;

/**
 * An instance of this class provides access to all the operations defined
 * in Dictionary.
 */
public interface Dictionary {
    /**
     * The interface defining all the services for Dictionary to be
     * used by Retrofit to perform actually REST calls.
     */
    interface DictionaryService {
        @GET("/complex/dictionary/typed/valid")
        Call<ResponseBody> getValid();

        @PUT("/complex/dictionary/typed/valid")
        Call<ResponseBody> putValid(@Body DictionaryWrapper complexBody);

        @GET("/complex/dictionary/typed/empty")
        Call<ResponseBody> getEmpty();

        @PUT("/complex/dictionary/typed/empty")
        Call<ResponseBody> putEmpty(@Body DictionaryWrapper complexBody);

        @GET("/complex/dictionary/typed/null")
        Call<ResponseBody> getNull();

        @GET("/complex/dictionary/typed/notprovided")
        Call<ResponseBody> getNotProvided();

    }
    /**
     *
     * @return the DictionaryWrapper object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    DictionaryWrapper getValid() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> getValidAsync(final ServiceCallback<DictionaryWrapper> serviceCallback);

    /**
     *
     * @param complexBody Please put a dictionary with 5 key-value pairs: "txt":"notepad", "bmp":"mspaint", "xls":"excel", "exe":"", "":null
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void putValid(DictionaryWrapper complexBody) throws ServiceException;

    /**
     *
     * @param complexBody Please put a dictionary with 5 key-value pairs: "txt":"notepad", "bmp":"mspaint", "xls":"excel", "exe":"", "":null
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> putValidAsync(DictionaryWrapper complexBody, final ServiceCallback<Void> serviceCallback);

    /**
     *
     * @return the DictionaryWrapper object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    DictionaryWrapper getEmpty() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> getEmptyAsync(final ServiceCallback<DictionaryWrapper> serviceCallback);

    /**
     *
     * @param complexBody Please put an empty dictionary
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    void putEmpty(DictionaryWrapper complexBody) throws ServiceException;

    /**
     *
     * @param complexBody Please put an empty dictionary
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> putEmptyAsync(DictionaryWrapper complexBody, final ServiceCallback<Void> serviceCallback);

    /**
     *
     * @return the DictionaryWrapper object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    DictionaryWrapper getNull() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> getNullAsync(final ServiceCallback<DictionaryWrapper> serviceCallback);

    /**
     *
     * @return the DictionaryWrapper object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    DictionaryWrapper getNotProvided() throws ServiceException;

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    Call<ResponseBody> getNotProvidedAsync(final ServiceCallback<DictionaryWrapper> serviceCallback);

}
