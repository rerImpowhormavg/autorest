// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.


package fixtures.bodycomplex;

import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceException;
import com.microsoft.rest.ServiceResponseCallback;
import retrofit.client.Response;
import fixtures.bodycomplex.models.DictionaryWrapper;
import retrofit.http.GET;
import retrofit.http.PUT;
import retrofit.http.Body;

public interface Dictionary {
    interface DictionaryService {
        @GET("/complex/dictionary/typed/valid")
        Response getValid() throws ServiceException;

        @GET("/complex/dictionary/typed/valid")
        void getValidAsync(ServiceResponseCallback cb);

        @PUT("/complex/dictionary/typed/valid")
        Response putValid(@Body DictionaryWrapper complexBody) throws ServiceException;

        @PUT("/complex/dictionary/typed/valid")
        void putValidAsync(@Body DictionaryWrapper complexBody, ServiceResponseCallback cb);

        @GET("/complex/dictionary/typed/empty")
        Response getEmpty() throws ServiceException;

        @GET("/complex/dictionary/typed/empty")
        void getEmptyAsync(ServiceResponseCallback cb);

        @PUT("/complex/dictionary/typed/empty")
        Response putEmpty(@Body DictionaryWrapper complexBody) throws ServiceException;

        @PUT("/complex/dictionary/typed/empty")
        void putEmptyAsync(@Body DictionaryWrapper complexBody, ServiceResponseCallback cb);

        @GET("/complex/dictionary/typed/null")
        Response getNull() throws ServiceException;

        @GET("/complex/dictionary/typed/null")
        void getNullAsync(ServiceResponseCallback cb);

        @GET("/complex/dictionary/typed/notprovided")
        Response getNotProvided() throws ServiceException;

        @GET("/complex/dictionary/typed/notprovided")
        void getNotProvidedAsync(ServiceResponseCallback cb);

    }
    DictionaryWrapper getValid() throws ServiceException;

    void getValidAsync(final ServiceCallback<DictionaryWrapper> serviceCallback);

    void putValid(DictionaryWrapper complexBody) throws ServiceException;

    void putValidAsync(DictionaryWrapper complexBody, final ServiceCallback<Void> serviceCallback);

    DictionaryWrapper getEmpty() throws ServiceException;

    void getEmptyAsync(final ServiceCallback<DictionaryWrapper> serviceCallback);

    void putEmpty(DictionaryWrapper complexBody) throws ServiceException;

    void putEmptyAsync(DictionaryWrapper complexBody, final ServiceCallback<Void> serviceCallback);

    DictionaryWrapper getNull() throws ServiceException;

    void getNullAsync(final ServiceCallback<DictionaryWrapper> serviceCallback);

    DictionaryWrapper getNotProvided() throws ServiceException;

    void getNotProvidedAsync(final ServiceCallback<DictionaryWrapper> serviceCallback);

}
