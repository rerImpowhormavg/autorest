/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.bodycomplex;

import com.google.gson.reflect.TypeToken;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceException;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseBuilder;
import com.microsoft.rest.ServiceResponseCallback;
import retrofit.RestAdapter;
import retrofit.RetrofitError;
import retrofit.client.Response;
import fixtures.bodycomplex.models.DictionaryWrapper;
import fixtures.bodycomplex.models.Error;
import com.microsoft.rest.Validator;

public class DictionaryImpl implements Dictionary {
    private DictionaryService service;
    AutoRestComplexTestService client;

    public DictionaryImpl(RestAdapter restAdapter, AutoRestComplexTestService client) {
        this.service = restAdapter.create(DictionaryService.class);
        this.client = client;
    }

    /**
     * Get complex types with dictionary property
     *
     * @return the DictionaryWrapper object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public DictionaryWrapper getValid() throws ServiceException {
        try {
            ServiceResponse<DictionaryWrapper> response = getValidDelegate(service.getValid(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<DictionaryWrapper> response = getValidDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Get complex types with dictionary property
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getValidAsync(final ServiceCallback<DictionaryWrapper> serviceCallback) {
        service.getValidAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getValidDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<DictionaryWrapper> getValidDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<DictionaryWrapper>()
                .register(200, new TypeToken<DictionaryWrapper>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Put complex types with dictionary property
     *
     * @param complexBody Please put a dictionary with 5 key-value pairs: "txt":"notepad", "bmp":"mspaint", "xls":"excel", "exe":"", "":null
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void putValid(DictionaryWrapper complexBody) throws ServiceException {
        if (complexBody == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter complexBody is required and cannot be null."));
        }
        Validator.validate(complexBody);
        try {
            ServiceResponse<Void> response = putValidDelegate(service.putValid(complexBody), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = putValidDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Put complex types with dictionary property
     *
     * @param complexBody Please put a dictionary with 5 key-value pairs: "txt":"notepad", "bmp":"mspaint", "xls":"excel", "exe":"", "":null
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void putValidAsync(DictionaryWrapper complexBody, final ServiceCallback<Void> serviceCallback) {
        if (complexBody == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter complexBody is required and cannot be null.")));
        }
        Validator.validate(complexBody, serviceCallback);
        service.putValidAsync(complexBody, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(putValidDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> putValidDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get complex types with dictionary property which is empty
     *
     * @return the DictionaryWrapper object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public DictionaryWrapper getEmpty() throws ServiceException {
        try {
            ServiceResponse<DictionaryWrapper> response = getEmptyDelegate(service.getEmpty(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<DictionaryWrapper> response = getEmptyDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Get complex types with dictionary property which is empty
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getEmptyAsync(final ServiceCallback<DictionaryWrapper> serviceCallback) {
        service.getEmptyAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getEmptyDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<DictionaryWrapper> getEmptyDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<DictionaryWrapper>()
                .register(200, new TypeToken<DictionaryWrapper>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Put complex types with dictionary property which is empty
     *
     * @param complexBody Please put an empty dictionary
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void putEmpty(DictionaryWrapper complexBody) throws ServiceException {
        if (complexBody == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter complexBody is required and cannot be null."));
        }
        Validator.validate(complexBody);
        try {
            ServiceResponse<Void> response = putEmptyDelegate(service.putEmpty(complexBody), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = putEmptyDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Put complex types with dictionary property which is empty
     *
     * @param complexBody Please put an empty dictionary
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void putEmptyAsync(DictionaryWrapper complexBody, final ServiceCallback<Void> serviceCallback) {
        if (complexBody == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter complexBody is required and cannot be null.")));
        }
        Validator.validate(complexBody, serviceCallback);
        service.putEmptyAsync(complexBody, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(putEmptyDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> putEmptyDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get complex types with dictionary property which is null
     *
     * @return the DictionaryWrapper object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public DictionaryWrapper getNull() throws ServiceException {
        try {
            ServiceResponse<DictionaryWrapper> response = getNullDelegate(service.getNull(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<DictionaryWrapper> response = getNullDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Get complex types with dictionary property which is null
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getNullAsync(final ServiceCallback<DictionaryWrapper> serviceCallback) {
        service.getNullAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getNullDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<DictionaryWrapper> getNullDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<DictionaryWrapper>()
                .register(200, new TypeToken<DictionaryWrapper>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get complex types with dictionary property while server doesn't provide a response payload
     *
     * @return the DictionaryWrapper object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public DictionaryWrapper getNotProvided() throws ServiceException {
        try {
            ServiceResponse<DictionaryWrapper> response = getNotProvidedDelegate(service.getNotProvided(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<DictionaryWrapper> response = getNotProvidedDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Get complex types with dictionary property while server doesn't provide a response payload
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getNotProvidedAsync(final ServiceCallback<DictionaryWrapper> serviceCallback) {
        service.getNotProvidedAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getNotProvidedDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<DictionaryWrapper> getNotProvidedDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<DictionaryWrapper>()
                .register(200, new TypeToken<DictionaryWrapper>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

}
