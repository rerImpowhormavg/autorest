// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.


package fixtures.bodyinteger;

import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceException;
import com.microsoft.rest.ServiceResponseCallback;
import retrofit.client.Response;
import retrofit.http.GET;
import retrofit.http.PUT;
import retrofit.http.Body;

public interface IntOperations {
    interface IntService {
        @GET("/int/null")
        Response getNull() throws ServiceException;

        @GET("/int/null")
        void getNullAsync(ServiceResponseCallback cb);

        @GET("/int/invalid")
        Response getInvalid() throws ServiceException;

        @GET("/int/invalid")
        void getInvalidAsync(ServiceResponseCallback cb);

        @GET("/int/overflowint32")
        Response getOverflowInt32() throws ServiceException;

        @GET("/int/overflowint32")
        void getOverflowInt32Async(ServiceResponseCallback cb);

        @GET("/int/underflowint32")
        Response getUnderflowInt32() throws ServiceException;

        @GET("/int/underflowint32")
        void getUnderflowInt32Async(ServiceResponseCallback cb);

        @GET("/int/overflowint64")
        Response getOverflowInt64() throws ServiceException;

        @GET("/int/overflowint64")
        void getOverflowInt64Async(ServiceResponseCallback cb);

        @GET("/int/underflowint64")
        Response getUnderflowInt64() throws ServiceException;

        @GET("/int/underflowint64")
        void getUnderflowInt64Async(ServiceResponseCallback cb);

        @PUT("/int/max/32")
        Response putMax32(@Body int intBody) throws ServiceException;

        @PUT("/int/max/32")
        void putMax32Async(@Body int intBody, ServiceResponseCallback cb);

        @PUT("/int/max/64")
        Response putMax64(@Body long intBody) throws ServiceException;

        @PUT("/int/max/64")
        void putMax64Async(@Body long intBody, ServiceResponseCallback cb);

        @PUT("/int/min/32")
        Response putMin32(@Body int intBody) throws ServiceException;

        @PUT("/int/min/32")
        void putMin32Async(@Body int intBody, ServiceResponseCallback cb);

        @PUT("/int/min/64")
        Response putMin64(@Body long intBody) throws ServiceException;

        @PUT("/int/min/64")
        void putMin64Async(@Body long intBody, ServiceResponseCallback cb);

    }
    int getNull() throws ServiceException;

    void getNullAsync(final ServiceCallback<Integer> serviceCallback);

    int getInvalid() throws ServiceException;

    void getInvalidAsync(final ServiceCallback<Integer> serviceCallback);

    int getOverflowInt32() throws ServiceException;

    void getOverflowInt32Async(final ServiceCallback<Integer> serviceCallback);

    int getUnderflowInt32() throws ServiceException;

    void getUnderflowInt32Async(final ServiceCallback<Integer> serviceCallback);

    long getOverflowInt64() throws ServiceException;

    void getOverflowInt64Async(final ServiceCallback<Long> serviceCallback);

    long getUnderflowInt64() throws ServiceException;

    void getUnderflowInt64Async(final ServiceCallback<Long> serviceCallback);

    void putMax32(int intBody) throws ServiceException;

    void putMax32Async(int intBody, final ServiceCallback<Void> serviceCallback);

    void putMax64(long intBody) throws ServiceException;

    void putMax64Async(long intBody, final ServiceCallback<Void> serviceCallback);

    void putMin32(int intBody) throws ServiceException;

    void putMin32Async(int intBody, final ServiceCallback<Void> serviceCallback);

    void putMin64(long intBody) throws ServiceException;

    void putMin64Async(long intBody, final ServiceCallback<Void> serviceCallback);

}
