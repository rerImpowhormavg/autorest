/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.11.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.bodystring;

import com.google.gson.reflect.TypeToken;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceException;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseBuilder;
import com.microsoft.rest.ServiceResponseCallback;
import retrofit.RestAdapter;
import retrofit.RetrofitError;
import retrofit.client.Response;
import fixtures.bodystring.models.Error;

public class StringOperationsImpl implements StringOperations {
    private StringService service;
    AutoRestSwaggerBATService client;

    public StringOperationsImpl(RestAdapter restAdapter, AutoRestSwaggerBATService client) {
        this.service = restAdapter.create(StringService.class);
        this.client = client;
    }

    /**
     * Get null string value value
     *
     * @return the String object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public String getNull() throws ServiceException {
        try {
            ServiceResponse<String> response = getNullDelegate(service.getNull(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<String> response = getNullDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Get null string value value
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getNullAsync(final ServiceCallback<String> serviceCallback) {
        service.getNullAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getNullDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<String> getNullDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<String>()
                .register(200, new TypeToken<String>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Set string value null
     *
     * @param stringBody Possible values for this parameter include: ''
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void putNull(String stringBody) throws ServiceException {
        try {
            ServiceResponse<Void> response = putNullDelegate(service.putNull(stringBody), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = putNullDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Set string value null
     *
     * @param stringBody Possible values for this parameter include: ''
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void putNullAsync(String stringBody, final ServiceCallback<Void> serviceCallback) {
        service.putNullAsync(stringBody, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(putNullDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> putNullDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get empty string value value ''
     *
     * @return the String object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public String getEmpty() throws ServiceException {
        try {
            ServiceResponse<String> response = getEmptyDelegate(service.getEmpty(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<String> response = getEmptyDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Get empty string value value ''
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getEmptyAsync(final ServiceCallback<String> serviceCallback) {
        service.getEmptyAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getEmptyDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<String> getEmptyDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<String>()
                .register(200, new TypeToken<String>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Set string value empty ''
     *
     * @param stringBody Possible values for this parameter include: ''
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void putEmpty(String stringBody) throws ServiceException {
        if (stringBody == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter stringBody is required and cannot be null."));
        }
        try {
            ServiceResponse<Void> response = putEmptyDelegate(service.putEmpty(stringBody), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = putEmptyDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Set string value empty ''
     *
     * @param stringBody Possible values for this parameter include: ''
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void putEmptyAsync(String stringBody, final ServiceCallback<Void> serviceCallback) {
        if (stringBody == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter stringBody is required and cannot be null.")));
        }
        service.putEmptyAsync(stringBody, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(putEmptyDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> putEmptyDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get mbcs string value '啊齄丂狛狜隣郎隣兀﨩ˊ▇█〞〡￤℡㈱‐ー﹡﹢﹫、〓ⅰⅹ⒈€㈠㈩ⅠⅫ！￣ぁんァヶΑ︴АЯаяāɡㄅㄩ─╋︵﹄︻︱︳︴ⅰⅹɑɡ〇〾⿻⺁䜣€ '
     *
     * @return the String object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public String getMbcs() throws ServiceException {
        try {
            ServiceResponse<String> response = getMbcsDelegate(service.getMbcs(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<String> response = getMbcsDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Get mbcs string value '啊齄丂狛狜隣郎隣兀﨩ˊ▇█〞〡￤℡㈱‐ー﹡﹢﹫、〓ⅰⅹ⒈€㈠㈩ⅠⅫ！￣ぁんァヶΑ︴АЯаяāɡㄅㄩ─╋︵﹄︻︱︳︴ⅰⅹɑɡ〇〾⿻⺁䜣€ '
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getMbcsAsync(final ServiceCallback<String> serviceCallback) {
        service.getMbcsAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getMbcsDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<String> getMbcsDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<String>()
                .register(200, new TypeToken<String>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Set string value mbcs '啊齄丂狛狜隣郎隣兀﨩ˊ▇█〞〡￤℡㈱‐ー﹡﹢﹫、〓ⅰⅹ⒈€㈠㈩ⅠⅫ！￣ぁんァヶΑ︴АЯаяāɡㄅㄩ─╋︵﹄︻︱︳︴ⅰⅹɑɡ〇〾⿻⺁䜣€ '
     *
     * @param stringBody Possible values for this parameter include: '啊齄丂狛狜隣郎隣兀﨩ˊ▇█〞〡￤℡㈱‐ー﹡﹢﹫、〓ⅰⅹ⒈€㈠㈩ⅠⅫ！￣ぁんァヶΑ︴АЯаяāɡㄅㄩ─╋︵﹄︻︱︳︴ⅰⅹɑɡ〇〾⿻⺁䜣€ '
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void putMbcs(String stringBody) throws ServiceException {
        if (stringBody == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter stringBody is required and cannot be null."));
        }
        try {
            ServiceResponse<Void> response = putMbcsDelegate(service.putMbcs(stringBody), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = putMbcsDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Set string value mbcs '啊齄丂狛狜隣郎隣兀﨩ˊ▇█〞〡￤℡㈱‐ー﹡﹢﹫、〓ⅰⅹ⒈€㈠㈩ⅠⅫ！￣ぁんァヶΑ︴АЯаяāɡㄅㄩ─╋︵﹄︻︱︳︴ⅰⅹɑɡ〇〾⿻⺁䜣€ '
     *
     * @param stringBody Possible values for this parameter include: '啊齄丂狛狜隣郎隣兀﨩ˊ▇█〞〡￤℡㈱‐ー﹡﹢﹫、〓ⅰⅹ⒈€㈠㈩ⅠⅫ！￣ぁんァヶΑ︴АЯаяāɡㄅㄩ─╋︵﹄︻︱︳︴ⅰⅹɑɡ〇〾⿻⺁䜣€ '
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void putMbcsAsync(String stringBody, final ServiceCallback<Void> serviceCallback) {
        if (stringBody == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter stringBody is required and cannot be null.")));
        }
        service.putMbcsAsync(stringBody, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(putMbcsDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> putMbcsDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get string value with leading and trailing whitespace '&lt;tab&gt;&lt;space&gt;&lt;space&gt;Now is the time for all good men to come to the aid of their country&lt;tab&gt;&lt;space&gt;&lt;space&gt;'
     *
     * @return the String object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public String getWhitespace() throws ServiceException {
        try {
            ServiceResponse<String> response = getWhitespaceDelegate(service.getWhitespace(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<String> response = getWhitespaceDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Get string value with leading and trailing whitespace '&lt;tab&gt;&lt;space&gt;&lt;space&gt;Now is the time for all good men to come to the aid of their country&lt;tab&gt;&lt;space&gt;&lt;space&gt;'
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getWhitespaceAsync(final ServiceCallback<String> serviceCallback) {
        service.getWhitespaceAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getWhitespaceDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<String> getWhitespaceDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<String>()
                .register(200, new TypeToken<String>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Set String value with leading and trailing whitespace '&lt;tab&gt;&lt;space&gt;&lt;space&gt;Now is the time for all good men to come to the aid of their country&lt;tab&gt;&lt;space&gt;&lt;space&gt;'
     *
     * @param stringBody Possible values for this parameter include: '    Now is the time for all good men to come to the aid of their country    '
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public void putWhitespace(String stringBody) throws ServiceException {
        if (stringBody == null) {
            throw new ServiceException(
                new IllegalArgumentException("Parameter stringBody is required and cannot be null."));
        }
        try {
            ServiceResponse<Void> response = putWhitespaceDelegate(service.putWhitespace(stringBody), null);
            response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<Void> response = putWhitespaceDelegate(error.getResponse(), error);
            response.getBody();
        }
    }

    /**
     * Set String value with leading and trailing whitespace '&lt;tab&gt;&lt;space&gt;&lt;space&gt;Now is the time for all good men to come to the aid of their country&lt;tab&gt;&lt;space&gt;&lt;space&gt;'
     *
     * @param stringBody Possible values for this parameter include: '    Now is the time for all good men to come to the aid of their country    '
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void putWhitespaceAsync(String stringBody, final ServiceCallback<Void> serviceCallback) {
        if (stringBody == null) {
            serviceCallback.failure(new ServiceException(
                new IllegalArgumentException("Parameter stringBody is required and cannot be null.")));
        }
        service.putWhitespaceAsync(stringBody, new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(putWhitespaceDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<Void> putWhitespaceDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<Void>()
                .register(200, new TypeToken<Void>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

    /**
     * Get String value when no string value is sent in response payload
     *
     * @return the String object if successful.
     * @throws ServiceException the exception wrapped in ServiceException if failed.
     */
    public String getNotProvided() throws ServiceException {
        try {
            ServiceResponse<String> response = getNotProvidedDelegate(service.getNotProvided(), null);
            return response.getBody();
        } catch (RetrofitError error) {
            ServiceResponse<String> response = getNotProvidedDelegate(error.getResponse(), error);
            return response.getBody();
        }
    }

    /**
     * Get String value when no string value is sent in response payload
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     */
    public void getNotProvidedAsync(final ServiceCallback<String> serviceCallback) {
        service.getNotProvidedAsync(new ServiceResponseCallback() {
            @Override
            public void response(Response response, RetrofitError error) {
                try {
                    serviceCallback.success(getNotProvidedDelegate(response, error));
                } catch (ServiceException exception) {
                    serviceCallback.failure(exception);
                }
            }
        });
    }

    private ServiceResponse<String> getNotProvidedDelegate(Response response, RetrofitError error) throws ServiceException {
        return new ServiceResponseBuilder<String>()
                .register(200, new TypeToken<String>(){}.getType())
                .registerError(new TypeToken<Error>(){}.getType())
                .build(response, error);
    }

}
