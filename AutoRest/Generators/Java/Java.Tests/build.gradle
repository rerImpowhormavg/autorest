buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.bmuschko:gradle-nexus-plugin:2.3.1'
    }
}

apply plugin: 'java'
apply plugin: 'com.bmuschko.nexus'

group = 'com.microsoft.rest'
version = '0.0.1-SNAPSHOT'

repositories {
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url "../../../../ClientRuntimes/Java/build/repo-snapshots/"}
}

dependencies {
    compile group: 'com.microsoft.rest', name:'client-runtime', version:'0.0.1-SNAPSHOT'
    compile group: 'com.squareup.retrofit', name:'retrofit', version:'1.9.0'
    compile group: 'com.squareup.okhttp', name:'okhttp', version:'2.4.0'
    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile group: 'junit', name: 'junit-dep', version: '4.11'
}

modifyPom {
    setArtifactId 'java-code-gen-tests'
    project {
        name 'Microsoft AutoRest Java Code Generator Tests'
        description 'This is the Basic Acceptance Tests for Java Code Gen.'
        url 'https://github.com/Azure/autorest'

        scm {
            url 'scm:git:https://github.com/Azure/AutoRest'
            connection 'scm:git:git://github.com/Azure/AutoRest.git'
        }

        licenses {
            license {
                name 'The MIT License (MIT)'
                url 'http://opensource.org/licenses/MIT'
                distribution 'repo'
            }
        }

        developers {
            developer {
                id 'microsoft'
                name 'Microsoft'
            }
        }
    }
}

nexus {
    sign = true
    repositoryUrl = "file://$buildDir/repo"
    snapshotRepositoryUrl = "file://$buildDir/repo-snapshots"
}

javadoc {
    options.encoding = 'UTF-8'
}

test {
    reports.getHtml()
    reports.html.destination = file("${projectDir}/../../../../TestResults")
}

task buildRuntime(type: Exec) {
    workingDir "${projectDir}/../../../../ClientRuntimes/Java"
    commandLine 'cmd', '/c', 'gradle', 'uploadArchives'
}

task npmrestore(type: Exec) {
    workingDir "${projectDir}/../../AcceptanceTests/server"
    commandLine 'cmd', '/c', 'npm', 'install'
}

task installforever(type: Exec, dependsOn: 'npmrestore') {
    commandLine 'cmd', '/c', 'npm', 'install', '-g', 'forever'
}

task runserver(type: Exec, dependsOn: 'installforever') {
    workingDir "${projectDir}/../../AcceptanceTests/server"
    commandLine 'cmd', '/c', 'forever', 'start', 'startup/www.js'
}

task testcoverage(type: JavaExec, dependsOn: 'runserver') {
    main = 'fixtures.report.CoverageReporter'
    classpath = sourceSets.test.runtimeClasspath
}

task stopserver(type: Exec, dependsOn: 'testcoverage') {
    workingDir "${projectDir}/../../AcceptanceTests/server"
    commandLine 'cmd', '/c', 'forever', 'stop', 'startup/www.js'
}

tasks.compileJava.dependsOn 'clean'
tasks.test.dependsOn 'runserver'
tasks.test.finalizedBy 'stopserver'