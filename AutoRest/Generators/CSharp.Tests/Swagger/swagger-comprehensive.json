{
    "swagger": "2.0",
    "info": {
        "x-reverb-info": "this is an example",
        "version": "1.0.0.$.%%$",
        "title": "Swagger Petstore$%^",
        "description": "A sample API that uses a petstore as an example to demonstrate features in the swagger-2.0 specification",
        "termsOfService": "http://helloreverb.com/terms/",
        "contact": {
            "name": "Wordnik API Team",
            "email": "foo@example.com",
            "url": "http://madskristensen.net"
        },
        "license": {
            "name": "MIT",
            "url": "http://github.com/gruntjs/grunt/blob/master/LICENSE-MIT"
        }
    },
    "externalDocs": {
        "description": "find more info here",
        "url": "https://helloreverb.com/about"
    },
    "host": "petstore.swagger.wordnik.com",
    "basePath": "/api",
    "schemes": [
        "http",
        "https"
    ],
    "consumes": [
        "application/json",
        "text/json",
        "application/xml",
        "text/xml"
    ],
    "produces": [
        "application/json",
        "text/json",
        "application/xml",
        "text/xml"
    ],
    "security": [
        {
            "githubAccessCode": [ "user", "gist" ]
        },
        {
            "internalApiKey": [ ]
        }
    ],
    "paths": {
        "/pets": {
            "get": {
                "description": "Returns all pets from the system that the user has access to",
                "operationId": "findPets",
                "externalDocs": {
                    "description": "find more info here",
                    "url": "https://helloreverb.com/about"
                },
                "produces": [
                    "application/json",
                    "application/xml",
                    "text/xml",
                    "text/html"
                ],
                "parameters": [
                    {
                        "name": "tags",
                        "in": "query",
                        "description": "tags to filter by",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "maximum number of results to return",
                        "required": false,
                        "type": "integer",
                        "format": "int32",
                        "multipleOf": 1,
                        "exclusiveMaximum": true,
                        "maximum": 99,
                        "exclusiveMinimum": true,
                        "minimum": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "pet response",
                        "schema": {
                            "type": "array",
                            "maxItems": 5,
                            "minItems": 1,
                            "uniqueItems": true,
                            "items": {
                                "$ref": "#/definitions/pet"
                            }
                        }
                    },
                    "default": {
                        "description": "unexpected error",
                        "schema": {
                            "$ref": "#/definitions/errorModel"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new pet in the store.  Duplicates are allowed",
                "operationId": "addPet",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "pet",
                        "in": "body",
                        "description": "Pet to add to the store",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/newPet"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "pet response",
                        "schema": {
                            "$ref": "#/definitions/pet"
                        }
                    },
                    "default": {
                        "description": "unexpected error",
                        "schema": {
                            "$ref": "#/definitions/errorModel"
                        }
                    }
                }
            }
        },
        "/pets/{id}": {
            "parameters": [
                {
                    "$ref": "#/parameters/id"
                }
            ],
            "get": {
                "description": "Returns a user based on a single Id, if the user does not have access to the pet",
                "operationId": "findPetById",
                "security": [
                    {
                        "githubAuth": [
                            "user:read",
                            "user:write"
                        ]
                    },
                    {
                        "internalApiKey": [ ]
                    }
                ],
                "produces": [
                    "application/json",
                    "application/xml",
                    "text/xml",
                    "text/html"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of pet to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64",
                        "default": 6
                    }
                ],
                "responses": {
                    "200": {
                        "description": "pet response",
                        "schema": {
                            "$ref": "#/definitions/pet"
                        },
                        "examples": {
                            "application/json": {
                                "id": 9,
                                "category": {
                                    "name": "domestic"
                                },
                                "name": "monster",
                                "tags": [
                                    {
                                        "name": "for sale"
                                    }
                                ],
                                "status": "alive"
                            }
                        }
                    },
                    "default": {
                        "description": "unexpected error",
                        "schema": {
                            "$ref": "#/definitions/errorModel"
                        }
                    }
                }
            },
            "delete": {
                "description": "deletes a single pet based on the Id supplied",
                "operationId": "deletePet",
                "responses": {
                    "204": {
                        "description": "pet deleted"
                    },
                    "default": {
                        "description": "unexpected error",
                        "schema": {
                            "$ref": "#/definitions/errorModel"
                        }
                    }
                }
            }
        }
    },
    "securityDefinitions": {
        "githubAccessCode": {
            "type": "oauth2",
            "scopes": {
                "user": "Grants read/write access to profile info only. Note that this scope includes user:email and user:follow.",
                "user:email": "Grants read access to a user’s email addresses.",
                "user:follow": "Grants access to follow or unfollow other users.",
                "public_repo": "Grants read/write access to code, commit statuses, and deployment statuses for public repositories and organizations.",
                "repo": "Grants read/write access to code, commit statuses, and deployment statuses for public and private repositories and organizations.",
                "repo_deployment": "Grants access to deployment statuses for public and private repositories. This scope is only necessary to grant other users or services access to deployment statuses, without granting access to the code.",
                "repo:status": "Grants read/write access to public and private repository commit statuses. This scope is only necessary to grant other users or services access to private repository commit statuses without granting access to the code.",
                "delete_repo": "Grants access to delete adminable repositories.",
                "notifications": "Grants read access to a user’s notifications. repo also provides this access.",
                "gist": "Grants write access to gists.",
                "read:repo_hook": "Grants read and ping access to hooks in public or private repositories.",
                "write:repo_hook": "Grants read, write, and ping access to hooks in public or private repositories.",
                "admin:repo_hook": "Grants read, write, ping, and delete access to hooks in public or private repositories.",
                "read:org": "Read-only access to organization, teams, and membership.",
                "write:org": "Publicize and unpublicize organization membership.",
                "admin:org": "Fully manage organization, teams, and memberships.",
                "read:public_key": "List and view details for public keys.",
                "write:public_key": "Create, list, and view details for public keys.",
                "admin:public_key": "Fully manage public keys."
            },
            "flow": "accessCode",
            "authorizationUrl": "https://github.com/login/oauth/authorize",
            "tokenUrl": "https://github.com/login/oauth/access_token"
        },
        "petstoreImplicit": {
            "type": "oauth2",
            "scopes": {
                "user": "Grants read/write access to profile info only. Note that this scope includes user:email and user:follow.",
                "user:email": "Grants read access to a user’s email addresses.",
                "user:follow": "Grants access to follow or unfollow other users.",
                "public_repo": "Grants read/write access to code, commit statuses, and deployment statuses for public repositories and organizations.",
                "repo": "Grants read/write access to code, commit statuses, and deployment statuses for public and private repositories and organizations.",
                "repo_deployment": "Grants access to deployment statuses for public and private repositories. This scope is only necessary to grant other users or services access to deployment statuses, without granting access to the code.",
                "repo:status": "Grants read/write access to public and private repository commit statuses. This scope is only necessary to grant other users or services access to private repository commit statuses without granting access to the code.",
                "delete_repo": "Grants access to delete adminable repositories.",
                "notifications": "Grants read access to a user’s notifications. repo also provides this access.",
                "gist": "Grants write access to gists.",
                "read:repo_hook": "Grants read and ping access to hooks in public or private repositories.",
                "write:repo_hook": "Grants read, write, and ping access to hooks in public or private repositories.",
                "admin:repo_hook": "Grants read, write, ping, and delete access to hooks in public or private repositories.",
                "read:org": "Read-only access to organization, teams, and membership.",
                "write:org": "Publicize and unpublicize organization membership.",
                "admin:org": "Fully manage organization, teams, and memberships.",
                "read:public_key": "List and view details for public keys.",
                "write:public_key": "Create, list, and view details for public keys.",
                "admin:public_key": "Fully manage public keys."
            },
            "flow": "implicit",
            "authorizationUrl": "http://petstore.swagger.wordnik.com/oauth/dialog"
        },
        "internalApiKey": {
            "type": "apiKey",
            "in": "header",
            "name": "api_key"
        }
    },
    "parameters": {
        "id": {
            "name": "id",
            "in": "path",
            "description": "Id of pet to fetch",
            "required": true,
            "type": "string"
        }
    },
    "definitions": {
        "pet": {
            "maxProperties": 100,
            "minProperties": 1,
            "required": [
                "id",
                "name"
            ],
            "externalDocs": {
                "description": "find more info here",
                "url": "https://helloreverb.com/about"
            },
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "name": {
                    "type": "string",
                    "maxLength": 10,
                    "minLength": 5,
                    "pattern": "^[a-zA-Z0-9_]+$"
                },
                "huntingSkill": {
                    "type": "string",
                    "description": "The measured skill for hunting",
                    "default": "lazy",
                    "enum": [ "clueless", "lazy", "adventurous", "aggressive" ]
                },
                "tag": {
                    "type": "string",
                     "default":  "puppet101"
                }
            }
        },
        "newPet": {
            "allOf": [
                {
                    "$ref": "pet"
                },
                {
                    "required": [
                        "name"
                    ],
                    "properties": {
                        "id": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                }
            ]
        },
        "errorModel": {
            "required": [
                "code",
                "message"
            ],
            "properties": {
                "code": {
                    "type": "integer",
                    "format": "int32",
                    "multipleOf": 1,
                    "exclusiveMaximum": false,
                    "maximum": 5,
                    "exclusiveMinimum": false,
                    "minimum": 2
                },
                "message": {
                    "type": "string"
                }
            }
        }
    },
    "externalDocs": {
        "description": "This is a petstore api",
        "url": "https://helloreverb.com/about"
    },
    "tags": [
        {
            "name": "mytag1",
            "description": "Tag 1",
            "externalDocs": {
                "description": "This is mytag1",
                "url": "https://helloreverb.com/about"
            }
        },
        {
            "name": "mytag2",
            "description": "Tag 2",
            "externalDocs": {
                "description": "This is mytag2",
                "url": "https://helloreverb.com/about"
            }
        }
    ]
}
