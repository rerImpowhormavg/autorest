// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using Microsoft.Rest.Generator.Logging;
using Microsoft.Rest.Generator.Properties;
using Microsoft.Rest.Generator.Utilities;
using System.Globalization;

namespace Microsoft.Rest.Generator
{
    public class Settings
    {
        public const string DefaultCodeGenerationHeader = @"Code generated by Microsoft (R) AutoRest Code Generator {0}
Changes may cause incorrect behavior and will be lost if the code is regenerated.";

        public const string MicrosoftApacheLicenseHeader = @"Copyright (c) Microsoft and contributors.  All rights reserved.

Licensed under the Apache License, Version 2.0 (the ""License"");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an ""AS IS"" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

See the License for the specific language governing permissions and
limitations under the License.
";

        public const string MicrosoftMitLicenseHeader = @"Copyright (c) Microsoft Corporation. All rights reserved. 
Licensed under the MIT License. See License.txt in the project root for license information.
";

        private string _header;

        public Settings()
        {
            FileSystem = new FileSystem();
            OutputDirectory = Path.Combine(Environment.CurrentDirectory, "Generated");
            CustomSettings = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
            Header = string.Format(CultureInfo.InvariantCulture, DefaultCodeGenerationHeader, AutoRest.Version);
            CodeGenerator = "CSharp";
            Modeler = "Swagger";
        }

        /// <summary>
        /// Gets or sets the IFileSystem used by code generation.
        /// </summary>
        public IFileSystem FileSystem { get; set; }

        /// <summary>
        /// Custom provider specific settings.
        /// </summary>
        public IDictionary<string, string> CustomSettings { get; private set; }

        // The CommandLineInfo attribute is reflected to display help.
        // Prefer to show required properties before optional.
        // Although not guaranteed by the Framework, the iteration order matches the
        // order of definition.

        #region ordered_properties

        /// <summary>
        /// Gets or sets the path to the input specification file.
        /// </summary>
        [SettingsInfo("The location of the input specification.", true)]
        public string Input { get; set; }

        /// <summary>
        /// Gets or sets a base namespace for generated code.
        /// </summary>
        [SettingsInfo("The namespace to use for generated code.")]
        public string Namespace { get; set; }

        /// <summary>
        /// Gets or sets the output directory for generated files. If not specified, uses 'Generated' as the default.
        /// </summary>
        [SettingsInfo("The location for generated files. If not specified, uses \"Generated\" as the default.")]
        public string OutputDirectory { get; set; }

        /// <summary>
        /// Gets or sets the code generation language.
        /// </summary>
        [SettingsInfo("The code generator language. If not specified, defaults to CSharp.")]
        public string CodeGenerator { get; set; }

        /// <summary>
        /// Gets or sets the modeler to use for processing the input specification.
        /// </summary>
        [SettingsInfo("The Modeler to use on the input. If not specified, defaults to Swagger.")]
        public string Modeler { get; set; }

        #endregion

        /// <summary>
        /// Gets or sets a name of the generated client type. If not specified, will use 
        /// a value from the specification. For Swagger specifications, 
        /// the value of the 'Title' field is used.
        /// </summary>
        [SettingsInfo("Name to use for the generated client type. By default, uses " +
                      "the value of the 'Title' field from the Swagger input.")]
        public string ClientName { get; set; }

        /// <summary>
        /// Gets or sets a comment header to include in each generated file.
        /// </summary>
        [SettingsInfo("Text to include as a header comment in generated files. " +
                      "Use NONE to suppress the default header.")]
        public string Header
        {
            get { return _header; }
            set
            {
                if (value == "MICROSOFT_MIT")
                {
                    _header = MicrosoftMitLicenseHeader + Environment.NewLine + string.Format(CultureInfo.InvariantCulture, DefaultCodeGenerationHeader, AutoRest.Version);
                }
                else if (value == "MICROSOFT_APACHE")
                {
                    _header = MicrosoftApacheLicenseHeader + Environment.NewLine + string.Format(CultureInfo.InvariantCulture, DefaultCodeGenerationHeader, AutoRest.Version);
                }
                else if (value == "NONE")
                {
                    _header = String.Empty;
                }
                else
                {
                    _header = value;
                }
            }
        }

        /// <summary>
        /// If set to true, generate client with a ServiceClientCredentials property and optional constructor parameter. 
        /// </summary>
        [SettingsInfo(
            "If true, the generated client includes a ServiceClientCredentials property and constructor parameter. " +
            "Authentication behaviors are implemented by extending the ServiceClientCredentials type.")]
        public bool AddCredentials { get; set; }

        /// <summary>
        /// If set, will cause generated code to be output to a single file. Not supported by all code generators. 
        /// </summary>
        [SettingsInfo(
            "If set, will cause generated code to be output to a single file. Not supported by all code generators.")]
        public string OutputFileName { get; set; }

        /// <summary>
        /// Factory method to generate CodeGenerationSettings from command line arguments.
        /// Matches dictionary keys to the settings properties.
        /// </summary>
        /// <param name="arguments">Command line arguments</param>
        /// <returns>CodeGenerationSettings</returns>
        public static Settings Create(string[] arguments)
        {
            var argsDictionary = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
            if (arguments != null && arguments.Length > 0)
            {
                string key = null;
                string value = null;
                for (int i = 0; i < arguments.Length; i++)
                {
                    string argument = arguments[i] ?? String.Empty;
                    argument = argument.Trim();

                    if (argument.StartsWith("-", StringComparison.OrdinalIgnoreCase))
                    {
                        if (key != null)
                        {
                            AddArgumentToDictionary(key, value, argsDictionary);
                            value = null;
                        }
                        key = argument.Substring(1);
                    }
                    else
                    {
                        value = argument;
                    }
                }
                AddArgumentToDictionary(key, value, argsDictionary);
            }
            else
            {
                argsDictionary["?"] = String.Empty;
            }

            return Create(argsDictionary);
        }

        private static void AddArgumentToDictionary(string key, string value, Dictionary<string, string> argsDictionary)
        {
            key = key ?? "Default";
            value = value ?? String.Empty;
            argsDictionary[key] = value;
        }

        /// <summary>
        /// Factory method to generate Settings from a dictionary. Matches dictionary 
        /// keys to the settings properties.
        /// </summary>
        /// <param name="settings">Dictionary of settings</param>
        /// <returns>Settings</returns>
        public static Settings Create(IDictionary<string, string> settings)
        {
            var autoRestSettings = new Settings();
            if (settings != null && settings.Count > 0)
            {
                // Setting property value from dictionary
                foreach (var setting in settings)
                {
                    PropertyInfo property = (typeof (Settings)).GetProperties()
                        .FirstOrDefault(p => p.Name.Equals(setting.Key, StringComparison.OrdinalIgnoreCase));

                    if (property != null)
                    {
                        try
                        {
                            if (setting.Value.IsNullOrEmpty() && property.PropertyType == typeof (bool))
                            {
                                property.SetValue(autoRestSettings, true);
                            }
                            else
                            {
                                property.SetValue(autoRestSettings,
                                    Convert.ChangeType(setting.Value, property.PropertyType, CultureInfo.InvariantCulture), null);
                            }
                        }
                        catch (Exception exception)
                        {
                            throw new ArgumentException(String.Format(CultureInfo.InvariantCulture, Resources.ParameterValueIsNotValid,
                                setting.Key, property.GetType().Name), exception);
                        }
                    }
                    else
                    {
                        autoRestSettings.CustomSettings[setting.Key] = setting.Value;
                    }
                }
            }
            else
            {
                autoRestSettings.CustomSettings["?"] = String.Empty;
            }

            return autoRestSettings;
        }

        public void Validate()
        {
            foreach (PropertyInfo property in (typeof (Settings)).GetProperties())
            {
                // If property value is not set - throw exception.
                var doc = (SettingsInfoAttribute) property
                    .GetCustomAttributes(typeof (SettingsInfoAttribute)).FirstOrDefault();
                if (doc != null && doc.IsRequired && property.GetValue(this) == null)
                {
                    Logger.LogError(new ArgumentException(property.Name),
                        Resources.ParameterValueIsMissing, property.Name);
                }
            }
            ErrorManager.ThrowErrors();
        }
    }
}
