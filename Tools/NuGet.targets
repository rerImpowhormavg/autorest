<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <Import Project="$(LibrarySourceFolder)\ClientRuntimes\**\*.nuget.proj"
          Condition=" '$(Scope)' == 'all' or '$(Scope)' == 'ClientRuntime'"/>

  <Import Project="$(LibrarySourceFolder)\AutoRest\**\*.nuget.proj"
          Condition=" '$(Scope)' == 'all' or '$(Scope)' == 'CodeGenerator'"/>

  <PropertyGroup>
    <NuGetVerbosity>normal</NuGetVerbosity>
    <PublishSymbolSourcePackages>true</PublishSymbolSourcePackages>
  </PropertyGroup>

  <UsingTask AssemblyFile="Microsoft.Rest.Common.Build.Tasks.dll" TaskName="RegexReplaceTask" />
  <Target Name="EnsureBinariesFolderExists">
    <MakeDir Directories="binaries" Condition="!Exists('binaries')" />
    <MakeDir Directories="binaries\packages" Condition="!Exists('binaries\packages')" />
    <MakeDir Directories="binaries\packages\specs" Condition="!Exists('binaries\packages\specs')" />
  </Target>
  
  <!-- Replacing version token dependency. -->
  <Target Name="BuildDynamicNuSpecs" DependsOnTargets="EnsureBinariesFolderExists">
    <!-- Copy nuspec files to binaries folder. -->
    <ItemGroup>
      <NuspecFilesToCopy Include="%(SdkNuGetPackage.Folder)%(SdkNuGetPackage.Identity).nuspec" />
    </ItemGroup>    
    <Copy SourceFiles="@(NuspecFilesToCopy)" DestinationFolder="binaries\packages\specs"/>
    <!-- Update version string. -->
    <ItemGroup>
      <NuspecFilesToUpdate Include="binaries\packages\specs\*.nuspec" />
    </ItemGroup>   
    <RegexReplaceTask Files="@(NuspecFilesToUpdate)"
                          OutputDirectory="binaries\packages\specs\"
                          Pattern="__VERSION_%(SdkNuGetPackage.Identity)__"
                          Replacement="%(SdkNuGetPackage.PackageVersion)"
                          LogTask="false" />
    <Message Text="Created dynamic nuspec %(NuspecFilesToUpdate2.Identity)" />
  </Target>

  <!--
  Build NuGet packages
  -->
  <Target Name="Package" DependsOnTargets="BuildDynamicNuSpecs">
    <PropertyGroup>
      <!--Don't warn for putting dlls under tools folder.
       parameterize it when the repo starts to produce more than 1 package -->
      <NoWarnOnPack>-NoPackageAnalysis</NoWarnOnPack>
    </PropertyGroup>
    <Message Text="Generating NuGet library &amp; symbols + source packages" Importance="high" />
    <Exec Condition=" '%(SdkNuGetPackage.SkipSymbolSourcePackage)' != 'true' "
          Command="$(NuGetCommand) pack -BasePath &quot;%(SdkNuGetPackage.Folder)..&quot; -Verbosity $(NuGetVerbosity) &quot;binaries\packages\specs\%(SdkNuGetPackage.Identity).nuspec&quot; -Version %(SdkNuGetPackage.PackageVersion) -OutputDirectory &quot;$(PackageOutputDir)&quot; -Symbols $(NoWarnOnPack)" />

    <Message Text="Generating NuGet packages without symbol + source packages into $(PackageOutputDir)" Importance="high" />
    <Exec Condition=" '%(SdkNuGetPackage.SkipSymbolSourcePackage)' == 'true' "
          Command="$(NuGetCommand) pack -BasePath &quot;%(SdkNuGetPackage.Folder)..&quot; -Verbosity $(NuGetVerbosity) &quot;binaries\packages\specs\%(SdkNuGetPackage.Identity).nuspec&quot; -Version %(SdkNuGetPackage.PackageVersion) -OutputDirectory &quot;$(PackageOutputDir)&quot; -NoPackageAnalysis" />
  </Target>

  <!--
  Publish NuGet packages
  -->
  <Target Name="Publish">
    <Error Condition=" '$(NuGetKey)' == '' " Text="You must provide the NuGetKey parameter to the build: /p:NuGetKey=YOUR_PUBLISHING_KEY" />

    <PropertyGroup>
      <ActualSource Condition=" '$(NuGetPublishingSource)' == '' "></ActualSource>
      <ActualSource Condition=" '$(NuGetPublishingSource)' != '' "> -Source $(NuGetPublishingSource)</ActualSource>
    </PropertyGroup>

    <Message Importance="high" Text="Publishing NuGet packages to the cloud at $(NuGetPublishingSource)" />
    <Exec Command="$(NuGetCommand) push &quot;$(PackageOutputDir)\%(SdkNuGetPackage.Identity).%(SdkNuGetPackage.PackageVersion).nupkg&quot; $(NuGetKey)$(ActualSource)"
          IgnoreExitCode="true" />
          
    <Message Text="Unlisting %(SdkNuGetPackage.Identity) as Hidden is set to 'true' for the component."
             Condition=" '%(SdkNuGetPackage.Hidden)' == 'true' " />             
    <Exec Command="$(NuGetCommand) delete %(SdkNuGetPackage.Identity) %(SdkNuGetPackage.PackageVersion) -ApiKey $(NuGetKey) -Source $(ActualSource) -NoPrompt" 
             IgnoreExitCode="true" Condition=" '%(SdkNuGetPackage.Hidden)' == 'true' " />

    <Message Importance="high" Text="Publishing NuGet symbol &amp; source packages to the cloud at $(NuGetSymbolPublishingSource)"
             Condition=" $(NuGetSymbolPublishingSource) != '' "/>
    <Exec Command="$(NuGetCommand) push &quot;$(PackageOutputDir)\%(SdkNuGetPackage.Identity).%(SdkNuGetPackage.PackageVersion).Symbols.nupkg&quot; $(NuGetKey) -Source $(NuGetSymbolPublishingSource)"
          Condition=" $(NuGetSymbolPublishingSource) != '' And '%(SdkNuGetPackage.Publish)' != 'false' And '%(SdkNuGetPackage.SkipSymbolSourcePackage)' != 'true' And '$(PublishSymbolSourcePackages)' == 'true' "
          IgnoreExitCode="true"
          ContinueOnError="true" />

    <Warning Text="Symbol/source packages are not being pushed. The PublishSymbolSourcePackages property is not set to true."
             Condition=" '$(PublishSymbolSourcePackages)' != 'true' " />
  </Target>
</Project>