<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <NightlyBuildVersion Condition=" $(NightlyBuild) == 'true' ">$([System.DateTime]::Now.ToString("yyyyMMdd"))</NightlyBuildVersion>
    <NightlyBuildVersion Condition=" $(NightlyBuild) == 'true' ">-Nightly$(NightlyBuildVersion)</NightlyBuildVersion>
  </PropertyGroup>

  <Import Project="$(LibrarySourceFolder)\src\core\AutoRest.Core\*.nuget.proj" Condition=" '$(Scope)' == 'all' or '$(Scope)' == 'CodeGenerator' "/>

  <PropertyGroup>
    <NuGetVerbosity>normal</NuGetVerbosity>
    <PublishSymbolSourcePackages>true</PublishSymbolSourcePackages>
  </PropertyGroup>

  <UsingTask AssemblyFile="AutoRest.Build.Tasks.dll" TaskName="RegexReplaceTask" />
  <Target Name="EnsureBinariesFolderExists">
    <MakeDir Directories="binaries" Condition="!Exists('binaries')" />
    <MakeDir Directories="binaries\packages" Condition="!Exists('binaries\packages')" />
    <MakeDir Directories="binaries\packages\specs" Condition="!Exists('binaries\packages\specs')" />
  </Target>

  <!-- Replacing version token dependency. -->
  <Target Name="BuildDynamicNuSpecs" Condition=" @(SdkNuGetPackage) != '' "
          DependsOnTargets="EnsureBinariesFolderExists">
    <!-- Copy nuspec files to binaries folder. -->
    <Message Text="Updating dynamic nuspec %(SdkNuGetPackage.Folder)\%(SdkNuGetPackage.Name).nuspec" />
    <ItemGroup>
      <NuspecFilesToCopy Include="%(SdkNuGetPackage.Folder)\%(SdkNuGetPackage.Name).nuspec" />
    </ItemGroup>
    <Copy SourceFiles="@(NuspecFilesToCopy)" DestinationFolder="binaries\packages\specs"/>
    <!-- Update version string. -->
    <ItemGroup>
      <NuspecFilesToUpdate Include="binaries\packages\specs\*.nuspec" />
    </ItemGroup>
    <RegexReplaceTask Files="@(NuspecFilesToUpdate)"
                          OutputDirectory="binaries\packages\specs\"
                          Pattern="__VERSION_%(SdkNuGetPackage.Name)__"
                          Replacement="%(SdkNuGetPackage.PackageVersion)"
                          LogTask="false" />
    <RegexReplaceTask Files="@(NuspecFilesToUpdate)"
                          OutputDirectory="binaries\packages\specs\"
                          Pattern=".pdb"
                          Replacement=".dll.mdb"
                          LogTask="false"
                          Condition=" '$(OS)' != 'Windows_NT'"/>
    <Message Text="Created dynamic nuspec %(NuspecFilesToUpdate.Name)" />
  </Target>

  <!--
  Build NuGet packages
  -->
  <Target Name="Package" Condition=" @(SdkNuGetPackage) != '' " DependsOnTargets="BuildDynamicNuSpecs">
    <Message Text="Generating NuGet library &amp; symbols + source packages" Importance="high" />
    <Exec Condition=" '%(SdkNuGetPackage.NoPackageAnalysis)' != 'true' "
      Command="$(NuGetCommand) pack $(PackageOutputDir)\specs\%(SdkNuGetPackage.Name).nuspec -BasePath $(LibraryRoot) -Verbosity $(NuGetVerbosity) -Version %(SdkNuGetPackage.PackageVersion) -OutputDirectory $(PackageOutputDir) -Symbols $(NoWarnOnPack)" />

    <Exec Condition=" '%(SdkNuGetPackage.NoPackageAnalysis)' == 'true' "
      Command="$(NuGetCommand) pack $(PackageOutputDir)\specs\%(SdkNuGetPackage.Name).nuspec -BasePath $(LibraryRoot) -NoPackageAnalysis -Verbosity $(NuGetVerbosity) -Version %(SdkNuGetPackage.PackageVersion) -OutputDirectory $(PackageOutputDir) -Symbols $(NoWarnOnPack)" />
      
    <CallTarget Targets="PackageAutoRestZip" Condition=" '$(Scope)' == 'all' or '$(Scope)' == 'CodeGenerator'"/>  
  </Target>
  
  <Target Name="PackageAutoRestZip" DependsOnTargets="GetZip">
    <ItemGroup>
      <_NugetPackages Include="$(PackageOutputDir)\autorest.*.nupkg" Exclude="$(PackageOutputDir)\autorest.*symbols.nupkg"/>
    </ItemGroup> 
    <RemoveDir Directories="@(_NugetPackages->'$(PackageOutputDir)\%(Filename)')" ContinueOnError="false" />
    
    <Exec Command="$(ZipExe) x -y -scsUTF-8 -o@(_NugetPackages->'$(PackageOutputDir)\%(Filename)') %(_NugetPackages.Identity)" />

    <Exec Command="$(ZipExe) a -tzip -mx9 -r -y @(_NugetPackages->'$(PackageOutputDir)\%(Filename)').zip" WorkingDirectory="@(_NugetPackages->'$(PackageOutputDir)\%(Filename)\tools')" />
    
    <RemoveDir Directories="@(_NugetPackages->'$(PackageOutputDir)\%(Filename)')" ContinueOnError="false" />
  </Target>

  <!--
  Publish NuGet packages
  -->
  <Target Name="Publish">
    <Error Condition=" '$(NuGetKey)' == '' " Text="You must provide the NuGetKey parameter to the build: /p:NuGetKey=YOUR_PUBLISHING_KEY" />
    <ItemGroup>
      <NugetPackagesToPublish Include="$(PackageOutputDir)\*.nupkg" Exclude="$(PackageOutputDir)\*.symbols.nupkg"/>
      <SymbolPackagesToPublish Include="$(PackageOutputDir)\*.symbols.nupkg"/>
    </ItemGroup>
    <PropertyGroup>
      <NugetSource Condition=" '$(NuGetPublishingSource)' == '' ">https://www.nuget.org/api/v2/package/</NugetSource>
      <NugetSource Condition=" '$(NuGetPublishingSource)' != '' ">$(NuGetPublishingSource)</NugetSource>
      <SymbolSource Condition=" '$(SymbolPublishingSource)' == '' ">https://nuget.smbsrc.net/</SymbolSource>
      <SymbolSource Condition=" '$(SymbolPublishingSource)' != '' ">$(SymbolPublishingSource)</SymbolSource>      
    </PropertyGroup>

    <Message Importance="high" Text="Publishing main package to the cloud at $(NugetSource)" />
    <Exec Command="$(NuGetCommand) push &quot;%(NugetPackagesToPublish.FullPath)&quot; $(NuGetKey) -Source $(NugetSource)"
          IgnoreExitCode="true" />
    <Message Importance="high" Text="Publishing symbols package to the cloud at $(SymbolSource)" />
    <Exec Command="$(NuGetCommand) push &quot;%(SymbolPackagesToPublish.FullPath)&quot; $(NuGetKey) -Source $(SymbolSource)"
          IgnoreExitCode="true" />          
  </Target>
</Project>
