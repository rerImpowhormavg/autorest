/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package storage;

import .models.UsageListResult;
import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Usages.
 */
public interface Usages {
    /**
     * Gets the current usage count and the limit for the resources under the subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UsageListResult object if successful.
     */
    UsageListResult list();

    /**
     * Gets the current usage count and the limit for the resources under the subscription.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<UsageListResult> listAsync(final ServiceCallback<UsageListResult> serviceCallback);

    /**
     * Gets the current usage count and the limit for the resources under the subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UsageListResult object
     */
    Observable<UsageListResult> listAsync();

    /**
     * Gets the current usage count and the limit for the resources under the subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UsageListResult object
     */
    Observable<ServiceResponse<UsageListResult>> listWithServiceResponseAsync();

}
