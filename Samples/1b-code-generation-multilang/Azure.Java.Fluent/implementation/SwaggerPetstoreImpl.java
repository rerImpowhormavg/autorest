/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package petstore.implementation;

import .ErrorException;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureClient;
import com.microsoft.azure.AzureServiceClient;
import com.microsoft.rest.credentials.ServiceClientCredentials;
import com.microsoft.rest.RestClient;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseWithHeaders;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * Initializes a new instance of the SwaggerPetstoreImpl class.
 */
public class SwaggerPetstoreImpl extends AzureServiceClient {
    /** The Retrofit service to perform REST calls. */
    private SwaggerPetstoreService service;
    /** the {@link AzureClient} used for long running operations. */
    private AzureClient azureClient;

    /**
     * Gets the {@link AzureClient} used for long running operations.
     * @return the azure client;
     */
    public AzureClient getAzureClient() {
        return this.azureClient;
    }

    /** Gets or sets the preferred language for the response. */
    private String acceptLanguage;

    /**
     * Gets Gets or sets the preferred language for the response.
     *
     * @return the acceptLanguage value.
     */
    public String acceptLanguage() {
        return this.acceptLanguage;
    }

    /**
     * Sets Gets or sets the preferred language for the response.
     *
     * @param acceptLanguage the acceptLanguage value.
     * @return the service client itself
     */
    public SwaggerPetstoreImpl withAcceptLanguage(String acceptLanguage) {
        this.acceptLanguage = acceptLanguage;
        return this;
    }

    /** Gets or sets the retry timeout in seconds for Long Running Operations. Default value is 30. */
    private int longRunningOperationRetryTimeout;

    /**
     * Gets Gets or sets the retry timeout in seconds for Long Running Operations. Default value is 30.
     *
     * @return the longRunningOperationRetryTimeout value.
     */
    public int longRunningOperationRetryTimeout() {
        return this.longRunningOperationRetryTimeout;
    }

    /**
     * Sets Gets or sets the retry timeout in seconds for Long Running Operations. Default value is 30.
     *
     * @param longRunningOperationRetryTimeout the longRunningOperationRetryTimeout value.
     * @return the service client itself
     */
    public SwaggerPetstoreImpl withLongRunningOperationRetryTimeout(int longRunningOperationRetryTimeout) {
        this.longRunningOperationRetryTimeout = longRunningOperationRetryTimeout;
        return this;
    }

    /** When set to true a unique x-ms-client-request-id value is generated and included in each request. Default is true. */
    private boolean generateClientRequestId;

    /**
     * Gets When set to true a unique x-ms-client-request-id value is generated and included in each request. Default is true.
     *
     * @return the generateClientRequestId value.
     */
    public boolean generateClientRequestId() {
        return this.generateClientRequestId;
    }

    /**
     * Sets When set to true a unique x-ms-client-request-id value is generated and included in each request. Default is true.
     *
     * @param generateClientRequestId the generateClientRequestId value.
     * @return the service client itself
     */
    public SwaggerPetstoreImpl withGenerateClientRequestId(boolean generateClientRequestId) {
        this.generateClientRequestId = generateClientRequestId;
        return this;
    }

    /**
     * Initializes an instance of SwaggerPetstore client.
     *
     * @param credentials the management credentials for Azure
     */
    public SwaggerPetstoreImpl(ServiceClientCredentials credentials) {
        this("http://petstore.swagger.io/v1", credentials);
    }

    /**
     * Initializes an instance of SwaggerPetstore client.
     *
     * @param baseUrl the base URL of the host
     * @param credentials the management credentials for Azure
     */
    public SwaggerPetstoreImpl(String baseUrl, ServiceClientCredentials credentials) {
        super(baseUrl, credentials);
        initialize();
    }

    /**
     * Initializes an instance of SwaggerPetstore client.
     *
     * @param restClient the REST client to connect to Azure.
     */
    public SwaggerPetstoreImpl(RestClient restClient) {
        super(restClient);
        initialize();
    }

    protected void initialize() {
        this.acceptLanguage = "en-US";
        this.longRunningOperationRetryTimeout = 30;
        this.generateClientRequestId = true;
        this.azureClient = new AzureClient(this);
        initializeService();
    }

    /**
     * Gets the User-Agent header for the client.
     *
     * @return the user agent string.
     */
    @Override
    public String userAgent() {
        return String.format("%s (%s, %s)", super.userAgent(), "SwaggerPetstore", "1.0.0");
    }

    private void initializeService() {
        service = restClient().retrofit().create(SwaggerPetstoreService.class);
    }

    /**
     * The interface defining all the services for SwaggerPetstore to be
     * used by Retrofit to perform actually REST calls.
     */
    interface SwaggerPetstoreService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: .SwaggerPetstore listPets" })
        @GET("pets")
        Observable<Response<ResponseBody>> listPets(@Query("limit") Integer limit, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: .SwaggerPetstore createPets" })
        @POST("pets")
        Observable<Response<ResponseBody>> createPets(@Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: .SwaggerPetstore showPetById" })
        @GET("pets/{petId}")
        Observable<Response<ResponseBody>> showPetById(@Path("petId") String petId, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * List all pets.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;PetInner&gt; object if successful.
     */
    public List<PetInner> listPets() {
        return listPetsWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * List all pets.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PetInner>> listPetsAsync(final ServiceCallback<List<PetInner>> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(listPetsWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * List all pets.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;PetInner&gt; object
     */
    public Observable<List<PetInner>> listPetsAsync() {
        return listPetsWithServiceResponseAsync().map(new Func1<ServiceResponseWithHeaders<List<PetInner>, ListPetsHeadersInner>, List<PetInner>>() {
            @Override
            public List<PetInner> call(ServiceResponseWithHeaders<List<PetInner>, ListPetsHeadersInner> response) {
                return response.body();
            }
        });
    }

    /**
     * List all pets.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;PetInner&gt; object
     */
    public Observable<ServiceResponseWithHeaders<List<PetInner>, ListPetsHeadersInner>> listPetsWithServiceResponseAsync() {
        final Integer limit = null;
        return service.listPets(limit, this.acceptLanguage(), this.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<List<PetInner>, ListPetsHeadersInner>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<List<PetInner>, ListPetsHeadersInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<List<PetInner>, ListPetsHeadersInner> clientResponse = listPetsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * List all pets.
     *
     * @param limit How many items to return at one time (max 100)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;PetInner&gt; object if successful.
     */
    public List<PetInner> listPets(Integer limit) {
        return listPetsWithServiceResponseAsync(limit).toBlocking().single().body();
    }

    /**
     * List all pets.
     *
     * @param limit How many items to return at one time (max 100)
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PetInner>> listPetsAsync(Integer limit, final ServiceCallback<List<PetInner>> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(listPetsWithServiceResponseAsync(limit), serviceCallback);
    }

    /**
     * List all pets.
     *
     * @param limit How many items to return at one time (max 100)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;PetInner&gt; object
     */
    public Observable<List<PetInner>> listPetsAsync(Integer limit) {
        return listPetsWithServiceResponseAsync(limit).map(new Func1<ServiceResponseWithHeaders<List<PetInner>, ListPetsHeadersInner>, List<PetInner>>() {
            @Override
            public List<PetInner> call(ServiceResponseWithHeaders<List<PetInner>, ListPetsHeadersInner> response) {
                return response.body();
            }
        });
    }

    /**
     * List all pets.
     *
     * @param limit How many items to return at one time (max 100)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;PetInner&gt; object
     */
    public Observable<ServiceResponseWithHeaders<List<PetInner>, ListPetsHeadersInner>> listPetsWithServiceResponseAsync(Integer limit) {
        return service.listPets(limit, this.acceptLanguage(), this.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<List<PetInner>, ListPetsHeadersInner>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<List<PetInner>, ListPetsHeadersInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<List<PetInner>, ListPetsHeadersInner> clientResponse = listPetsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<List<PetInner>, ListPetsHeadersInner> listPetsDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return this.restClient().responseBuilderFactory().<List<PetInner>, ErrorException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<List<PetInner>>() { }.getType())
                .registerError(ErrorException.class)
                .buildWithHeaders(response, ListPetsHeadersInner.class);
    }

    /**
     * Create a pet.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void createPets() {
        createPetsWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Create a pet.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> createPetsAsync(final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(createPetsWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Create a pet.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> createPetsAsync() {
        return createPetsWithServiceResponseAsync().map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Create a pet.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> createPetsWithServiceResponseAsync() {
        return service.createPets(this.acceptLanguage(), this.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = createPetsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> createPetsDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return this.restClient().responseBuilderFactory().<Void, ErrorException>newInstance(this.serializerAdapter())
                .register(201, new TypeToken<Void>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Info for a specific pet.
     *
     * @param petId The id of the pet to retrieve
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;PetInner&gt; object if successful.
     */
    public List<PetInner> showPetById(String petId) {
        return showPetByIdWithServiceResponseAsync(petId).toBlocking().single().body();
    }

    /**
     * Info for a specific pet.
     *
     * @param petId The id of the pet to retrieve
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PetInner>> showPetByIdAsync(String petId, final ServiceCallback<List<PetInner>> serviceCallback) {
        return ServiceFuture.fromResponse(showPetByIdWithServiceResponseAsync(petId), serviceCallback);
    }

    /**
     * Info for a specific pet.
     *
     * @param petId The id of the pet to retrieve
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;PetInner&gt; object
     */
    public Observable<List<PetInner>> showPetByIdAsync(String petId) {
        return showPetByIdWithServiceResponseAsync(petId).map(new Func1<ServiceResponse<List<PetInner>>, List<PetInner>>() {
            @Override
            public List<PetInner> call(ServiceResponse<List<PetInner>> response) {
                return response.body();
            }
        });
    }

    /**
     * Info for a specific pet.
     *
     * @param petId The id of the pet to retrieve
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;PetInner&gt; object
     */
    public Observable<ServiceResponse<List<PetInner>>> showPetByIdWithServiceResponseAsync(String petId) {
        if (petId == null) {
            throw new IllegalArgumentException("Parameter petId is required and cannot be null.");
        }
        return service.showPetById(petId, this.acceptLanguage(), this.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<PetInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<PetInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<PetInner>> clientResponse = showPetByIdDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<List<PetInner>> showPetByIdDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<List<PetInner>, ErrorException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<List<PetInner>>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

}
