// Package  implements the Azure ARM  service API version 1.0.0.
//
//
package

// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
    "github.com/Azure/go-autorest/autorest"
    "github.com/Azure/go-autorest/autorest/azure"
    "net/http"
)

const (
        // DefaultBaseURI is the default URI used for the service
        DefaultBaseURI = "http://petstore.swagger.io/v1"
)

// ManagementClient is the base client for .
type ManagementClient struct {
    autorest.Client
        BaseURI string
    }

// New creates an instance of the ManagementClient client.
func New()ManagementClient {
        return NewWithBaseURI(DefaultBaseURI, )
}

    // NewWithBaseURI creates an instance of the ManagementClient client.
    func NewWithBaseURI(baseURI string, ) ManagementClient {
        return ManagementClient{
            Client: autorest.NewClientWithUserAgent(UserAgent()),
            BaseURI: baseURI,
        }
    }

    // CreatePets sends the create pets request.
    func (client ManagementClient) CreatePets() (result autorest.Response, err error) {
        req, err := client.CreatePetsPreparer()
        if err != nil {
            err = autorest.NewErrorWithError(err, ".ManagementClient", "CreatePets", nil , "Failure preparing request")
            return
        }

        resp, err := client.CreatePetsSender(req)
        if err != nil {
            result.Response = resp
            err = autorest.NewErrorWithError(err, ".ManagementClient", "CreatePets", resp, "Failure sending request")
            return
        }

        result, err = client.CreatePetsResponder(resp)
        if err != nil {
            err = autorest.NewErrorWithError(err, ".ManagementClient", "CreatePets", resp, "Failure responding to request")
        }

        return
    }

    // CreatePetsPreparer prepares the CreatePets request.
    func (client ManagementClient) CreatePetsPreparer() (*http.Request, error) {
        preparer := autorest.CreatePreparer(
                            autorest.AsPost(),
                            autorest.WithBaseURL(client.BaseURI),
                            autorest.WithPath("/pets"))
        return preparer.Prepare(&http.Request{})
    }

    // CreatePetsSender sends the CreatePets request. The method will close the
    // http.Response Body if it receives an error.
    func (client ManagementClient) CreatePetsSender(req *http.Request) (*http.Response, error) {
        return autorest.SendWithSender(client, req)
    }

    // CreatePetsResponder handles the response to the CreatePets request. The method always
    // closes the http.Response Body.
    func (client ManagementClient) CreatePetsResponder(resp *http.Response) (result autorest.Response, err error) {
        err = autorest.Respond(
                resp,
                client.ByInspecting(),
                azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusCreated),
                autorest.ByClosing())
        result.Response = resp
        return
    }

    // ListPets sends the list pets request.
    //
    // limit is how many items to return at one time (max 100)
    func (client ManagementClient) ListPets(limit *int32) (result ListPetType, err error) {
        req, err := client.ListPetsPreparer(limit)
        if err != nil {
            err = autorest.NewErrorWithError(err, ".ManagementClient", "ListPets", nil , "Failure preparing request")
            return
        }

        resp, err := client.ListPetsSender(req)
        if err != nil {
            result.Response = autorest.Response{Response: resp}
            err = autorest.NewErrorWithError(err, ".ManagementClient", "ListPets", resp, "Failure sending request")
            return
        }

        result, err = client.ListPetsResponder(resp)
        if err != nil {
            err = autorest.NewErrorWithError(err, ".ManagementClient", "ListPets", resp, "Failure responding to request")
        }

        return
    }

    // ListPetsPreparer prepares the ListPets request.
    func (client ManagementClient) ListPetsPreparer(limit *int32) (*http.Request, error) {
        queryParameters := map[string]interface{} {
        }
        if limit != nil {
            queryParameters["limit"] = autorest.Encode("query",*limit)
        }

        preparer := autorest.CreatePreparer(
                            autorest.AsGet(),
                            autorest.WithBaseURL(client.BaseURI),
                            autorest.WithPath("/pets"),
                            autorest.WithQueryParameters(queryParameters))
        return preparer.Prepare(&http.Request{})
    }

    // ListPetsSender sends the ListPets request. The method will close the
    // http.Response Body if it receives an error.
    func (client ManagementClient) ListPetsSender(req *http.Request) (*http.Response, error) {
        return autorest.SendWithSender(client, req)
    }

    // ListPetsResponder handles the response to the ListPets request. The method always
    // closes the http.Response Body.
    func (client ManagementClient) ListPetsResponder(resp *http.Response) (result ListPetType, err error) {
        err = autorest.Respond(
                resp,
                client.ByInspecting(),
                azure.WithErrorUnlessStatusCode(http.StatusOK),
                autorest.ByUnmarshallingJSON(&result.Value),
                autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
        return
    }

    // ShowPetByID sends the show pet by id request.
    //
    // petID is the id of the pet to retrieve
    func (client ManagementClient) ShowPetByID(petID string) (result ListPetType, err error) {
        req, err := client.ShowPetByIDPreparer(petID)
        if err != nil {
            err = autorest.NewErrorWithError(err, ".ManagementClient", "ShowPetByID", nil , "Failure preparing request")
            return
        }

        resp, err := client.ShowPetByIDSender(req)
        if err != nil {
            result.Response = autorest.Response{Response: resp}
            err = autorest.NewErrorWithError(err, ".ManagementClient", "ShowPetByID", resp, "Failure sending request")
            return
        }

        result, err = client.ShowPetByIDResponder(resp)
        if err != nil {
            err = autorest.NewErrorWithError(err, ".ManagementClient", "ShowPetByID", resp, "Failure responding to request")
        }

        return
    }

    // ShowPetByIDPreparer prepares the ShowPetByID request.
    func (client ManagementClient) ShowPetByIDPreparer(petID string) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "petId": autorest.Encode("path",petID),
        }

        preparer := autorest.CreatePreparer(
                            autorest.AsGet(),
                            autorest.WithBaseURL(client.BaseURI),
                            autorest.WithPathParameters("/pets/{petId}",pathParameters))
        return preparer.Prepare(&http.Request{})
    }

    // ShowPetByIDSender sends the ShowPetByID request. The method will close the
    // http.Response Body if it receives an error.
    func (client ManagementClient) ShowPetByIDSender(req *http.Request) (*http.Response, error) {
        return autorest.SendWithSender(client, req)
    }

    // ShowPetByIDResponder handles the response to the ShowPetByID request. The method always
    // closes the http.Response Body.
    func (client ManagementClient) ShowPetByIDResponder(resp *http.Response) (result ListPetType, err error) {
        err = autorest.Respond(
                resp,
                client.ByInspecting(),
                azure.WithErrorUnlessStatusCode(http.StatusOK),
                autorest.ByUnmarshallingJSON(&result.Value),
                autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
        return
    }

