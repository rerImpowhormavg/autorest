/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package streamwithcontenttype;

import .models.ImageType;
import .models.ImageTypeRestricted;
import .models.ImageTypeRestrictedStrings;
import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Images.
 */
public interface Images {
    /**
     *
     * @param image An image stream.
     * @param imageContentType The content type of the image. Possible values include: 'image/gif', 'image/jpeg', 'image/png', 'image/bmp', 'image/tiff'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void a(byte[] image, ImageType imageContentType);

    /**
     *
     * @param image An image stream.
     * @param imageContentType The content type of the image. Possible values include: 'image/gif', 'image/jpeg', 'image/png', 'image/bmp', 'image/tiff'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> aAsync(byte[] image, ImageType imageContentType, final ServiceCallback<Void> serviceCallback);

    /**
     *
     * @param image An image stream.
     * @param imageContentType The content type of the image. Possible values include: 'image/gif', 'image/jpeg', 'image/png', 'image/bmp', 'image/tiff'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> aAsync(byte[] image, ImageType imageContentType);

    /**
     *
     * @param image An image stream.
     * @param imageContentType The content type of the image. Possible values include: 'image/gif', 'image/jpeg', 'image/png', 'image/bmp', 'image/tiff'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> aWithServiceResponseAsync(byte[] image, ImageType imageContentType);

    /**
     *
     * @param image An image stream.
     * @param imageContentType The content type of the image. Possible values include: 'image/gif', 'image/jpeg', 'image/png', 'image/bmp', 'image/tiff'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void b(byte[] image, ImageType imageContentType);

    /**
     *
     * @param image An image stream.
     * @param imageContentType The content type of the image. Possible values include: 'image/gif', 'image/jpeg', 'image/png', 'image/bmp', 'image/tiff'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> bAsync(byte[] image, ImageType imageContentType, final ServiceCallback<Void> serviceCallback);

    /**
     *
     * @param image An image stream.
     * @param imageContentType The content type of the image. Possible values include: 'image/gif', 'image/jpeg', 'image/png', 'image/bmp', 'image/tiff'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> bAsync(byte[] image, ImageType imageContentType);

    /**
     *
     * @param image An image stream.
     * @param imageContentType The content type of the image. Possible values include: 'image/gif', 'image/jpeg', 'image/png', 'image/bmp', 'image/tiff'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> bWithServiceResponseAsync(byte[] image, ImageType imageContentType);

    /**
     *
     * @param image An image stream.
     * @param imageContentType The content type of the image. Possible values include: 'image/png', 'image/tiff'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void c(byte[] image, ImageTypeRestricted imageContentType);

    /**
     *
     * @param image An image stream.
     * @param imageContentType The content type of the image. Possible values include: 'image/png', 'image/tiff'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> cAsync(byte[] image, ImageTypeRestricted imageContentType, final ServiceCallback<Void> serviceCallback);

    /**
     *
     * @param image An image stream.
     * @param imageContentType The content type of the image. Possible values include: 'image/png', 'image/tiff'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> cAsync(byte[] image, ImageTypeRestricted imageContentType);

    /**
     *
     * @param image An image stream.
     * @param imageContentType The content type of the image. Possible values include: 'image/png', 'image/tiff'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> cWithServiceResponseAsync(byte[] image, ImageTypeRestricted imageContentType);

    /**
     *
     * @param image An image stream.
     * @param imageContentType The content type of the image. Possible values include: 'image/png', 'image/tiff'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void d(byte[] image, ImageTypeRestrictedStrings imageContentType);

    /**
     *
     * @param image An image stream.
     * @param imageContentType The content type of the image. Possible values include: 'image/png', 'image/tiff'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> dAsync(byte[] image, ImageTypeRestrictedStrings imageContentType, final ServiceCallback<Void> serviceCallback);

    /**
     *
     * @param image An image stream.
     * @param imageContentType The content type of the image. Possible values include: 'image/png', 'image/tiff'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> dAsync(byte[] image, ImageTypeRestrictedStrings imageContentType);

    /**
     *
     * @param image An image stream.
     * @param imageContentType The content type of the image. Possible values include: 'image/png', 'image/tiff'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> dWithServiceResponseAsync(byte[] image, ImageTypeRestrictedStrings imageContentType);

}
