/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package streamwithcontenttype.implementation;

import retrofit2.Retrofit;
import .Texts;
import com.google.common.reflect.TypeToken;
import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.InputStream;
import java.io.IOException;
import okhttp3.MediaType;
import okhttp3.RequestBody;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.POST;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Texts.
 */
public class TextsImpl implements Texts {
    /** The Retrofit service to perform REST calls. */
    private TextsService service;
    /** The service client containing this operation class. */
    private CowbellModeratorImpl client;

    /**
     * Initializes an instance of Texts.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public TextsImpl(Retrofit retrofit, CowbellModeratorImpl client) {
        this.service = retrofit.create(TextsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Texts to be
     * used by Retrofit to perform actually REST calls.
     */
    interface TextsService {
        @Headers({ "Content-Type: text/plain", "x-ms-logging-context: .Texts a" })
        @POST("ProcessImage/FunctionTA")
        Observable<Response<ResponseBody>> a(@Body RequestBody text, @Header("Content-Type") String contentType);

        @Headers({ "Content-Type: text/plain", "x-ms-logging-context: .Texts b" })
        @POST("ProcessImage/FunctionTB")
        Observable<Response<ResponseBody>> b(@Body RequestBody text, @Header("Content-Type") String contentType);

    }

    /**
     *
     * @param text A text stream.
     * @param contentType The content type of the image.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void a(byte[] text, String contentType) {
        aWithServiceResponseAsync(text, contentType).toBlocking().single().body();
    }

    /**
     *
     * @param text A text stream.
     * @param contentType The content type of the image.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> aAsync(byte[] text, String contentType, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(aWithServiceResponseAsync(text, contentType), serviceCallback);
    }

    /**
     *
     * @param text A text stream.
     * @param contentType The content type of the image.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> aAsync(byte[] text, String contentType) {
        return aWithServiceResponseAsync(text, contentType).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     *
     * @param text A text stream.
     * @param contentType The content type of the image.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> aWithServiceResponseAsync(byte[] text, String contentType) {
        if (text == null) {
            throw new IllegalArgumentException("Parameter text is required and cannot be null.");
        }
        if (contentType == null) {
            throw new IllegalArgumentException("Parameter contentType is required and cannot be null.");
        }
        RequestBody textConverted = RequestBody.create(MediaType.parse("text/plain"), text);
        return service.a(textConverted, contentType)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = aDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> aDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .build(response);
    }

    /**
     *
     * @param text A text stream.
     * @param contentType The content type of the image.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void b(byte[] text, String contentType) {
        bWithServiceResponseAsync(text, contentType).toBlocking().single().body();
    }

    /**
     *
     * @param text A text stream.
     * @param contentType The content type of the image.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> bAsync(byte[] text, String contentType, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(bWithServiceResponseAsync(text, contentType), serviceCallback);
    }

    /**
     *
     * @param text A text stream.
     * @param contentType The content type of the image.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> bAsync(byte[] text, String contentType) {
        return bWithServiceResponseAsync(text, contentType).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     *
     * @param text A text stream.
     * @param contentType The content type of the image.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> bWithServiceResponseAsync(byte[] text, String contentType) {
        if (text == null) {
            throw new IllegalArgumentException("Parameter text is required and cannot be null.");
        }
        if (contentType == null) {
            throw new IllegalArgumentException("Parameter contentType is required and cannot be null.");
        }
        RequestBody textConverted = RequestBody.create(MediaType.parse("text/plain"), text);
        return service.b(textConverted, contentType)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = bDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> bDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .build(response);
    }

}
