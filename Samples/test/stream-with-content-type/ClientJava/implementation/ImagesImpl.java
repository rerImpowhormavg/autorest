/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package streamwithcontenttype.implementation;

import retrofit2.Retrofit;
import .Images;
import .models.ImageType;
import .models.ImageTypeRestricted;
import .models.ImageTypeRestrictedStrings;
import com.google.common.reflect.TypeToken;
import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.InputStream;
import java.io.IOException;
import okhttp3.MediaType;
import okhttp3.RequestBody;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.POST;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Images.
 */
public class ImagesImpl implements Images {
    /** The Retrofit service to perform REST calls. */
    private ImagesService service;
    /** The service client containing this operation class. */
    private CowbellModeratorImpl client;

    /**
     * Initializes an instance of Images.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ImagesImpl(Retrofit retrofit, CowbellModeratorImpl client) {
        this.service = retrofit.create(ImagesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Images to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ImagesService {
        @Headers({ "Content-Type: image/gif", "x-ms-logging-context: .Images a" })
        @POST("ProcessImage/FunctionA")
        Observable<Response<ResponseBody>> a(@Body RequestBody image, @Header("Content-Type") ImageType imageContentType);

        @Headers({ "Content-Type: image/gif", "x-ms-logging-context: .Images b" })
        @POST("ProcessImage/FunctionB")
        Observable<Response<ResponseBody>> b(@Body RequestBody image, @Header("Content-Type") ImageType imageContentType);

        @Headers({ "Content-Type: image/png", "x-ms-logging-context: .Images c" })
        @POST("ProcessImage/FunctionC")
        Observable<Response<ResponseBody>> c(@Body RequestBody image, @Header("Content-Type") ImageTypeRestricted imageContentType);

        @Headers({ "Content-Type: image/png", "x-ms-logging-context: .Images d" })
        @POST("ProcessImage/FunctionD")
        Observable<Response<ResponseBody>> d(@Body RequestBody image, @Header("Content-Type") ImageTypeRestrictedStrings imageContentType);

    }

    /**
     *
     * @param image An image stream.
     * @param imageContentType The content type of the image. Possible values include: 'image/gif', 'image/jpeg', 'image/png', 'image/bmp', 'image/tiff'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void a(byte[] image, ImageType imageContentType) {
        aWithServiceResponseAsync(image, imageContentType).toBlocking().single().body();
    }

    /**
     *
     * @param image An image stream.
     * @param imageContentType The content type of the image. Possible values include: 'image/gif', 'image/jpeg', 'image/png', 'image/bmp', 'image/tiff'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> aAsync(byte[] image, ImageType imageContentType, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(aWithServiceResponseAsync(image, imageContentType), serviceCallback);
    }

    /**
     *
     * @param image An image stream.
     * @param imageContentType The content type of the image. Possible values include: 'image/gif', 'image/jpeg', 'image/png', 'image/bmp', 'image/tiff'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> aAsync(byte[] image, ImageType imageContentType) {
        return aWithServiceResponseAsync(image, imageContentType).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     *
     * @param image An image stream.
     * @param imageContentType The content type of the image. Possible values include: 'image/gif', 'image/jpeg', 'image/png', 'image/bmp', 'image/tiff'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> aWithServiceResponseAsync(byte[] image, ImageType imageContentType) {
        if (image == null) {
            throw new IllegalArgumentException("Parameter image is required and cannot be null.");
        }
        if (imageContentType == null) {
            throw new IllegalArgumentException("Parameter imageContentType is required and cannot be null.");
        }
        RequestBody imageConverted = RequestBody.create(MediaType.parse("image/gif"), image);
        return service.a(imageConverted, imageContentType)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = aDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> aDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .build(response);
    }

    /**
     *
     * @param image An image stream.
     * @param imageContentType The content type of the image. Possible values include: 'image/gif', 'image/jpeg', 'image/png', 'image/bmp', 'image/tiff'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void b(byte[] image, ImageType imageContentType) {
        bWithServiceResponseAsync(image, imageContentType).toBlocking().single().body();
    }

    /**
     *
     * @param image An image stream.
     * @param imageContentType The content type of the image. Possible values include: 'image/gif', 'image/jpeg', 'image/png', 'image/bmp', 'image/tiff'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> bAsync(byte[] image, ImageType imageContentType, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(bWithServiceResponseAsync(image, imageContentType), serviceCallback);
    }

    /**
     *
     * @param image An image stream.
     * @param imageContentType The content type of the image. Possible values include: 'image/gif', 'image/jpeg', 'image/png', 'image/bmp', 'image/tiff'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> bAsync(byte[] image, ImageType imageContentType) {
        return bWithServiceResponseAsync(image, imageContentType).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     *
     * @param image An image stream.
     * @param imageContentType The content type of the image. Possible values include: 'image/gif', 'image/jpeg', 'image/png', 'image/bmp', 'image/tiff'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> bWithServiceResponseAsync(byte[] image, ImageType imageContentType) {
        if (image == null) {
            throw new IllegalArgumentException("Parameter image is required and cannot be null.");
        }
        if (imageContentType == null) {
            throw new IllegalArgumentException("Parameter imageContentType is required and cannot be null.");
        }
        RequestBody imageConverted = RequestBody.create(MediaType.parse("image/gif"), image);
        return service.b(imageConverted, imageContentType)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = bDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> bDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .build(response);
    }

    /**
     *
     * @param image An image stream.
     * @param imageContentType The content type of the image. Possible values include: 'image/png', 'image/tiff'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void c(byte[] image, ImageTypeRestricted imageContentType) {
        cWithServiceResponseAsync(image, imageContentType).toBlocking().single().body();
    }

    /**
     *
     * @param image An image stream.
     * @param imageContentType The content type of the image. Possible values include: 'image/png', 'image/tiff'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> cAsync(byte[] image, ImageTypeRestricted imageContentType, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(cWithServiceResponseAsync(image, imageContentType), serviceCallback);
    }

    /**
     *
     * @param image An image stream.
     * @param imageContentType The content type of the image. Possible values include: 'image/png', 'image/tiff'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> cAsync(byte[] image, ImageTypeRestricted imageContentType) {
        return cWithServiceResponseAsync(image, imageContentType).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     *
     * @param image An image stream.
     * @param imageContentType The content type of the image. Possible values include: 'image/png', 'image/tiff'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> cWithServiceResponseAsync(byte[] image, ImageTypeRestricted imageContentType) {
        if (image == null) {
            throw new IllegalArgumentException("Parameter image is required and cannot be null.");
        }
        if (imageContentType == null) {
            throw new IllegalArgumentException("Parameter imageContentType is required and cannot be null.");
        }
        RequestBody imageConverted = RequestBody.create(MediaType.parse("image/png"), image);
        return service.c(imageConverted, imageContentType)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = cDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> cDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .build(response);
    }

    /**
     *
     * @param image An image stream.
     * @param imageContentType The content type of the image. Possible values include: 'image/png', 'image/tiff'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void d(byte[] image, ImageTypeRestrictedStrings imageContentType) {
        dWithServiceResponseAsync(image, imageContentType).toBlocking().single().body();
    }

    /**
     *
     * @param image An image stream.
     * @param imageContentType The content type of the image. Possible values include: 'image/png', 'image/tiff'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> dAsync(byte[] image, ImageTypeRestrictedStrings imageContentType, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(dWithServiceResponseAsync(image, imageContentType), serviceCallback);
    }

    /**
     *
     * @param image An image stream.
     * @param imageContentType The content type of the image. Possible values include: 'image/png', 'image/tiff'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> dAsync(byte[] image, ImageTypeRestrictedStrings imageContentType) {
        return dWithServiceResponseAsync(image, imageContentType).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     *
     * @param image An image stream.
     * @param imageContentType The content type of the image. Possible values include: 'image/png', 'image/tiff'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> dWithServiceResponseAsync(byte[] image, ImageTypeRestrictedStrings imageContentType) {
        if (image == null) {
            throw new IllegalArgumentException("Parameter image is required and cannot be null.");
        }
        if (imageContentType == null) {
            throw new IllegalArgumentException("Parameter imageContentType is required and cannot be null.");
        }
        RequestBody imageConverted = RequestBody.create(MediaType.parse("image/png"), image);
        return service.d(imageConverted, imageContentType)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = dDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> dDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .build(response);
    }

}
