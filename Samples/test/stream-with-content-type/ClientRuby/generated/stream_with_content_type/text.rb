# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module StreamWithContentType
  #
  # Text
  #
  class Text

    #
    # Creates and initializes a new instance of the Text class.
    # @param client service class for accessing basic functionality.
    #
    def initialize(client)
      @client = client
    end

    # @return [CowbellModerator] reference to the CowbellModerator
    attr_reader :client

    #
    # @param text A text stream.
    # @param content_type [String] The content type of the image.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def a(text, content_type, custom_headers = nil)
      response = a_async(text, content_type, custom_headers).value!
      nil
    end

    #
    # @param text A text stream.
    # @param content_type [String] The content type of the image.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def a_with_http_info(text, content_type, custom_headers = nil)
      a_async(text, content_type, custom_headers).value!
    end

    #
    # @param text A text stream.
    # @param content_type [String] The content type of the image.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def a_async(text, content_type, custom_headers = nil)
      fail ArgumentError, 'text is nil' if text.nil?
      fail ArgumentError, 'content_type is nil' if content_type.nil?


      request_headers = {}

      # Set Headers
      fail RuntimeError, 'Header Content-Type is forbidden to change'
      request_headers['Content-Type'] = content_type unless content_type.nil?

      request_headers['Content-Type'] = 'text/plain'

      # Serialize Request
      request_mapper = {
        required: true,
        serialized_name: 'Text',
        type: {
          name: 'Stream'
        }
      }
      request_content = @client.serialize(request_mapper,  text)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'ProcessImage/FunctionTA'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # @param text A text stream.
    # @param content_type [String] The content type of the image.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def b(text, content_type, custom_headers = nil)
      response = b_async(text, content_type, custom_headers).value!
      nil
    end

    #
    # @param text A text stream.
    # @param content_type [String] The content type of the image.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def b_with_http_info(text, content_type, custom_headers = nil)
      b_async(text, content_type, custom_headers).value!
    end

    #
    # @param text A text stream.
    # @param content_type [String] The content type of the image.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def b_async(text, content_type, custom_headers = nil)
      fail ArgumentError, 'text is nil' if text.nil?
      fail ArgumentError, 'content_type is nil' if content_type.nil?


      request_headers = {}

      # Set Headers
      fail RuntimeError, 'Header Content-Type is forbidden to change'
      request_headers['Content-Type'] = content_type unless content_type.nil?

      request_headers['Content-Type'] = 'text/plain'

      # Serialize Request
      request_mapper = {
        required: true,
        serialized_name: 'Text',
        type: {
          name: 'Stream'
        }
      }
      request_content = @client.serialize(request_mapper,  text)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'ProcessImage/FunctionTB'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

  end
end
