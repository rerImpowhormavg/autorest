{
  "definitions": {
    "AddressSpace": {
      "description": "AddressSpace contains an array of IP address ranges that can be used by subnets of the virtual network.",
      "properties": {
        "addressPrefixes": {
          "description": "A list of address blocks reserved for this virtual network in CIDR notation.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      }
    },
    "ApplicationGateway": {
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "description": "Application gateway resource",
      "properties": {
        "etag": {
          "description": "A unique read-only string that changes whenever the resource is updated.",
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/ApplicationGatewayPropertiesFormat",
          "x-ms-client-flatten": true
        }
      }
    },
    "ApplicationGatewayAuthenticationCertificate": {
      "allOf": [
        {
          "$ref": "#/definitions/SubResource"
        }
      ],
      "description": "Authentication certificates of an application gateway.",
      "properties": {
        "etag": {
          "description": "A unique read-only string that changes whenever the resource is updated.",
          "type": "string"
        },
        "name": {
          "description": "Name of the resource that is unique within a resource group. This name can be used to access the resource.",
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/ApplicationGatewayAuthenticationCertificatePropertiesFormat",
          "x-ms-client-flatten": true
        }
      }
    },
    "ApplicationGatewayAuthenticationCertificatePropertiesFormat": {
      "description": "Authentication certificates properties of an application gateway.",
      "properties": {
        "data": {
          "description": "Certificate public data.",
          "type": "string"
        },
        "provisioningState": {
          "description": "Provisioning state of the authentication certificate resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
          "type": "string"
        }
      }
    },
    "ApplicationGatewayBackendAddress": {
      "description": "Backend address of an application gateway.",
      "properties": {
        "fqdn": {
          "description": "Fully qualified domain name (FQDN).",
          "type": "string"
        },
        "ipAddress": {
          "description": "IP address",
          "type": "string"
        }
      }
    },
    "ApplicationGatewayBackendAddressPool": {
      "allOf": [
        {
          "$ref": "#/definitions/SubResource"
        }
      ],
      "description": "Backend Address Pool of an application gateway.",
      "properties": {
        "etag": {
          "description": "A unique read-only string that changes whenever the resource is updated.",
          "type": "string"
        },
        "name": {
          "description": "Resource that is unique within a resource group. This name can be used to access the resource.",
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/ApplicationGatewayBackendAddressPoolPropertiesFormat",
          "x-ms-client-flatten": true
        }
      }
    },
    "ApplicationGatewayBackendAddressPoolPropertiesFormat": {
      "description": "Properties of Backend Address Pool of an application gateway.",
      "properties": {
        "backendAddresses": {
          "description": "Backend addresses",
          "items": {
            "$ref": "#/definitions/ApplicationGatewayBackendAddress"
          },
          "type": "array"
        },
        "backendIPConfigurations": {
          "description": "Collection of references to IPs defined in network interfaces.",
          "items": {
            "$ref": "#/definitions/NetworkInterfaceIPConfiguration"
          },
          "type": "array"
        },
        "provisioningState": {
          "description": "Provisioning state of the backend address pool resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
          "type": "string"
        }
      }
    },
    "ApplicationGatewayBackendHealth": {
      "description": "List of ApplicationGatewayBackendHealthPool resources.",
      "properties": {
        "backendAddressPools": {
          "items": {
            "$ref": "#/definitions/ApplicationGatewayBackendHealthPool"
          },
          "type": "array"
        }
      }
    },
    "ApplicationGatewayBackendHealthHttpSettings": {
      "description": "Application gateway BackendHealthHttp settings.",
      "properties": {
        "backendHttpSettings": {
          "$ref": "#/definitions/ApplicationGatewayBackendHttpSettings",
          "description": "Reference of an ApplicationGatewayBackendHttpSettings resource."
        },
        "servers": {
          "description": "List of ApplicationGatewayBackendHealthServer resources.",
          "items": {
            "$ref": "#/definitions/ApplicationGatewayBackendHealthServer"
          },
          "type": "array"
        }
      }
    },
    "ApplicationGatewayBackendHealthPool": {
      "description": "Application gateway BackendHealth pool.",
      "properties": {
        "backendAddressPool": {
          "$ref": "#/definitions/ApplicationGatewayBackendAddressPool",
          "description": "Reference of an ApplicationGatewayBackendAddressPool resource."
        },
        "backendHttpSettingsCollection": {
          "description": "List of ApplicationGatewayBackendHealthHttpSettings resources.",
          "items": {
            "$ref": "#/definitions/ApplicationGatewayBackendHealthHttpSettings"
          },
          "type": "array"
        }
      }
    },
    "ApplicationGatewayBackendHealthServer": {
      "description": "Application gateway backendhealth http settings.",
      "properties": {
        "address": {
          "description": "IP address or FQDN of backend server.",
          "type": "string"
        },
        "health": {
          "description": "Health of backend server. Possible values are: 'Unknown', 'Up', 'Down', and 'Partial'.",
          "enum": [
            "Unknown",
            "Up",
            "Down",
            "Partial"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "ApplicationGatewayBackendHealthServerHealth"
          }
        },
        "ipConfiguration": {
          "$ref": "#/definitions/SubResource",
          "description": "Reference of IP configuration of backend server."
        }
      }
    },
    "ApplicationGatewayBackendHttpSettings": {
      "allOf": [
        {
          "$ref": "#/definitions/SubResource"
        }
      ],
      "description": "Backend address pool settings of an application gateway.",
      "properties": {
        "etag": {
          "description": "A unique read-only string that changes whenever the resource is updated.",
          "type": "string"
        },
        "name": {
          "description": "Name of the resource that is unique within a resource group. This name can be used to access the resource.",
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/ApplicationGatewayBackendHttpSettingsPropertiesFormat",
          "x-ms-client-flatten": true
        }
      }
    },
    "ApplicationGatewayBackendHttpSettingsPropertiesFormat": {
      "description": "Properties of Backend address pool settings of an application gateway.",
      "properties": {
        "authenticationCertificates": {
          "description": "Array of references to application gateway authentication certificates.",
          "items": {
            "$ref": "#/definitions/SubResource"
          },
          "type": "array"
        },
        "connectionDraining": {
          "$ref": "#/definitions/ApplicationGatewayConnectionDraining",
          "description": "Connection draining of the backend http settings resource."
        },
        "cookieBasedAffinity": {
          "description": "Cookie based affinity. Possible values are: 'Enabled' and 'Disabled'.",
          "enum": [
            "Enabled",
            "Disabled"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "ApplicationGatewayCookieBasedAffinity"
          }
        },
        "port": {
          "description": "Port",
          "format": "int32",
          "type": "integer"
        },
        "probe": {
          "$ref": "#/definitions/SubResource",
          "description": "Probe resource of an application gateway."
        },
        "protocol": {
          "description": "Protocol. Possible values are: 'Http' and 'Https'.",
          "enum": [
            "Http",
            "Https"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "ApplicationGatewayProtocol"
          }
        },
        "provisioningState": {
          "description": "Provisioning state of the backend http settings resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
          "type": "string"
        },
        "requestTimeout": {
          "description": "Request timeout in seconds. Application Gateway will fail the request if response is not received within RequestTimeout. Acceptable values are from 1 second to 86400 seconds.",
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "ApplicationGatewayConnectionDraining": {
      "description": "Connection draining allows open connections to a backend server to be active for a specified time after the backend server got removed from the configuration.",
      "properties": {
        "drainTimeoutInSec": {
          "description": "The number of seconds connection draining is active. Acceptable values are from 1 second to 3600 seconds.",
          "exclusiveMaximum": false,
          "exclusiveMinimum": false,
          "format": "int32",
          "maximum": 3600,
          "minimum": 1,
          "type": "integer"
        },
        "enabled": {
          "description": "Whether connection draining is enabled or not.",
          "type": "boolean"
        }
      },
      "required": [
        "enabled",
        "drainTimeoutInSec"
      ]
    },
    "ApplicationGatewayFrontendIPConfiguration": {
      "allOf": [
        {
          "$ref": "#/definitions/SubResource"
        }
      ],
      "description": "Frontend IP configuration of an application gateway.",
      "properties": {
        "etag": {
          "description": "A unique read-only string that changes whenever the resource is updated.",
          "type": "string"
        },
        "name": {
          "description": "Name of the resource that is unique within a resource group. This name can be used to access the resource.",
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/ApplicationGatewayFrontendIPConfigurationPropertiesFormat",
          "x-ms-client-flatten": true
        }
      }
    },
    "ApplicationGatewayFrontendIPConfigurationPropertiesFormat": {
      "description": "Properties of Frontend IP configuration of an application gateway.",
      "properties": {
        "privateIPAddress": {
          "description": "PrivateIPAddress of the network interface IP Configuration.",
          "type": "string"
        },
        "privateIPAllocationMethod": {
          "description": "PrivateIP allocation method. Possible values are: 'Static' and 'Dynamic'.",
          "enum": [
            "Static",
            "Dynamic"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "IPAllocationMethod"
          }
        },
        "provisioningState": {
          "description": "Provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
          "type": "string"
        },
        "publicIPAddress": {
          "$ref": "#/definitions/SubResource",
          "description": "Reference of the PublicIP resource."
        },
        "subnet": {
          "$ref": "#/definitions/SubResource",
          "description": "Reference of the subnet resource."
        }
      }
    },
    "ApplicationGatewayFrontendPort": {
      "allOf": [
        {
          "$ref": "#/definitions/SubResource"
        }
      ],
      "description": "Frontend port of an application gateway.",
      "properties": {
        "etag": {
          "description": "A unique read-only string that changes whenever the resource is updated.",
          "type": "string"
        },
        "name": {
          "description": "Name of the resource that is unique within a resource group. This name can be used to access the resource.",
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/ApplicationGatewayFrontendPortPropertiesFormat",
          "x-ms-client-flatten": true
        }
      }
    },
    "ApplicationGatewayFrontendPortPropertiesFormat": {
      "description": "Properties of Frontend port of an application gateway.",
      "properties": {
        "port": {
          "description": "Frontend port",
          "format": "int32",
          "type": "integer"
        },
        "provisioningState": {
          "description": "Provisioning state of the frontend port resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
          "type": "string"
        }
      }
    },
    "ApplicationGatewayHttpListener": {
      "allOf": [
        {
          "$ref": "#/definitions/SubResource"
        }
      ],
      "description": "Http listener of an application gateway.",
      "properties": {
        "etag": {
          "description": "A unique read-only string that changes whenever the resource is updated.",
          "type": "string"
        },
        "name": {
          "description": "Name of the resource that is unique within a resource group. This name can be used to access the resource.",
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/ApplicationGatewayHttpListenerPropertiesFormat",
          "x-ms-client-flatten": true
        }
      }
    },
    "ApplicationGatewayHttpListenerPropertiesFormat": {
      "description": "Properties of HTTP listener of an application gateway.",
      "properties": {
        "frontendIPConfiguration": {
          "$ref": "#/definitions/SubResource",
          "description": "Frontend IP configuration resource of an application gateway."
        },
        "frontendPort": {
          "$ref": "#/definitions/SubResource",
          "description": "Frontend port resource of an application gateway."
        },
        "hostName": {
          "description": "Host name of HTTP listener.",
          "type": "string"
        },
        "protocol": {
          "description": "Protocol. Possible values are: 'Http' and 'Https'.",
          "enum": [
            "Http",
            "Https"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "ApplicationGatewayProtocol"
          }
        },
        "provisioningState": {
          "description": "Provisioning state of the HTTP listener resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
          "type": "string"
        },
        "requireServerNameIndication": {
          "description": "Applicable only if protocol is https. Enables SNI for multi-hosting.",
          "type": "boolean"
        },
        "sslCertificate": {
          "$ref": "#/definitions/SubResource",
          "description": "SSL certificate resource of an application gateway."
        }
      }
    },
    "ApplicationGatewayIPConfiguration": {
      "allOf": [
        {
          "$ref": "#/definitions/SubResource"
        }
      ],
      "description": "IP configuration of an application gateway. Currently 1 public and 1 private IP configuration is allowed.",
      "properties": {
        "etag": {
          "description": "A unique read-only string that changes whenever the resource is updated.",
          "type": "string"
        },
        "name": {
          "description": "Name of the resource that is unique within a resource group. This name can be used to access the resource.",
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/ApplicationGatewayIPConfigurationPropertiesFormat",
          "x-ms-client-flatten": true
        }
      }
    },
    "ApplicationGatewayIPConfigurationPropertiesFormat": {
      "description": "Properties of IP configuration of an application gateway.",
      "properties": {
        "provisioningState": {
          "description": "Provisioning state of the application gateway subnet resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
          "type": "string"
        },
        "subnet": {
          "$ref": "#/definitions/SubResource",
          "description": "Reference of the subnet resource. A subnet from where application gateway gets its private address."
        }
      }
    },
    "ApplicationGatewayListResult": {
      "description": "Response for ListApplicationGateways API service call.",
      "properties": {
        "nextLink": {
          "description": "URL to get the next set of results.",
          "type": "string"
        },
        "value": {
          "description": "List of an application gateways in a resource group.",
          "items": {
            "$ref": "#/definitions/ApplicationGateway"
          },
          "type": "array"
        }
      }
    },
    "ApplicationGatewayPathRule": {
      "allOf": [
        {
          "$ref": "#/definitions/SubResource"
        }
      ],
      "description": "Path rule of URL path map of an application gateway.",
      "properties": {
        "etag": {
          "description": "A unique read-only string that changes whenever the resource is updated.",
          "type": "string"
        },
        "name": {
          "description": "Name of the resource that is unique within a resource group. This name can be used to access the resource.",
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/ApplicationGatewayPathRulePropertiesFormat",
          "x-ms-client-flatten": true
        }
      }
    },
    "ApplicationGatewayPathRulePropertiesFormat": {
      "description": "Properties of probe of an application gateway.",
      "properties": {
        "backendAddressPool": {
          "$ref": "#/definitions/SubResource",
          "description": "Backend address pool resource of URL path map."
        },
        "backendHttpSettings": {
          "$ref": "#/definitions/SubResource",
          "description": "Backend http settings resource of URL path map."
        },
        "paths": {
          "description": "Path rules of URL path map.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "provisioningState": {
          "description": "Path rule of URL path map resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
          "type": "string"
        }
      }
    },
    "ApplicationGatewayProbe": {
      "allOf": [
        {
          "$ref": "#/definitions/SubResource"
        }
      ],
      "description": "Probe of the application gateway.",
      "properties": {
        "etag": {
          "description": "A unique read-only string that changes whenever the resource is updated.",
          "type": "string"
        },
        "name": {
          "description": "Name of the resource that is unique within a resource group. This name can be used to access the resource.",
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/ApplicationGatewayProbePropertiesFormat",
          "x-ms-client-flatten": true
        }
      }
    },
    "ApplicationGatewayProbePropertiesFormat": {
      "description": "Properties of probe of an application gateway.",
      "properties": {
        "host": {
          "description": "Host name to send the probe to.",
          "type": "string"
        },
        "interval": {
          "description": "The probing interval in seconds. This is the time interval between two consecutive probes. Acceptable values are from 1 second to 86400 seconds.",
          "format": "int32",
          "type": "integer"
        },
        "path": {
          "description": "Relative path of probe. Valid path starts from '/'. Probe is sent to <Protocol>://<host>:<port><path>",
          "type": "string"
        },
        "protocol": {
          "description": "Protocol. Possible values are: 'Http' and 'Https'.",
          "enum": [
            "Http",
            "Https"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "ApplicationGatewayProtocol"
          }
        },
        "provisioningState": {
          "description": "Provisioning state of the backend http settings resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
          "type": "string"
        },
        "timeout": {
          "description": "the probe timeout in seconds. Probe marked as failed if valid response is not received with this timeout period. Acceptable values are from 1 second to 86400 seconds.",
          "format": "int32",
          "type": "integer"
        },
        "unhealthyThreshold": {
          "description": "The probe retry count. Backend server is marked down after consecutive probe failure count reaches UnhealthyThreshold. Acceptable values are from 1 second to 20.",
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "ApplicationGatewayPropertiesFormat": {
      "description": "Properties of the application gateway.",
      "properties": {
        "authenticationCertificates": {
          "description": "Authentication certificates of the application gateway resource.",
          "items": {
            "$ref": "#/definitions/ApplicationGatewayAuthenticationCertificate"
          },
          "type": "array"
        },
        "backendAddressPools": {
          "description": "Backend address pool of the application gateway resource.",
          "items": {
            "$ref": "#/definitions/ApplicationGatewayBackendAddressPool"
          },
          "type": "array"
        },
        "backendHttpSettingsCollection": {
          "description": "Backend http settings of the application gateway resource.",
          "items": {
            "$ref": "#/definitions/ApplicationGatewayBackendHttpSettings"
          },
          "type": "array"
        },
        "frontendIPConfigurations": {
          "description": "Frontend IP addresses of the application gateway resource.",
          "items": {
            "$ref": "#/definitions/ApplicationGatewayFrontendIPConfiguration"
          },
          "type": "array"
        },
        "frontendPorts": {
          "description": "Frontend ports of the application gateway resource.",
          "items": {
            "$ref": "#/definitions/ApplicationGatewayFrontendPort"
          },
          "type": "array"
        },
        "gatewayIPConfigurations": {
          "description": "Subnets of application the gateway resource.",
          "items": {
            "$ref": "#/definitions/ApplicationGatewayIPConfiguration"
          },
          "type": "array"
        },
        "httpListeners": {
          "description": "Http listeners of the application gateway resource.",
          "items": {
            "$ref": "#/definitions/ApplicationGatewayHttpListener"
          },
          "type": "array"
        },
        "operationalState": {
          "description": "Operational state of the application gateway resource. Possible values are: 'Stopped', 'Started', 'Running', and 'Stopping'.",
          "enum": [
            "Stopped",
            "Starting",
            "Running",
            "Stopping"
          ],
          "readOnly": true,
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "ApplicationGatewayOperationalState"
          }
        },
        "probes": {
          "description": "Probes of the application gateway resource.",
          "items": {
            "$ref": "#/definitions/ApplicationGatewayProbe"
          },
          "type": "array"
        },
        "provisioningState": {
          "description": "Provisioning state of the application gateway resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
          "type": "string"
        },
        "requestRoutingRules": {
          "description": "Request routing rules of the application gateway resource.",
          "items": {
            "$ref": "#/definitions/ApplicationGatewayRequestRoutingRule"
          },
          "type": "array"
        },
        "resourceGuid": {
          "description": "Resource GUID property of the application gateway resource.",
          "type": "string"
        },
        "sku": {
          "$ref": "#/definitions/ApplicationGatewaySku",
          "description": "SKU of the application gateway resource."
        },
        "sslCertificates": {
          "description": "SSL certificates of the application gateway resource.",
          "items": {
            "$ref": "#/definitions/ApplicationGatewaySslCertificate"
          },
          "type": "array"
        },
        "sslPolicy": {
          "$ref": "#/definitions/ApplicationGatewaySslPolicy",
          "description": "SSL policy of the application gateway resource."
        },
        "urlPathMaps": {
          "description": "URL path map of the application gateway resource.",
          "items": {
            "$ref": "#/definitions/ApplicationGatewayUrlPathMap"
          },
          "type": "array"
        },
        "webApplicationFirewallConfiguration": {
          "$ref": "#/definitions/ApplicationGatewayWebApplicationFirewallConfiguration",
          "description": "Web application firewall configuration."
        }
      }
    },
    "ApplicationGatewayRequestRoutingRule": {
      "allOf": [
        {
          "$ref": "#/definitions/SubResource"
        }
      ],
      "description": "Request routing rule of an application gateway.",
      "properties": {
        "etag": {
          "description": "A unique read-only string that changes whenever the resource is updated.",
          "type": "string"
        },
        "name": {
          "description": "Name of the resource that is unique within a resource group. This name can be used to access the resource.",
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/ApplicationGatewayRequestRoutingRulePropertiesFormat",
          "x-ms-client-flatten": true
        }
      }
    },
    "ApplicationGatewayRequestRoutingRulePropertiesFormat": {
      "description": "Properties of request routing rule of the application gateway.",
      "properties": {
        "backendAddressPool": {
          "$ref": "#/definitions/SubResource",
          "description": "Backend address pool resource of the application gateway. "
        },
        "backendHttpSettings": {
          "$ref": "#/definitions/SubResource",
          "description": "Frontend port resource of the application gateway."
        },
        "httpListener": {
          "$ref": "#/definitions/SubResource",
          "description": "Http listener resource of the application gateway. "
        },
        "provisioningState": {
          "description": "Provisioning state of the request routing rule resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
          "type": "string"
        },
        "ruleType": {
          "description": "Rule type. Possible values are: 'Basic' and 'PathBasedRouting'.",
          "enum": [
            "Basic",
            "PathBasedRouting"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "ApplicationGatewayRequestRoutingRuleType"
          }
        },
        "urlPathMap": {
          "$ref": "#/definitions/SubResource",
          "description": "URL path map resource of the application gateway."
        }
      }
    },
    "ApplicationGatewaySku": {
      "description": "SKU of an application gateway",
      "properties": {
        "capacity": {
          "description": "Capacity (instance count) of an application gateway.",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "description": "Name of an application gateway SKU. Possible values are: 'Standard_Small', 'Standard_Medium', 'Standard_Large', 'WAF_Medium', and 'WAF_Large'.",
          "enum": [
            "Standard_Small",
            "Standard_Medium",
            "Standard_Large",
            "WAF_Medium",
            "WAF_Large"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "ApplicationGatewaySkuName"
          }
        },
        "tier": {
          "description": "Tier of an application gateway. Possible values are: 'Standard' and 'WAF'.",
          "enum": [
            "Standard",
            "WAF"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "ApplicationGatewayTier"
          }
        }
      }
    },
    "ApplicationGatewaySslCertificate": {
      "allOf": [
        {
          "$ref": "#/definitions/SubResource"
        }
      ],
      "description": "SSL certificates of an application gateway.",
      "properties": {
        "etag": {
          "description": "A unique read-only string that changes whenever the resource is updated.",
          "type": "string"
        },
        "name": {
          "description": "Name of the resource that is unique within a resource group. This name can be used to access the resource.",
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/ApplicationGatewaySslCertificatePropertiesFormat",
          "x-ms-client-flatten": true
        }
      }
    },
    "ApplicationGatewaySslCertificatePropertiesFormat": {
      "description": "Properties of SSL certificates of an application gateway.",
      "properties": {
        "data": {
          "description": "Base-64 encoded pfx certificate. Only applicable in PUT Request.",
          "type": "string"
        },
        "password": {
          "description": "Password for the pfx file specified in data. Only applicable in PUT request.",
          "type": "string"
        },
        "provisioningState": {
          "description": "Provisioning state of the SSL certificate resource Possible values are: 'Updating', 'Deleting', and 'Failed'.",
          "type": "string"
        },
        "publicCertData": {
          "description": "Base-64 encoded Public cert data corresponding to pfx specified in data. Only applicable in GET request.",
          "type": "string"
        }
      }
    },
    "ApplicationGatewaySslPolicy": {
      "description": "Application gateway SSL policy.",
      "properties": {
        "disabledSslProtocols": {
          "description": "SSL protocols to be disabled on application gateway. Possible values are: 'TLSv1_0', 'TLSv1_1', and 'TLSv1_2'.",
          "items": {
            "enum": [
              "TLSv1_0",
              "TLSv1_1",
              "TLSv1_2"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "ApplicationGatewaySslProtocol"
            }
          },
          "type": "array"
        }
      }
    },
    "ApplicationGatewayUrlPathMap": {
      "allOf": [
        {
          "$ref": "#/definitions/SubResource"
        }
      ],
      "description": "UrlPathMaps give a url path to the backend mapping information for PathBasedRouting.",
      "properties": {
        "etag": {
          "description": "A unique read-only string that changes whenever the resource is updated.",
          "type": "string"
        },
        "name": {
          "description": "Name of the resource that is unique within a resource group. This name can be used to access the resource.",
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/ApplicationGatewayUrlPathMapPropertiesFormat",
          "x-ms-client-flatten": true
        }
      }
    },
    "ApplicationGatewayUrlPathMapPropertiesFormat": {
      "description": "Properties of UrlPathMap of the application gateway.",
      "properties": {
        "defaultBackendAddressPool": {
          "$ref": "#/definitions/SubResource",
          "description": "Default backend address pool resource of URL path map."
        },
        "defaultBackendHttpSettings": {
          "$ref": "#/definitions/SubResource",
          "description": "Default backend http settings resource of URL path map."
        },
        "pathRules": {
          "description": "Path rule of URL path map resource.",
          "items": {
            "$ref": "#/definitions/ApplicationGatewayPathRule"
          },
          "type": "array"
        },
        "provisioningState": {
          "description": "Provisioning state of the backend http settings resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
          "type": "string"
        }
      }
    },
    "ApplicationGatewayWebApplicationFirewallConfiguration": {
      "description": "Application gateway web application firewall configuration.",
      "properties": {
        "enabled": {
          "description": "Whether the web application firewall is enabled or not.",
          "type": "boolean"
        },
        "firewallMode": {
          "description": "Web application firewall mode. Possible values are: 'Detection' and 'Prevention'.",
          "enum": [
            "Detection",
            "Prevention"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "ApplicationGatewayFirewallMode"
          }
        }
      },
      "required": [
        "enabled"
      ]
    },
    "AuthorizationListResult": {
      "description": "Response for ListAuthorizations API service call retrieves all authorizations that belongs to an ExpressRouteCircuit.",
      "properties": {
        "nextLink": {
          "description": "The URL to get the next set of results.",
          "type": "string"
        },
        "value": {
          "description": "The authorizations in an ExpressRoute Circuit.",
          "items": {
            "$ref": "#/definitions/ExpressRouteCircuitAuthorization"
          },
          "type": "array"
        }
      }
    },
    "AuthorizationPropertiesFormat": {
      "properties": {
        "authorizationKey": {
          "description": "The authorization key.",
          "type": "string"
        },
        "authorizationUseStatus": {
          "description": "AuthorizationUseStatus. Possible values are: 'Available' and 'InUse'.",
          "enum": [
            "Available",
            "InUse"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "AuthorizationUseStatus"
          }
        },
        "provisioningState": {
          "description": "Gets the provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
          "type": "string"
        }
      }
    },
    "AzureAsyncOperationResult": {
      "description": "The response body contains the status of the specified asynchronous operation, indicating whether it has succeeded, is in progress, or has failed. Note that this status is distinct from the HTTP status code returned for the Get Operation Status operation itself. If the asynchronous operation succeeded, the response body includes the HTTP status code for the successful request. If the asynchronous operation failed, the response body includes the HTTP status code for the failed request and error information regarding the failure.",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error"
        },
        "status": {
          "description": "Status of the Azure async operation. Possible values are: 'InProgress', 'Succeeded', and 'Failed'.",
          "enum": [
            "InProgress",
            "Succeeded",
            "Failed"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "NetworkOperationStatus"
          }
        }
      }
    },
    "BGPCommunity": {
      "description": "Contains bgp community information offered in Service Community resources.",
      "properties": {
        "communityName": {
          "description": "The name of the bgp community. e.g. Skype.",
          "type": "string"
        },
        "communityPrefixes": {
          "description": "The prefixes that the bgp community contains.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "communityValue": {
          "description": "The value of the bgp community. For more information: https://docs.microsoft.com/en-us/azure/expressroute/expressroute-routing.",
          "type": "string"
        },
        "serviceSupportedRegion": {
          "description": "The region which the service support. e.g. For O365, region is Global.",
          "type": "string"
        }
      }
    },
    "BackendAddressPool": {
      "allOf": [
        {
          "$ref": "#/definitions/SubResource"
        }
      ],
      "description": "Pool of backend IP addresses.",
      "properties": {
        "etag": {
          "description": "A unique read-only string that changes whenever the resource is updated.",
          "type": "string"
        },
        "name": {
          "description": "Gets name of the resource that is unique within a resource group. This name can be used to access the resource.",
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/BackendAddressPoolPropertiesFormat",
          "x-ms-client-flatten": true
        }
      }
    },
    "BackendAddressPoolPropertiesFormat": {
      "description": "Properties of the backend address pool.",
      "properties": {
        "backendIPConfigurations": {
          "description": "Gets collection of references to IP addresses defined in network interfaces.",
          "items": {
            "$ref": "#/definitions/NetworkInterfaceIPConfiguration"
          },
          "readOnly": true,
          "type": "array"
        },
        "loadBalancingRules": {
          "description": "Gets load balancing rules that use this backend address pool.",
          "items": {
            "$ref": "#/definitions/SubResource"
          },
          "readOnly": true,
          "type": "array"
        },
        "outboundNatRule": {
          "$ref": "#/definitions/SubResource",
          "description": "Gets outbound rules that use this backend address pool.",
          "readOnly": true
        },
        "provisioningState": {
          "description": "Get provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
          "type": "string"
        }
      }
    },
    "BgpPeerStatus": {
      "properties": {
        "asn": {
          "description": "The autonomous system number of the remote BGP peer",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "connectedDuration": {
          "description": "For how long the peering has been up",
          "readOnly": true,
          "type": "string"
        },
        "localAddress": {
          "description": "The virtual network gateway's local address",
          "readOnly": true,
          "type": "string"
        },
        "messagesReceived": {
          "description": "The number of BGP messages received",
          "format": "in64",
          "readOnly": true,
          "type": "integer"
        },
        "messagesSent": {
          "description": "The number of BGP messages sent",
          "format": "int64",
          "readOnly": true,
          "type": "integer"
        },
        "neighbor": {
          "description": "The remote BGP peer",
          "readOnly": true,
          "type": "string"
        },
        "routesReceived": {
          "description": "The number of routes learned from this peer",
          "format": "int64",
          "readOnly": true,
          "type": "integer"
        },
        "state": {
          "description": "The BGP peer state",
          "enum": [
            "Unknown",
            "Stopped",
            "Idle",
            "Connecting",
            "Connected"
          ],
          "readOnly": true,
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "BgpPeerState"
          }
        }
      }
    },
    "BgpPeerStatusListResult": {
      "description": "Response for list BGP peer status API service call",
      "properties": {
        "value": {
          "description": "List of BGP peers",
          "items": {
            "$ref": "#/definitions/BgpPeerStatus"
          },
          "type": "array"
        }
      }
    },
    "BgpServiceCommunity": {
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "description": "Service Community Properties.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/BgpServiceCommunityPropertiesFormat",
          "x-ms-client-flatten": true
        }
      }
    },
    "BgpServiceCommunityListResult": {
      "description": "Response for the ListServiceCommunity API service call.",
      "properties": {
        "nextLink": {
          "description": "The URL to get the next set of results.",
          "type": "string"
        },
        "value": {
          "description": "A list of service community resources.",
          "items": {
            "$ref": "#/definitions/BgpServiceCommunity"
          },
          "type": "array"
        }
      }
    },
    "BgpServiceCommunityPropertiesFormat": {
      "description": "Properties of Service Community.",
      "properties": {
        "bgpCommunities": {
          "description": "Get a list of bgp communities.",
          "items": {
            "$ref": "#/definitions/BGPCommunity"
          },
          "type": "array"
        },
        "serviceName": {
          "description": "The name of the bgp community. e.g. Skype.",
          "type": "string"
        }
      }
    },
    "BgpSettings": {
      "properties": {
        "asn": {
          "description": "The BGP speaker's ASN.",
          "format": "int64",
          "type": "integer"
        },
        "bgpPeeringAddress": {
          "description": "The BGP peering address and BGP identifier of this BGP speaker.",
          "type": "string"
        },
        "peerWeight": {
          "description": "The weight added to routes learned from this BGP speaker.",
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "ConnectionResetSharedKey": {
      "properties": {
        "keyLength": {
          "description": "The virtual network connection reset shared key length, should between 1 and 128.",
          "format": "int32",
          "maximum": 128,
          "minimum": 1,
          "type": "integer"
        }
      },
      "required": [
        "keyLength"
      ]
    },
    "ConnectionSharedKey": {
      "description": "Response for GetConnectionSharedKey API service call",
      "properties": {
        "value": {
          "description": "The virtual network connection shared key value.",
          "type": "string"
        }
      },
      "required": [
        "value"
      ]
    },
    "DhcpOptions": {
      "description": "DhcpOptions contains an array of DNS servers available to VMs deployed in the virtual network. Standard DHCP option for a subnet overrides VNET DHCP options.",
      "properties": {
        "dnsServers": {
          "description": "The list of DNS servers IP addresses.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      }
    },
    "DnsNameAvailabilityResult": {
      "description": "Response for the CheckDnsNameAvailability API service call.",
      "properties": {
        "available": {
          "description": "Domain availability (True/False).",
          "type": "boolean"
        }
      }
    },
    "EffectiveNetworkSecurityGroup": {
      "description": "Effective network security group.",
      "properties": {
        "association": {
          "$ref": "#/definitions/EffectiveNetworkSecurityGroupAssociation"
        },
        "effectiveSecurityRules": {
          "description": "A collection of effective security rules.",
          "items": {
            "$ref": "#/definitions/EffectiveNetworkSecurityRule"
          },
          "type": "array"
        },
        "networkSecurityGroup": {
          "$ref": "#/definitions/SubResource",
          "description": "The ID of network security group that is applied."
        }
      }
    },
    "EffectiveNetworkSecurityGroupAssociation": {
      "description": "The effective network security group association.",
      "properties": {
        "networkInterface": {
          "$ref": "#/definitions/SubResource",
          "description": "The ID of the network interface if assigned."
        },
        "subnet": {
          "$ref": "#/definitions/SubResource",
          "description": "The ID of the subnet if assigned."
        }
      }
    },
    "EffectiveNetworkSecurityGroupListResult": {
      "description": "Response for list effective network security groups API service call.",
      "properties": {
        "nextLink": {
          "description": "The URL to get the next set of results.",
          "type": "string"
        },
        "value": {
          "description": "A list of effective network security groups.",
          "items": {
            "$ref": "#/definitions/EffectiveNetworkSecurityGroup"
          },
          "type": "array"
        }
      }
    },
    "EffectiveNetworkSecurityRule": {
      "description": "Effective network security rules.",
      "properties": {
        "access": {
          "description": "Whether network traffic is allowed or denied. Possible values are: 'Allow' and 'Deny'.",
          "enum": [
            "Allow",
            "Deny"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "SecurityRuleAccess"
          }
        },
        "destinationAddressPrefix": {
          "description": "The destination address prefix.",
          "type": "string"
        },
        "destinationPortRange": {
          "description": "The destination port or range.",
          "type": "string"
        },
        "direction": {
          "description": "The direction of the rule. Possible values are: 'Inbound and Outbound'.",
          "enum": [
            "Inbound",
            "Outbound"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "SecurityRuleDirection"
          }
        },
        "expandedDestinationAddressPrefix": {
          "description": "Expanded destination address prefix.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "expandedSourceAddressPrefix": {
          "description": "The expanded source address prefix.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "name": {
          "description": "The name of the security rule specified by the user (if created by the user).",
          "type": "string"
        },
        "priority": {
          "description": "The priority of the rule.",
          "format": "int32",
          "type": "integer"
        },
        "protocol": {
          "description": "The network protocol this rule applies to. Possible values are: 'Tcp', 'Udp', and '*'.",
          "enum": [
            "Tcp",
            "Udp",
            "*"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "SecurityRuleProtocol"
          }
        },
        "sourceAddressPrefix": {
          "description": "The source address prefix.",
          "type": "string"
        },
        "sourcePortRange": {
          "description": "The source port or range.",
          "type": "string"
        }
      }
    },
    "EffectiveRoute": {
      "description": "Effective Route",
      "properties": {
        "addressPrefix": {
          "description": "The address prefixes of the effective routes in CIDR notation.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "name": {
          "description": "The name of the user defined route. This is optional.",
          "type": "string"
        },
        "nextHopIpAddress": {
          "description": "The IP address of the next hop of the effective route.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "nextHopType": {
          "description": "The type of Azure hop the packet should be sent to. Possible values are: 'VirtualNetworkGateway', 'VnetLocal', 'Internet', 'VirtualAppliance', and 'None'.",
          "enum": [
            "VirtualNetworkGateway",
            "VnetLocal",
            "Internet",
            "VirtualAppliance",
            "None"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "RouteNextHopType"
          }
        },
        "source": {
          "description": "Who created the route. Possible values are: 'Unknown', 'User', 'VirtualNetworkGateway', and 'Default'.",
          "enum": [
            "Unknown",
            "User",
            "VirtualNetworkGateway",
            "Default"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "EffectiveRouteSource"
          }
        },
        "state": {
          "description": "The value of effective route. Possible values are: 'Active' and 'Invalid'.",
          "enum": [
            "Active",
            "Invalid"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "EffectiveRouteState"
          }
        }
      }
    },
    "EffectiveRouteListResult": {
      "description": "Response for list effective route API service call.",
      "properties": {
        "nextLink": {
          "description": "The URL to get the next set of results.",
          "type": "string"
        },
        "value": {
          "description": "A list of effective routes.",
          "items": {
            "$ref": "#/definitions/EffectiveRoute"
          },
          "type": "array"
        }
      }
    },
    "Error": {
      "properties": {
        "code": {
          "type": "string"
        },
        "details": {
          "items": {
            "$ref": "#/definitions/ErrorDetails"
          },
          "type": "array"
        },
        "innerError": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "target": {
          "type": "string"
        }
      }
    },
    "ErrorDetails": {
      "properties": {
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "target": {
          "type": "string"
        }
      }
    },
    "ExpressRouteCircuit": {
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "description": "ExpressRouteCircuit resource",
      "properties": {
        "etag": {
          "description": "Gets a unique read-only string that changes whenever the resource is updated.",
          "readOnly": true,
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/ExpressRouteCircuitPropertiesFormat",
          "x-ms-client-flatten": true
        },
        "sku": {
          "$ref": "#/definitions/ExpressRouteCircuitSku",
          "description": "The SKU."
        }
      }
    },
    "ExpressRouteCircuitArpTable": {
      "description": "The ARP table associated with the ExpressRouteCircuit.",
      "properties": {
        "age": {
          "description": "Age",
          "format": "int32",
          "type": "integer"
        },
        "interface": {
          "description": "Interface",
          "type": "string"
        },
        "ipAddress": {
          "description": "The IP address.",
          "type": "string"
        },
        "macAddress": {
          "description": "The MAC address.",
          "type": "string"
        }
      }
    },
    "ExpressRouteCircuitAuthorization": {
      "allOf": [
        {
          "$ref": "#/definitions/SubResource"
        }
      ],
      "description": "Authorization in an ExpressRouteCircuit resource.",
      "properties": {
        "etag": {
          "description": "A unique read-only string that changes whenever the resource is updated.",
          "readOnly": true,
          "type": "string"
        },
        "name": {
          "description": "Gets name of the resource that is unique within a resource group. This name can be used to access the resource.",
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/AuthorizationPropertiesFormat",
          "x-ms-client-flatten": true
        }
      }
    },
    "ExpressRouteCircuitListResult": {
      "description": "Response for ListExpressRouteCircuit API service call.",
      "properties": {
        "nextLink": {
          "description": "The URL to get the next set of results.",
          "type": "string"
        },
        "value": {
          "description": "A list of ExpressRouteCircuits in a resource group.",
          "items": {
            "$ref": "#/definitions/ExpressRouteCircuit"
          },
          "type": "array"
        }
      }
    },
    "ExpressRouteCircuitPeering": {
      "allOf": [
        {
          "$ref": "#/definitions/SubResource"
        }
      ],
      "description": "Peering in an ExpressRouteCircuit resource.",
      "properties": {
        "etag": {
          "description": "A unique read-only string that changes whenever the resource is updated.",
          "readOnly": true,
          "type": "string"
        },
        "name": {
          "description": "Gets name of the resource that is unique within a resource group. This name can be used to access the resource.",
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/ExpressRouteCircuitPeeringPropertiesFormat",
          "x-ms-client-flatten": true
        }
      }
    },
    "ExpressRouteCircuitPeeringConfig": {
      "description": "Specifies the peering configuration.",
      "properties": {
        "advertisedPublicPrefixes": {
          "description": "The reference of AdvertisedPublicPrefixes.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "advertisedPublicPrefixesState": {
          "description": "AdvertisedPublicPrefixState of the Peering resource. Possible values are 'NotConfigured', 'Configuring', 'Configured', and 'ValidationNeeded'.",
          "enum": [
            "NotConfigured",
            "Configuring",
            "Configured",
            "ValidationNeeded"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "ExpressRouteCircuitPeeringAdvertisedPublicPrefixState"
          }
        },
        "customerASN": {
          "description": "The CustomerASN of the peering.",
          "format": "int32",
          "type": "integer"
        },
        "routingRegistryName": {
          "description": "The RoutingRegistryName of the configuration.",
          "type": "string"
        }
      }
    },
    "ExpressRouteCircuitPeeringListResult": {
      "description": "Response for ListPeering API service call retrieves all peerings that belong to an ExpressRouteCircuit.",
      "properties": {
        "nextLink": {
          "description": "The URL to get the next set of results.",
          "type": "string"
        },
        "value": {
          "description": "The peerings in an express route circuit.",
          "items": {
            "$ref": "#/definitions/ExpressRouteCircuitPeering"
          },
          "type": "array"
        }
      }
    },
    "ExpressRouteCircuitPeeringPropertiesFormat": {
      "properties": {
        "azureASN": {
          "description": "The Azure ASN.",
          "format": "int32",
          "type": "integer"
        },
        "gatewayManagerEtag": {
          "description": "The GatewayManager Etag.",
          "type": "string"
        },
        "lastModifiedBy": {
          "description": "Gets whether the provider or the customer last modified the peering.",
          "type": "string"
        },
        "microsoftPeeringConfig": {
          "$ref": "#/definitions/ExpressRouteCircuitPeeringConfig",
          "description": "The Microsoft peering configuration."
        },
        "peerASN": {
          "description": "The peer ASN.",
          "format": "int32",
          "type": "integer"
        },
        "peeringType": {
          "description": "The PeeringType. Possible values are: 'AzurePublicPeering', 'AzurePrivatePeering', and 'MicrosoftPeering'.",
          "enum": [
            "AzurePublicPeering",
            "AzurePrivatePeering",
            "MicrosoftPeering"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "ExpressRouteCircuitPeeringType"
          }
        },
        "primaryAzurePort": {
          "description": "The primary port.",
          "type": "string"
        },
        "primaryPeerAddressPrefix": {
          "description": "The primary address prefix.",
          "type": "string"
        },
        "provisioningState": {
          "description": "Gets the provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
          "type": "string"
        },
        "routeFilter": {
          "$ref": "#/definitions/RouteFilter",
          "description": "The reference of the RouteFilter resource."
        },
        "secondaryAzurePort": {
          "description": "The secondary port.",
          "type": "string"
        },
        "secondaryPeerAddressPrefix": {
          "description": "The secondary address prefix.",
          "type": "string"
        },
        "sharedKey": {
          "description": "The shared key.",
          "type": "string"
        },
        "state": {
          "description": "The state of peering. Possible values are: 'Disabled' and 'Enabled'",
          "enum": [
            "Disabled",
            "Enabled"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "ExpressRouteCircuitPeeringState"
          }
        },
        "stats": {
          "$ref": "#/definitions/ExpressRouteCircuitStats",
          "description": "Gets peering stats."
        },
        "vlanId": {
          "description": "The VLAN ID.",
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "ExpressRouteCircuitPropertiesFormat": {
      "description": "Properties of ExpressRouteCircuit.",
      "properties": {
        "allowClassicOperations": {
          "description": "Allow classic operations",
          "type": "boolean"
        },
        "authorizations": {
          "description": "The list of authorizations.",
          "items": {
            "$ref": "#/definitions/ExpressRouteCircuitAuthorization"
          },
          "type": "array"
        },
        "circuitProvisioningState": {
          "description": "The CircuitProvisioningState state of the resource.",
          "type": "string"
        },
        "gatewayManagerEtag": {
          "description": "The GatewayManager Etag.",
          "type": "string"
        },
        "peerings": {
          "description": "The list of peerings.",
          "items": {
            "$ref": "#/definitions/ExpressRouteCircuitPeering"
          },
          "type": "array"
        },
        "provisioningState": {
          "description": "Gets the provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
          "type": "string"
        },
        "serviceKey": {
          "description": "The ServiceKey.",
          "type": "string"
        },
        "serviceProviderNotes": {
          "description": "The ServiceProviderNotes.",
          "type": "string"
        },
        "serviceProviderProperties": {
          "$ref": "#/definitions/ExpressRouteCircuitServiceProviderProperties",
          "description": "The ServiceProviderProperties."
        },
        "serviceProviderProvisioningState": {
          "description": "The ServiceProviderProvisioningState state of the resource. Possible values are 'NotProvisioned', 'Provisioning', 'Provisioned', and 'Deprovisioning'.",
          "enum": [
            "NotProvisioned",
            "Provisioning",
            "Provisioned",
            "Deprovisioning"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "ServiceProviderProvisioningState"
          }
        }
      }
    },
    "ExpressRouteCircuitRoutesTable": {
      "description": "The routes table associated with the ExpressRouteCircuit",
      "properties": {
        "locPrf": {
          "description": "locPrf",
          "type": "string"
        },
        "network": {
          "description": "network",
          "type": "string"
        },
        "nextHop": {
          "description": "nextHop",
          "type": "string"
        },
        "path": {
          "description": "path",
          "type": "string"
        },
        "weight": {
          "description": "weight.",
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "ExpressRouteCircuitRoutesTableSummary": {
      "description": "The routes table associated with the ExpressRouteCircuit.",
      "properties": {
        "as": {
          "description": "Autonomous system number.",
          "format": "int32",
          "type": "integer"
        },
        "neighbor": {
          "description": "Neighbor",
          "type": "string"
        },
        "statePfxRcd": {
          "description": "Current state of the BGP session, and the number of prefixes that have been received from a neighbor or peer group.",
          "type": "string"
        },
        "upDown": {
          "description": "The length of time that the BGP session has been in the Established state, or the current status if not in the Established state.",
          "type": "string"
        },
        "v": {
          "description": "BGP version number spoken to the neighbor.",
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "ExpressRouteCircuitServiceProviderProperties": {
      "description": "Contains ServiceProviderProperties in an ExpressRouteCircuit.",
      "properties": {
        "bandwidthInMbps": {
          "description": "The BandwidthInMbps.",
          "format": "int32",
          "type": "integer"
        },
        "peeringLocation": {
          "description": "The peering location.",
          "type": "string"
        },
        "serviceProviderName": {
          "description": "The serviceProviderName.",
          "type": "string"
        }
      }
    },
    "ExpressRouteCircuitSku": {
      "description": "Contains SKU in an ExpressRouteCircuit.",
      "properties": {
        "family": {
          "description": "The family of the SKU. Possible values are: 'UnlimitedData' and 'MeteredData'.",
          "enum": [
            "UnlimitedData",
            "MeteredData"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "ExpressRouteCircuitSkuFamily"
          }
        },
        "name": {
          "description": "The name of the SKU.",
          "type": "string"
        },
        "tier": {
          "description": "The tier of the SKU. Possible values are 'Standard' and 'Premium'.",
          "enum": [
            "Standard",
            "Premium"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "ExpressRouteCircuitSkuTier"
          }
        }
      }
    },
    "ExpressRouteCircuitStats": {
      "description": "Contains stats associated with the peering.",
      "properties": {
        "primarybytesIn": {
          "description": "Gets BytesIn of the peering.",
          "format": "int64",
          "type": "integer"
        },
        "primarybytesOut": {
          "description": "Gets BytesOut of the peering.",
          "format": "int64",
          "type": "integer"
        },
        "secondarybytesIn": {
          "description": "Gets BytesIn of the peering.",
          "format": "int64",
          "type": "integer"
        },
        "secondarybytesOut": {
          "description": "Gets BytesOut of the peering.",
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "ExpressRouteCircuitsArpTableListResult": {
      "description": "Response for ListArpTable associated with the Express Route Circuits API.",
      "properties": {
        "nextLink": {
          "description": "The URL to get the next set of results.",
          "type": "string"
        },
        "value": {
          "description": "Gets list of the ARP table.",
          "items": {
            "$ref": "#/definitions/ExpressRouteCircuitArpTable"
          },
          "type": "array"
        }
      }
    },
    "ExpressRouteCircuitsRoutesTableListResult": {
      "description": "Response for ListRoutesTable associated with the Express Route Circuits API.",
      "properties": {
        "nextLink": {
          "description": "The URL to get the next set of results.",
          "type": "string"
        },
        "value": {
          "description": "The list of routes table.",
          "items": {
            "$ref": "#/definitions/ExpressRouteCircuitRoutesTable"
          },
          "type": "array"
        }
      }
    },
    "ExpressRouteCircuitsRoutesTableSummaryListResult": {
      "description": "Response for ListRoutesTable associated with the Express Route Circuits API.",
      "properties": {
        "nextLink": {
          "description": "The URL to get the next set of results.",
          "type": "string"
        },
        "value": {
          "description": "A list of the routes table.",
          "items": {
            "$ref": "#/definitions/ExpressRouteCircuitRoutesTableSummary"
          },
          "type": "array"
        }
      }
    },
    "ExpressRouteServiceProvider": {
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "description": "A ExpressRouteResourceProvider object.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/ExpressRouteServiceProviderPropertiesFormat",
          "x-ms-client-flatten": true
        }
      }
    },
    "ExpressRouteServiceProviderBandwidthsOffered": {
      "description": "Contains bandwidths offered in ExpressRouteServiceProvider resources.",
      "properties": {
        "offerName": {
          "description": "The OfferName.",
          "type": "string"
        },
        "valueInMbps": {
          "description": "The ValueInMbps.",
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "ExpressRouteServiceProviderListResult": {
      "description": "Response for the ListExpressRouteServiceProvider API service call.",
      "properties": {
        "nextLink": {
          "description": "The URL to get the next set of results.",
          "type": "string"
        },
        "value": {
          "description": "A list of ExpressRouteResourceProvider resources.",
          "items": {
            "$ref": "#/definitions/ExpressRouteServiceProvider"
          },
          "type": "array"
        }
      }
    },
    "ExpressRouteServiceProviderPropertiesFormat": {
      "description": "Properties of ExpressRouteServiceProvider.",
      "properties": {
        "bandwidthsOffered": {
          "description": "Gets bandwidths offered.",
          "items": {
            "$ref": "#/definitions/ExpressRouteServiceProviderBandwidthsOffered"
          },
          "type": "array"
        },
        "peeringLocations": {
          "description": "Get a list of peering locations.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "provisioningState": {
          "description": "Gets the provisioning state of the resource.",
          "type": "string"
        }
      }
    },
    "FlowLogInformation": {
      "description": "Information on the configuration of flow log.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/FlowLogProperties",
          "x-ms-client-flatten": true
        },
        "targetResourceId": {
          "description": "The ID of the resource to configure for flow logging.",
          "type": "string"
        }
      },
      "required": [
        "targetResourceId",
        "properties"
      ]
    },
    "FlowLogProperties": {
      "description": "Parameters that define the configuration of flow log.",
      "properties": {
        "enabled": {
          "description": "Flag to enable/disable flow logging.",
          "type": "boolean"
        },
        "retentionPolicy": {
          "$ref": "#/definitions/RetentionPolicyParameters"
        },
        "storageId": {
          "description": "ID of the storage account which is used to store the flow log.",
          "type": "string"
        }
      },
      "required": [
        "storageId",
        "enabled"
      ]
    },
    "FlowLogStatusParameters": {
      "description": "Parameters that define a resource to query flow log status.",
      "properties": {
        "targetResourceId": {
          "description": "The target resource where getting the flow logging status.",
          "type": "string"
        }
      },
      "required": [
        "targetResourceId"
      ]
    },
    "FrontendIPConfiguration": {
      "allOf": [
        {
          "$ref": "#/definitions/SubResource"
        }
      ],
      "description": "Frontend IP address of the load balancer.",
      "properties": {
        "etag": {
          "description": "A unique read-only string that changes whenever the resource is updated.",
          "type": "string"
        },
        "name": {
          "description": "The name of the resource that is unique within a resource group. This name can be used to access the resource.",
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/FrontendIPConfigurationPropertiesFormat",
          "x-ms-client-flatten": true
        }
      }
    },
    "FrontendIPConfigurationPropertiesFormat": {
      "description": "Properties of Frontend IP Configuration of the load balancer.",
      "properties": {
        "inboundNatPools": {
          "description": "Read only. Inbound pools URIs that use this frontend IP.",
          "items": {
            "$ref": "#/definitions/SubResource"
          },
          "readOnly": true,
          "type": "array"
        },
        "inboundNatRules": {
          "description": "Read only. Inbound rules URIs that use this frontend IP.",
          "items": {
            "$ref": "#/definitions/SubResource"
          },
          "readOnly": true,
          "type": "array"
        },
        "loadBalancingRules": {
          "description": "Gets load balancing rules URIs that use this frontend IP.",
          "items": {
            "$ref": "#/definitions/SubResource"
          },
          "readOnly": true,
          "type": "array"
        },
        "outboundNatRules": {
          "description": "Read only. Outbound rules URIs that use this frontend IP.",
          "items": {
            "$ref": "#/definitions/SubResource"
          },
          "readOnly": true,
          "type": "array"
        },
        "privateIPAddress": {
          "description": "The private IP address of the IP configuration.",
          "type": "string"
        },
        "privateIPAllocationMethod": {
          "description": "The Private IP allocation method. Possible values are: 'Static' and 'Dynamic'.",
          "enum": [
            "Static",
            "Dynamic"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "IPAllocationMethod"
          }
        },
        "provisioningState": {
          "description": "Gets the provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
          "type": "string"
        },
        "publicIPAddress": {
          "$ref": "#/definitions/PublicIPAddress",
          "description": "The reference of the Public IP resource."
        },
        "subnet": {
          "$ref": "#/definitions/Subnet",
          "description": "The reference of the subnet resource."
        }
      }
    },
    "GatewayRoute": {
      "properties": {
        "asPath": {
          "description": "The route's AS path sequence",
          "readOnly": true,
          "type": "string"
        },
        "localAddress": {
          "description": "The gateway's local address",
          "readOnly": true,
          "type": "string"
        },
        "network": {
          "description": "The route's network prefix",
          "readOnly": true,
          "type": "string"
        },
        "nextHop": {
          "description": "The route's next hop",
          "readOnly": true,
          "type": "string"
        },
        "origin": {
          "description": "The source this route was learned from",
          "readOnly": true,
          "type": "string"
        },
        "sourcePeer": {
          "description": "The peer this route was learned from",
          "readOnly": true,
          "type": "string"
        },
        "weight": {
          "description": "The route's weight",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        }
      }
    },
    "GatewayRouteListResult": {
      "description": "List of virtual network gateway routes",
      "properties": {
        "value": {
          "description": "List of gateway routes",
          "items": {
            "$ref": "#/definitions/GatewayRoute"
          },
          "type": "array"
        }
      }
    },
    "IPAddressAvailabilityResult": {
      "description": "Response for CheckIPAddressAvailability API service call",
      "properties": {
        "available": {
          "description": "Private IP address availability.",
          "type": "boolean"
        },
        "availableIPAddresses": {
          "description": "Contains other available private IP addresses if the asked for address is taken.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      }
    },
    "IPConfiguration": {
      "allOf": [
        {
          "$ref": "#/definitions/SubResource"
        }
      ],
      "description": "IPConfiguration",
      "properties": {
        "etag": {
          "description": "A unique read-only string that changes whenever the resource is updated.",
          "type": "string"
        },
        "name": {
          "description": "The name of the resource that is unique within a resource group. This name can be used to access the resource.",
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/IPConfigurationPropertiesFormat",
          "x-ms-client-flatten": true
        }
      }
    },
    "IPConfigurationPropertiesFormat": {
      "description": "Properties of IP configuration.",
      "properties": {
        "privateIPAddress": {
          "description": "The private IP address of the IP configuration.",
          "type": "string"
        },
        "privateIPAllocationMethod": {
          "description": "The private IP allocation method. Possible values are 'Static' and 'Dynamic'.",
          "enum": [
            "Static",
            "Dynamic"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "IPAllocationMethod"
          }
        },
        "provisioningState": {
          "description": "Gets the provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
          "type": "string"
        },
        "publicIPAddress": {
          "$ref": "#/definitions/PublicIPAddress",
          "description": "The reference of the public IP resource."
        },
        "subnet": {
          "$ref": "#/definitions/Subnet",
          "description": "The reference of the subnet resource."
        }
      }
    },
    "InboundNatPool": {
      "allOf": [
        {
          "$ref": "#/definitions/SubResource"
        }
      ],
      "description": "Inbound NAT pool of the load balancer.",
      "properties": {
        "etag": {
          "description": "A unique read-only string that changes whenever the resource is updated.",
          "type": "string"
        },
        "name": {
          "description": "The name of the resource that is unique within a resource group. This name can be used to access the resource.",
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/InboundNatPoolPropertiesFormat",
          "x-ms-client-flatten": true
        }
      }
    },
    "InboundNatPoolPropertiesFormat": {
      "description": "Properties of Inbound NAT pool.",
      "properties": {
        "backendPort": {
          "description": "The port used for internal connections on the endpoint. Acceptable values are between 1 and 65535.",
          "format": "int32",
          "type": "integer"
        },
        "frontendIPConfiguration": {
          "$ref": "#/definitions/SubResource",
          "description": "A reference to frontend IP addresses."
        },
        "frontendPortRangeEnd": {
          "description": "The last port number in the range of external ports that will be used to provide Inbound Nat to NICs associated with a load balancer. Acceptable values range between 1 and 65535.",
          "format": "int32",
          "type": "integer"
        },
        "frontendPortRangeStart": {
          "description": "The first port number in the range of external ports that will be used to provide Inbound Nat to NICs associated with a load balancer. Acceptable values range between 1 and 65534.",
          "format": "int32",
          "type": "integer"
        },
        "protocol": {
          "description": "The transport protocol for the endpoint. Possible values are: 'Udp' or 'Tcp'.",
          "enum": [
            "Udp",
            "Tcp"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "TransportProtocol"
          }
        },
        "provisioningState": {
          "description": "Gets the provisioning state of the PublicIP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
          "type": "string"
        }
      },
      "required": [
        "protocol",
        "frontendPortRangeStart",
        "frontendPortRangeEnd",
        "backendPort"
      ]
    },
    "InboundNatRule": {
      "allOf": [
        {
          "$ref": "#/definitions/SubResource"
        }
      ],
      "description": "Inbound NAT rule of the load balancer.",
      "properties": {
        "etag": {
          "description": "A unique read-only string that changes whenever the resource is updated.",
          "type": "string"
        },
        "name": {
          "description": "Gets name of the resource that is unique within a resource group. This name can be used to access the resource.",
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/InboundNatRulePropertiesFormat",
          "x-ms-client-flatten": true
        }
      }
    },
    "InboundNatRulePropertiesFormat": {
      "description": "Properties of the inbound NAT rule.",
      "properties": {
        "backendIPConfiguration": {
          "$ref": "#/definitions/NetworkInterfaceIPConfiguration",
          "description": "A reference to a private IP address defined on a network interface of a VM. Traffic sent to the frontend port of each of the frontend IP configurations is forwarded to the backed IP.",
          "readOnly": true
        },
        "backendPort": {
          "description": "The port used for the internal endpoint. Acceptable values range from 1 to 65535.",
          "format": "int32",
          "type": "integer"
        },
        "enableFloatingIP": {
          "description": "Configures a virtual machine's endpoint for the floating IP capability required to configure a SQL AlwaysOn Availability Group. This setting is required when using the SQL AlwaysOn Availability Groups in SQL server. This setting can't be changed after you create the endpoint.",
          "type": "boolean"
        },
        "frontendIPConfiguration": {
          "$ref": "#/definitions/SubResource",
          "description": "A reference to frontend IP addresses."
        },
        "frontendPort": {
          "description": "The port for the external endpoint. Port numbers for each Rule must be unique within the Load Balancer. Acceptable values range from 1 to 65534.",
          "format": "int32",
          "type": "integer"
        },
        "idleTimeoutInMinutes": {
          "description": "The timeout for the TCP idle connection. The value can be set between 4 and 30 minutes. The default value is 4 minutes. This element is only used when the protocol is set to TCP.",
          "format": "int32",
          "type": "integer"
        },
        "protocol": {
          "description": "The transport protocol for the endpoint. Possible values are: 'Udp' or 'Tcp'",
          "enum": [
            "Udp",
            "Tcp"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "TransportProtocol"
          }
        },
        "provisioningState": {
          "description": "Gets the provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
          "type": "string"
        }
      }
    },
    "LoadBalancer": {
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "description": "LoadBalancer resource",
      "properties": {
        "etag": {
          "description": "A unique read-only string that changes whenever the resource is updated.",
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/LoadBalancerPropertiesFormat",
          "x-ms-client-flatten": true
        }
      }
    },
    "LoadBalancerListResult": {
      "description": "Response for ListLoadBalancers API service call.",
      "properties": {
        "nextLink": {
          "description": "The URL to get the next set of results.",
          "type": "string"
        },
        "value": {
          "description": "A list of load balancers in a resource group.",
          "items": {
            "$ref": "#/definitions/LoadBalancer"
          },
          "type": "array"
        }
      }
    },
    "LoadBalancerPropertiesFormat": {
      "description": "Properties of the load balancer.",
      "properties": {
        "backendAddressPools": {
          "description": "Collection of backend address pools used by a load balancer",
          "items": {
            "$ref": "#/definitions/BackendAddressPool"
          },
          "type": "array"
        },
        "frontendIPConfigurations": {
          "description": "Object representing the frontend IPs to be used for the load balancer",
          "items": {
            "$ref": "#/definitions/FrontendIPConfiguration"
          },
          "type": "array"
        },
        "inboundNatPools": {
          "description": "Defines an external port range for inbound NAT to a single backend port on NICs associated with a load balancer. Inbound NAT rules are created automatically for each NIC associated with the Load Balancer using an external port from this range. Defining an Inbound NAT pool on your Load Balancer is mutually exclusive with defining inbound Nat rules. Inbound NAT pools are referenced from virtual machine scale sets. NICs that are associated with individual virtual machines cannot reference an inbound NAT pool. They have to reference individual inbound NAT rules.",
          "items": {
            "$ref": "#/definitions/InboundNatPool"
          },
          "type": "array"
        },
        "inboundNatRules": {
          "description": "Collection of inbound NAT Rules used by a load balancer. Defining inbound NAT rules on your load balancer is mutually exclusive with defining an inbound NAT pool. Inbound NAT pools are referenced from virtual machine scale sets. NICs that are associated with individual virtual machines cannot reference an Inbound NAT pool. They have to reference individual inbound NAT rules.",
          "items": {
            "$ref": "#/definitions/InboundNatRule"
          },
          "type": "array"
        },
        "loadBalancingRules": {
          "description": "Object collection representing the load balancing rules Gets the provisioning ",
          "items": {
            "$ref": "#/definitions/LoadBalancingRule"
          },
          "type": "array"
        },
        "outboundNatRules": {
          "description": "The outbound NAT rules.",
          "items": {
            "$ref": "#/definitions/OutboundNatRule"
          },
          "type": "array"
        },
        "probes": {
          "description": "Collection of probe objects used in the load balancer",
          "items": {
            "$ref": "#/definitions/Probe"
          },
          "type": "array"
        },
        "provisioningState": {
          "description": "Gets the provisioning state of the PublicIP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
          "type": "string"
        },
        "resourceGuid": {
          "description": "The resource GUID property of the load balancer resource.",
          "type": "string"
        }
      }
    },
    "LoadBalancingRule": {
      "allOf": [
        {
          "$ref": "#/definitions/SubResource"
        }
      ],
      "description": "A loag balancing rule for a load balancer.",
      "properties": {
        "etag": {
          "description": "A unique read-only string that changes whenever the resource is updated.",
          "type": "string"
        },
        "name": {
          "description": "The name of the resource that is unique within a resource group. This name can be used to access the resource.",
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/LoadBalancingRulePropertiesFormat",
          "x-ms-client-flatten": true
        }
      }
    },
    "LoadBalancingRulePropertiesFormat": {
      "description": "Properties of the load balancer.",
      "properties": {
        "backendAddressPool": {
          "$ref": "#/definitions/SubResource",
          "description": "A reference to a pool of DIPs. Inbound traffic is randomly load balanced across IPs in the backend IPs."
        },
        "backendPort": {
          "description": "The port used for internal connections on the endpoint. Acceptable values are between 1 and 65535. ",
          "format": "int32",
          "type": "integer"
        },
        "enableFloatingIP": {
          "description": "Configures a virtual machine's endpoint for the floating IP capability required to configure a SQL AlwaysOn Availability Group. This setting is required when using the SQL AlwaysOn Availability Groups in SQL server. This setting can't be changed after you create the endpoint.",
          "type": "boolean"
        },
        "frontendIPConfiguration": {
          "$ref": "#/definitions/SubResource",
          "description": "A reference to frontend IP addresses."
        },
        "frontendPort": {
          "description": "The port for the external endpoint. Port numbers for each Rule must be unique within the Load Balancer. Acceptable values are between 1 and 65534.",
          "format": "int32",
          "type": "integer"
        },
        "idleTimeoutInMinutes": {
          "description": "The timeout for the TCP idle connection. The value can be set between 4 and 30 minutes. The default value is 4 minutes. This element is only used when the protocol is set to TCP.",
          "format": "int32",
          "type": "integer"
        },
        "loadDistribution": {
          "description": "The load distribution policy for this rule. Possible values are 'Default', 'SourceIP', and 'SourceIPProtocol'.",
          "enum": [
            "Default",
            "SourceIP",
            "SourceIPProtocol"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "LoadDistribution"
          }
        },
        "probe": {
          "$ref": "#/definitions/SubResource",
          "description": "The reference of the load balancer probe used by the load balancing rule."
        },
        "protocol": {
          "description": "The transport protocol for the external endpoint. Possible values are 'Udp' or 'Tcp'",
          "enum": [
            "Udp",
            "Tcp"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "TransportProtocol"
          }
        },
        "provisioningState": {
          "description": "Gets the provisioning state of the PublicIP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
          "type": "string"
        }
      },
      "required": [
        "protocol",
        "frontendPort"
      ]
    },
    "LocalNetworkGateway": {
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "description": "A common class for general resource information",
      "properties": {
        "etag": {
          "description": "A unique read-only string that changes whenever the resource is updated.",
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/LocalNetworkGatewayPropertiesFormat",
          "x-ms-client-flatten": true
        }
      },
      "required": [
        "properties"
      ]
    },
    "LocalNetworkGatewayListResult": {
      "description": "Response for ListLocalNetworkGateways API service call.",
      "properties": {
        "nextLink": {
          "description": "The URL to get the next set of results.",
          "type": "string"
        },
        "value": {
          "description": "A list of local network gateways that exists in a resource group.",
          "items": {
            "$ref": "#/definitions/LocalNetworkGateway"
          },
          "type": "array"
        }
      }
    },
    "LocalNetworkGatewayPropertiesFormat": {
      "description": "LocalNetworkGateway properties",
      "properties": {
        "bgpSettings": {
          "$ref": "#/definitions/BgpSettings",
          "description": "Local network gateway's BGP speaker settings."
        },
        "gatewayIpAddress": {
          "description": "IP address of local network gateway.",
          "type": "string"
        },
        "localNetworkAddressSpace": {
          "$ref": "#/definitions/AddressSpace",
          "description": "Local network site address space."
        },
        "provisioningState": {
          "description": "The provisioning state of the LocalNetworkGateway resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
          "readOnly": true,
          "type": "string"
        },
        "resourceGuid": {
          "description": "The resource GUID property of the LocalNetworkGateway resource.",
          "type": "string"
        }
      }
    },
    "NetworkInterface": {
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "description": "A network interface in a resource group.",
      "properties": {
        "etag": {
          "description": "A unique read-only string that changes whenever the resource is updated.",
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/NetworkInterfacePropertiesFormat",
          "x-ms-client-flatten": true
        }
      }
    },
    "NetworkInterfaceAssociation": {
      "description": "Network interface and its custom security rules.",
      "properties": {
        "id": {
          "description": "Network interface ID.",
          "readOnly": true,
          "type": "string"
        },
        "securityRules": {
          "description": "Collection of custom security rules.",
          "items": {
            "$ref": "#/definitions/SecurityRule"
          },
          "type": "array"
        }
      }
    },
    "NetworkInterfaceDnsSettings": {
      "description": "DNS settings of a network interface.",
      "properties": {
        "appliedDnsServers": {
          "description": "If the VM that uses this NIC is part of an Availability Set, then this list will have the union of all DNS servers from all NICs that are part of the Availability Set. This property is what is configured on each of those VMs.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "dnsServers": {
          "description": "List of DNS servers IP addresses. Use 'AzureProvidedDNS' to switch to azure provided DNS resolution. 'AzureProvidedDNS' value cannot be combined with other IPs, it must be the only value in dnsServers collection.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "internalDnsNameLabel": {
          "description": "Relative DNS name for this NIC used for internal communications between VMs in the same virtual network.",
          "type": "string"
        },
        "internalDomainNameSuffix": {
          "description": "Even if internalDnsNameLabel is not specified, a DNS entry is created for the primary NIC of the VM. This DNS name can be constructed by concatenating the VM name with the value of internalDomainNameSuffix.",
          "type": "string"
        },
        "internalFqdn": {
          "description": "Fully qualified DNS name supporting internal communications between VMs in the same virtual network.",
          "type": "string"
        }
      }
    },
    "NetworkInterfaceIPConfiguration": {
      "allOf": [
        {
          "$ref": "#/definitions/SubResource"
        }
      ],
      "description": "IPConfiguration in a network interface.",
      "properties": {
        "etag": {
          "description": "A unique read-only string that changes whenever the resource is updated.",
          "type": "string"
        },
        "name": {
          "description": "The name of the resource that is unique within a resource group. This name can be used to access the resource.",
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/NetworkInterfaceIPConfigurationPropertiesFormat",
          "x-ms-client-flatten": true
        }
      }
    },
    "NetworkInterfaceIPConfigurationPropertiesFormat": {
      "description": "Properties of IP configuration.",
      "properties": {
        "applicationGatewayBackendAddressPools": {
          "description": "The reference of ApplicationGatewayBackendAddressPool resource.",
          "items": {
            "$ref": "#/definitions/ApplicationGatewayBackendAddressPool"
          },
          "type": "array"
        },
        "loadBalancerBackendAddressPools": {
          "description": "The reference of LoadBalancerBackendAddressPool resource.",
          "items": {
            "$ref": "#/definitions/BackendAddressPool"
          },
          "type": "array"
        },
        "loadBalancerInboundNatRules": {
          "description": "A list of references of LoadBalancerInboundNatRules.",
          "items": {
            "$ref": "#/definitions/InboundNatRule"
          },
          "type": "array"
        },
        "primary": {
          "description": "Gets whether this is a primary customer address on the network interface.",
          "type": "boolean"
        },
        "privateIPAddress": {
          "type": "string"
        },
        "privateIPAddressVersion": {
          "description": "Available from Api-Version 2016-03-30 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4.  Possible values are: 'IPv4' and 'IPv6'.",
          "enum": [
            "IPv4",
            "IPv6"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "IPVersion"
          }
        },
        "privateIPAllocationMethod": {
          "description": "Defines how a private IP address is assigned. Possible values are: 'Static' and 'Dynamic'.",
          "enum": [
            "Static",
            "Dynamic"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "IPAllocationMethod"
          }
        },
        "provisioningState": {
          "type": "string"
        },
        "publicIPAddress": {
          "$ref": "#/definitions/PublicIPAddress"
        },
        "subnet": {
          "$ref": "#/definitions/Subnet"
        }
      }
    },
    "NetworkInterfaceListResult": {
      "description": "Response for the ListNetworkInterface API service call.",
      "properties": {
        "nextLink": {
          "description": "The URL to get the next set of results.",
          "type": "string"
        },
        "value": {
          "description": "A list of network interfaces in a resource group.",
          "items": {
            "$ref": "#/definitions/NetworkInterface"
          },
          "type": "array"
        }
      }
    },
    "NetworkInterfacePropertiesFormat": {
      "description": "NetworkInterface properties. ",
      "properties": {
        "dnsSettings": {
          "$ref": "#/definitions/NetworkInterfaceDnsSettings",
          "description": "The DNS settings in network interface."
        },
        "enableAcceleratedNetworking": {
          "description": "If the network interface is accelerated networking enabled.",
          "type": "boolean"
        },
        "enableIPForwarding": {
          "description": "Indicates whether IP forwarding is enabled on this network interface.",
          "type": "boolean"
        },
        "ipConfigurations": {
          "description": "A list of IPConfigurations of the network interface.",
          "items": {
            "$ref": "#/definitions/NetworkInterfaceIPConfiguration"
          },
          "type": "array"
        },
        "macAddress": {
          "description": "The MAC address of the network interface.",
          "type": "string"
        },
        "networkSecurityGroup": {
          "$ref": "#/definitions/NetworkSecurityGroup",
          "description": "The reference of the NetworkSecurityGroup resource."
        },
        "primary": {
          "description": "Gets whether this is a primary network interface on a virtual machine.",
          "type": "boolean"
        },
        "provisioningState": {
          "description": "The provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
          "type": "string"
        },
        "resourceGuid": {
          "description": "The resource GUID property of the network interface resource.",
          "type": "string"
        },
        "virtualMachine": {
          "$ref": "#/definitions/SubResource",
          "description": "The reference of a virtual machine."
        }
      }
    },
    "NetworkSecurityGroup": {
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "description": "NetworkSecurityGroup resource.",
      "properties": {
        "etag": {
          "description": "A unique read-only string that changes whenever the resource is updated.",
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/NetworkSecurityGroupPropertiesFormat",
          "x-ms-client-flatten": true
        }
      }
    },
    "NetworkSecurityGroupListResult": {
      "description": "Response for ListNetworkSecurityGroups API service call.",
      "properties": {
        "nextLink": {
          "description": "The URL to get the next set of results.",
          "type": "string"
        },
        "value": {
          "description": "A list of NetworkSecurityGroup resources.",
          "items": {
            "$ref": "#/definitions/NetworkSecurityGroup"
          },
          "type": "array"
        }
      }
    },
    "NetworkSecurityGroupPropertiesFormat": {
      "description": "Network Security Group resource.",
      "properties": {
        "defaultSecurityRules": {
          "description": "The default security rules of network security group.",
          "items": {
            "$ref": "#/definitions/SecurityRule"
          },
          "type": "array"
        },
        "networkInterfaces": {
          "description": "A collection of references to network interfaces.",
          "items": {
            "$ref": "#/definitions/NetworkInterface"
          },
          "readOnly": true,
          "type": "array"
        },
        "provisioningState": {
          "description": "The provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
          "type": "string"
        },
        "resourceGuid": {
          "description": "The resource GUID property of the network security group resource.",
          "type": "string"
        },
        "securityRules": {
          "description": "A collection of security rules of the network security group.",
          "items": {
            "$ref": "#/definitions/SecurityRule"
          },
          "type": "array"
        },
        "subnets": {
          "description": "A collection of references to subnets.",
          "items": {
            "$ref": "#/definitions/Subnet"
          },
          "readOnly": true,
          "type": "array"
        }
      }
    },
    "NetworkWatcher": {
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "description": "Network watcher in a resource group.",
      "properties": {
        "etag": {
          "description": "A unique read-only string that changes whenever the resource is updated.",
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/NetworkWatcherPropertiesFormat",
          "x-ms-client-flatten": true
        }
      }
    },
    "NetworkWatcherListResult": {
      "description": "List of network watcher resources.",
      "properties": {
        "value": {
          "items": {
            "$ref": "#/definitions/NetworkWatcher"
          },
          "type": "array"
        }
      }
    },
    "NetworkWatcherPropertiesFormat": {
      "description": "The network watcher properties.",
      "properties": {
        "provisioningState": {
          "description": "The provisioning state of the resource.",
          "enum": [
            "Succeeded",
            "Updating",
            "Deleting",
            "Failed"
          ],
          "readOnly": true,
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "ProvisioningState"
          }
        }
      }
    },
    "NextHopParameters": {
      "description": "Parameters that define the source and destination endpoint.",
      "properties": {
        "destinationIPAddress": {
          "description": "The destination IP address.",
          "type": "string"
        },
        "sourceIPAddress": {
          "description": "The source IP address.",
          "type": "string"
        },
        "targetNicResourceId": {
          "description": "The NIC ID. (If VM has multiple NICs and IP forwarding is enabled on any of the nics, then this parameter must be specified. Otherwise optional).",
          "type": "string"
        },
        "targetResourceId": {
          "description": "The resource identifier of the target resource against which the action is to be performed.",
          "type": "string"
        }
      },
      "required": [
        "targetResourceId",
        "sourceIPAddress",
        "destinationIPAddress"
      ]
    },
    "NextHopResult": {
      "description": "The information about next hop from the specified VM.",
      "properties": {
        "nextHopIpAddress": {
          "description": "Next hop IP Address",
          "type": "string"
        },
        "nextHopType": {
          "description": "Next hop type.",
          "enum": [
            "Internet",
            "VirtualAppliance",
            "VirtualNetworkGateway",
            "VnetLocal",
            "HyperNetGateway",
            "None"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "NextHopType"
          }
        },
        "routeTableId": {
          "description": "The resource identifier for the route table associated with the route being returned. If the route being returned does not correspond to any user created routes then this field will be the string 'System Route'.",
          "type": "string"
        }
      }
    },
    "OutboundNatRule": {
      "allOf": [
        {
          "$ref": "#/definitions/SubResource"
        }
      ],
      "description": "Outbound NAT pool of the load balancer.",
      "properties": {
        "etag": {
          "description": "A unique read-only string that changes whenever the resource is updated.",
          "type": "string"
        },
        "name": {
          "description": "The name of the resource that is unique within a resource group. This name can be used to access the resource.",
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/OutboundNatRulePropertiesFormat",
          "x-ms-client-flatten": true
        }
      }
    },
    "OutboundNatRulePropertiesFormat": {
      "description": "Outbound NAT pool of the load balancer.",
      "properties": {
        "allocatedOutboundPorts": {
          "description": "The number of outbound ports to be used for NAT.",
          "format": "int32",
          "type": "integer"
        },
        "backendAddressPool": {
          "$ref": "#/definitions/SubResource",
          "description": "A reference to a pool of DIPs. Outbound traffic is randomly load balanced across IPs in the backend IPs."
        },
        "frontendIPConfigurations": {
          "description": "The Frontend IP addresses of the load balancer.",
          "items": {
            "$ref": "#/definitions/SubResource"
          },
          "type": "array"
        },
        "provisioningState": {
          "description": "Gets the provisioning state of the PublicIP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
          "type": "string"
        }
      },
      "required": [
        "backendAddressPool"
      ]
    },
    "PacketCapture": {
      "description": "Parameters that define the create packet capture operation.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/PacketCaptureParameters",
          "x-ms-client-flatten": true
        }
      },
      "required": [
        "properties"
      ]
    },
    "PacketCaptureFilter": {
      "description": "Filter that is applied to packet capture request. Multiple filters can be applied.",
      "properties": {
        "localIPAddress": {
          "description": "Local IP Address to be filtered on. Notation: \"127.0.0.1\" for single address entry. \"127.0.0.1-127.0.0.255\" for range. \"127.0.0.1;127.0.0.5\"? for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported. Default = null.",
          "type": "string"
        },
        "localPort": {
          "description": "Local port to be filtered on. Notation: \"80\" for single port entry.\"80-85\" for range. \"80;443;\" for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported. Default = null.",
          "type": "string"
        },
        "protocol": {
          "default": "Any",
          "description": "Protocol to be filtered on.",
          "enum": [
            "TCP",
            "UDP",
            "Any"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "PcProtocol"
          }
        },
        "remoteIPAddress": {
          "description": "Local IP Address to be filtered on. Notation: \"127.0.0.1\" for single address entry. \"127.0.0.1-127.0.0.255\" for range. \"127.0.0.1;127.0.0.5;\" for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported. Default = null.",
          "type": "string"
        },
        "remotePort": {
          "description": "Remote port to be filtered on. Notation: \"80\" for single port entry.\"80-85\" for range. \"80;443;\" for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported. Default = null.",
          "type": "string"
        }
      }
    },
    "PacketCaptureListResult": {
      "description": "List of packet capture sessions.",
      "properties": {
        "value": {
          "description": "Information about packet capture sessions.",
          "items": {
            "$ref": "#/definitions/PacketCaptureResult"
          },
          "type": "array"
        }
      }
    },
    "PacketCaptureParameters": {
      "description": "Parameters that define the create packet capture operation.",
      "properties": {
        "bytesToCapturePerPacket": {
          "default": 0,
          "description": "Number of bytes captured per packet, the remaining bytes are truncated.",
          "type": "integer"
        },
        "filters": {
          "items": {
            "$ref": "#/definitions/PacketCaptureFilter"
          },
          "type": "array"
        },
        "storageLocation": {
          "$ref": "#/definitions/PacketCaptureStorageLocation"
        },
        "target": {
          "description": "The ID of the targeted resource, only VM is currently supported.",
          "type": "string"
        },
        "timeLimitInSeconds": {
          "default": 18000,
          "description": "Maximum duration of the capture session in seconds.",
          "type": "integer"
        },
        "totalBytesPerSession": {
          "default": 1073741824,
          "description": "Maximum size of the capture output.",
          "type": "integer"
        }
      },
      "required": [
        "target",
        "storageLocation"
      ]
    },
    "PacketCaptureQueryStatusResult": {
      "description": "Status of packet capture session.",
      "properties": {
        "captureStartTime": {
          "description": "The start time of the packet capture session.",
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "description": "The ID of the packet capture resource.",
          "type": "string"
        },
        "name": {
          "description": "The name of the packet capture resource.",
          "type": "string"
        },
        "packetCaptureError": {
          "description": "List of errors of packet capture session.",
          "items": {
            "enum": [
              "InternalError",
              "AgentStopped",
              "CaptureFailed",
              "LocalFileFailed",
              "StorageFailed"
            ],
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "PcError"
            }
          },
          "type": "array"
        },
        "packetCaptureStatus": {
          "description": "The status of the packet capture session.",
          "enum": [
            "NotStarted",
            "Running",
            "Stopped",
            "Error",
            "Unknown"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "PcStatus"
          }
        },
        "stopReason": {
          "description": "The reason the current packet capture session was stopped.",
          "type": "string"
        }
      }
    },
    "PacketCaptureResult": {
      "description": "Information about packet capture session.",
      "properties": {
        "etag": {
          "default": "A unique read-only string that changes whenever the resource is updated.",
          "type": "string"
        },
        "id": {
          "description": "ID of the packet capture operation.",
          "readOnly": true,
          "type": "string"
        },
        "name": {
          "description": "Name of the packet capture session.",
          "readOnly": true,
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/PacketCaptureResultProperties",
          "x-ms-client-flatten": true
        }
      }
    },
    "PacketCaptureResultProperties": {
      "allOf": [
        {
          "$ref": "#/definitions/PacketCaptureParameters"
        }
      ],
      "description": "Describes the properties of a packet capture session.",
      "properties": {
        "provisioningState": {
          "description": "The provisioning state of the packet capture session.",
          "enum": [
            "Succeeded",
            "Updating",
            "Deleting",
            "Failed"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "ProvisioningState"
          }
        }
      }
    },
    "PacketCaptureStorageLocation": {
      "description": "Describes the storage location for a packet capture session.",
      "properties": {
        "filePath": {
          "description": "A valid local path on the targeting VM. Must include the name of the capture file (*.cap). For linux virtual machine it must start with /var/captures. Required if no storage ID is provided, otherwise optional.",
          "type": "string"
        },
        "storageId": {
          "description": "The ID of the storage account to save the packet capture session. Required if no local file path is provided.",
          "type": "string"
        },
        "storagePath": {
          "description": "The URI of the storage path to save the packet capture. Must be a well-formed URI describing the location to save the packet capture.",
          "type": "string"
        }
      }
    },
    "PatchRouteFilter": {
      "allOf": [
        {
          "$ref": "#/definitions/SubResource"
        }
      ],
      "description": "Route Filter Resource.",
      "properties": {
        "etag": {
          "description": "A unique read-only string that changes whenever the resource is updated.",
          "readOnly": true,
          "type": "string"
        },
        "name": {
          "description": "The name of the resource that is unique within a resource group. This name can be used to access the resource.",
          "readOnly": true,
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/RouteFilterPropertiesFormat",
          "x-ms-client-flatten": true
        },
        "tags": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Resource tags.",
          "type": "object"
        },
        "type": {
          "description": "Resource type.",
          "readOnly": true,
          "type": "string"
        }
      }
    },
    "PatchRouteFilterRule": {
      "allOf": [
        {
          "$ref": "#/definitions/SubResource"
        }
      ],
      "description": "Route Filter Rule Resource",
      "properties": {
        "etag": {
          "description": "A unique read-only string that changes whenever the resource is updated.",
          "readOnly": true,
          "type": "string"
        },
        "name": {
          "description": "The name of the resource that is unique within a resource group. This name can be used to access the resource.",
          "readOnly": true,
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/RouteFilterRulePropertiesFormat",
          "x-ms-client-flatten": true
        },
        "tags": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Resource tags.",
          "type": "object"
        }
      }
    },
    "Probe": {
      "allOf": [
        {
          "$ref": "#/definitions/SubResource"
        }
      ],
      "description": "A load balancer probe.",
      "properties": {
        "etag": {
          "description": "A unique read-only string that changes whenever the resource is updated.",
          "type": "string"
        },
        "name": {
          "description": "Gets name of the resource that is unique within a resource group. This name can be used to access the resource.",
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/ProbePropertiesFormat",
          "x-ms-client-flatten": true
        }
      }
    },
    "ProbePropertiesFormat": {
      "properties": {
        "intervalInSeconds": {
          "description": "The interval, in seconds, for how frequently to probe the endpoint for health status. Typically, the interval is slightly less than half the allocated timeout period (in seconds) which allows two full probes before taking the instance out of rotation. The default value is 15, the minimum value is 5.",
          "format": "int32",
          "type": "integer"
        },
        "loadBalancingRules": {
          "description": "The load balancer rules that use this probe.",
          "items": {
            "$ref": "#/definitions/SubResource"
          },
          "readOnly": true,
          "type": "array"
        },
        "numberOfProbes": {
          "description": "The number of probes where if no response, will result in stopping further traffic from being delivered to the endpoint. This values allows endpoints to be taken out of rotation faster or slower than the typical times used in Azure.",
          "format": "int32",
          "type": "integer"
        },
        "port": {
          "description": "The port for communicating the probe. Possible values range from 1 to 65535, inclusive.",
          "format": "int32",
          "type": "integer"
        },
        "protocol": {
          "description": "The protocol of the end point. Possible values are: 'Http' or 'Tcp'. If 'Tcp' is specified, a received ACK is required for the probe to be successful. If 'Http' is specified, a 200 OK response from the specifies URI is required for the probe to be successful.",
          "enum": [
            "Http",
            "Tcp"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "ProbeProtocol"
          }
        },
        "provisioningState": {
          "description": "Gets the provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
          "type": "string"
        },
        "requestPath": {
          "description": "The URI used for requesting health status from the VM. Path is required if a protocol is set to http. Otherwise, it is not allowed. There is no default value.",
          "type": "string"
        }
      },
      "required": [
        "protocol",
        "port"
      ]
    },
    "PublicIPAddress": {
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "description": "Public IP address resource.",
      "properties": {
        "etag": {
          "description": "A unique read-only string that changes whenever the resource is updated.",
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/PublicIPAddressPropertiesFormat",
          "x-ms-client-flatten": true
        }
      }
    },
    "PublicIPAddressDnsSettings": {
      "description": "Contains FQDN of the DNS record associated with the public IP address",
      "properties": {
        "domainNameLabel": {
          "description": "Gets or sets the Domain name label.The concatenation of the domain name label and the regionalized DNS zone make up the fully qualified domain name associated with the public IP address. If a domain name label is specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system.",
          "type": "string"
        },
        "fqdn": {
          "description": "Gets the FQDN, Fully qualified domain name of the A DNS record associated with the public IP. This is the concatenation of the domainNameLabel and the regionalized DNS zone.",
          "type": "string"
        },
        "reverseFqdn": {
          "description": "Gets or Sets the Reverse FQDN. A user-visible, fully qualified domain name that resolves to this public IP address. If the reverseFqdn is specified, then a PTR DNS record is created pointing from the IP address in the in-addr.arpa domain to the reverse FQDN. ",
          "type": "string"
        }
      }
    },
    "PublicIPAddressListResult": {
      "description": "Response for ListPublicIpAddresses API service call.",
      "properties": {
        "nextLink": {
          "description": "The URL to get the next set of results.",
          "type": "string"
        },
        "value": {
          "description": "A list of public IP addresses that exists in a resource group.",
          "items": {
            "$ref": "#/definitions/PublicIPAddress"
          },
          "type": "array"
        }
      }
    },
    "PublicIPAddressPropertiesFormat": {
      "description": "Public IP address properties.",
      "properties": {
        "dnsSettings": {
          "$ref": "#/definitions/PublicIPAddressDnsSettings",
          "description": "The FQDN of the DNS record associated with the public IP address."
        },
        "idleTimeoutInMinutes": {
          "description": "The idle timeout of the public IP address.",
          "format": "int32",
          "type": "integer"
        },
        "ipAddress": {
          "type": "string"
        },
        "ipConfiguration": {
          "$ref": "#/definitions/IPConfiguration",
          "readOnly": true
        },
        "provisioningState": {
          "description": "The provisioning state of the PublicIP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
          "type": "string"
        },
        "publicIPAddressVersion": {
          "description": "The public IP address version. Possible values are: 'IPv4' and 'IPv6'.",
          "enum": [
            "IPv4",
            "IPv6"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "IPVersion"
          }
        },
        "publicIPAllocationMethod": {
          "description": "The public IP allocation method. Possible values are: 'Static' and 'Dynamic'.",
          "enum": [
            "Static",
            "Dynamic"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "IPAllocationMethod"
          }
        },
        "resourceGuid": {
          "description": "The resource GUID property of the public IP resource.",
          "type": "string"
        }
      }
    },
    "QueryTroubleshootingParameters": {
      "description": "Parameters that define the resource to query the troubleshooting result.",
      "properties": {
        "targetResourceId": {
          "description": "The target resource ID to query the troubleshooting result.",
          "type": "string"
        }
      },
      "required": [
        "targetResourceId"
      ]
    },
    "Resource": {
      "properties": {
        "id": {
          "description": "Resource ID.",
          "type": "string"
        },
        "location": {
          "description": "Resource location.",
          "type": "string"
        },
        "name": {
          "description": "Resource name.",
          "readOnly": true,
          "type": "string"
        },
        "tags": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Resource tags.",
          "type": "object"
        },
        "type": {
          "description": "Resource type.",
          "readOnly": true,
          "type": "string"
        }
      },
      "x-ms-azure-resource": true
    },
    "ResourceNavigationLink": {
      "allOf": [
        {
          "$ref": "#/definitions/SubResource"
        }
      ],
      "description": "ResourceNavigationLink resource.",
      "properties": {
        "etag": {
          "description": "A unique read-only string that changes whenever the resource is updated.",
          "readOnly": true,
          "type": "string"
        },
        "name": {
          "description": "Name of the resource that is unique within a resource group. This name can be used to access the resource.",
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/ResourceNavigationLinkFormat",
          "x-ms-client-flatten": true
        }
      }
    },
    "ResourceNavigationLinkFormat": {
      "description": "Properties of ResourceNavigationLink.",
      "properties": {
        "link": {
          "description": "Link to the external resource",
          "type": "string"
        },
        "linkedResourceType": {
          "description": "Resource type of the linked resource.",
          "type": "string"
        },
        "provisioningState": {
          "description": "Provisioning state of the ResourceNavigationLink resource.",
          "readOnly": true,
          "type": "string"
        }
      }
    },
    "RetentionPolicyParameters": {
      "description": "Parameters that define the retention policy for flow log.",
      "properties": {
        "days": {
          "default": 0,
          "description": "Number of days to retain flow log records.",
          "type": "integer"
        },
        "enabled": {
          "default": false,
          "description": "Flag to enable/disable retention.",
          "type": "boolean"
        }
      }
    },
    "Route": {
      "allOf": [
        {
          "$ref": "#/definitions/SubResource"
        }
      ],
      "description": "Route resource",
      "properties": {
        "etag": {
          "description": "A unique read-only string that changes whenever the resource is updated.",
          "type": "string"
        },
        "name": {
          "description": "The name of the resource that is unique within a resource group. This name can be used to access the resource.",
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/RoutePropertiesFormat",
          "x-ms-client-flatten": true
        }
      }
    },
    "RouteFilter": {
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "description": "Route Filter Resource.",
      "properties": {
        "etag": {
          "description": "Gets a unique read-only string that changes whenever the resource is updated.",
          "readOnly": true,
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/RouteFilterPropertiesFormat",
          "x-ms-client-flatten": true
        }
      },
      "required": [
        "location"
      ]
    },
    "RouteFilterListResult": {
      "description": "Response for the ListRouteFilters API service call.",
      "properties": {
        "nextLink": {
          "description": "The URL to get the next set of results.",
          "type": "string"
        },
        "value": {
          "description": "Gets a list of route filters in a resource group.",
          "items": {
            "$ref": "#/definitions/RouteFilter"
          },
          "type": "array"
        }
      }
    },
    "RouteFilterPropertiesFormat": {
      "description": "Route Filter Resource",
      "properties": {
        "peerings": {
          "description": "A collection of references to express route circuit peerings.",
          "items": {
            "$ref": "#/definitions/ExpressRouteCircuitPeering"
          },
          "readOnly": true,
          "type": "array"
        },
        "provisioningState": {
          "description": "The provisioning state of the resource. Possible values are: 'Updating', 'Deleting', 'Succeeded' and 'Failed'.",
          "readOnly": true,
          "type": "string"
        },
        "rules": {
          "description": "Collection of RouteFilterRules contained within a route filter.",
          "items": {
            "$ref": "#/definitions/RouteFilterRule"
          },
          "type": "array"
        }
      }
    },
    "RouteFilterRule": {
      "allOf": [
        {
          "$ref": "#/definitions/SubResource"
        }
      ],
      "description": "Route Filter Rule Resource",
      "properties": {
        "etag": {
          "description": "A unique read-only string that changes whenever the resource is updated.",
          "readOnly": true,
          "type": "string"
        },
        "location": {
          "description": "Resource location.",
          "type": "string"
        },
        "name": {
          "description": "The name of the resource that is unique within a resource group. This name can be used to access the resource.",
          "readOnly": true,
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/RouteFilterRulePropertiesFormat",
          "x-ms-client-flatten": true
        },
        "tags": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Resource tags.",
          "type": "object"
        }
      }
    },
    "RouteFilterRuleListResult": {
      "description": "Response for the ListRouteFilterRules API service call",
      "properties": {
        "nextLink": {
          "description": "The URL to get the next set of results.",
          "type": "string"
        },
        "value": {
          "description": "Gets a list of RouteFilterRules in a resource group.",
          "items": {
            "$ref": "#/definitions/RouteFilterRule"
          },
          "type": "array"
        }
      }
    },
    "RouteFilterRulePropertiesFormat": {
      "description": "Route Filter Rule Resource",
      "properties": {
        "access": {
          "description": "The access type of the rule. Valid values are: 'Allow', 'Deny'",
          "enum": [
            "Allow",
            "Deny"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "Access"
          }
        },
        "communities": {
          "description": "The collection for bgp community values to filter on. e.g. ['12076:5010','12076:5020']",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "provisioningState": {
          "description": "The provisioning state of the resource. Possible values are: 'Updating', 'Deleting', 'Succeeded' and 'Failed'.",
          "readOnly": true,
          "type": "string"
        },
        "routeFilterRuleType": {
          "description": "The rule type of the rule. Valid value is: 'Community'",
          "enum": [
            "Community"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "RouteFilterRuleType"
          }
        }
      },
      "required": [
        "access",
        "routeFilterRuleType",
        "communities"
      ]
    },
    "RouteListResult": {
      "description": "Response for the ListRoute API service call",
      "properties": {
        "nextLink": {
          "description": "The URL to get the next set of results.",
          "type": "string"
        },
        "value": {
          "description": "Gets a list of routes in a resource group.",
          "items": {
            "$ref": "#/definitions/Route"
          },
          "type": "array"
        }
      }
    },
    "RoutePropertiesFormat": {
      "description": "Route resource",
      "properties": {
        "addressPrefix": {
          "description": "The destination CIDR to which the route applies.",
          "type": "string"
        },
        "nextHopIpAddress": {
          "description": "The IP address packets should be forwarded to. Next hop values are only allowed in routes where the next hop type is VirtualAppliance.",
          "type": "string"
        },
        "nextHopType": {
          "description": "The type of Azure hop the packet should be sent to. Possible values are: 'VirtualNetworkGateway', 'VnetLocal', 'Internet', 'VirtualAppliance', and 'None'",
          "enum": [
            "VirtualNetworkGateway",
            "VnetLocal",
            "Internet",
            "VirtualAppliance",
            "None"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "RouteNextHopType"
          }
        },
        "provisioningState": {
          "description": "The provisioning state of the resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
          "type": "string"
        }
      },
      "required": [
        "nextHopType"
      ]
    },
    "RouteTable": {
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "description": "Route table resource.",
      "properties": {
        "etag": {
          "description": "Gets a unique read-only string that changes whenever the resource is updated.",
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/RouteTablePropertiesFormat",
          "x-ms-client-flatten": true
        }
      }
    },
    "RouteTableListResult": {
      "description": "Response for the ListRouteTable API service call.",
      "properties": {
        "nextLink": {
          "description": "The URL to get the next set of results.",
          "type": "string"
        },
        "value": {
          "description": "Gets a list of route tables in a resource group.",
          "items": {
            "$ref": "#/definitions/RouteTable"
          },
          "type": "array"
        }
      }
    },
    "RouteTablePropertiesFormat": {
      "description": "Route Table resource",
      "properties": {
        "provisioningState": {
          "description": "The provisioning state of the resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
          "type": "string"
        },
        "routes": {
          "description": "Collection of routes contained within a route table.",
          "items": {
            "$ref": "#/definitions/Route"
          },
          "type": "array"
        },
        "subnets": {
          "description": "A collection of references to subnets.",
          "items": {
            "$ref": "#/definitions/Subnet"
          },
          "readOnly": true,
          "type": "array"
        }
      }
    },
    "SecurityGroupNetworkInterface": {
      "description": "Network interface and all its associated security rules.",
      "properties": {
        "id": {
          "description": "ID of the network interface.",
          "type": "string"
        },
        "securityRuleAssociations": {
          "$ref": "#/definitions/SecurityRuleAssociations"
        }
      }
    },
    "SecurityGroupViewParameters": {
      "description": "Parameters that define the VM to check security groups for.",
      "properties": {
        "targetResourceId": {
          "description": "ID of the target VM.",
          "type": "string"
        }
      },
      "required": [
        "targetResourceId"
      ]
    },
    "SecurityGroupViewResult": {
      "description": "The information about security rules applied to the specified VM.",
      "properties": {
        "networkInterfaces": {
          "description": "List of network interfaces on the specified VM.",
          "items": {
            "$ref": "#/definitions/SecurityGroupNetworkInterface"
          },
          "type": "array"
        }
      }
    },
    "SecurityRule": {
      "allOf": [
        {
          "$ref": "#/definitions/SubResource"
        }
      ],
      "description": "Network security rule.",
      "properties": {
        "etag": {
          "description": "A unique read-only string that changes whenever the resource is updated.",
          "type": "string"
        },
        "name": {
          "description": "The name of the resource that is unique within a resource group. This name can be used to access the resource.",
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/SecurityRulePropertiesFormat",
          "x-ms-client-flatten": true
        }
      }
    },
    "SecurityRuleAssociations": {
      "description": "All security rules associated with the network interface.",
      "properties": {
        "defaultSecurityRules": {
          "description": "Collection of default security rules of the network security group.",
          "items": {
            "$ref": "#/definitions/SecurityRule"
          },
          "type": "array"
        },
        "effectiveSecurityRules": {
          "description": "Collection of effective security rules.",
          "items": {
            "$ref": "#/definitions/EffectiveNetworkSecurityRule"
          },
          "type": "array"
        },
        "networkInterfaceAssociation": {
          "$ref": "#/definitions/NetworkInterfaceAssociation"
        },
        "subnetAssociation": {
          "$ref": "#/definitions/SubnetAssociation"
        }
      }
    },
    "SecurityRuleListResult": {
      "description": "Response for ListSecurityRule API service call. Retrieves all security rules that belongs to a network security group.",
      "properties": {
        "nextLink": {
          "description": "The URL to get the next set of results.",
          "type": "string"
        },
        "value": {
          "description": "The security rules in a network security group.",
          "items": {
            "$ref": "#/definitions/SecurityRule"
          },
          "type": "array"
        }
      }
    },
    "SecurityRulePropertiesFormat": {
      "properties": {
        "access": {
          "description": "The network traffic is allowed or denied. Possible values are: 'Allow' and 'Deny'.",
          "enum": [
            "Allow",
            "Deny"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "SecurityRuleAccess"
          }
        },
        "description": {
          "description": "A description for this rule. Restricted to 140 chars.",
          "type": "string"
        },
        "destinationAddressPrefix": {
          "description": "The destination address prefix. CIDR or source IP range. Asterix '*' can also be used to match all source IPs. Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet' can also be used.",
          "type": "string"
        },
        "destinationPortRange": {
          "description": "The destination port or range. Integer or range between 0 and 65535. Asterix '*' can also be used to match all ports.",
          "type": "string"
        },
        "direction": {
          "description": "The direction of the rule. The direction specifies if rule will be evaluated on incoming or outcoming traffic. Possible values are: 'Inbound' and 'Outbound'.",
          "enum": [
            "Inbound",
            "Outbound"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "SecurityRuleDirection"
          }
        },
        "priority": {
          "description": "The priority of the rule. The value can be between 100 and 4096. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule.",
          "format": "int32",
          "type": "integer"
        },
        "protocol": {
          "description": "Network protocol this rule applies to. Possible values are 'Tcp', 'Udp', and '*'.",
          "enum": [
            "Tcp",
            "Udp",
            "*"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "SecurityRuleProtocol"
          }
        },
        "provisioningState": {
          "description": "The provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
          "type": "string"
        },
        "sourceAddressPrefix": {
          "description": "The CIDR or source IP range. Asterix '*' can also be used to match all source IPs. Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet' can also be used. If this is an ingress rule, specifies where network traffic originates from. ",
          "type": "string"
        },
        "sourcePortRange": {
          "description": "The source port or range. Integer or range between 0 and 65535. Asterix '*' can also be used to match all ports.",
          "type": "string"
        }
      },
      "required": [
        "protocol",
        "sourceAddressPrefix",
        "destinationAddressPrefix",
        "access",
        "direction"
      ]
    },
    "SubResource": {
      "properties": {
        "id": {
          "description": "Resource ID.",
          "type": "string"
        }
      },
      "x-ms-azure-resource": true
    },
    "Subnet": {
      "allOf": [
        {
          "$ref": "#/definitions/SubResource"
        }
      ],
      "description": "Subnet in a virtual network resource.",
      "properties": {
        "etag": {
          "description": "A unique read-only string that changes whenever the resource is updated.",
          "type": "string"
        },
        "name": {
          "description": "The name of the resource that is unique within a resource group. This name can be used to access the resource.",
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/SubnetPropertiesFormat",
          "x-ms-client-flatten": true
        }
      }
    },
    "SubnetAssociation": {
      "description": "Network interface and its custom security rules.",
      "properties": {
        "id": {
          "description": "Subnet ID.",
          "readOnly": true,
          "type": "string"
        },
        "securityRules": {
          "description": "Collection of custom security rules.",
          "items": {
            "$ref": "#/definitions/SecurityRule"
          },
          "type": "array"
        }
      }
    },
    "SubnetListResult": {
      "description": "Response for ListSubnets API service callRetrieves all subnet that belongs to a virtual network",
      "properties": {
        "nextLink": {
          "description": "The URL to get the next set of results.",
          "type": "string"
        },
        "value": {
          "description": "The subnets in a virtual network.",
          "items": {
            "$ref": "#/definitions/Subnet"
          },
          "type": "array"
        }
      }
    },
    "SubnetPropertiesFormat": {
      "properties": {
        "addressPrefix": {
          "description": "The address prefix for the subnet.",
          "type": "string"
        },
        "ipConfigurations": {
          "description": "Gets an array of references to the network interface IP configurations using subnet.",
          "items": {
            "$ref": "#/definitions/IPConfiguration"
          },
          "readOnly": true,
          "type": "array"
        },
        "networkSecurityGroup": {
          "$ref": "#/definitions/NetworkSecurityGroup",
          "description": "The reference of the NetworkSecurityGroup resource."
        },
        "provisioningState": {
          "description": "The provisioning state of the resource.",
          "type": "string"
        },
        "resourceNavigationLinks": {
          "description": "Gets an array of references to the external resources using subnet.",
          "items": {
            "$ref": "#/definitions/ResourceNavigationLink"
          },
          "type": "array"
        },
        "routeTable": {
          "$ref": "#/definitions/RouteTable",
          "description": "The reference of the RouteTable resource."
        }
      }
    },
    "Topology": {
      "description": "Topology of the specified resource group.",
      "properties": {
        "createdDateTime": {
          "description": "The datetime when the topology was initially created for the resource group.",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "id": {
          "description": "GUID representing the operation id.",
          "readOnly": true,
          "type": "string"
        },
        "lastModified": {
          "description": "The datetime when the topology was last modified.",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "resources": {
          "items": {
            "$ref": "#/definitions/TopologyResource"
          },
          "type": "array"
        }
      }
    },
    "TopologyAssociation": {
      "description": "Resources that have an association with the parent resource.",
      "properties": {
        "associationType": {
          "description": "The association type of the child resource to the parent resource.",
          "enum": [
            "Associated",
            "Contains"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "AssociationType"
          }
        },
        "name": {
          "description": "The name of the resource that is associated with the parent resource.",
          "type": "string"
        },
        "resourceId": {
          "description": "The ID of the resource that is associated with the parent resource.",
          "type": "string"
        }
      }
    },
    "TopologyParameters": {
      "description": "Parameters that define the representation of topology.",
      "properties": {
        "targetResourceGroupName": {
          "description": "The name of the target resource group to perform topology on.",
          "type": "string"
        }
      },
      "required": [
        "targetResourceGroupName"
      ]
    },
    "TopologyResource": {
      "description": "The network resource topology information for the given resource group.",
      "properties": {
        "associations": {
          "description": "Holds the associations the resource has with other resources in the resource group.",
          "items": {
            "$ref": "#/definitions/TopologyAssociation"
          },
          "type": "array"
        },
        "id": {
          "description": "ID of the resource.",
          "type": "string"
        },
        "location": {
          "description": "Resource location.",
          "type": "string"
        },
        "name": {
          "description": "Name of the resource.",
          "type": "string"
        }
      }
    },
    "TroubleshootingDetails": {
      "description": "Information gained from troubleshooting of specified resource.",
      "properties": {
        "detail": {
          "description": "Details on troubleshooting results.",
          "type": "string"
        },
        "id": {
          "description": "The id of the get troubleshoot operation.",
          "type": "string"
        },
        "reasonType": {
          "description": "Reason type of failure.",
          "type": "string"
        },
        "recommendedActions": {
          "description": "List of recommended actions.",
          "items": {
            "$ref": "#/definitions/TroubleshootingRecommendedActions"
          },
          "type": "array"
        },
        "summary": {
          "description": "A summary of troubleshooting.",
          "type": "string"
        }
      }
    },
    "TroubleshootingParameters": {
      "description": "Parameters that define the resource to troubleshoot.",
      "properties": {
        "properties": {
          "$ref": "#/definitions/TroubleshootingProperties",
          "x-ms-client-flatten": true
        },
        "targetResourceId": {
          "description": "The target resource to troubleshoot.",
          "type": "string"
        }
      },
      "required": [
        "targetResourceId",
        "properties"
      ]
    },
    "TroubleshootingProperties": {
      "description": "Storage location provided for troubleshoot.",
      "properties": {
        "storageId": {
          "description": "The ID for the storage account to save the troubleshoot result.",
          "type": "string"
        },
        "storagePath": {
          "description": "The path to the blob to save the troubleshoot result in.",
          "type": "string"
        }
      },
      "required": [
        "storageId",
        "storagePath"
      ]
    },
    "TroubleshootingRecommendedActions": {
      "description": "Recommended actions based on discovered issues.",
      "properties": {
        "actionId": {
          "description": "ID of the recommended action.",
          "type": "string"
        },
        "actionText": {
          "description": "Description of recommended actions.",
          "type": "string"
        },
        "actionUri": {
          "description": "The uri linking to a documentation for the recommended troubleshooting actions.",
          "type": "string"
        },
        "actionUriText": {
          "description": "The information from the URI for the recommended troubleshooting actions.",
          "type": "string"
        }
      }
    },
    "TroubleshootingResult": {
      "description": "Troubleshooting information gained from specified resource.",
      "properties": {
        "code": {
          "description": "The result code of the troubleshooting.",
          "type": "string"
        },
        "endTime": {
          "description": "The end time of the troubleshooting.",
          "format": "date-time",
          "type": "string"
        },
        "results": {
          "description": "Information from troubleshooting.",
          "items": {
            "$ref": "#/definitions/TroubleshootingDetails"
          },
          "type": "array"
        },
        "startTime": {
          "description": "The start time of the troubleshooting.",
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "TunnelConnectionHealth": {
      "description": "VirtualNetworkGatewayConnection properties",
      "properties": {
        "connectionStatus": {
          "description": "Virtual network Gateway connection status",
          "enum": [
            "Unknown",
            "Connecting",
            "Connected",
            "NotConnected"
          ],
          "readOnly": true,
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "VirtualNetworkGatewayConnectionStatus"
          }
        },
        "egressBytesTransferred": {
          "description": "The Egress Bytes Transferred in this connection",
          "format": "int64",
          "readOnly": true,
          "type": "integer"
        },
        "ingressBytesTransferred": {
          "description": "The Ingress Bytes Transferred in this connection",
          "format": "int64",
          "readOnly": true,
          "type": "integer"
        },
        "lastConnectionEstablishedUtcTime": {
          "description": "The time at which connection was established in Utc format.",
          "readOnly": true,
          "type": "string"
        },
        "tunnel": {
          "description": "Tunnel name.",
          "readOnly": true,
          "type": "string"
        }
      }
    },
    "Usage": {
      "description": "Describes network resource usage.",
      "properties": {
        "currentValue": {
          "description": "The current value of the usage.",
          "format": "int64",
          "type": "integer"
        },
        "limit": {
          "description": "The limit of usage.",
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "$ref": "#/definitions/UsageName",
          "description": "The name of the type of usage."
        },
        "unit": {
          "description": "An enum describing the unit of measurement.",
          "enum": [
            "Count"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "UsageUnit"
          }
        }
      },
      "required": [
        "unit",
        "currentValue",
        "limit",
        "name"
      ]
    },
    "UsageName": {
      "description": "The usage names.",
      "properties": {
        "localizedValue": {
          "description": "A localized string describing the resource name.",
          "type": "string"
        },
        "value": {
          "description": "A string describing the resource name.",
          "type": "string"
        }
      }
    },
    "UsagesListResult": {
      "description": "The list usages operation response.",
      "properties": {
        "nextLink": {
          "description": "URL to get the next set of results.",
          "type": "string"
        },
        "value": {
          "description": "The list network resource usages.",
          "items": {
            "$ref": "#/definitions/Usage"
          },
          "type": "array"
        }
      }
    },
    "VerificationIPFlowParameters": {
      "description": "Parameters that define the IP flow to be verified.",
      "properties": {
        "direction": {
          "description": "The direction of the packet represented as a 5-tuple.",
          "enum": [
            "Inbound",
            "Outbound"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "Direction"
          }
        },
        "localIPAddress": {
          "description": "The local IP address. Acceptable values are valid IPv4 addresses.",
          "type": "string"
        },
        "localPort": {
          "description": "The local port. Acceptable values are a single integer in the range (0-65535). Support for * for the source port, which depends on the direction.",
          "type": "string"
        },
        "protocol": {
          "description": "Protocol to be verified on.",
          "enum": [
            "TCP",
            "UDP"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "Protocol"
          }
        },
        "remoteIPAddress": {
          "description": "The remote IP address. Acceptable values are valid IPv4 addresses.",
          "type": "string"
        },
        "remotePort": {
          "description": "The remote port. Acceptable values are a single integer in the range (0-65535). Support for * for the source port, which depends on the direction.",
          "type": "string"
        },
        "targetNicResourceId": {
          "description": "The NIC ID. (If VM has multiple NICs and IP forwarding is enabled on any of them, then this parameter must be specified. Otherwise optional).",
          "type": "string"
        },
        "targetResourceId": {
          "description": "The ID of the target resource to perform next-hop on.",
          "type": "string"
        }
      },
      "required": [
        "targetResourceId",
        "direction",
        "protocol",
        "localPort",
        "remotePort",
        "localIPAddress",
        "remoteIPAddress"
      ]
    },
    "VerificationIPFlowResult": {
      "description": "Results of IP flow verification on the target resource.",
      "properties": {
        "access": {
          "description": "Indicates whether the traffic is allowed or denied.",
          "enum": [
            "Allow",
            "Deny"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "Access"
          }
        },
        "ruleName": {
          "description": "Name of the rule. If input is not matched against any security rule, it is not displayed.",
          "type": "string"
        }
      }
    },
    "VirtualNetwork": {
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "description": "Virtual Network resource.",
      "properties": {
        "etag": {
          "description": "Gets a unique read-only string that changes whenever the resource is updated.",
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/VirtualNetworkPropertiesFormat",
          "x-ms-client-flatten": true
        }
      }
    },
    "VirtualNetworkGateway": {
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "description": "A common class for general resource information",
      "properties": {
        "etag": {
          "description": "Gets a unique read-only string that changes whenever the resource is updated.",
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/VirtualNetworkGatewayPropertiesFormat",
          "x-ms-client-flatten": true
        }
      },
      "required": [
        "properties"
      ]
    },
    "VirtualNetworkGatewayConnection": {
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "description": "A common class for general resource information",
      "properties": {
        "etag": {
          "description": "Gets a unique read-only string that changes whenever the resource is updated.",
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/VirtualNetworkGatewayConnectionPropertiesFormat",
          "x-ms-client-flatten": true
        }
      },
      "required": [
        "properties"
      ]
    },
    "VirtualNetworkGatewayConnectionListResult": {
      "description": "Response for the ListVirtualNetworkGatewayConnections API service call",
      "properties": {
        "nextLink": {
          "description": "The URL to get the next set of results.",
          "type": "string"
        },
        "value": {
          "description": "Gets a list of VirtualNetworkGatewayConnection resources that exists in a resource group.",
          "items": {
            "$ref": "#/definitions/VirtualNetworkGatewayConnection"
          },
          "type": "array"
        }
      }
    },
    "VirtualNetworkGatewayConnectionPropertiesFormat": {
      "description": "VirtualNetworkGatewayConnection properties",
      "properties": {
        "authorizationKey": {
          "description": "The authorizationKey.",
          "type": "string"
        },
        "connectionStatus": {
          "description": "Virtual network Gateway connection status. Possible values are 'Unknown', 'Connecting', 'Connected' and 'NotConnected'.",
          "enum": [
            "Unknown",
            "Connecting",
            "Connected",
            "NotConnected"
          ],
          "readOnly": true,
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "VirtualNetworkGatewayConnectionStatus"
          }
        },
        "connectionType": {
          "description": "Gateway connection type. Possible values are: 'Ipsec','Vnet2Vnet','ExpressRoute', and 'VPNClient.",
          "enum": [
            "IPsec",
            "Vnet2Vnet",
            "ExpressRoute",
            "VPNClient"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "VirtualNetworkGatewayConnectionType"
          }
        },
        "egressBytesTransferred": {
          "description": "The egress bytes transferred in this connection.",
          "format": "int64",
          "readOnly": true,
          "type": "integer"
        },
        "enableBgp": {
          "description": "EnableBgp flag",
          "type": "boolean"
        },
        "ingressBytesTransferred": {
          "description": "The ingress bytes transferred in this connection.",
          "format": "int64",
          "readOnly": true,
          "type": "integer"
        },
        "localNetworkGateway2": {
          "$ref": "#/definitions/LocalNetworkGateway"
        },
        "peer": {
          "$ref": "#/definitions/SubResource",
          "description": "The reference to peerings resource."
        },
        "provisioningState": {
          "description": "The provisioning state of the VirtualNetworkGatewayConnection resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
          "readOnly": true,
          "type": "string"
        },
        "resourceGuid": {
          "description": "The resource GUID property of the VirtualNetworkGatewayConnection resource.",
          "type": "string"
        },
        "routingWeight": {
          "description": "The routing weight.",
          "format": "int32",
          "type": "integer"
        },
        "sharedKey": {
          "description": "The IPSec shared key.",
          "type": "string"
        },
        "tunnelConnectionStatus": {
          "description": "Collection of all tunnels' connection health status.",
          "items": {
            "$ref": "#/definitions/TunnelConnectionHealth"
          },
          "readOnly": true,
          "type": "array"
        },
        "virtualNetworkGateway1": {
          "$ref": "#/definitions/VirtualNetworkGateway"
        },
        "virtualNetworkGateway2": {
          "$ref": "#/definitions/VirtualNetworkGateway"
        }
      },
      "required": [
        "virtualNetworkGateway1",
        "connectionType"
      ]
    },
    "VirtualNetworkGatewayIPConfiguration": {
      "allOf": [
        {
          "$ref": "#/definitions/SubResource"
        }
      ],
      "description": "IP configuration for virtual network gateway",
      "properties": {
        "etag": {
          "description": "A unique read-only string that changes whenever the resource is updated.",
          "type": "string"
        },
        "name": {
          "description": "The name of the resource that is unique within a resource group. This name can be used to access the resource.",
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/VirtualNetworkGatewayIPConfigurationPropertiesFormat",
          "x-ms-client-flatten": true
        }
      }
    },
    "VirtualNetworkGatewayIPConfigurationPropertiesFormat": {
      "description": "Properties of VirtualNetworkGatewayIPConfiguration",
      "properties": {
        "privateIPAllocationMethod": {
          "description": "The private IP allocation method. Possible values are: 'Static' and 'Dynamic'.",
          "enum": [
            "Static",
            "Dynamic"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "IPAllocationMethod"
          }
        },
        "provisioningState": {
          "description": "The provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
          "readOnly": true,
          "type": "string"
        },
        "publicIPAddress": {
          "$ref": "#/definitions/SubResource",
          "description": "The reference of the public IP resource."
        },
        "subnet": {
          "$ref": "#/definitions/SubResource",
          "description": "The reference of the subnet resource."
        }
      }
    },
    "VirtualNetworkGatewayListResult": {
      "description": "Response for the ListVirtualNetworkGateways API service call.",
      "properties": {
        "nextLink": {
          "description": "The URL to get the next set of results.",
          "type": "string"
        },
        "value": {
          "description": "Gets a list of VirtualNetworkGateway resources that exists in a resource group.",
          "items": {
            "$ref": "#/definitions/VirtualNetworkGateway"
          },
          "type": "array"
        }
      }
    },
    "VirtualNetworkGatewayPropertiesFormat": {
      "description": "VirtualNetworkGateway properties",
      "properties": {
        "activeActive": {
          "description": "ActiveActive flag",
          "type": "boolean"
        },
        "bgpSettings": {
          "$ref": "#/definitions/BgpSettings",
          "description": "Virtual network gateway's BGP speaker settings."
        },
        "enableBgp": {
          "description": "Whether BGP is enabled for this virtual network gateway or not.",
          "type": "boolean"
        },
        "gatewayDefaultSite": {
          "$ref": "#/definitions/SubResource",
          "description": "The reference of the LocalNetworkGateway resource which represents local network site having default routes. Assign Null value in case of removing existing default site setting."
        },
        "gatewayType": {
          "description": "The type of this virtual network gateway. Possible values are: 'Vpn' and 'ExpressRoute'.",
          "enum": [
            "Vpn",
            "ExpressRoute"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "VirtualNetworkGatewayType"
          }
        },
        "ipConfigurations": {
          "description": "IP configurations for virtual network gateway.",
          "items": {
            "$ref": "#/definitions/VirtualNetworkGatewayIPConfiguration"
          },
          "type": "array"
        },
        "provisioningState": {
          "description": "The provisioning state of the VirtualNetworkGateway resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
          "readOnly": true,
          "type": "string"
        },
        "resourceGuid": {
          "description": "The resource GUID property of the VirtualNetworkGateway resource.",
          "type": "string"
        },
        "sku": {
          "$ref": "#/definitions/VirtualNetworkGatewaySku",
          "description": "The reference of the VirtualNetworkGatewaySku resource which represents the SKU selected for Virtual network gateway."
        },
        "vpnClientConfiguration": {
          "$ref": "#/definitions/VpnClientConfiguration",
          "description": "The reference of the VpnClientConfiguration resource which represents the P2S VpnClient configurations."
        },
        "vpnType": {
          "description": "The type of this virtual network gateway. Possible values are: 'PolicyBased' and 'RouteBased'.",
          "enum": [
            "PolicyBased",
            "RouteBased"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "VpnType"
          }
        }
      }
    },
    "VirtualNetworkGatewaySku": {
      "description": "VirtualNetworkGatewaySku details",
      "properties": {
        "capacity": {
          "description": "The capacity.",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "description": "Gateway SKU name. Possible values are: 'Basic', 'HighPerformance','Standard', and 'UltraPerformance'.",
          "enum": [
            "Basic",
            "HighPerformance",
            "Standard",
            "UltraPerformance"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "VirtualNetworkGatewaySkuName"
          }
        },
        "tier": {
          "description": "Gateway SKU tier. Possible values are: 'Basic', 'HighPerformance','Standard', and 'UltraPerformance'.",
          "enum": [
            "Basic",
            "HighPerformance",
            "Standard",
            "UltraPerformance"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "VirtualNetworkGatewaySkuTier"
          }
        }
      }
    },
    "VirtualNetworkListResult": {
      "description": "Response for the ListVirtualNetworks API service call.",
      "properties": {
        "nextLink": {
          "description": "The URL to get the next set of results.",
          "type": "string"
        },
        "value": {
          "description": "Gets a list of VirtualNetwork resources in a resource group.",
          "items": {
            "$ref": "#/definitions/VirtualNetwork"
          },
          "type": "array"
        }
      }
    },
    "VirtualNetworkPeering": {
      "allOf": [
        {
          "$ref": "#/definitions/SubResource"
        }
      ],
      "description": "Peerings in a virtual network resource.",
      "properties": {
        "etag": {
          "description": "A unique read-only string that changes whenever the resource is updated.",
          "type": "string"
        },
        "name": {
          "description": "The name of the resource that is unique within a resource group. This name can be used to access the resource.",
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/VirtualNetworkPeeringPropertiesFormat",
          "x-ms-client-flatten": true
        }
      }
    },
    "VirtualNetworkPeeringListResult": {
      "description": "Response for ListSubnets API service call. Retrieves all subnets that belong to a virtual network.",
      "properties": {
        "nextLink": {
          "description": "The URL to get the next set of results.",
          "type": "string"
        },
        "value": {
          "description": "The peerings in a virtual network.",
          "items": {
            "$ref": "#/definitions/VirtualNetworkPeering"
          },
          "type": "array"
        }
      }
    },
    "VirtualNetworkPeeringPropertiesFormat": {
      "properties": {
        "allowForwardedTraffic": {
          "description": "Whether the forwarded traffic from the VMs in the remote virtual network will be allowed/disallowed.",
          "type": "boolean"
        },
        "allowGatewayTransit": {
          "description": "If gateway links can be used in remote virtual networking to link to this virtual network.",
          "type": "boolean"
        },
        "allowVirtualNetworkAccess": {
          "description": "Whether the VMs in the linked virtual network space would be able to access all the VMs in local Virtual network space.",
          "type": "boolean"
        },
        "peeringState": {
          "description": "The status of the virtual network peering. Possible values are 'Initiated', 'Connected', and 'Disconnected'.",
          "enum": [
            "Initiated",
            "Connected",
            "Disconnected"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "VirtualNetworkPeeringState"
          }
        },
        "provisioningState": {
          "description": "The provisioning state of the resource.",
          "type": "string"
        },
        "remoteVirtualNetwork": {
          "$ref": "#/definitions/SubResource",
          "description": "The reference of the remote virtual network."
        },
        "useRemoteGateways": {
          "description": "If remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway.",
          "type": "boolean"
        }
      }
    },
    "VirtualNetworkPropertiesFormat": {
      "properties": {
        "addressSpace": {
          "$ref": "#/definitions/AddressSpace",
          "description": "The AddressSpace that contains an array of IP address ranges that can be used by subnets."
        },
        "dhcpOptions": {
          "$ref": "#/definitions/DhcpOptions",
          "description": "The dhcpOptions that contains an array of DNS servers available to VMs deployed in the virtual network."
        },
        "provisioningState": {
          "description": "The provisioning state of the PublicIP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
          "type": "string"
        },
        "resourceGuid": {
          "description": "The resourceGuid property of the Virtual Network resource.",
          "type": "string"
        },
        "subnets": {
          "description": "A list of subnets in a Virtual Network.",
          "items": {
            "$ref": "#/definitions/Subnet"
          },
          "type": "array"
        },
        "virtualNetworkPeerings": {
          "description": "A list of peerings in a Virtual Network.",
          "items": {
            "$ref": "#/definitions/VirtualNetworkPeering"
          },
          "type": "array"
        }
      }
    },
    "VpnClientConfiguration": {
      "description": "VpnClientConfiguration for P2S client.",
      "properties": {
        "vpnClientAddressPool": {
          "$ref": "#/definitions/AddressSpace",
          "description": "The reference of the address space resource which represents Address space for P2S VpnClient."
        },
        "vpnClientRevokedCertificates": {
          "description": "VpnClientRevokedCertificate for Virtual network gateway.",
          "items": {
            "$ref": "#/definitions/VpnClientRevokedCertificate"
          },
          "type": "array"
        },
        "vpnClientRootCertificates": {
          "description": "VpnClientRootCertificate for virtual network gateway.",
          "items": {
            "$ref": "#/definitions/VpnClientRootCertificate"
          },
          "type": "array"
        }
      }
    },
    "VpnClientParameters": {
      "description": "VpnClientParameters",
      "properties": {
        "ProcessorArchitecture": {
          "description": "VPN client Processor Architecture. Possible values are: 'AMD64' and 'X86'.",
          "enum": [
            "Amd64",
            "X86"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": true,
            "name": "ProcessorArchitecture"
          }
        }
      },
      "required": [
        "ProcessorArchitecture"
      ]
    },
    "VpnClientRevokedCertificate": {
      "allOf": [
        {
          "$ref": "#/definitions/SubResource"
        }
      ],
      "description": "VPN client revoked certificate of virtual network gateway.",
      "properties": {
        "etag": {
          "description": "A unique read-only string that changes whenever the resource is updated.",
          "type": "string"
        },
        "name": {
          "description": "The name of the resource that is unique within a resource group. This name can be used to access the resource.",
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/VpnClientRevokedCertificatePropertiesFormat",
          "x-ms-client-flatten": true
        }
      }
    },
    "VpnClientRevokedCertificatePropertiesFormat": {
      "description": "Properties of the revoked VPN client certificate of virtual network gateway.",
      "properties": {
        "provisioningState": {
          "description": "The provisioning state of the VPN client revoked certificate resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
          "readOnly": true,
          "type": "string"
        },
        "thumbprint": {
          "description": "The revoked VPN client certificate thumbprint.",
          "type": "string"
        }
      }
    },
    "VpnClientRootCertificate": {
      "allOf": [
        {
          "$ref": "#/definitions/SubResource"
        }
      ],
      "description": "VPN client root certificate of virtual network gateway",
      "properties": {
        "etag": {
          "description": "A unique read-only string that changes whenever the resource is updated.",
          "type": "string"
        },
        "name": {
          "description": "The name of the resource that is unique within a resource group. This name can be used to access the resource.",
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/VpnClientRootCertificatePropertiesFormat",
          "x-ms-client-flatten": true
        }
      },
      "required": [
        "properties"
      ]
    },
    "VpnClientRootCertificatePropertiesFormat": {
      "description": "Properties of SSL certificates of application gateway",
      "properties": {
        "provisioningState": {
          "description": "The provisioning state of the VPN client root certificate resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.",
          "readOnly": true,
          "type": "string"
        },
        "publicCertData": {
          "description": "The certificate public data.",
          "type": "string"
        }
      },
      "required": [
        "publicCertData"
      ]
    }
  },
  "host": "management.azure.com",
  "info": {
    "description": "The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.",
    "title": "Network",
    "version": "2016-12-01"
  },
  "parameters": {
    "ApiVersionParameter": {
      "description": "Client API version.",
      "in": "query",
      "name": "api-version",
      "required": true,
      "type": "string"
    },
    "SubscriptionIdParameter": {
      "description": "The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.",
      "in": "path",
      "name": "subscriptionId",
      "required": true,
      "type": "string"
    }
  },
  "paths": {
    "/subscriptions/{subscriptionId}/providers/Microsoft.Network/applicationGateways": {
      "get": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Gets all the application gateways in a subscription.",
        "operationId": "ApplicationGateways_ListAll",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Success. The operation returns a list of ApplicationGateway resources.",
            "schema": {
              "$ref": "#/definitions/ApplicationGatewayListResult"
            }
          }
        },
        "tags": [
          "ApplicationGateways"
        ],
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.Network/bgpServiceCommunities": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Gets all the available bgp service communities.",
        "operationId": "BgpServiceCommunities_List",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns a list of BgpServiceCommunity resources.",
            "schema": {
              "$ref": "#/definitions/BgpServiceCommunityListResult"
            }
          }
        },
        "tags": [
          "BgpServiceCommunities"
        ],
        "x-ms-examples": {
          "ServiceCommunityList": {
            "parameters": {
              "api-version": "2016-12-01",
              "subscriptionId": "subid"
            },
            "responses": {
              "200": {
                "body": {
                  "value": [
                    {
                      "id": "/subscriptions/subid/providers/Microsofot.Network/bgpServiceCommunities/skype",
                      "name": "skype",
                      "properties": {
                        "bgpCommunities": [
                          {
                            "communityName": "Skype For Business Online",
                            "communityPrefixes": [
                              "13.67.56.225/32",
                              "13.67.186.105/32"
                            ],
                            "communityValue": "12076:5030",
                            "serviceSupportedRegion": "Global"
                          }
                        ],
                        "serviceName": "skype"
                      },
                      "type": "Microsofot.Network/bgpServiceCommunities"
                    },
                    {
                      "id": "/subscriptions/subid/providers/Microsofot.Network/bgpServiceCommunities/exchange",
                      "name": "exchange",
                      "properties": {
                        "bgpCommunities": [
                          {
                            "communityName": "Exchange Online",
                            "communityPrefixes": [
                              "13.67.56.225/32",
                              "13.67.186.105/32"
                            ],
                            "communityValue": "12076:5040",
                            "serviceSupportedRegion": "Global"
                          }
                        ],
                        "serviceName": "exchange"
                      },
                      "type": "Microsofot.Network/bgpServiceCommunities"
                    }
                  ]
                }
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.Network/expressRouteCircuits": {
      "get": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Gets all the express route circuits in a subscription.",
        "operationId": "ExpressRouteCircuits_ListAll",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns a list of ExpressRouteCircuit resources.",
            "schema": {
              "$ref": "#/definitions/ExpressRouteCircuitListResult"
            }
          }
        },
        "tags": [
          "ExpressRouteCircuits"
        ],
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.Network/expressRouteServiceProviders": {
      "get": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Gets all the available express route service providers.",
        "operationId": "ExpressRouteServiceProviders_List",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns a list of ExpressRouteServiceProdiver resources.",
            "schema": {
              "$ref": "#/definitions/ExpressRouteServiceProviderListResult"
            }
          }
        },
        "tags": [
          "ExpressRouteServiceProviders"
        ],
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.Network/loadBalancers": {
      "get": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Gets all the load balancers in a subscription.",
        "operationId": "LoadBalancers_ListAll",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns a list of LoadBalancer resources.",
            "schema": {
              "$ref": "#/definitions/LoadBalancerListResult"
            }
          }
        },
        "tags": [
          "LoadBalancers"
        ],
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.Network/locations/{location}/CheckDnsNameAvailability": {
      "get": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Checks whether a domain name in the cloudapp.net zone is available for use.",
        "operationId": "CheckDnsNameAvailability",
        "parameters": [
          {
            "description": "The location of the domain name.",
            "in": "path",
            "name": "location",
            "required": true,
            "type": "string"
          },
          {
            "description": "The domain name to be verified. It must conform to the following regular expression: ^[a-z][a-z0-9-]{1,61}[a-z0-9]$.",
            "in": "query",
            "name": "domainNameLabel",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. Returns whether the DNS name is available.",
            "schema": {
              "$ref": "#/definitions/DnsNameAvailabilityResult"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.Network/locations/{location}/usages": {
      "get": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Lists compute usages for a subscription.",
        "operationId": "Usages_List",
        "parameters": [
          {
            "description": "The location where resource usage is queried.",
            "in": "path",
            "name": "location",
            "pattern": "^[-\\w\\._]+$",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns a list of Usage resources.",
            "schema": {
              "$ref": "#/definitions/UsagesListResult"
            }
          }
        },
        "tags": [
          "Usages"
        ],
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.Network/networkInterfaces": {
      "get": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Gets all network interfaces in a subscription.",
        "operationId": "NetworkInterfaces_ListAll",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns a list of NetworkInterface resources.",
            "schema": {
              "$ref": "#/definitions/NetworkInterfaceListResult"
            }
          }
        },
        "tags": [
          "NetworkInterfaces"
        ],
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.Network/networkSecurityGroups": {
      "get": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Gets all network security groups in a subscription.",
        "operationId": "NetworkSecurityGroups_ListAll",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns a list of NetworkSecurityGroup resources.",
            "schema": {
              "$ref": "#/definitions/NetworkSecurityGroupListResult"
            }
          }
        },
        "tags": [
          "NetworkSecurityGroups"
        ],
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.Network/networkWatchers": {
      "get": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Gets all network watchers by subscription.",
        "operationId": "NetworkWatchers_ListAll",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns a list of network watcher resources.",
            "schema": {
              "$ref": "#/definitions/NetworkWatcherListResult"
            }
          }
        },
        "tags": [
          "NetworkWatchers"
        ],
        "x-ms-pageable": {
          "nextLinkName": null
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.Network/publicIPAddresses": {
      "get": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Gets all the public IP addresses in a subscription.",
        "operationId": "PublicIPAddresses_ListAll",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns a list of PublicIPAddress resources.",
            "schema": {
              "$ref": "#/definitions/PublicIPAddressListResult"
            }
          }
        },
        "tags": [
          "PublicIPAddresses"
        ],
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.Network/routeFilters": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Gets all route filters in a subscription.",
        "operationId": "RouteFilters_List",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns a list of Route Filter resources.",
            "schema": {
              "$ref": "#/definitions/RouteFilterListResult"
            }
          }
        },
        "tags": [
          "RouteFilters"
        ],
        "x-ms-examples": {
          "RouteFilterList": {
            "parameters": {
              "api-version": "2016-12-01",
              "subscriptionId": "subid"
            },
            "responses": {
              "200": {
                "body": {
                  "value": [
                    {
                      "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
                      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsofot.Network/routeFilters/filterName",
                      "location": "West US",
                      "name": "filterName",
                      "properties": {
                        "peerings": [],
                        "provisioningState": "Succeeded",
                        "rules": [
                          {
                            "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
                            "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsofot.Network/routeFilters/filterName/routeFilterRules/ruleName",
                            "name": "ruleName",
                            "properties": {
                              "access": "Allow",
                              "communities": [
                                "12076:5030",
                                "12076:5040"
                              ],
                              "provisioningState": "Succeeded",
                              "routeFilterRuleType": "Community"
                            }
                          }
                        ]
                      },
                      "tags": {
                        "key1": "value1"
                      },
                      "type": "Microsofot.Network/routeFilters"
                    }
                  ]
                }
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.Network/routeTables": {
      "get": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Gets all route tables in a subscription.",
        "operationId": "RouteTables_ListAll",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns a list of RouteTable resources.",
            "schema": {
              "$ref": "#/definitions/RouteTableListResult"
            }
          }
        },
        "tags": [
          "RouteTables"
        ],
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.Network/virtualNetworks": {
      "get": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Gets all virtual networks in a subscription.",
        "operationId": "VirtualNetworks_ListAll",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns a list of VirtualNetwork resources.",
            "schema": {
              "$ref": "#/definitions/VirtualNetworkListResult"
            }
          }
        },
        "tags": [
          "VirtualNetworks"
        ],
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways": {
      "get": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Lists all application gateways in a resource group.",
        "operationId": "ApplicationGateways_List",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Success. The operation returns a list of ApplicationGateway resources.",
            "schema": {
              "$ref": "#/definitions/ApplicationGatewayListResult"
            }
          }
        },
        "tags": [
          "ApplicationGateways"
        ],
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}": {
      "delete": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Deletes the specified application gateway.",
        "operationId": "ApplicationGateways_Delete",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the application gateway.",
            "in": "path",
            "name": "applicationGatewayName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Delete successful."
          },
          "202": {
            "description": "Accepted and the operation will complete asynchronously."
          },
          "204": {
            "description": "Request successful. Resource with the specified name does not exist"
          }
        },
        "tags": [
          "ApplicationGateways"
        ],
        "x-ms-long-running-operation": true
      },
      "get": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Gets the specified application gateway.",
        "operationId": "ApplicationGateways_Get",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the application gateway.",
            "in": "path",
            "name": "applicationGatewayName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns an ApplicationGateway resource.",
            "schema": {
              "$ref": "#/definitions/ApplicationGateway"
            }
          }
        },
        "tags": [
          "ApplicationGateways"
        ]
      },
      "put": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Creates or updates the specified application gateway.",
        "operationId": "ApplicationGateways_CreateOrUpdate",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the application gateway.",
            "in": "path",
            "name": "applicationGatewayName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Parameters supplied to the create or update application gateway operation.",
            "in": "body",
            "name": "parameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApplicationGateway"
            }
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Update successful. The operation returns the resulting ApplicationGateway resource.",
            "schema": {
              "$ref": "#/definitions/ApplicationGateway"
            }
          },
          "201": {
            "description": "Create successful. The operation returns the resulting ApplicationGateway resource.",
            "schema": {
              "$ref": "#/definitions/ApplicationGateway"
            }
          }
        },
        "tags": [
          "ApplicationGateways"
        ],
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}/backendhealth": {
      "post": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Gets the backend health of the specified application gateway in a resource group.",
        "operationId": "ApplicationGateways_BackendHealth",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the application gateway.",
            "in": "path",
            "name": "applicationGatewayName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "description": "Expands BackendAddressPool and BackendHttpSettings referenced in backend health.",
            "in": "query",
            "name": "$expand",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful.",
            "schema": {
              "$ref": "#/definitions/ApplicationGatewayBackendHealth"
            }
          },
          "202": {
            "description": "Accepted and the operation will complete asynchronously."
          }
        },
        "tags": [
          "ApplicationGateways"
        ],
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}/start": {
      "post": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Starts the specified application gateway.",
        "operationId": "ApplicationGateways_Start",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the application gateway.",
            "in": "path",
            "name": "applicationGatewayName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation starts the ApplicationGateway resource."
          },
          "202": {
            "description": "Accepted and the operation will complete asynchronously."
          }
        },
        "tags": [
          "ApplicationGateways"
        ],
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}/stop": {
      "post": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Stops the specified application gateway in a resource group.",
        "operationId": "ApplicationGateways_Stop",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the application gateway.",
            "in": "path",
            "name": "applicationGatewayName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation stops the ApplicationGateway resource."
          },
          "202": {
            "description": "Accepted and the operation will complete asynchronously."
          }
        },
        "tags": [
          "ApplicationGateways"
        ],
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/connections": {
      "get": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "The List VirtualNetworkGatewayConnections operation retrieves all the virtual network gateways connections created.",
        "operationId": "VirtualNetworkGatewayConnections_List",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation resets the virtual network gateway connection shared key.",
            "schema": {
              "$ref": "#/definitions/VirtualNetworkGatewayConnectionListResult"
            }
          }
        },
        "tags": [
          "VirtualNetworkGatewayConnections"
        ],
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/connections/{virtualNetworkGatewayConnectionName}": {
      "delete": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Deletes the specified virtual network Gateway connection.",
        "operationId": "VirtualNetworkGatewayConnections_Delete",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the virtual network gateway connection.",
            "in": "path",
            "name": "virtualNetworkGatewayConnectionName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Delete successful."
          },
          "202": {
            "description": "Accepted and the operation will complete asynchronously."
          },
          "204": {
            "description": "Delete successful."
          }
        },
        "tags": [
          "VirtualNetworkGatewayConnections"
        ],
        "x-ms-long-running-operation": true
      },
      "get": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Gets the specified virtual network gateway connection by resource group.",
        "operationId": "VirtualNetworkGatewayConnections_Get",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the virtual network gateway connection.",
            "in": "path",
            "name": "virtualNetworkGatewayConnectionName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns the resulting VirtualNetworkPeering resource.",
            "schema": {
              "$ref": "#/definitions/VirtualNetworkGatewayConnection"
            }
          }
        },
        "tags": [
          "VirtualNetworkGatewayConnections"
        ]
      },
      "put": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Creates or updates a virtual network gateway connection in the specified resource group.",
        "operationId": "VirtualNetworkGatewayConnections_CreateOrUpdate",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the virtual network gateway connection.",
            "in": "path",
            "name": "virtualNetworkGatewayConnectionName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Parameters supplied to the create or update virtual network gateway connection operation.",
            "in": "body",
            "name": "parameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VirtualNetworkGatewayConnection"
            }
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Update successful. The operation returns the resulting VirtualNetworkGatewayConnection resource.",
            "schema": {
              "$ref": "#/definitions/VirtualNetworkGatewayConnection"
            }
          },
          "201": {
            "description": "Create successful. The operation returns the resulting VirtualNetworkGatewayConnection resource.",
            "schema": {
              "$ref": "#/definitions/VirtualNetworkGatewayConnection"
            }
          }
        },
        "tags": [
          "VirtualNetworkGatewayConnections"
        ],
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/connections/{virtualNetworkGatewayConnectionName}/sharedkey": {
      "get": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "The Get VirtualNetworkGatewayConnectionSharedKey operation retrieves information about the specified virtual network gateway connection shared key through Network resource provider.",
        "operationId": "VirtualNetworkGatewayConnections_GetSharedKey",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The virtual network gateway connection shared key name.",
            "in": "path",
            "name": "virtualNetworkGatewayConnectionName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns a list of VirtualNetworkGatewayConnection resources.",
            "schema": {
              "$ref": "#/definitions/ConnectionSharedKey"
            }
          }
        },
        "tags": [
          "VirtualNetworkGatewayConnections"
        ]
      },
      "put": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "The Put VirtualNetworkGatewayConnectionSharedKey operation sets the virtual network gateway connection shared key for passed virtual network gateway connection in the specified resource group through Network resource provider.",
        "operationId": "VirtualNetworkGatewayConnections_SetSharedKey",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The virtual network gateway connection name.",
            "in": "path",
            "name": "virtualNetworkGatewayConnectionName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Parameters supplied to the Begin Set Virtual Network Gateway connection Shared key operation throughNetwork resource provider.",
            "in": "body",
            "name": "parameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConnectionSharedKey"
            }
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns the resulting ConnectionSharedKey resource.",
            "schema": {
              "$ref": "#/definitions/ConnectionSharedKey"
            }
          },
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ConnectionSharedKey"
            }
          }
        },
        "tags": [
          "VirtualNetworkGatewayConnections"
        ],
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/connections/{virtualNetworkGatewayConnectionName}/sharedkey/reset": {
      "post": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "The VirtualNetworkGatewayConnectionResetSharedKey operation resets the virtual network gateway connection shared key for passed virtual network gateway connection in the specified resource group through Network resource provider.",
        "operationId": "VirtualNetworkGatewayConnections_ResetSharedKey",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The virtual network gateway connection reset shared key Name.",
            "in": "path",
            "name": "virtualNetworkGatewayConnectionName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Parameters supplied to the begin reset virtual network gateway connection shared key operation through network resource provider.",
            "in": "body",
            "name": "parameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConnectionResetSharedKey"
            }
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation sets the virtual network gateway connection shared key.",
            "schema": {
              "$ref": "#/definitions/ConnectionResetSharedKey"
            }
          },
          "202": {
            "description": ""
          }
        },
        "tags": [
          "VirtualNetworkGatewayConnections"
        ],
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits": {
      "get": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Gets all the express route circuits in a resource group.",
        "operationId": "ExpressRouteCircuits_List",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns the resulting ExpressRouteCircuitAuthorization resource.",
            "schema": {
              "$ref": "#/definitions/ExpressRouteCircuitListResult"
            }
          }
        },
        "tags": [
          "ExpressRouteCircuits"
        ],
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}": {
      "delete": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Deletes the specified express route circuit.",
        "operationId": "ExpressRouteCircuits_Delete",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the express route circuit.",
            "in": "path",
            "name": "circuitName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Delete successful."
          },
          "202": {
            "description": "Accepted. Sets 'Disabling' provisioningState until the operation completes. Returns an operation URI that can be queried to find the current state of the operation."
          },
          "204": {
            "description": "Delete successful."
          }
        },
        "tags": [
          "ExpressRouteCircuits"
        ],
        "x-ms-long-running-operation": true
      },
      "get": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Gets information about the specified express route circuit.",
        "operationId": "ExpressRouteCircuits_Get",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of express route circuit.",
            "in": "path",
            "name": "circuitName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns the resulting ExpressRouteCircuit resource.",
            "schema": {
              "$ref": "#/definitions/ExpressRouteCircuit"
            }
          }
        },
        "tags": [
          "ExpressRouteCircuits"
        ]
      },
      "put": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Creates or updates an express route circuit.",
        "operationId": "ExpressRouteCircuits_CreateOrUpdate",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the circuit.",
            "in": "path",
            "name": "circuitName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Parameters supplied to the create or update express route circuit operation.",
            "in": "body",
            "name": "parameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExpressRouteCircuit"
            }
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Update successful. The operation returns the resulting ExpressRouteCircuit resource.",
            "schema": {
              "$ref": "#/definitions/ExpressRouteCircuit"
            }
          },
          "201": {
            "description": "Create successful. The operation returns the resulting ExpressRouteCircuit resource.",
            "schema": {
              "$ref": "#/definitions/ExpressRouteCircuit"
            }
          }
        },
        "tags": [
          "ExpressRouteCircuits"
        ],
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/authorizations": {
      "get": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Gets all authorizations in an express route circuit.",
        "operationId": "ExpressRouteCircuitAuthorizations_List",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the circuit.",
            "in": "path",
            "name": "circuitName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns a list of ExpressRouteCircuitAuthorization resources.",
            "schema": {
              "$ref": "#/definitions/AuthorizationListResult"
            }
          }
        },
        "tags": [
          "ExpressRouteCircuitAuthorizations"
        ],
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/authorizations/{authorizationName}": {
      "delete": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Deletes the specified authorization from the specified express route circuit.",
        "operationId": "ExpressRouteCircuitAuthorizations_Delete",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the express route circuit.",
            "in": "path",
            "name": "circuitName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the authorization.",
            "in": "path",
            "name": "authorizationName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Delete successful."
          },
          "202": {
            "description": "Accepted and the operation will complete asynchronously."
          },
          "204": {
            "description": "Delete successful."
          }
        },
        "tags": [
          "ExpressRouteCircuitAuthorizations"
        ],
        "x-ms-long-running-operation": true
      },
      "get": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Gets the specified authorization from the specified express route circuit.",
        "operationId": "ExpressRouteCircuitAuthorizations_Get",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the express route circuit.",
            "in": "path",
            "name": "circuitName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the authorization.",
            "in": "path",
            "name": "authorizationName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns the ExpressRouteCircuitAuthorization resource.",
            "schema": {
              "$ref": "#/definitions/ExpressRouteCircuitAuthorization"
            }
          }
        },
        "tags": [
          "ExpressRouteCircuitAuthorizations"
        ]
      },
      "put": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Creates or updates an authorization in the specified express route circuit.",
        "operationId": "ExpressRouteCircuitAuthorizations_CreateOrUpdate",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the express route circuit.",
            "in": "path",
            "name": "circuitName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the authorization.",
            "in": "path",
            "name": "authorizationName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Parameters supplied to the create or update express route circuit authorization operation.",
            "in": "body",
            "name": "authorizationParameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExpressRouteCircuitAuthorization"
            }
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Update successful. The operation returns the resulting ExpressRouteCircuitAuthorization resource.",
            "schema": {
              "$ref": "#/definitions/ExpressRouteCircuitAuthorization"
            }
          },
          "201": {
            "description": "Create successful. The operation returns the resulting ExpressRouteCircuitAuthorization resource.",
            "schema": {
              "$ref": "#/definitions/ExpressRouteCircuitAuthorization"
            }
          }
        },
        "tags": [
          "ExpressRouteCircuitAuthorizations"
        ],
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/peerings": {
      "get": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Gets all peerings in a specified express route circuit.",
        "operationId": "ExpressRouteCircuitPeerings_List",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the express route circuit.",
            "in": "path",
            "name": "circuitName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns a list of ExpressRouteCircuitPeering resources.",
            "schema": {
              "$ref": "#/definitions/ExpressRouteCircuitPeeringListResult"
            }
          }
        },
        "tags": [
          "ExpressRouteCircuitPeerings"
        ],
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/peerings/{peeringName}": {
      "delete": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Deletes the specified peering from the specified express route circuit.",
        "operationId": "ExpressRouteCircuitPeerings_Delete",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the express route circuit.",
            "in": "path",
            "name": "circuitName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the peering.",
            "in": "path",
            "name": "peeringName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Delete successful."
          },
          "202": {
            "description": "Accepted and the operation will complete asynchronously."
          },
          "204": {
            "description": "Delete successful."
          }
        },
        "tags": [
          "ExpressRouteCircuitPeerings"
        ],
        "x-ms-long-running-operation": true
      },
      "get": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Gets the specified authorization from the specified express route circuit.",
        "operationId": "ExpressRouteCircuitPeerings_Get",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the express route circuit.",
            "in": "path",
            "name": "circuitName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the peering.",
            "in": "path",
            "name": "peeringName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns the resulting ExpressRouteCircuitPeering resource.",
            "schema": {
              "$ref": "#/definitions/ExpressRouteCircuitPeering"
            }
          }
        },
        "tags": [
          "ExpressRouteCircuitPeerings"
        ]
      },
      "put": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Creates or updates a peering in the specified express route circuits.",
        "operationId": "ExpressRouteCircuitPeerings_CreateOrUpdate",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the express route circuit.",
            "in": "path",
            "name": "circuitName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the peering.",
            "in": "path",
            "name": "peeringName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Parameters supplied to the create or update express route circuit peering operation.",
            "in": "body",
            "name": "peeringParameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExpressRouteCircuitPeering"
            }
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Update successful. The operation returns the resulting ExpressRouteCircuitPeering resource.",
            "schema": {
              "$ref": "#/definitions/ExpressRouteCircuitPeering"
            }
          },
          "201": {
            "description": "Create successful. The operation returns the resulting ExpressRouteCircuitPeering resource.",
            "schema": {
              "$ref": "#/definitions/ExpressRouteCircuitPeering"
            }
          }
        },
        "tags": [
          "ExpressRouteCircuitPeerings"
        ],
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/peerings/{peeringName}/arpTables/{devicePath}": {
      "post": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Gets the currently advertised ARP table associated with the express route circuit in a resource group.",
        "operationId": "ExpressRouteCircuits_ListArpTable",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the express route circuit.",
            "in": "path",
            "name": "circuitName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the peering.",
            "in": "path",
            "name": "peeringName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The path of the device.",
            "in": "path",
            "name": "devicePath",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns the resulting ExpressRouteCircuitsArpTable resource.",
            "schema": {
              "$ref": "#/definitions/ExpressRouteCircuitsArpTableListResult"
            }
          },
          "202": {
            "description": "Accepted and the operation will complete asynchronously."
          }
        },
        "tags": [
          "ExpressRouteCircuitArpTable"
        ],
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/peerings/{peeringName}/routeTables/{devicePath}": {
      "post": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Gets the currently advertised routes table associated with the express route circuit in a resource group.",
        "operationId": "ExpressRouteCircuits_ListRoutesTable",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the express route circuit.",
            "in": "path",
            "name": "circuitName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the peering.",
            "in": "path",
            "name": "peeringName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The path of the device.",
            "in": "path",
            "name": "devicePath",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns the resulting ExpressRouteCircuitsRouteTable resource.",
            "schema": {
              "$ref": "#/definitions/ExpressRouteCircuitsRoutesTableListResult"
            }
          },
          "202": {
            "description": "Accepted and the operation will complete asynchronously."
          }
        },
        "tags": [
          "ExpressRouteCircuitRoutesTable"
        ],
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/peerings/{peeringName}/routeTablesSummary/{devicePath}": {
      "post": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Gets the currently advertised routes table summary associated with the express route circuit in a resource group.",
        "operationId": "ExpressRouteCircuits_ListRoutesTableSummary",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the express route circuit.",
            "in": "path",
            "name": "circuitName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the peering.",
            "in": "path",
            "name": "peeringName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The path of the device.",
            "in": "path",
            "name": "devicePath",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns the resulting ExpressRouteCircuitsRoutesTableSummary resource.",
            "schema": {
              "$ref": "#/definitions/ExpressRouteCircuitsRoutesTableSummaryListResult"
            }
          },
          "202": {
            "description": "Accepted and the operation will complete asynchronously."
          }
        },
        "tags": [
          "ExpressRouteCircuitRoutesTableSummary"
        ],
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/peerings/{peeringName}/stats": {
      "get": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Gets all stats from an express route circuit in a resource group.",
        "operationId": "ExpressRouteCircuits_GetPeeringStats",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the express route circuit.",
            "in": "path",
            "name": "circuitName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the peering.",
            "in": "path",
            "name": "peeringName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns the resulting ExpressRouteCircuitStats resource.",
            "schema": {
              "$ref": "#/definitions/ExpressRouteCircuitStats"
            }
          }
        },
        "tags": [
          "ExpressRouteCircuitStats"
        ]
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/stats": {
      "get": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Gets all the stats from an express route circuit in a resource group.",
        "operationId": "ExpressRouteCircuits_GetStats",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the express route circuit.",
            "in": "path",
            "name": "circuitName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns the resulting ExpressRouteCircuitStats resource.",
            "schema": {
              "$ref": "#/definitions/ExpressRouteCircuitStats"
            }
          }
        },
        "tags": [
          "ExpressRouteCircuitStats"
        ]
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers": {
      "get": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Gets all the load balancers in a resource group.",
        "operationId": "LoadBalancers_List",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns a list of LoadBalancer resources.",
            "schema": {
              "$ref": "#/definitions/LoadBalancerListResult"
            }
          }
        },
        "tags": [
          "LoadBalancers"
        ],
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}": {
      "delete": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Deletes the specified load balancer.",
        "operationId": "LoadBalancers_Delete",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the load balancer.",
            "in": "path",
            "name": "loadBalancerName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Delete successful."
          },
          "202": {
            "description": "Accepted and the operation will complete asynchronously."
          },
          "204": {
            "description": "Request successful. Resource does not exist."
          }
        },
        "tags": [
          "LoadBalancers"
        ],
        "x-ms-long-running-operation": true
      },
      "get": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Gets the specified load balancer.",
        "operationId": "LoadBalancers_Get",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the load balancer.",
            "in": "path",
            "name": "loadBalancerName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "description": "Expands referenced resources.",
            "in": "query",
            "name": "$expand",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns the resulting LoadBalancer resource.",
            "schema": {
              "$ref": "#/definitions/LoadBalancer"
            }
          }
        },
        "tags": [
          "LoadBalancers"
        ]
      },
      "put": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Creates or updates a load balancer.",
        "operationId": "LoadBalancers_CreateOrUpdate",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the load balancer.",
            "in": "path",
            "name": "loadBalancerName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Parameters supplied to the create or update load balancer operation.",
            "in": "body",
            "name": "parameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoadBalancer"
            }
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Update successful. The operation returns the resulting LoadBalancer resource.",
            "schema": {
              "$ref": "#/definitions/LoadBalancer"
            }
          },
          "201": {
            "description": "Create successful. The operation returns the resulting LoadBalancer resource.",
            "schema": {
              "$ref": "#/definitions/LoadBalancer"
            }
          }
        },
        "tags": [
          "LoadBalancers"
        ],
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/localNetworkGateways": {
      "get": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Gets all the local network gateways in a resource group.",
        "operationId": "LocalNetworkGateways_List",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns a list of LocalNetworkGateway resources.",
            "schema": {
              "$ref": "#/definitions/LocalNetworkGatewayListResult"
            }
          }
        },
        "tags": [
          "LocalNetworkGateways"
        ],
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/localNetworkGateways/{localNetworkGatewayName}": {
      "delete": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Deletes the specified local network gateway.",
        "operationId": "LocalNetworkGateways_Delete",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the local network gateway.",
            "in": "path",
            "name": "localNetworkGatewayName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Delete successful."
          },
          "202": {
            "description": "Accepted and the operation will complete asynchronously."
          },
          "204": {
            "description": "Delete successful."
          }
        },
        "tags": [
          "LocalNetworkGateways"
        ],
        "x-ms-long-running-operation": true
      },
      "get": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Gets the specified local network gateway in a resource group.",
        "operationId": "LocalNetworkGateways_Get",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the local network gateway.",
            "in": "path",
            "name": "localNetworkGatewayName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns the resulting LocalNetworkGateway resource.",
            "schema": {
              "$ref": "#/definitions/LocalNetworkGateway"
            }
          }
        },
        "tags": [
          "LocalNetworkGateways"
        ]
      },
      "put": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Creates or updates a local network gateway in the specified resource group.",
        "operationId": "LocalNetworkGateways_CreateOrUpdate",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the local network gateway.",
            "in": "path",
            "name": "localNetworkGatewayName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Parameters supplied to the create or update local network gateway operation.",
            "in": "body",
            "name": "parameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LocalNetworkGateway"
            }
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Update successful. The operation returns the resulting LocalNetworkGateway resource.",
            "schema": {
              "$ref": "#/definitions/LocalNetworkGateway"
            }
          },
          "201": {
            "description": "Create successful. The operation returns the resulting LocalNetworkGateway resource.",
            "schema": {
              "$ref": "#/definitions/LocalNetworkGateway"
            }
          }
        },
        "tags": [
          "LocalNetworkGateways"
        ],
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces": {
      "get": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Gets all network interfaces in a resource group.",
        "operationId": "NetworkInterfaces_List",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns a list of NetworkInterface resources.",
            "schema": {
              "$ref": "#/definitions/NetworkInterfaceListResult"
            }
          }
        },
        "tags": [
          "NetworkInterfaces"
        ],
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}": {
      "delete": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Deletes the specified network interface.",
        "operationId": "NetworkInterfaces_Delete",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the network interface.",
            "in": "path",
            "name": "networkInterfaceName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Delete successful."
          },
          "202": {
            "description": "Accepted and the operation will complete asynchronously."
          },
          "204": {
            "description": "Request successful. Resource does not exist."
          }
        },
        "tags": [
          "NetworkInterfaces"
        ],
        "x-ms-long-running-operation": true
      },
      "get": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Gets information about the specified network interface.",
        "operationId": "NetworkInterfaces_Get",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the network interface.",
            "in": "path",
            "name": "networkInterfaceName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "description": "Expands referenced resources.",
            "in": "query",
            "name": "$expand",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns the resulting NetworkInterface resource.",
            "schema": {
              "$ref": "#/definitions/NetworkInterface"
            }
          }
        },
        "tags": [
          "NetworkInterfaces"
        ]
      },
      "put": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Creates or updates a network interface.",
        "operationId": "NetworkInterfaces_CreateOrUpdate",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the network interface.",
            "in": "path",
            "name": "networkInterfaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Parameters supplied to the create or update network interface operation.",
            "in": "body",
            "name": "parameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NetworkInterface"
            }
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Update successful. The operation returns the resulting NetworkInterface resource.",
            "schema": {
              "$ref": "#/definitions/NetworkInterface"
            }
          },
          "201": {
            "description": "Create successful. The operation returns the resulting NetworkInterface resource.",
            "schema": {
              "$ref": "#/definitions/NetworkInterface"
            }
          }
        },
        "tags": [
          "NetworkInterfaces"
        ],
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}/effectiveNetworkSecurityGroups": {
      "post": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Gets all network security groups applied to a network interface.",
        "operationId": "NetworkInterfaces_ListEffectiveNetworkSecurityGroups",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the network interface.",
            "in": "path",
            "name": "networkInterfaceName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns a list of NetworkSecurityGroup resources.",
            "schema": {
              "$ref": "#/definitions/EffectiveNetworkSecurityGroupListResult"
            }
          },
          "202": {
            "description": "Accepted and the operation will complete asynchronously."
          }
        },
        "tags": [
          "NetworkInterfaces"
        ],
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}/effectiveRouteTable": {
      "post": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Gets all route tables applied to a network interface.",
        "operationId": "NetworkInterfaces_GetEffectiveRouteTable",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the network interface.",
            "in": "path",
            "name": "networkInterfaceName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns a list of EffectRoute resources.",
            "schema": {
              "$ref": "#/definitions/EffectiveRouteListResult"
            }
          },
          "202": {
            "description": "Accepted and the operation will complete asynchronously."
          }
        },
        "tags": [
          "NetworkInterfaces"
        ],
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityGroups": {
      "get": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Gets all network security groups in a resource group.",
        "operationId": "NetworkSecurityGroups_List",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns a list of NetworkSecurityGroup resources.",
            "schema": {
              "$ref": "#/definitions/NetworkSecurityGroupListResult"
            }
          }
        },
        "tags": [
          "NetworkSecurityGroups"
        ],
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityGroups/{networkSecurityGroupName}": {
      "delete": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Deletes the specified network security group.",
        "operationId": "NetworkSecurityGroups_Delete",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the network security group.",
            "in": "path",
            "name": "networkSecurityGroupName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Delete successful."
          },
          "202": {
            "description": "Accepted and the operation will complete asynchronously."
          },
          "204": {
            "description": "Request successful. Resource does not exist."
          }
        },
        "tags": [
          "NetworkSecurityGroups"
        ],
        "x-ms-long-running-operation": true
      },
      "get": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Gets the specified network security group.",
        "operationId": "NetworkSecurityGroups_Get",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the network security group.",
            "in": "path",
            "name": "networkSecurityGroupName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "description": "Expands referenced resources.",
            "in": "query",
            "name": "$expand",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns the resulting NetworkSecurityGroup resource.",
            "schema": {
              "$ref": "#/definitions/NetworkSecurityGroup"
            }
          }
        },
        "tags": [
          "NetworkSecurityGroups"
        ]
      },
      "put": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Creates or updates a network security group in the specified resource group.",
        "operationId": "NetworkSecurityGroups_CreateOrUpdate",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the network security group.",
            "in": "path",
            "name": "networkSecurityGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Parameters supplied to the create or update network security group operation.",
            "in": "body",
            "name": "parameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NetworkSecurityGroup"
            }
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Update successful. The operation returns the resulting NetworkSecurityGroup resource.",
            "schema": {
              "$ref": "#/definitions/NetworkSecurityGroup"
            }
          },
          "201": {
            "description": "Create successful. The operation returns the resulting NetworkSecurityGroup resource.",
            "schema": {
              "$ref": "#/definitions/NetworkSecurityGroup"
            }
          }
        },
        "tags": [
          "NetworkSecurityGroups"
        ],
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityGroups/{networkSecurityGroupName}/securityRules": {
      "get": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Gets all security rules in a network security group.",
        "operationId": "SecurityRules_List",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the network security group.",
            "in": "path",
            "name": "networkSecurityGroupName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns a list of SecurityRule resources.",
            "schema": {
              "$ref": "#/definitions/SecurityRuleListResult"
            }
          }
        },
        "tags": [
          "SecurityRules"
        ],
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityGroups/{networkSecurityGroupName}/securityRules/{securityRuleName}": {
      "delete": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Deletes the specified network security rule.",
        "operationId": "SecurityRules_Delete",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the network security group.",
            "in": "path",
            "name": "networkSecurityGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the security rule.",
            "in": "path",
            "name": "securityRuleName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Delete successful."
          },
          "202": {
            "description": "Accepted and the operation will complete asynchronously."
          },
          "204": {
            "description": "Request successful. Resource does not exist."
          }
        },
        "tags": [
          "SecurityRules"
        ],
        "x-ms-long-running-operation": true
      },
      "get": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Get the specified network security rule.",
        "operationId": "SecurityRules_Get",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the network security group.",
            "in": "path",
            "name": "networkSecurityGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the security rule.",
            "in": "path",
            "name": "securityRuleName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns the resulting SecurityRule resource.",
            "schema": {
              "$ref": "#/definitions/SecurityRule"
            }
          }
        },
        "tags": [
          "SecurityRules"
        ]
      },
      "put": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Creates or updates a security rule in the specified network security group.",
        "operationId": "SecurityRules_CreateOrUpdate",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the network security group.",
            "in": "path",
            "name": "networkSecurityGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the security rule.",
            "in": "path",
            "name": "securityRuleName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Parameters supplied to the create or update network security rule operation.",
            "in": "body",
            "name": "securityRuleParameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SecurityRule"
            }
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Update successful. The operation returns the resulting SecurityRule resource.",
            "schema": {
              "$ref": "#/definitions/SecurityRule"
            }
          },
          "201": {
            "description": "Create successful. The operation returns the resulting SecurityRule resource.",
            "schema": {
              "$ref": "#/definitions/SecurityRule"
            }
          }
        },
        "tags": [
          "SecurityRules"
        ],
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers": {
      "get": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Gets all network watchers by resource group.",
        "operationId": "NetworkWatchers_List",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns a list of network watcher resources.",
            "schema": {
              "$ref": "#/definitions/NetworkWatcherListResult"
            }
          }
        },
        "tags": [
          "NetworkWatchers"
        ],
        "x-ms-pageable": {
          "nextLinkName": null
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}": {
      "delete": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Deletes the specified network watcher resource.",
        "operationId": "NetworkWatchers_Delete",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the network watcher.",
            "in": "path",
            "name": "networkWatcherName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "202": {
            "description": "Accepted and the operation will complete asynchronously."
          },
          "204": {
            "description": "Delete successful."
          }
        },
        "tags": [
          "NetworkWatchers"
        ],
        "x-ms-long-running-operation": true
      },
      "get": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Gets the specified network watcher by resource group.",
        "operationId": "NetworkWatchers_Get",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the network watcher.",
            "in": "path",
            "name": "networkWatcherName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns a network watcher resource.",
            "schema": {
              "$ref": "#/definitions/NetworkWatcher"
            }
          }
        },
        "tags": [
          "NetworkWatchers"
        ]
      },
      "put": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Creates or updates a network watcher in the specified resource group.",
        "operationId": "NetworkWatchers_CreateOrUpdate",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the network watcher.",
            "in": "path",
            "name": "networkWatcherName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Parameters that define the network watcher resource.",
            "in": "body",
            "name": "parameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NetworkWatcher"
            }
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Update successful. The operation returns the resulting network watcher resource.",
            "schema": {
              "$ref": "#/definitions/NetworkWatcher"
            }
          },
          "201": {
            "description": "Create successful. The operation returns the resulting network watcher resource.",
            "schema": {
              "$ref": "#/definitions/NetworkWatcher"
            }
          }
        },
        "tags": [
          "NetworkWatchers"
        ]
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/configureFlowLog": {
      "post": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Configures flow log on a specified resource.",
        "operationId": "NetworkWatchers_SetFlowLogConfiguration",
        "parameters": [
          {
            "description": "The name of the network watcher resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the network watcher resource.",
            "in": "path",
            "name": "networkWatcherName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Parameters that define the configuration of flow log.",
            "in": "body",
            "name": "parameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FlowLogInformation"
            }
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Successful request for setting flow log configuration.",
            "schema": {
              "$ref": "#/definitions/FlowLogInformation"
            }
          },
          "202": {
            "description": "Accepted and the operation will complete asynchronously.",
            "schema": {
              "$ref": "#/definitions/FlowLogInformation"
            }
          }
        },
        "tags": [
          "NetworkWatchers"
        ],
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/ipFlowVerify": {
      "post": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Verify IP flow from the specified VM to a location given the currently configured NSG rules.",
        "operationId": "NetworkWatchers_VerifyIPFlow",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the network watcher.",
            "in": "path",
            "name": "networkWatcherName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Parameters that define the IP flow to be verified.",
            "in": "body",
            "name": "parameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VerificationIPFlowParameters"
            }
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns the result of IP flow verification.",
            "schema": {
              "$ref": "#/definitions/VerificationIPFlowResult"
            }
          },
          "202": {
            "description": "Accepted and the operation will complete asynchronously.",
            "schema": {
              "$ref": "#/definitions/VerificationIPFlowResult"
            }
          }
        },
        "tags": [
          "NetworkWatchers"
        ],
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/nextHop": {
      "post": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Gets the next hop from the specified VM.",
        "operationId": "NetworkWatchers_GetNextHop",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the network watcher.",
            "in": "path",
            "name": "networkWatcherName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Parameters that define the source and destination endpoint.",
            "in": "body",
            "name": "parameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NextHopParameters"
            }
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns the next hop from the VM.",
            "schema": {
              "$ref": "#/definitions/NextHopResult"
            }
          },
          "202": {
            "description": "Accepted and the operation will complete asynchronously.",
            "schema": {
              "$ref": "#/definitions/NextHopResult"
            }
          }
        },
        "tags": [
          "NetworkWatchers"
        ],
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/packetCaptures": {
      "get": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Lists all packet capture sessions within the specified resource group.",
        "operationId": "PacketCaptures_List",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the Network Watcher resource.",
            "in": "path",
            "name": "networkWatcherName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Successful packet capture enumeration request.",
            "schema": {
              "$ref": "#/definitions/PacketCaptureListResult"
            }
          }
        },
        "tags": [
          "PacketCaptures"
        ],
        "x-ms-pageable": {
          "nextLinkName": null
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/packetCaptures/{packetCaptureName}": {
      "delete": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Deletes the specified packet capture session.",
        "operationId": "PacketCaptures_Delete",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the network watcher.",
            "in": "path",
            "name": "networkWatcherName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the packet capture session.",
            "in": "path",
            "name": "packetCaptureName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "202": {
            "description": "Accepted and the operation will complete asynchronously."
          },
          "204": {
            "description": "Delete successful."
          }
        },
        "tags": [
          "PacketCaptures"
        ],
        "x-ms-long-running-operation": true
      },
      "get": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Gets a packet capture session by name.",
        "operationId": "PacketCaptures_Get",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the network watcher.",
            "in": "path",
            "name": "networkWatcherName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the packet capture session.",
            "in": "path",
            "name": "packetCaptureName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns a packet capture session.",
            "schema": {
              "$ref": "#/definitions/PacketCaptureResult"
            }
          }
        },
        "tags": [
          "PacketCaptures"
        ]
      },
      "put": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Create and start a packet capture on the specified VM.",
        "operationId": "PacketCaptures_Create",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the network watcher.",
            "in": "path",
            "name": "networkWatcherName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the packet capture session.",
            "in": "path",
            "name": "packetCaptureName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Parameters that define the create packet capture operation.",
            "in": "body",
            "name": "parameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PacketCapture"
            }
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "201": {
            "description": "Request successful. The operation returns the resulting packet capture session.",
            "schema": {
              "$ref": "#/definitions/PacketCaptureResult"
            }
          }
        },
        "tags": [
          "PacketCaptures"
        ],
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/packetCaptures/{packetCaptureName}/queryStatus": {
      "post": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Query the status of a running packet capture session.",
        "operationId": "PacketCaptures_GetStatus",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the Network Watcher resource.",
            "in": "path",
            "name": "networkWatcherName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name given to the packet capture session.",
            "in": "path",
            "name": "packetCaptureName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Successful query of packet capture status.",
            "schema": {
              "$ref": "#/definitions/PacketCaptureQueryStatusResult"
            }
          },
          "202": {
            "description": "Accepted query status of packet capture.",
            "schema": {
              "$ref": "#/definitions/PacketCaptureQueryStatusResult"
            }
          }
        },
        "tags": [
          "PacketCaptures"
        ],
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/packetCaptures/{packetCaptureName}/stop": {
      "post": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Stops a specified packet capture session.",
        "operationId": "PacketCaptures_Stop",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the network watcher.",
            "in": "path",
            "name": "networkWatcherName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the packet capture session.",
            "in": "path",
            "name": "packetCaptureName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation stops the packet capture session."
          },
          "202": {
            "description": "Accepted and the operation will complete asynchronously."
          }
        },
        "tags": [
          "PacketCaptures"
        ],
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/queryFlowLogStatus": {
      "post": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Queries status of flow log on a specified resource.",
        "operationId": "NetworkWatchers_GetFlowLogStatus",
        "parameters": [
          {
            "description": "The name of the network watcher resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the network watcher resource.",
            "in": "path",
            "name": "networkWatcherName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Parameters that define a resource to query flow log status.",
            "in": "body",
            "name": "parameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FlowLogStatusParameters"
            }
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Successful request for query flow log status.",
            "schema": {
              "$ref": "#/definitions/FlowLogInformation"
            }
          },
          "202": {
            "description": "Accepted and the operation will complete asynchronously.",
            "schema": {
              "$ref": "#/definitions/FlowLogInformation"
            }
          }
        },
        "tags": [
          "NetworkWatchers"
        ],
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/queryTroubleshootResult": {
      "post": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Get the last completed troubleshooting result on a specified resource",
        "operationId": "NetworkWatchers_GetTroubleshootingResult",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the network watcher resource.",
            "in": "path",
            "name": "networkWatcherName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Parameters that define the resource to query the troubleshooting result.",
            "in": "body",
            "name": "parameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QueryTroubleshootingParameters"
            }
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Successful get troubleshooting result request",
            "schema": {
              "$ref": "#/definitions/TroubleshootingResult"
            }
          },
          "202": {
            "description": "Accepted get troubleshooting result request.",
            "schema": {
              "$ref": "#/definitions/TroubleshootingResult"
            }
          }
        },
        "tags": [
          "NetworkWatchers"
        ],
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/securityGroupView": {
      "post": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Gets the configured and effective security group rules on the specified VM.",
        "operationId": "NetworkWatchers_GetVMSecurityRules",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the network watcher.",
            "in": "path",
            "name": "networkWatcherName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Parameters that define the VM to check security groups for.",
            "in": "body",
            "name": "parameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SecurityGroupViewParameters"
            }
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns security group rules on the VM.",
            "schema": {
              "$ref": "#/definitions/SecurityGroupViewResult"
            }
          },
          "202": {
            "description": "Accepted and the operation will complete asynchronously.",
            "schema": {
              "$ref": "#/definitions/SecurityGroupViewResult"
            }
          }
        },
        "tags": [
          "NetworkWatchers"
        ],
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/topology": {
      "post": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Gets the current network topology by resource group.",
        "operationId": "NetworkWatchers_GetTopology",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the network watcher.",
            "in": "path",
            "name": "networkWatcherName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Parameters that define the representation of topology.",
            "in": "body",
            "name": "parameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TopologyParameters"
            }
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns the topology of resource group.",
            "schema": {
              "$ref": "#/definitions/Topology"
            }
          }
        },
        "tags": [
          "NetworkWatchers"
        ]
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/troubleshoot": {
      "post": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Initiate troubleshooting on a specified resource",
        "operationId": "NetworkWatchers_GetTroubleshooting",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the network watcher resource.",
            "in": "path",
            "name": "networkWatcherName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Parameters that define the resource to troubleshoot.",
            "in": "body",
            "name": "parameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TroubleshootingParameters"
            }
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Successful troubleshooting request",
            "schema": {
              "$ref": "#/definitions/TroubleshootingResult"
            }
          },
          "202": {
            "description": "Accepted get troubleshooting request.",
            "schema": {
              "$ref": "#/definitions/TroubleshootingResult"
            }
          }
        },
        "tags": [
          "NetworkWatchers"
        ],
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/publicIPAddresses": {
      "get": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Gets all public IP addresses in a resource group.",
        "operationId": "PublicIPAddresses_List",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns a list of PublicIPAddress resources.",
            "schema": {
              "$ref": "#/definitions/PublicIPAddressListResult"
            }
          }
        },
        "tags": [
          "PublicIPAddresses"
        ],
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/publicIPAddresses/{publicIpAddressName}": {
      "delete": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Deletes the specified public IP address.",
        "operationId": "PublicIPAddresses_Delete",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the subnet.",
            "in": "path",
            "name": "publicIpAddressName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Delete successful."
          },
          "202": {
            "description": "Accepted and the operation will complete asynchronously."
          },
          "204": {
            "description": "Request successful. Resource does not exist."
          }
        },
        "tags": [
          "PublicIPAddresses"
        ],
        "x-ms-long-running-operation": true
      },
      "get": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Gets the specified public IP address in a specified resource group.",
        "operationId": "PublicIPAddresses_Get",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the subnet.",
            "in": "path",
            "name": "publicIpAddressName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "description": "Expands referenced resources.",
            "in": "query",
            "name": "$expand",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns the resulting PublicIPAddress resource.",
            "schema": {
              "$ref": "#/definitions/PublicIPAddress"
            }
          }
        },
        "tags": [
          "PublicIPAddresses"
        ]
      },
      "put": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Creates or updates a static or dynamic public IP address.",
        "operationId": "PublicIPAddresses_CreateOrUpdate",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the public IP address.",
            "in": "path",
            "name": "publicIpAddressName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Parameters supplied to the create or update public IP address operation.",
            "in": "body",
            "name": "parameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PublicIPAddress"
            }
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Update successful. The operation returns the resulting PublicIPAddress resource.",
            "schema": {
              "$ref": "#/definitions/PublicIPAddress"
            }
          },
          "201": {
            "description": "Create successful. The operation returns the resulting PublicIPAddress resource.",
            "schema": {
              "$ref": "#/definitions/PublicIPAddress"
            }
          }
        },
        "tags": [
          "PublicIPAddresses"
        ],
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeFilters": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Gets all route filters in a resource group.",
        "operationId": "RouteFilters_ListByResourceGroup",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns a list of Route Filter resources.",
            "schema": {
              "$ref": "#/definitions/RouteFilterListResult"
            }
          }
        },
        "tags": [
          "RouteFilters"
        ],
        "x-ms-examples": {
          "RouteFilterListByResourceGroup": {
            "parameters": {
              "api-version": "2016-12-01",
              "resourceGroupName": "rg1",
              "subscriptionId": "subid"
            },
            "responses": {
              "200": {
                "body": {
                  "value": [
                    {
                      "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
                      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsofot.Network/routeFilters/filterName",
                      "location": "West US",
                      "name": "filterName",
                      "properties": {
                        "peerings": [],
                        "provisioningState": "Succeeded",
                        "rules": [
                          {
                            "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
                            "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsofot.Network/routeFilters/filterName/routeFilterRules/ruleName",
                            "name": "ruleName",
                            "properties": {
                              "access": "Allow",
                              "communities": [
                                "12076:5030",
                                "12076:5040"
                              ],
                              "provisioningState": "Succeeded",
                              "routeFilterRuleType": "Community"
                            }
                          }
                        ]
                      },
                      "tags": {
                        "key1": "value1"
                      },
                      "type": "Microsofot.Network/routeFilters"
                    }
                  ]
                }
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeFilters/{routeFilterName}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Deletes the specified route filter.",
        "operationId": "RouteFilters_Delete",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the route filter.",
            "in": "path",
            "name": "routeFilterName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Delete successful."
          },
          "202": {
            "description": "Accepted and the operation will complete asynchronously."
          },
          "204": {
            "description": "Delete successful."
          }
        },
        "tags": [
          "RouteFilters"
        ],
        "x-ms-examples": {
          "RouteFilterDelete": {
            "parameters": {
              "api-version": "2016-12-01",
              "resourceGroupName": "rg1",
              "routeFilterName": "filterName",
              "subscriptionId": "subid"
            },
            "responses": {
              "200": {},
              "202": {},
              "204": {}
            }
          }
        },
        "x-ms-long-running-operation": true
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Gets the specified route filter.",
        "operationId": "RouteFilters_Get",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the route filter.",
            "in": "path",
            "name": "routeFilterName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "description": "Expands referenced express route bgp peering resources.",
            "in": "query",
            "name": "$expand",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns the resulting Route Filter resource.",
            "schema": {
              "$ref": "#/definitions/RouteFilter"
            }
          }
        },
        "tags": [
          "RouteFilters"
        ],
        "x-ms-examples": {
          "RouteFilterGet": {
            "parameters": {
              "api-version": "2016-12-01",
              "resourceGroupName": "rg1",
              "routeFilterName": "filterName",
              "subscriptionId": "subid"
            },
            "responses": {
              "200": {
                "body": {
                  "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsofot.Network/routeFilters/filterName",
                  "location": "West US",
                  "name": "filterName",
                  "properties": {
                    "peerings": [],
                    "provisioningState": "Succeeded",
                    "rules": [
                      {
                        "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
                        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsofot.Network/routeFilters/filterName/routeFilterRules/ruleName",
                        "name": "ruleName",
                        "properties": {
                          "access": "Allow",
                          "communities": [
                            "12076:5030",
                            "12076:5040"
                          ],
                          "provisioningState": "Succeeded",
                          "routeFilterRuleType": "Community"
                        }
                      }
                    ]
                  },
                  "tags": {
                    "key1": "value1"
                  },
                  "type": "Microsofot.Network/routeFilters"
                }
              }
            }
          }
        }
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "description": "Updates a route filter in a specified resource group.",
        "operationId": "RouteFilters_Update",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the route filter.",
            "in": "path",
            "name": "routeFilterName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Parameters supplied to the update route filter operation.",
            "in": "body",
            "name": "routeFilterParameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PatchRouteFilter"
            }
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns the resulting Route Filter resource.",
            "schema": {
              "$ref": "#/definitions/RouteFilter"
            }
          }
        },
        "tags": [
          "RouteFilters"
        ],
        "x-ms-examples": {
          "RouteFilterUpdate": {
            "parameters": {
              "api-version": "2016-12-01",
              "resourceGroupName": "rg1",
              "routeFilterName": "filterName",
              "routeFilterParameters": {
                "properties": {
                  "rules": [
                    {
                      "name": "ruleName",
                      "properties": {
                        "access": "Allow",
                        "communities": [
                          "12076:5030"
                        ],
                        "routeFilterRuleType": "Community"
                      }
                    }
                  ]
                },
                "tags": {
                  "key1": "value1"
                }
              },
              "subscriptionId": "subid"
            },
            "responses": {
              "200": {
                "body": {
                  "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsofot.Network/routeFilters/filterName",
                  "location": "West US",
                  "name": "filterName",
                  "properties": {
                    "peerings": [],
                    "provisioningState": "Succeeded",
                    "rules": [
                      {
                        "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
                        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsofot.Network/routeFilters/filterName/routeFilterRules/ruleName",
                        "name": "ruleName",
                        "properties": {
                          "access": "Allow",
                          "communities": [
                            "12076:5030"
                          ],
                          "provisioningState": "Succeeded",
                          "routeFilterRuleType": "Community"
                        }
                      }
                    ]
                  },
                  "tags": {
                    "key1": "value1"
                  },
                  "type": "Microsofot.Network/routeFilters"
                }
              }
            }
          }
        },
        "x-ms-long-running-operation": true
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Creates or updates a route filter in a specified resource group.",
        "operationId": "RouteFilters_CreateOrUpdate",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the route filter.",
            "in": "path",
            "name": "routeFilterName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Parameters supplied to the create or update route filter operation.",
            "in": "body",
            "name": "routeFilterParameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RouteFilter"
            }
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns the resulting Route Filter resource.",
            "schema": {
              "$ref": "#/definitions/RouteFilter"
            }
          },
          "201": {
            "description": "Create successful. The operation returns the resulting Route Filter resource.",
            "schema": {
              "$ref": "#/definitions/RouteFilter"
            }
          }
        },
        "tags": [
          "RouteFilters"
        ],
        "x-ms-examples": {
          "RouteFilterCreate": {
            "parameters": {
              "api-version": "2016-12-01",
              "resourceGroupName": "rg1",
              "routeFilterName": "filterName",
              "routeFilterParameters": {
                "location": "West US",
                "properties": {
                  "peerings": [],
                  "rules": [
                    {
                      "name": "ruleName",
                      "properties": {
                        "access": "Allow",
                        "communities": [
                          "12076:5030",
                          "12076:5040"
                        ],
                        "routeFilterRuleType": "Community"
                      }
                    }
                  ]
                },
                "tags": {
                  "key1": "value1"
                }
              },
              "subscriptionId": "subid"
            },
            "responses": {
              "200": {
                "body": {
                  "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsofot.Network/routeFilters/filterName",
                  "location": "West US",
                  "name": "filterName",
                  "properties": {
                    "peerings": [],
                    "provisioningState": "Succeeded",
                    "rules": [
                      {
                        "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
                        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsofot.Network/routeFilters/filterName/routeFilterRules/ruleName",
                        "name": "ruleName",
                        "properties": {
                          "access": "Allow",
                          "communities": [
                            "12076:5030",
                            "12076:5040"
                          ],
                          "provisioningState": "Succeeded",
                          "routeFilterRuleType": "Community"
                        }
                      }
                    ]
                  },
                  "tags": {
                    "key1": "value1"
                  },
                  "type": "Microsofot.Network/routeFilters"
                }
              },
              "201": {
                "body": {
                  "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsofot.Network/routeFilters/filterName",
                  "location": "West US",
                  "name": "filterName",
                  "properties": {
                    "peerings": [],
                    "provisioningState": "Succeeded",
                    "rules": [
                      {
                        "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
                        "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsofot.Network/routeFilters/filterName/routeFilterRules/ruleName",
                        "name": "ruleName",
                        "properties": {
                          "access": "Allow",
                          "communities": [
                            "12076:5030",
                            "12076:5040"
                          ],
                          "provisioningState": "Succeeded",
                          "routeFilterRuleType": "Community"
                        }
                      }
                    ]
                  },
                  "tags": {
                    "key1": "value1"
                  },
                  "type": "Microsofot.Network/routeFilters"
                }
              }
            }
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeFilters/{routeFilterName}/routeFilterRules": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Gets all RouteFilterRules in a route filter.",
        "operationId": "RouteFilterRules_ListByRouteFilter",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the route filter.",
            "in": "path",
            "name": "routeFilterName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns a list of Route Filter Rule resources.",
            "schema": {
              "$ref": "#/definitions/RouteFilterRuleListResult"
            }
          }
        },
        "tags": [
          "RouteFilterRules"
        ],
        "x-ms-examples": {
          "RouteFilterRuleListByRouteFilter": {
            "parameters": {
              "api-version": "2016-12-01",
              "resourceGroupName": "rg1",
              "routeFilterName": "filterName",
              "subscriptionId": "subid"
            },
            "responses": {
              "200": {
                "body": {
                  "value": [
                    {
                      "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
                      "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsofot.Network/routeFilters/filterName/routeFilterRules/ruleName",
                      "name": "ruleName",
                      "properties": {
                        "access": "Allow",
                        "communities": [
                          "12076:5030",
                          "12076:5040"
                        ],
                        "provisioningState": "Succeeded",
                        "routeFilterRuleType": "Community"
                      },
                      "tags": {
                        "key1": "value1"
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeFilters/{routeFilterName}/routeFilterRules/{ruleName}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Deletes the specified rule from a route filter.",
        "operationId": "RouteFilterRules_Delete",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the route filter.",
            "in": "path",
            "name": "routeFilterName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the rule.",
            "in": "path",
            "name": "ruleName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Accepted."
          },
          "202": {
            "description": "Accepted and the operation will complete asynchronously."
          },
          "204": {
            "description": "Rule was deleted or not found."
          }
        },
        "tags": [
          "RouteFilterRules"
        ],
        "x-ms-examples": {
          "RouteFilterRuleDelete": {
            "parameters": {
              "api-version": "2016-12-01",
              "resourceGroupName": "rg1",
              "routeFilterName": "filterName",
              "ruleName": "ruleName",
              "subscriptionId": "subid"
            },
            "responses": {
              "200": {},
              "202": {},
              "204": {}
            }
          }
        },
        "x-ms-long-running-operation": true
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Gets the specified rule from a route filter.",
        "operationId": "RouteFilterRules_Get",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the route filter.",
            "in": "path",
            "name": "routeFilterName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the rule.",
            "in": "path",
            "name": "ruleName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns the resulting Route Filter Rule resource.",
            "schema": {
              "$ref": "#/definitions/RouteFilterRule"
            }
          }
        },
        "tags": [
          "RouteFilterRules"
        ],
        "x-ms-examples": {
          "RouteFilterRuleGet": {
            "parameters": {
              "api-version": "2016-12-01",
              "resourceGroupName": "rg1",
              "routeFilterName": "filterName",
              "ruleName": "filterName",
              "subscriptionId": "subid"
            },
            "responses": {
              "200": {
                "body": {
                  "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsofot.Network/routeFilters/filterName/routeFilterRules/ruleName",
                  "name": "ruleName",
                  "properties": {
                    "access": "Allow",
                    "communities": [
                      "12076:5030",
                      "12076:5040"
                    ],
                    "provisioningState": "Succeeded",
                    "routeFilterRuleType": "Community"
                  },
                  "tags": {
                    "key1": "value1"
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "description": "Updates a route in the specified route filter.",
        "operationId": "RouteFilterRules_Update",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the route filter.",
            "in": "path",
            "name": "routeFilterName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the route filter rule.",
            "in": "path",
            "name": "ruleName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Parameters supplied to the update route filter rule operation.",
            "in": "body",
            "name": "routeFilterRuleParameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PatchRouteFilterRule"
            }
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Update successful. The operation returns the resulting Route Filter Rule resource.",
            "schema": {
              "$ref": "#/definitions/RouteFilterRule"
            }
          }
        },
        "tags": [
          "RouteFilterRules"
        ],
        "x-ms-examples": {
          "RouteFilterRuleUpdate": {
            "parameters": {
              "api-version": "2016-12-01",
              "resourceGroupName": "rg1",
              "routeFilterName": "filterName",
              "routeFilterRuleParameters": {
                "properties": {
                  "access": "Allow",
                  "communities": [
                    "12076:5030",
                    "12076:5040"
                  ],
                  "routeFilterRuleType": "Community"
                },
                "tags": {
                  "key1": "value1"
                }
              },
              "ruleName": "ruleName",
              "subscriptionId": "subid"
            },
            "responses": {
              "200": {
                "body": {
                  "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsofot.Network/routeFilters/filterName/routeFilterRules/ruleName",
                  "name": "ruleName",
                  "properties": {
                    "access": "Allow",
                    "communities": [
                      "12076:5030",
                      "12076:5040"
                    ],
                    "provisioningState": "Succeeded",
                    "routeFilterRuleType": "Community"
                  },
                  "tags": {
                    "key1": "value1"
                  }
                }
              }
            }
          }
        },
        "x-ms-long-running-operation": true
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Creates or updates a route in the specified route filter.",
        "operationId": "RouteFilterRules_CreateOrUpdate",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the route filter.",
            "in": "path",
            "name": "routeFilterName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the route filter rule.",
            "in": "path",
            "name": "ruleName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Parameters supplied to the create or update route filter rule operation.",
            "in": "body",
            "name": "routeFilterRuleParameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RouteFilterRule"
            }
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Update successful. The operation returns the resulting Route Filter Rule resource.",
            "schema": {
              "$ref": "#/definitions/RouteFilterRule"
            }
          },
          "201": {
            "description": "Create successful. The operation returns the resulting Route Filter Rule resource.",
            "schema": {
              "$ref": "#/definitions/RouteFilterRule"
            }
          }
        },
        "tags": [
          "RouteFilterRules"
        ],
        "x-ms-examples": {
          "RouteFilterRuleCreate": {
            "parameters": {
              "api-version": "2016-12-01",
              "resourceGroupName": "rg1",
              "routeFilterName": "filterName",
              "routeFilterRuleParameters": {
                "properties": {
                  "access": "Allow",
                  "communities": [
                    "12076:5030",
                    "12076:5040"
                  ],
                  "routeFilterRuleType": "Community"
                },
                "tags": {
                  "key1": "value1"
                }
              },
              "ruleName": "ruleName",
              "subscriptionId": "subid"
            },
            "responses": {
              "200": {
                "body": {
                  "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsofot.Network/routeFilters/filterName/routeFilterRules/ruleName",
                  "name": "ruleName",
                  "properties": {
                    "access": "Allow",
                    "communities": [
                      "12076:5030",
                      "12076:5040"
                    ],
                    "provisioningState": "Succeeded",
                    "routeFilterRuleType": "Community"
                  },
                  "tags": {
                    "key1": "value1"
                  }
                }
              },
              "201": {
                "body": {
                  "etag": "w/\\00000000-0000-0000-0000-000000000000\\",
                  "id": "/subscriptions/subid/resourceGroups/rg1/providers/Microsofot.Network/routeFilters/filterName/routeFilterRules/ruleName",
                  "name": "ruleName",
                  "properties": {
                    "access": "Allow",
                    "communities": [
                      "12076:5030",
                      "12076:5040"
                    ],
                    "provisioningState": "Succeeded",
                    "routeFilterRuleType": "Community"
                  },
                  "tags": {
                    "key1": "value1"
                  }
                }
              }
            }
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeTables": {
      "get": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Gets all route tables in a resource group.",
        "operationId": "RouteTables_List",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns a list of RouteTable resources.",
            "schema": {
              "$ref": "#/definitions/RouteTableListResult"
            }
          }
        },
        "tags": [
          "RouteTables"
        ],
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeTables/{routeTableName}": {
      "delete": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Deletes the specified route table.",
        "operationId": "RouteTables_Delete",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the route table.",
            "in": "path",
            "name": "routeTableName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. Operation to delete was accepted."
          },
          "202": {
            "description": "Accepted. If route table not found returned synchronously, otherwise if found returned asynchronously."
          },
          "204": {
            "description": "Request successful. Resource does not exist."
          }
        },
        "tags": [
          "RouteTables"
        ],
        "x-ms-long-running-operation": true
      },
      "get": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Gets the specified route table.",
        "operationId": "RouteTables_Get",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the route table.",
            "in": "path",
            "name": "routeTableName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "description": "Expands referenced resources.",
            "in": "query",
            "name": "$expand",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns the resulting RouteTable resource.",
            "schema": {
              "$ref": "#/definitions/RouteTable"
            }
          }
        },
        "tags": [
          "RouteTables"
        ]
      },
      "put": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Create or updates a route table in a specified resource group.",
        "operationId": "RouteTables_CreateOrUpdate",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the route table.",
            "in": "path",
            "name": "routeTableName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Parameters supplied to the create or update route table operation.",
            "in": "body",
            "name": "parameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RouteTable"
            }
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns the resulting RouteTable resource.",
            "schema": {
              "$ref": "#/definitions/RouteTable"
            }
          },
          "201": {
            "description": "Create successful. The operation returns the resulting RouteTable resource.",
            "schema": {
              "$ref": "#/definitions/RouteTable"
            }
          }
        },
        "tags": [
          "RouteTables"
        ],
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeTables/{routeTableName}/routes": {
      "get": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Gets all routes in a route table.",
        "operationId": "Routes_List",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the route table.",
            "in": "path",
            "name": "routeTableName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns a list of Route resources.",
            "schema": {
              "$ref": "#/definitions/RouteListResult"
            }
          }
        },
        "tags": [
          "Routes"
        ],
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeTables/{routeTableName}/routes/{routeName}": {
      "delete": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Deletes the specified route from a route table.",
        "operationId": "Routes_Delete",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the route table.",
            "in": "path",
            "name": "routeTableName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the route.",
            "in": "path",
            "name": "routeName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Accepted."
          },
          "202": {
            "description": "Accepted and the operation will complete asynchronously."
          },
          "204": {
            "description": "Route was deleted or not found."
          }
        },
        "tags": [
          "Routes"
        ],
        "x-ms-long-running-operation": true
      },
      "get": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Gets the specified route from a route table.",
        "operationId": "Routes_Get",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the route table.",
            "in": "path",
            "name": "routeTableName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the route.",
            "in": "path",
            "name": "routeName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns the resulting Route resource.",
            "schema": {
              "$ref": "#/definitions/Route"
            }
          }
        },
        "tags": [
          "Routes"
        ]
      },
      "put": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Creates or updates a route in the specified route table.",
        "operationId": "Routes_CreateOrUpdate",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the route table.",
            "in": "path",
            "name": "routeTableName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the route.",
            "in": "path",
            "name": "routeName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Parameters supplied to the create or update route operation.",
            "in": "body",
            "name": "routeParameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Route"
            }
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Update successful. The operation returns the resulting Route resource.",
            "schema": {
              "$ref": "#/definitions/Route"
            }
          },
          "201": {
            "description": "Create successful. The operation returns the resulting Route resource.",
            "schema": {
              "$ref": "#/definitions/Route"
            }
          }
        },
        "tags": [
          "Routes"
        ],
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways": {
      "get": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Gets all virtual network gateways by resource group.",
        "operationId": "VirtualNetworkGateways_List",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns a list of VirtualNetworkGateway resources.",
            "schema": {
              "$ref": "#/definitions/VirtualNetworkGatewayListResult"
            }
          }
        },
        "tags": [
          "VirtualNetworkGateways"
        ],
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}": {
      "delete": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Deletes the specified virtual network gateway.",
        "operationId": "VirtualNetworkGateways_Delete",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the virtual network gateway.",
            "in": "path",
            "name": "virtualNetworkGatewayName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Delete successful."
          },
          "202": {
            "description": "Accepted and the operation will complete asynchronously."
          },
          "204": {
            "description": "Delete successful."
          }
        },
        "tags": [
          "VirtualNetworkGateways"
        ],
        "x-ms-long-running-operation": true
      },
      "get": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Gets the specified virtual network gateway by resource group.",
        "operationId": "VirtualNetworkGateways_Get",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the virtual network gateway.",
            "in": "path",
            "name": "virtualNetworkGatewayName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns a VirtualNetworkGateway resource.",
            "schema": {
              "$ref": "#/definitions/VirtualNetworkGateway"
            }
          }
        },
        "tags": [
          "VirtualNetworkGateways"
        ]
      },
      "put": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Creates or updates a virtual network gateway in the specified resource group.",
        "operationId": "VirtualNetworkGateways_CreateOrUpdate",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the virtual network gateway.",
            "in": "path",
            "name": "virtualNetworkGatewayName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Parameters supplied to create or update virtual network gateway operation.",
            "in": "body",
            "name": "parameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VirtualNetworkGateway"
            }
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Update successful. The operation returns the resulting VirtualNetworkGateway resource.",
            "schema": {
              "$ref": "#/definitions/VirtualNetworkGateway"
            }
          },
          "201": {
            "description": "Create successful. The operation returns the resulting VirtualNetworkGateway resource.",
            "schema": {
              "$ref": "#/definitions/VirtualNetworkGateway"
            }
          }
        },
        "tags": [
          "VirtualNetworkGateways"
        ],
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/generatevpnclientpackage": {
      "post": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Generates VPN client package for P2S client of the virtual network gateway in the specified resource group.",
        "operationId": "VirtualNetworkGateways_Generatevpnclientpackage",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the virtual network gateway.",
            "in": "path",
            "name": "virtualNetworkGatewayName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Parameters supplied to the generate virtual network gateway VPN client package operation.",
            "in": "body",
            "name": "parameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VpnClientParameters"
            }
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "202": {
            "description": "VPN client package URL.",
            "schema": {
              "type": "string"
            }
          }
        },
        "tags": [
          "VirtualNetworkGateways"
        ]
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/getAdvertisedRoutes": {
      "post": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "This operation retrieves a list of routes the virtual network gateway is advertising to the specified peer.",
        "operationId": "VirtualNetworkGateways_GetAdvertisedRoutes",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the virtual network gateway.",
            "in": "path",
            "name": "virtualNetworkGatewayName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The IP address of the peer",
            "in": "query",
            "name": "peer",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "List of learned BGP routes",
            "schema": {
              "$ref": "#/definitions/GatewayRouteListResult"
            }
          },
          "202": {
            "description": "Accepted and the operation will complete asynchronously."
          }
        },
        "tags": [
          "VirtualNetworkGateways"
        ],
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/getBgpPeerStatus": {
      "post": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "The GetBgpPeerStatus operation retrieves the status of all BGP peers.",
        "operationId": "VirtualNetworkGateways_GetBgpPeerStatus",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the virtual network gateway.",
            "in": "path",
            "name": "virtualNetworkGatewayName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The IP address of the peer to retrieve the status of.",
            "in": "query",
            "name": "peer",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "List of BGP peer statuses",
            "schema": {
              "$ref": "#/definitions/BgpPeerStatusListResult"
            }
          },
          "202": {
            "description": "Accepted and the operation will complete asynchronously."
          }
        },
        "tags": [
          "VirtualNetworkGateways"
        ],
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/getLearnedRoutes": {
      "post": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "This operation retrieves a list of routes the virtual network gateway has learned, including routes learned from BGP peers.",
        "operationId": "VirtualNetworkGateways_GetLearnedRoutes",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the virtual network gateway.",
            "in": "path",
            "name": "virtualNetworkGatewayName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "List of advertised BGP routes",
            "schema": {
              "$ref": "#/definitions/GatewayRouteListResult"
            }
          },
          "202": {
            "description": "Accepted and the operation will complete asynchronously."
          }
        },
        "tags": [
          "VirtualNetworkGateways"
        ],
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworkGateways/{virtualNetworkGatewayName}/reset": {
      "post": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Resets the primary of the virtual network gateway in the specified resource group.",
        "operationId": "VirtualNetworkGateways_Reset",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the virtual network gateway.",
            "in": "path",
            "name": "virtualNetworkGatewayName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Virtual network gateway vip address supplied to the begin reset of the active-active feature enabled gateway.",
            "in": "query",
            "name": "gatewayVip",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation reset the primary of the virtual network gateway.",
            "schema": {
              "$ref": "#/definitions/VirtualNetworkGateway"
            }
          },
          "202": {
            "description": "Accepted and the operation will complete asynchronously."
          }
        },
        "tags": [
          "VirtualNetworkGateways"
        ],
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks": {
      "get": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Gets all virtual networks in a resource group.",
        "operationId": "VirtualNetworks_List",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns a list of VirtualNetwork resources.",
            "schema": {
              "$ref": "#/definitions/VirtualNetworkListResult"
            }
          }
        },
        "tags": [
          "VirtualNetworks"
        ],
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}": {
      "delete": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Deletes the specified virtual network.",
        "operationId": "VirtualNetworks_Delete",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the virtual network.",
            "in": "path",
            "name": "virtualNetworkName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Delete successful."
          },
          "202": {
            "description": "Accepted and the operation will complete asynchronously."
          },
          "204": {
            "description": "Delete successful."
          }
        },
        "tags": [
          "VirtualNetworks"
        ],
        "x-ms-long-running-operation": true
      },
      "get": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Gets the specified virtual network by resource group.",
        "operationId": "VirtualNetworks_Get",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the virtual network.",
            "in": "path",
            "name": "virtualNetworkName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "description": "Expands referenced resources.",
            "in": "query",
            "name": "$expand",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns the resulting VirtualNetwork resource.",
            "schema": {
              "$ref": "#/definitions/VirtualNetwork"
            }
          }
        },
        "tags": [
          "VirtualNetworks"
        ]
      },
      "put": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Creates or updates a virtual network in the specified resource group.",
        "operationId": "VirtualNetworks_CreateOrUpdate",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the virtual network.",
            "in": "path",
            "name": "virtualNetworkName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Parameters supplied to the create or update virtual network operation",
            "in": "body",
            "name": "parameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VirtualNetwork"
            }
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Update successful. The operation returns the resulting VirtualNetwork resource.",
            "schema": {
              "$ref": "#/definitions/VirtualNetwork"
            }
          },
          "201": {
            "description": "Create successful. The operation returns the resulting VirtualNetwork resource.",
            "schema": {
              "$ref": "#/definitions/VirtualNetwork"
            }
          }
        },
        "tags": [
          "VirtualNetworks"
        ],
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/CheckIPAddressAvailability": {
      "get": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Checks whether a private IP address is available for use.",
        "operationId": "VirtualNetworks_CheckIPAddressAvailability",
        "parameters": [
          {
            "description": "The private IP address to be verified.",
            "in": "query",
            "name": "ipAddress",
            "required": false,
            "type": "string"
          },
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the virtual network.",
            "in": "path",
            "name": "virtualNetworkName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Private IP address availability and list of other free addresses if the requested one is not available.",
            "schema": {
              "$ref": "#/definitions/IPAddressAvailabilityResult"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets": {
      "get": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Gets all subnets in a virtual network.",
        "operationId": "Subnets_List",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the virtual network.",
            "in": "path",
            "name": "virtualNetworkName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns a list of Subnet resources.",
            "schema": {
              "$ref": "#/definitions/SubnetListResult"
            }
          }
        },
        "tags": [
          "Subnets"
        ],
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}": {
      "delete": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Deletes the specified subnet.",
        "operationId": "Subnets_Delete",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the virtual network.",
            "in": "path",
            "name": "virtualNetworkName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the subnet.",
            "in": "path",
            "name": "subnetName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Delete successful."
          },
          "202": {
            "description": "Accepted and the operation will complete asynchronously."
          },
          "204": {
            "description": "Request successful. Resource does not exist."
          }
        },
        "tags": [
          "Subnets"
        ],
        "x-ms-long-running-operation": true
      },
      "get": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Gets the specified subnet by virtual network and resource group.",
        "operationId": "Subnets_Get",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the virtual network.",
            "in": "path",
            "name": "virtualNetworkName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the subnet.",
            "in": "path",
            "name": "subnetName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "description": "Expands referenced resources.",
            "in": "query",
            "name": "$expand",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns the resulting Subnet resource.",
            "schema": {
              "$ref": "#/definitions/Subnet"
            }
          }
        },
        "tags": [
          "Subnets"
        ]
      },
      "put": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Creates or updates a subnet in the specified virtual network.",
        "operationId": "Subnets_CreateOrUpdate",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the virtual network.",
            "in": "path",
            "name": "virtualNetworkName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the subnet.",
            "in": "path",
            "name": "subnetName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Parameters supplied to the create or update subnet operation.",
            "in": "body",
            "name": "subnetParameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Subnet"
            }
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Update successful. The operation returns the resulting Subnet resource.",
            "schema": {
              "$ref": "#/definitions/Subnet"
            }
          },
          "201": {
            "description": "Create successful. The operation returns the resulting Subnet resource.",
            "schema": {
              "$ref": "#/definitions/Subnet"
            }
          }
        },
        "tags": [
          "Subnets"
        ],
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/virtualNetworkPeerings": {
      "get": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Gets all virtual network peerings in a virtual network.",
        "operationId": "VirtualNetworkPeerings_List",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the virtual network.",
            "in": "path",
            "name": "virtualNetworkName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns a list of VirtualNetworkPeering resources.",
            "schema": {
              "$ref": "#/definitions/VirtualNetworkPeeringListResult"
            }
          }
        },
        "tags": [
          "VirtualNetworkPeerings"
        ],
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/virtualNetworkPeerings/{virtualNetworkPeeringName}": {
      "delete": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Deletes the specified virtual network peering.",
        "operationId": "VirtualNetworkPeerings_Delete",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the virtual network.",
            "in": "path",
            "name": "virtualNetworkName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the virtual network peering.",
            "in": "path",
            "name": "virtualNetworkPeeringName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Delete successful."
          },
          "202": {
            "description": "Accepted and the operation will complete asynchronously."
          },
          "204": {
            "description": "Delete successful."
          }
        },
        "tags": [
          "VirtualNetworkPeerings"
        ],
        "x-ms-long-running-operation": true
      },
      "get": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Gets the specified virtual network peering.",
        "operationId": "VirtualNetworkPeerings_Get",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the virtual network.",
            "in": "path",
            "name": "virtualNetworkName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the virtual network peering.",
            "in": "path",
            "name": "virtualNetworkPeeringName",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns the resulting VirtualNetworkPeering resource.",
            "schema": {
              "$ref": "#/definitions/VirtualNetworkPeering"
            }
          }
        },
        "tags": [
          "VirtualNetworkPeerings"
        ]
      },
      "put": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Creates or updates a peering in the specified virtual network.",
        "operationId": "VirtualNetworkPeerings_CreateOrUpdate",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the virtual network.",
            "in": "path",
            "name": "virtualNetworkName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the peering.",
            "in": "path",
            "name": "virtualNetworkPeeringName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Parameters supplied to the create or update virtual network peering operation.",
            "in": "body",
            "name": "VirtualNetworkPeeringParameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VirtualNetworkPeering"
            }
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Update successful. The operation returns the resulting VirtualNetworkPeering resource.",
            "schema": {
              "$ref": "#/definitions/VirtualNetworkPeering"
            }
          },
          "201": {
            "description": "Create successful. The operation returns the resulting VirtualNetworkPeering resource.",
            "schema": {
              "$ref": "#/definitions/VirtualNetworkPeering"
            }
          }
        },
        "tags": [
          "VirtualNetworkPeerings"
        ],
        "x-ms-long-running-operation": true
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.Compute/virtualMachineScaleSets/{virtualMachineScaleSetName}/networkInterfaces": {
      "get": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Gets all network interfaces in a virtual machine scale set.",
        "operationId": "NetworkInterfaces_ListVirtualMachineScaleSetNetworkInterfaces",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the virtual machine scale set.",
            "in": "path",
            "name": "virtualMachineScaleSetName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Client API version.",
            "enum": [
              "2016-09-01"
            ],
            "in": "query",
            "name": "api-version",
            "required": true,
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "ApiVersion"
            }
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns a list of NetworkInterface resources.",
            "schema": {
              "$ref": "#/definitions/NetworkInterfaceListResult"
            }
          }
        },
        "tags": [
          "NetworkInterfaces"
        ],
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.Compute/virtualMachineScaleSets/{virtualMachineScaleSetName}/virtualMachines/{virtualmachineIndex}/networkInterfaces": {
      "get": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Gets information about all network interfaces in a virtual machine in a virtual machine scale set.",
        "operationId": "NetworkInterfaces_ListVirtualMachineScaleSetVMNetworkInterfaces",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the virtual machine scale set.",
            "in": "path",
            "name": "virtualMachineScaleSetName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The virtual machine index.",
            "in": "path",
            "name": "virtualmachineIndex",
            "required": true,
            "type": "string"
          },
          {
            "description": "Client API version.",
            "enum": [
              "2016-09-01"
            ],
            "in": "query",
            "name": "api-version",
            "required": true,
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "ApiVersion"
            }
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns a list of NetworkInterface resources.",
            "schema": {
              "$ref": "#/definitions/NetworkInterfaceListResult"
            }
          }
        },
        "tags": [
          "NetworkInterfaces"
        ],
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.Compute/virtualMachineScaleSets/{virtualMachineScaleSetName}/virtualMachines/{virtualmachineIndex}/networkInterfaces/{networkInterfaceName}": {
      "get": {
        "consumes": [
          "application/json",
          "text/json"
        ],
        "description": "Get the specified network interface in a virtual machine scale set.",
        "operationId": "NetworkInterfaces_GetVirtualMachineScaleSetNetworkInterface",
        "parameters": [
          {
            "description": "The name of the resource group.",
            "in": "path",
            "name": "resourceGroupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the virtual machine scale set.",
            "in": "path",
            "name": "virtualMachineScaleSetName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The virtual machine index.",
            "in": "path",
            "name": "virtualmachineIndex",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the network interface.",
            "in": "path",
            "name": "networkInterfaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Client API version.",
            "enum": [
              "2016-09-01"
            ],
            "in": "query",
            "name": "api-version",
            "required": true,
            "type": "string",
            "x-ms-enum": {
              "modelAsString": true,
              "name": "ApiVersion"
            }
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "description": "Expands referenced resources.",
            "in": "query",
            "name": "$expand",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "Request successful. The operation returns the resulting NetworkInterface resource.",
            "schema": {
              "$ref": "#/definitions/NetworkInterface"
            }
          }
        },
        "tags": [
          "NetworkInterfaces"
        ]
      }
    }
  },
  "schemes": [
    "https"
  ],
  "security": [
    {
      "azure_auth": [
        "user_impersonation"
      ]
    }
  ],
  "securityDefinitions": {
    "azure_auth": {
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "description": "Azure Active Directory OAuth2 Flow",
      "flow": "implicit",
      "scopes": {
        "user_impersonation": "impersonate your user account"
      },
      "type": "oauth2"
    }
  },
  "swagger": "2.0"
}