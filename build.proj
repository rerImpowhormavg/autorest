<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!--
  Targets:

  /t:Clean
    Removes temporary build outputs.

  /t:Build
    Builds assemblies.

  /t:Test
    Run unit tests.

  /t:Package
    Builds NuGet packages using the binaries folder contents.
    The packages will drop to .\binaries\packages.

  /t:Publish
    Publishes the built packages. You will need to include your
    publishing key when running. Include: /p:NuGetKey=YOUR_PUBLISHING_KEY

  /t:CodeAnalysis
    Run Code analysis.

  Properties of interest:
  /p:Scope
    'All' : builds ClientRuntime and CodeGenerator solutions
    'CodeGenerator': builds CodeGenerator solution only
    'ClientRuntime': builds ClientRuntime solution only
    By default, it builds all.

  /P:CodeSign=True
    Code sign binaries, mainly for official release

  /p:CodeSign=True;DelaySign=True
    Test the code sign workflow locally

  /p:NuGetKey=NUGET_PUBLISHING_KEY
    Provides the key used to publish to a NuGet or MyGet server.

    This key should never be committed to source control.

  /p:PublishSymbolSourcePackages
    A true/false value indicating whether to push the symbol + source
    packages to a symbol server.

  /p:NuGetPublishingSource=Uri
    The NuGet Server to push packages to.

  /p:NuGetSymbolPublishingSource=Uri
    The NuGet Server to push symbol + source packages to.
  -->

  <PropertyGroup>
    <ClientRuntimeSolution>ClientRuntime.sln</ClientRuntimeSolution>
    <CodeGeneratorSolution>AutoRest.sln</CodeGeneratorSolution>
    <LibraryRoot>$(MSBuildThisFileDirectory)</LibraryRoot>
    <LibrarySourceFolder>$(LibraryRoot)</LibrarySourceFolder>
    <LibraryToolsFolder>$(LibraryRoot)Tools</LibraryToolsFolder>
    <BinariesFolder>$(LibraryRoot)binaries</BinariesFolder>
    <PackageOutputDir>$(BinariesFolder)\packages</PackageOutputDir>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <CodeSign Condition=" '$(CodeSign)' == '' ">false</CodeSign>
    <!-- Only set set this to true for testing the code sign workflow locally. -->
    <DelaySign Condition =" '$(DelaySign)' == '' ">false</DelaySign>
    <Scope Condition=" '$(Scope)' == '' ">all</Scope>
  </PropertyGroup>

  <ItemGroup>
    <LibraryFxTargetList Condition=" '$(FxTargetList)' == '' and '$(Scope)' == 'ClientRuntime' " Include="portable;net45" />
    <LibraryFxTargetList Condition=" '$(FxTargetList)' == '' and '$(Scope)' == 'all' " Include="portable;net45" />
    <LibraryFxTargetList Condition=" '$(FxTargetList)' == '' and '$(Scope)' == 'CodeGenerator' " Include="net45" />
    <LibraryFxTargetList Condition=" '$(FxTargetList)' != '' " Include="$(FxTargetList)" />
  </ItemGroup>

  <PropertyGroup>
    <NuGetCommand Condition=" '$(OS)' == 'Windows_NT'">&quot;$(LibraryToolsFolder)\nuget.exe&quot;</NuGetCommand>
    <NuGetCommand Condition=" '$(OS)' != 'Windows_NT'">mono &quot;$(LibraryToolsFolder)\nuget.exe&quot;</NuGetCommand>
    <NuGetSources>https://www.myget.org/F/xunit;https://www.nuget.org/api/v2/</NuGetSources>
   </PropertyGroup>

  <UsingTask AssemblyFile="tools\AutoRest.Build.Tasks.dll" TaskName="ValidateStrongNameSignatureTask" />
  <UsingTask AssemblyFile="tools\AutoRest.Build.Tasks.dll" TaskName="RegexReplaceTask" />
  <UsingTask AssemblyFile="tools\AutoRest.Build.Tasks.dll" TaskName="SetEnvVar" />

  <!-- CI build related. -->
  <PropertyGroup>
    <ContinueOnPoliCheckError>false</ContinueOnPoliCheckError>
    <!--OnPremiseBuildTasks is not a good name, but CI server is using that, will update across soon-->
    <CIToolsPath>$(OnPremiseBuildTasks)</CIToolsPath>
    <OnPremiseBuild Condition=" Exists('$(OnPremiseBuildTasks)') ">true</OnPremiseBuild>
    <OnPremiseBuild Condition=" ! Exists('$(OnPremiseBuildTasks)') ">false</OnPremiseBuild>
  </PropertyGroup>
  <UsingTask Condition=" $(OnPremiseBuild) " TaskName="CodeSigningTask" AssemblyFile="$(CIToolsPath)\Microsoft.WindowsAzure.Tools.Build.Tasks.OnPremise.dll" />
  <UsingTask Condition=" $(OnPremiseBuild) " TaskName="CorporateValidation" AssemblyFile="$(CIToolsPath)\Microsoft.WindowsAzure.Tools.Build.Tasks.OnPremise.dll" />
  <Import Condition=" $(OnPremiseBuild) " Project="$(CIToolsPath)\Microsoft.WindowsAzure.Build.OnPremise.msbuild" />

  <Target Name="Build" DependsOnTargets="RestoreNugetPackages">
    <CallTarget Targets="BuildMsBuildTask" />
    <CallTarget Targets="BuildServerPreparation" Condition=" '$(CodeSign)' == 'true' " />
    <!--
    The solution file contains configurations for each platform such as Portable-Debug, Net45-Release, etc
        When invoking msbuild, provide the right configuration name.
    -->
    <MSBuild Projects="$(ClientRuntimeSolution)"
             Properties="Configuration=%(LibraryFxTargetList.Identity)-$(Configuration);Platform=Any CPU;CodeSign=$(CodeSign)"
             Targets="Build"
             Condition=" '$(Scope)' == 'all' or '$(Scope)' == 'ClientRuntime'" />
    <MSBuild Projects="$(CodeGeneratorSolution)"
             Properties="Configuration=Net45-$(Configuration);Platform=Any CPU;CodeSign=$(CodeSign)"
             Targets="Build"
             Condition=" '$(Scope)' == 'all' or '$(Scope)' == 'CodeGenerator'" />
    <CallTarget Targets="CodeSignBinaries" Condition=" '$(CodeSign)' == 'true' " />
  </Target>

  <!-- Project files import some targets coming from nuget packages, so need to restore them first to avoid errors
      such as "The imported project ....build\Microsoft.Bcl.Build.targets was not found. " -->
  <Target Name="Clean">
    <MSBuild Projects="$(ClientRuntimeSolution)"
             Properties="Configuration=%(LibraryFxTargetList.Identity)-$(Configuration);Platform=Any CPU"
             Targets="Clean"
             Condition=" '$(Scope)' == 'all' or '$(Scope)' == 'ClientRuntime'" />
    <MSBuild Projects="$(CodeGeneratorSolution)"
             Properties="Configuration=Net45-$(Configuration);Platform=Any CPU"
             Targets="Clean"
             Condition=" '$(Scope)' == 'all' or '$(Scope)' == 'CodeGenerator'" />
    <RemoveDir Directories="$(BinariesFolder)" />
  </Target>

  <Target Name="CodeAnalysis">
    <!--Note, we use "Rebuild" rather "Build", because code analysis happens during the build, and this ensures the build is not skipped-->
    <MSBuild Projects="$(ClientRuntimeSolution)"
             Properties="Configuration=%(LibraryFxTargetList.Identity)-$(Configuration);Platform=Any CPU;RunCodeAnalysis=true;CodeAnalysisTreatWarningsAsErrors=true"
             Targets="Rebuild"
             Condition=" '$(Scope)' == 'all' or '$(Scope)' == 'ClientRuntime'" />

    <MSBuild Projects="$(CodeGeneratorSolution)"
             Properties="Configuration=Net45-$(Configuration);Platform=Any CPU;RunCodeAnalysis=true;CodeAnalysisTreatWarningsAsErrors=true"
             Targets="Rebuild"
             Condition=" '$(Scope)' == 'all' or '$(Scope)' == 'CodeGenerator'" />
  </Target>

  <!-- Run tests. -->
  <UsingTask TaskName="Xunit.Runner.MSBuild.xunit" AssemblyFile="packages\xunit.runner.msbuild.2.1.0-beta4-build3050\build\portable-net45+win+wpa81+wp80+monotouch+monoandroid+Xamarin.iOS\xunit.runner.msbuild.dll" />
  <Target Name="Test" DependsOnTargets="RestoreNugetPackages">
    <CallTarget Targets="TestClientRuntime" Condition=" '$(Scope)' == 'all' or '$(Scope)' == 'ClientRuntime'" />
    <!-- <CallTarget Targets="TestCodeGenerator" Condition=" '$(Scope)' == 'all' or '$(Scope)' == 'CodeGenerator'" /> -->
    <CallTarget Targets="TestNuGetPackages" Condition=" '$(Scope)' == 'all' or '$(Scope)' == 'CodeGenerator'" />
  </Target>

  <Target Name="TestClientRuntime">
    <ItemGroup>
      <TestDlls Include="$(LibraryRoot)\ClientRuntimes\CSharp\*.Tests\bin\*\*Tests.dll" />
    </ItemGroup>

    <Message Text="@(TestDlls)" />
    <MakeDir Directories="$(LibraryRoot)TestResults"/>
    <xunit Assemblies="@(TestDlls)" Html="$(MSBuildProjectDirectory)\TestResults\xunit.results.html" ContinueOnError="false" />
    <Exec WorkingDirectory=".\ClientRuntimes\NodeJS\ClientRuntime\" Command="npm test"/>
    <Exec WorkingDirectory=".\ClientRuntimes\NodeJS\ClientRuntime.Azure\" Command="npm test"/>
  </Target>

  <Target Name="TestCodeGenerator">
    <ItemGroup>
      <TestDlls Include="$(LibraryRoot)\AutoRest\Generators\Azure.Common\Azure.Common.Tests\bin\Net45-$(Configuration)\AutoRest.Generator.Azure.Common.Tests.dll" />
      <TestDlls Include="$(LibraryRoot)\AutoRest\Generators\CSharp\CSharp.Tests\bin\Net45-$(Configuration)\AutoRest.Generator.CSharp.Tests.dll" />
      <TestDlls Include="$(LibraryRoot)\AutoRest\Generators\CSharp\Azure.CSharp.Tests\bin\Net45-$(Configuration)\AutoRest.Generator.Azure.CSharp.Tests.dll" />
      <TestDlls Include="$(LibraryRoot)\AutoRest\AutoRest.Core.Tests\bin\Net45-$(Configuration)\AutoRest.Core.Tests.dll" />
      <TestDlls Include="$(LibraryRoot)\AutoRest\Modelers\Swagger.Tests\bin\Net45-$(Configuration)\AutoRest.Modeler.Swagger.Tests.dll" />
      <TestDlls Include="$(LibraryRoot)\AutoRest\Generators\Ruby\Ruby.Tests\bin\Net45-$(Configuration)\AutoRest.Generator.Ruby.Tests.dll" />
      <TestDlls Include="$(LibraryRoot)\AutoRest\Generators\Ruby\Azure.Ruby.Tests\bin\Net45-$(Configuration)\AutoRest.Generator.Azure.Ruby.Tests.dll" />
    </ItemGroup>

    <Message Text="@(TestDlls)" />
    <MakeDir Directories="$(LibraryRoot)TestResults"/>
    <!-- <Exec WorkingDirectory=".\ClientRuntimes\Ruby\" Command="UpdateRuntime"/> -->
    <xunit Assemblies="@(TestDlls)" Html="$(MSBuildProjectDirectory)\TestResults\xunit.results.html" ContinueOnError="false" />
    <Exec WorkingDirectory="$(LibraryRoot)\AutoRest\Generators\NodeJS\NodeJS.Tests\" Command="npm test"/>
    <Exec WorkingDirectory="$(LibraryRoot)\AutoRest\Generators\NodeJS\Azure.NodeJS.Tests\" Command="npm test"/>
  </Target>

  <Target Name="TestNuGetPackages">
    <PropertyGroup>
      <TestProjectDir>$(LibraryRoot)AutoRest\Generators\AcceptanceTests\NugetPackageTest</TestProjectDir>
    </PropertyGroup>

    <!--install autorest and client runtime packages-->
    <Exec Command="$(NuGetCommand) restore $(TestProjectDir)\NugetPackageTest.sln -source &quot;$(PackageOutputDir);$(NuGetSources)&quot;"/>
    <ItemGroup>
      <AutoRestExeFiles Include="$(TestProjectDir)\packages\autorest.*\tools\AutoRest.exe" />
    </ItemGroup>
    <PropertyGroup>
      <AutoRestExe Condition=" '$(OS)' == 'Windows_NT'">@(AutoRestExeFiles->'%(FullPath)')</AutoRestExe>
      <AutoRestExe Condition=" '$(OS)' != 'Windows_NT'">mono @(AutoRestExeFiles->'%(FullPath)')</AutoRestExe>
    </PropertyGroup>

    <!--Invoke code-gen-->
    <Exec WorkingDirectory="$(TestProjectDir)" Command="$(AutoRestExe) -Modeler Swagger -CodeGenerator CSharp -OutputDirectory $(TestProjectDir)\Generated\CSharp -Namespace &quot;Fixtures.Bodynumber&quot; -Input &quot;$(LibraryRoot)\AutoRest\Generators\AcceptanceTests\swagger\body-number.json&quot; -Header NONE"/>
    <Exec WorkingDirectory="$(TestProjectDir)" Command="$(AutoRestExe) -Modeler Swagger -CodeGenerator NodeJS -OutputDirectory $(TestProjectDir)\Generated\NodeJS -Input &quot;$(LibraryRoot)\AutoRest\Generators\AcceptanceTests\swagger\body-number.json&quot; -Header NONE"/>

    <!--Build and run tests-->
    <MSBuild Projects="$(TestProjectDir)\NugetPackageCsharpTest.csproj" Targets="rebuild" />
    <ItemGroup>
      <TestDlls Include="$(TestProjectDir)\bin\$(Configuration)\NuGetPackageCSharpTest.dll" />
    </ItemGroup>
    <xunit Assemblies="@(TestDlls)" />
    <Exec WorkingDirectory="$(TestProjectDir)" Command="npm test"/>
  </Target>

  <PropertyGroup>
    <!-- This property is used by the continuous intergration job.
         Do not remove without first updating the CI job. Also due to a known limitation,
         make sure pathes do not end with a backslash -->
    <CorporateScanPaths>$(LibrarySourceFolder)ClientRuntimes;$(LibrarySourceFolder)AutoRest</CorporateScanPaths>
    <BinscopeScanPath>$(BinariesFolder)</BinscopeScanPath>
  </PropertyGroup>
  <Target Name="SignBinariesForAFxTarget">
    <PropertyGroup>
      <!-- Public token of MSSharedLibKey.snk. -->
      <StrongNameToken Condition=" '$(StrongNameToken)' == '' ">31bf3856ad364e35</StrongNameToken>
    </PropertyGroup>
    <GetFrameworkSdkPath>
      <Output TaskParameter="Path" PropertyName="SdkPath"/>
    </GetFrameworkSdkPath>
    <ItemGroup>
      <DelaySignedAssembliesToValidate Include="binaries\$(LibraryFxTarget)\unsigned\*.*" />
    </ItemGroup>
    <ValidateStrongNameSignatureTask
        SdkPath="$(SdkPath)"
        Assembly="%(DelaySignedAssembliesToValidate.Identity)"
        ExpectedTokenSignature="$(StrongNameToken)"
        ExpectedDelaySigned="true"
        ContinueOnError="false" />
    <CodeSigningTask
        Description="Microsoft AutoRest"
        Keywords="Microsoft AutoRest"
        UnsignedFiles="@(DelaySignedAssembliesToValidate)"
        DestinationPath="binaries\$(LibraryFxTarget)"
        SigningLogPath="binaries\$(LibraryFxTarget)\signing.log"
        ToolsPath="$(CIToolsPath)"
        Condition="!$(DelaySign)"/>
    <!-- DelaySigned binaries copied locally for testing and not submitted to codesign service. -->
    <Copy SourceFiles="@(DelaySignedAssembliesToValidate)" DestinationFolder="binaries\$(LibraryFxTarget)" Condition="$(DelaySign)" />
    <ItemGroup>
      <AfterSignedAssembliesToValidate Include="binaries\$(LibraryFxTarget)\*.dll;binaries\$(LibraryFxTarget)\*.exe"
        Exclude="binaries\$(LibraryFxTarget)\Newtonsoft.*.dll" />
    </ItemGroup>
    <ValidateStrongNameSignatureTask
        SdkPath="$(SdkPath)"
        Assembly="%(AfterSignedAssembliesToValidate.Identity)"
        ExpectedTokenSignature="$(StrongNameToken)"
        ExpectedDelaySigned="false"
        ContinueOnError="false"
        Condition="!$(DelaySign)"/>
    <RemoveDir Directories="binaries\$(LibraryFxTarget)\unsigned;" ContinueOnError="true" />
  </Target>

  <Target Name="CodeSignBinaries">
    <Error Condition=" !$(OnPremiseBuild) and !$(DelaySign) " Text="No CI tools path available, the code sign will be unable to continue. $(CIToolsPath)" />
    <Message Text="Code signing" Importance="high" />
    <MSBuild Projects="$(MSBuildProjectFullPath)"
             Targets="SignBinariesForAFxTarget"
             Properties="LibraryFxTarget=%(LibraryFxTargetList.Identity);StrongNameToken=$(StrongNameToken)">
    </MSBuild>
    <CallTarget Targets="ValidateCorporateCompliance" Condition="!$(DelaySign)"/>
  </Target>

  <!--
  The build tasks project is used for:
    providing date-based build numbers,
    processing regular expressions text replacements (e.g. in NuGet specs),
    validating strong name signatures.
  -->
  <Target Name="BuildMsBuildTask" DependsOnTargets="RestoreNugetPackages">
    <MSBuild Projects="$(LibraryToolsFolder)\AutoRest.Build.Tasks\AutoRest.Build.Tasks.csproj"
             Targets="Build"
             Properties="Configuration=Debug;Platform=AnyCPU"/>
  </Target>

  <Target Name="RestoreNugetPackages">
    <Exec Command="$(NuGetCommand) restore $(ClientRuntimeSolution) -source &quot;$(NuGetSources)&quot;" ContinueOnError="false" Condition=" '$(Scope)' == 'all' or '$(Scope)' == 'ClientRuntime'" />
    <Exec Command="$(NuGetCommand) restore $(CodeGeneratorSolution) -source &quot;$(NuGetSources)&quot;" ContinueOnError="false" Condition=" '$(Scope)' == 'all' or '$(Scope)' == 'CodeGenerator'" />
  </Target>

  <!-- Official releases require tools only available on corp network. -->
  <Target Name="ValidateCorporateCompliance">
    <Error Text="This target must be run in an on-premise build server." Condition=" '$(OnPremiseBuild)'=='false' " />
    <CallTarget Targets="CorporateValidation" />
    <CallTarget Targets="RunBinscope" />
  </Target>

  <!-- Build server tasks.  -->
  <Target Name="BuildServerPreparation">
    <!-- Log build server information. -->
    <Message Text="Build Server Information" Importance="high" />
    <Message Text="Hostname                : $(COMPUTERNAME)" />
    <Message Text="Build Account           : $(USERDOMAIN)\$(USERNAME)" />

    <!-- Log build properties.  -->
    <Message Text="Build Properties and Variables" Importance="high" />
    <Message Text="Client Runtime Solution : $(ClientRuntimeSolution)" />
    <Message Text="Code Generator Solution : $(CodeGeneratorSolution)" />
    <Message Text="Source folder           : $(LibrarySourceFolder)" />
  </Target>

  <Import Project="$(LibraryToolsFolder)\nuget.targets"/>

</Project>
