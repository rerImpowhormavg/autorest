{
  "openapi": "3.0.0",
  "info": {
    "description": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.",
    "version": "1.0.0",
    "title": "Swagger Petstore",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "apiteam@swagger.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "tags": [
    {
      "name": "pet",
      "description": "Everything about your Pets",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "store",
      "description": "Access to Petstore orders"
    },
    {
      "name": "user",
      "description": "Operations about user",
      "externalDocs": {
        "description": "Find out more about our store",
        "url": "http://swagger.io"
      }
    }
  ],
  "paths": {
    "/pet": {
      "post": {
        "tags": [
          "pet"
        ],
        "summary": "Add a new pet to the store",
        "description": "",
        "operationId": "addPet",
        "responses": {
          "405": {
            "$ref": "#/components/responses/paths·pet·post·responses·405"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ],
        "requestBody": {
          "x-ms-requestBody-name": "body",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Pet"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Pet"
              }
            }
          },
          "description": "Pet object that needs to be added to the store",
          "required": true
        },
        "x-ms-requestBody-index": 0
      },
      "put": {
        "tags": [
          "pet"
        ],
        "summary": "Update an existing pet",
        "description": "",
        "operationId": "updatePet",
        "responses": {
          "400": {
            "$ref": "#/components/responses/paths·pet·put·responses·400"
          },
          "404": {
            "$ref": "#/components/responses/paths·pet·put·responses·404"
          },
          "405": {
            "$ref": "#/components/responses/paths·pet·put·responses·405"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ],
        "requestBody": {
          "x-ms-requestBody-name": "body",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Pet"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Pet"
              }
            }
          },
          "description": "Pet object that needs to be added to the store",
          "required": true
        },
        "x-ms-requestBody-index": 0
      }
    },
    "/pet/findByStatus": {
      "get": {
        "tags": [
          "pet"
        ],
        "summary": "Finds Pets by status",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "findPetsByStatus",
        "parameters": [
          {
            "$ref": "#/components/parameters/paths·pet-findbystatus·get·parameters·0"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/paths·pet-findbystatus·get·responses·200"
          },
          "400": {
            "$ref": "#/components/responses/paths·pet-findbystatus·get·responses·400"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      }
    },
    "/pet/findByTags": {
      "get": {
        "tags": [
          "pet"
        ],
        "summary": "Finds Pets by tags",
        "description": "Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
        "operationId": "findPetsByTags",
        "parameters": [
          {
            "$ref": "#/components/parameters/paths·pet-findbytags·get·parameters·0"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/paths·pet-findbytags·get·responses·200"
          },
          "400": {
            "$ref": "#/components/responses/paths·pet-findbytags·get·responses·400"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ],
        "deprecated": true
      }
    },
    "/pet/{petId}": {
      "get": {
        "tags": [
          "pet"
        ],
        "summary": "Find pet by ID",
        "description": "Returns a single pet",
        "operationId": "getPetById",
        "parameters": [
          {
            "$ref": "#/components/parameters/paths·pet-petid·get·parameters·0"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/paths·pet-petid·get·responses·200"
          },
          "400": {
            "$ref": "#/components/responses/paths·pet-petid·get·responses·400"
          },
          "404": {
            "$ref": "#/components/responses/paths·pet-petid·get·responses·404"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "pet"
        ],
        "summary": "Updates a pet in the store with form data",
        "description": "",
        "operationId": "updatePetWithForm",
        "parameters": [
          {
            "$ref": "#/components/parameters/paths·pet-petid·post·parameters·0"
          }
        ],
        "responses": {
          "405": {
            "$ref": "#/components/responses/paths·pet-petid·post·responses·405"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ],
        "requestBody": {
          "x-ms-requestBody-name": "status",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Updated name of the pet",
                    "type": "string"
                  },
                  "status": {
                    "description": "Updated status of the pet",
                    "type": "string"
                  }
                },
                "required": []
              }
            }
          }
        },
        "x-ms-requestBody-index": 2
      },
      "delete": {
        "tags": [
          "pet"
        ],
        "summary": "Deletes a pet",
        "description": "",
        "operationId": "deletePet",
        "parameters": [
          {
            "$ref": "#/components/parameters/paths·pet-petid·delete·parameters·0"
          },
          {
            "$ref": "#/components/parameters/paths·pet-petid·delete·parameters·1"
          }
        ],
        "responses": {
          "400": {
            "$ref": "#/components/responses/paths·pet-petid·delete·responses·400"
          },
          "404": {
            "$ref": "#/components/responses/paths·pet-petid·delete·responses·404"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      }
    },
    "/pet/{petId}/uploadImage": {
      "post": {
        "tags": [
          "pet"
        ],
        "summary": "uploads an image",
        "description": "",
        "operationId": "uploadFile",
        "parameters": [
          {
            "$ref": "#/components/parameters/paths·pet-petid-uploadimage·post·parameters·0"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/paths·pet-petid-uploadimage·post·responses·200"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ],
        "requestBody": {
          "x-ms-requestBody-name": "file",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "additionalMetadata": {
                    "description": "Additional data to pass to server",
                    "type": "string"
                  },
                  "file": {
                    "description": "file to upload",
                    "type": "file"
                  }
                },
                "required": []
              }
            }
          }
        },
        "x-ms-requestBody-index": 2
      }
    },
    "/store/inventory": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Returns pet inventories by status",
        "description": "Returns a map of status codes to quantities",
        "operationId": "getInventory",
        "responses": {
          "200": {
            "$ref": "#/components/responses/paths·store-inventory·get·responses·200"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/store/order": {
      "post": {
        "tags": [
          "store"
        ],
        "summary": "Place an order for a pet",
        "description": "",
        "operationId": "placeOrder",
        "responses": {
          "200": {
            "$ref": "#/components/responses/paths·store-order·post·responses·200"
          },
          "400": {
            "$ref": "#/components/responses/paths·store-order·post·responses·400"
          }
        },
        "requestBody": {
          "x-ms-requestBody-name": "body",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            }
          },
          "description": "order placed for purchasing the pet",
          "required": true
        },
        "x-ms-requestBody-index": 0
      }
    },
    "/store/order/{orderId}": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Find purchase order by ID",
        "description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
        "operationId": "getOrderById",
        "parameters": [
          {
            "$ref": "#/components/parameters/paths·store-order-orderid·get·parameters·0"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/paths·store-order-orderid·get·responses·200"
          },
          "400": {
            "$ref": "#/components/responses/paths·store-order-orderid·get·responses·400"
          },
          "404": {
            "$ref": "#/components/responses/paths·store-order-orderid·get·responses·404"
          }
        }
      },
      "delete": {
        "tags": [
          "store"
        ],
        "summary": "Delete purchase order by ID",
        "description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
        "operationId": "deleteOrder",
        "parameters": [
          {
            "$ref": "#/components/parameters/paths·store-order-orderid·delete·parameters·0"
          }
        ],
        "responses": {
          "400": {
            "$ref": "#/components/responses/paths·store-order-orderid·delete·responses·400"
          },
          "404": {
            "$ref": "#/components/responses/paths·store-order-orderid·delete·responses·404"
          }
        }
      }
    },
    "/user": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create user",
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "responses": {
          "default": {
            "$ref": "#/components/responses/paths·user·post·responses·default"
          }
        },
        "requestBody": {
          "x-ms-requestBody-name": "body",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "description": "Created user object",
          "required": true
        },
        "x-ms-requestBody-index": 0
      }
    },
    "/user/createWithArray": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Creates list of users with given input array",
        "description": "",
        "operationId": "createUsersWithArrayInput",
        "responses": {
          "default": {
            "$ref": "#/components/responses/paths·user-createwitharray·post·responses·default"
          }
        },
        "requestBody": {
          "x-ms-requestBody-name": "body",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "description": "List of user object",
          "required": true
        },
        "x-ms-requestBody-index": 0
      }
    },
    "/user/createWithList": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Creates list of users with given input array",
        "description": "",
        "operationId": "createUsersWithListInput",
        "responses": {
          "default": {
            "$ref": "#/components/responses/paths·user-createwithlist·post·responses·default"
          }
        },
        "requestBody": {
          "x-ms-requestBody-name": "body",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "description": "List of user object",
          "required": true
        },
        "x-ms-requestBody-index": 0
      }
    },
    "/user/login": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "loginUser",
        "parameters": [
          {
            "$ref": "#/components/parameters/paths·user-login·get·parameters·0"
          },
          {
            "$ref": "#/components/parameters/paths·user-login·get·parameters·1"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/paths·user-login·get·responses·200"
          },
          "400": {
            "$ref": "#/components/responses/paths·user-login·get·responses·400"
          }
        }
      }
    },
    "/user/logout": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Logs out current logged in user session",
        "description": "",
        "operationId": "logoutUser",
        "responses": {
          "default": {
            "$ref": "#/components/responses/paths·user-logout·get·responses·default"
          }
        }
      }
    },
    "/user/{username}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user by user name",
        "description": "",
        "operationId": "getUserByName",
        "parameters": [
          {
            "$ref": "#/components/parameters/paths·user-username·get·parameters·0"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/paths·user-username·get·responses·200"
          },
          "400": {
            "$ref": "#/components/responses/paths·user-username·get·responses·400"
          },
          "404": {
            "$ref": "#/components/responses/paths·user-username·get·responses·404"
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Updated user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "parameters": [
          {
            "$ref": "#/components/parameters/paths·user-username·put·parameters·0"
          }
        ],
        "responses": {
          "400": {
            "$ref": "#/components/responses/paths·user-username·put·responses·400"
          },
          "404": {
            "$ref": "#/components/responses/paths·user-username·put·responses·404"
          }
        },
        "requestBody": {
          "x-ms-requestBody-name": "body",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "description": "Updated user object",
          "required": true
        },
        "x-ms-requestBody-index": 1
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "$ref": "#/components/parameters/paths·user-username·delete·parameters·0"
          }
        ],
        "responses": {
          "400": {
            "$ref": "#/components/responses/paths·user-username·delete·responses·400"
          },
          "404": {
            "$ref": "#/components/responses/paths·user-username·delete·responses·404"
          }
        }
      }
    }
  },
  "components": {
    "responses": {
      "paths·pet·post·responses·405": {
        "description": "Invalid input"
      },
      "paths·pet·put·responses·400": {
        "description": "Invalid ID supplied"
      },
      "paths·pet·put·responses·404": {
        "description": "Pet not found"
      },
      "paths·pet·put·responses·405": {
        "description": "Validation exception"
      },
      "paths·pet-findbystatus·get·responses·200": {
        "description": "successful operation",
        "content": {
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/paths·pet-findbystatus·get·responses·200·content·application-xml·schema"
            }
          },
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/paths·pet-findbystatus·get·responses·200·content·application-json·schema"
            }
          }
        }
      },
      "paths·pet-findbystatus·get·responses·400": {
        "description": "Invalid status value"
      },
      "paths·pet-findbytags·get·responses·200": {
        "description": "successful operation",
        "content": {
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/paths·pet-findbytags·get·responses·200·content·application-xml·schema"
            }
          },
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/paths·pet-findbytags·get·responses·200·content·application-json·schema"
            }
          }
        }
      },
      "paths·pet-findbytags·get·responses·400": {
        "description": "Invalid tag value"
      },
      "paths·pet-petid·get·responses·200": {
        "description": "successful operation",
        "content": {
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/Pet"
            }
          },
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Pet"
            }
          }
        }
      },
      "paths·pet-petid·get·responses·400": {
        "description": "Invalid ID supplied"
      },
      "paths·pet-petid·get·responses·404": {
        "description": "Pet not found"
      },
      "paths·pet-petid·post·responses·405": {
        "description": "Invalid input"
      },
      "paths·pet-petid·delete·responses·400": {
        "description": "Invalid ID supplied"
      },
      "paths·pet-petid·delete·responses·404": {
        "description": "Pet not found"
      },
      "paths·pet-petid-uploadimage·post·responses·200": {
        "description": "successful operation",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ApiResponse"
            }
          }
        }
      },
      "paths·store-inventory·get·responses·200": {
        "description": "successful operation",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/paths·store-inventory·get·responses·200·content·application-json·schema"
            }
          }
        }
      },
      "paths·store-order·post·responses·200": {
        "description": "successful operation",
        "content": {
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/Order"
            }
          },
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Order"
            }
          }
        }
      },
      "paths·store-order·post·responses·400": {
        "description": "Invalid Order"
      },
      "paths·store-order-orderid·get·responses·200": {
        "description": "successful operation",
        "content": {
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/Order"
            }
          },
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Order"
            }
          }
        }
      },
      "paths·store-order-orderid·get·responses·400": {
        "description": "Invalid ID supplied"
      },
      "paths·store-order-orderid·get·responses·404": {
        "description": "Order not found"
      },
      "paths·store-order-orderid·delete·responses·400": {
        "description": "Invalid ID supplied"
      },
      "paths·store-order-orderid·delete·responses·404": {
        "description": "Order not found"
      },
      "paths·user·post·responses·default": {
        "description": "successful operation"
      },
      "paths·user-createwitharray·post·responses·default": {
        "description": "successful operation"
      },
      "paths·user-createwithlist·post·responses·default": {
        "description": "successful operation"
      },
      "paths·user-login·get·responses·200": {
        "description": "successful operation",
        "headers": {
          "X-Rate-Limit": {
            "$ref": "#/components/headers/paths·user-login·get·responses·200·headers·x-rate-limit"
          },
          "X-Expires-After": {
            "$ref": "#/components/headers/paths·user-login·get·responses·200·headers·x-expires-after"
          }
        },
        "content": {
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/paths·user-login·get·responses·200·content·application-xml·schema"
            }
          },
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/paths·user-login·get·responses·200·content·application-json·schema"
            }
          }
        }
      },
      "paths·user-login·get·responses·400": {
        "description": "Invalid username/password supplied"
      },
      "paths·user-logout·get·responses·default": {
        "description": "successful operation"
      },
      "paths·user-username·get·responses·200": {
        "description": "successful operation",
        "content": {
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/User"
            }
          },
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/User"
            }
          }
        }
      },
      "paths·user-username·get·responses·400": {
        "description": "Invalid username supplied"
      },
      "paths·user-username·get·responses·404": {
        "description": "User not found"
      },
      "paths·user-username·put·responses·400": {
        "description": "Invalid user supplied"
      },
      "paths·user-username·put·responses·404": {
        "description": "User not found"
      },
      "paths·user-username·delete·responses·400": {
        "description": "Invalid username supplied"
      },
      "paths·user-username·delete·responses·404": {
        "description": "User not found"
      }
    },
    "parameters": {
      "paths·pet-findbystatus·get·parameters·0": {
        "name": "status",
        "in": "query",
        "description": "Status values that need to be considered for filter",
        "required": true,
        "explode": true,
        "schema": {
          "$ref": "#/components/schemas/paths·pet-findbystatus·get·parameters·0·schema"
        }
      },
      "paths·pet-findbytags·get·parameters·0": {
        "name": "tags",
        "in": "query",
        "description": "Tags to filter by",
        "required": true,
        "explode": true,
        "schema": {
          "$ref": "#/components/schemas/paths·pet-findbytags·get·parameters·0·schema"
        }
      },
      "paths·pet-petid·get·parameters·0": {
        "name": "petId",
        "in": "path",
        "description": "ID of pet to return",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/paths·pet-petid·get·parameters·0·schema"
        }
      },
      "paths·pet-petid·post·parameters·0": {
        "name": "petId",
        "in": "path",
        "description": "ID of pet that needs to be updated",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/paths·pet-petid·post·parameters·0·schema"
        }
      },
      "paths·pet-petid·delete·parameters·0": {
        "name": "api_key",
        "in": "header",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/paths·pet-petid·delete·parameters·0·schema"
        }
      },
      "paths·pet-petid·delete·parameters·1": {
        "name": "petId",
        "in": "path",
        "description": "Pet id to delete",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/paths·pet-petid·delete·parameters·1·schema"
        }
      },
      "paths·pet-petid-uploadimage·post·parameters·0": {
        "name": "petId",
        "in": "path",
        "description": "ID of pet to update",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/paths·pet-petid-uploadimage·post·parameters·0·schema"
        }
      },
      "paths·store-order-orderid·get·parameters·0": {
        "name": "orderId",
        "in": "path",
        "description": "ID of pet that needs to be fetched",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/paths·store-order-orderid·get·parameters·0·schema"
        }
      },
      "paths·store-order-orderid·delete·parameters·0": {
        "name": "orderId",
        "in": "path",
        "description": "ID of the order that needs to be deleted",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/paths·store-order-orderid·delete·parameters·0·schema"
        }
      },
      "paths·user-login·get·parameters·0": {
        "name": "username",
        "in": "query",
        "description": "The user name for login",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/paths·user-login·get·parameters·0·schema"
        }
      },
      "paths·user-login·get·parameters·1": {
        "name": "password",
        "in": "query",
        "description": "The password for login in clear text",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/paths·user-login·get·parameters·1·schema"
        }
      },
      "paths·user-username·get·parameters·0": {
        "name": "username",
        "in": "path",
        "description": "The name that needs to be fetched. Use user1 for testing. ",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/paths·user-username·get·parameters·0·schema"
        }
      },
      "paths·user-username·put·parameters·0": {
        "name": "username",
        "in": "path",
        "description": "name that need to be updated",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/paths·user-username·put·parameters·0·schema"
        }
      },
      "paths·user-username·delete·parameters·0": {
        "name": "username",
        "in": "path",
        "description": "The name that needs to be deleted",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/paths·user-username·delete·parameters·0·schema"
        }
      }
    },
    "schemas": {
      "paths·pet-findbystatus·get·parameters·0·schema": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/paths·pet-findbystatus·get·parameters·0·schema·items"
        }
      },
      "paths·pet-findbystatus·get·parameters·0·schema·items": {
        "type": "string",
        "enum": [
          "available",
          "pending",
          "sold"
        ],
        "default": "available"
      },
      "paths·pet-findbystatus·get·responses·200·content·application-xml·schema": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Pet"
        }
      },
      "paths·pet-findbystatus·get·responses·200·content·application-json·schema": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Pet"
        }
      },
      "paths·pet-findbytags·get·parameters·0·schema": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/paths·pet-findbytags·get·parameters·0·schema·items"
        }
      },
      "paths·pet-findbytags·get·parameters·0·schema·items": {
        "type": "string"
      },
      "paths·pet-findbytags·get·responses·200·content·application-xml·schema": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Pet"
        }
      },
      "paths·pet-findbytags·get·responses·200·content·application-json·schema": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Pet"
        }
      },
      "paths·pet-petid·get·parameters·0·schema": {
        "type": "integer",
        "format": "int64"
      },
      "paths·pet-petid·post·parameters·0·schema": {
        "type": "integer",
        "format": "int64"
      },
      "paths·pet-petid·delete·parameters·0·schema": {
        "type": "string"
      },
      "paths·pet-petid·delete·parameters·1·schema": {
        "type": "integer",
        "format": "int64"
      },
      "paths·pet-petid-uploadimage·post·parameters·0·schema": {
        "type": "integer",
        "format": "int64"
      },
      "paths·store-inventory·get·responses·200·content·application-json·schema": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/components/schemas/paths·store-inventory·get·responses·200·content·application-json·schema·additionalproperties"
        }
      },
      "paths·store-inventory·get·responses·200·content·application-json·schema·additionalproperties": {
        "type": "integer",
        "format": "int32"
      },
      "paths·store-order-orderid·get·parameters·0·schema": {
        "type": "integer",
        "format": "int64",
        "minimum": 1,
        "maximum": 10
      },
      "paths·store-order-orderid·delete·parameters·0·schema": {
        "type": "integer",
        "format": "int64",
        "minimum": 1
      },
      "paths·user-login·get·parameters·0·schema": {
        "type": "string"
      },
      "paths·user-login·get·parameters·1·schema": {
        "type": "string",
        "format": "password"
      },
      "paths·user-login·get·responses·200·headers·x-rate-limit·schema": {
        "type": "integer",
        "format": "int32"
      },
      "paths·user-login·get·responses·200·headers·x-expires-after·schema": {
        "type": "string",
        "format": "date-time"
      },
      "paths·user-login·get·responses·200·content·application-xml·schema": {
        "type": "string"
      },
      "paths·user-login·get·responses·200·content·application-json·schema": {
        "type": "string"
      },
      "paths·user-username·get·parameters·0·schema": {
        "type": "string"
      },
      "paths·user-username·put·parameters·0·schema": {
        "type": "string"
      },
      "paths·user-username·delete·parameters·0·schema": {
        "type": "string"
      },
      "Order": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/components·schemas·order·properties·id"
          },
          "petId": {
            "$ref": "#/components/schemas/components·schemas·order·properties·petid"
          },
          "quantity": {
            "$ref": "#/components/schemas/components·schemas·order·properties·quantity"
          },
          "shipDate": {
            "$ref": "#/components/schemas/components·schemas·order·properties·shipdate"
          },
          "status": {
            "$ref": "#/components/schemas/components·schemas·order·properties·status"
          },
          "complete": {
            "$ref": "#/components/schemas/components·schemas·order·properties·complete"
          }
        },
        "xml": {
          "name": "Order"
        }
      },
      "components·schemas·order·properties·id": {
        "type": "integer",
        "format": "int64"
      },
      "components·schemas·order·properties·petid": {
        "type": "integer",
        "format": "int64"
      },
      "components·schemas·order·properties·quantity": {
        "type": "integer",
        "format": "int32"
      },
      "components·schemas·order·properties·shipdate": {
        "type": "string",
        "format": "date-time"
      },
      "components·schemas·order·properties·status": {
        "type": "string",
        "description": "Order Status",
        "enum": [
          "placed",
          "approved",
          "delivered"
        ]
      },
      "components·schemas·order·properties·complete": {
        "type": "boolean",
        "default": false
      },
      "Category": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/components·schemas·category·properties·id"
          },
          "name": {
            "$ref": "#/components/schemas/components·schemas·category·properties·name"
          }
        },
        "xml": {
          "name": "Category"
        }
      },
      "components·schemas·category·properties·id": {
        "type": "integer",
        "format": "int64"
      },
      "components·schemas·category·properties·name": {
        "type": "string"
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/components·schemas·user·properties·id"
          },
          "username": {
            "$ref": "#/components/schemas/components·schemas·user·properties·username"
          },
          "firstName": {
            "$ref": "#/components/schemas/components·schemas·user·properties·firstname"
          },
          "lastName": {
            "$ref": "#/components/schemas/components·schemas·user·properties·lastname"
          },
          "email": {
            "$ref": "#/components/schemas/components·schemas·user·properties·email"
          },
          "password": {
            "$ref": "#/components/schemas/components·schemas·user·properties·password"
          },
          "phone": {
            "$ref": "#/components/schemas/components·schemas·user·properties·phone"
          },
          "userStatus": {
            "$ref": "#/components/schemas/components·schemas·user·properties·userstatus"
          }
        },
        "xml": {
          "name": "User"
        }
      },
      "components·schemas·user·properties·id": {
        "type": "integer",
        "format": "int64"
      },
      "components·schemas·user·properties·username": {
        "type": "string"
      },
      "components·schemas·user·properties·firstname": {
        "type": "string"
      },
      "components·schemas·user·properties·lastname": {
        "type": "string"
      },
      "components·schemas·user·properties·email": {
        "type": "string"
      },
      "components·schemas·user·properties·password": {
        "type": "string"
      },
      "components·schemas·user·properties·phone": {
        "type": "string"
      },
      "components·schemas·user·properties·userstatus": {
        "type": "integer",
        "format": "int32",
        "description": "User Status"
      },
      "Tag": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/components·schemas·tag·properties·id"
          },
          "name": {
            "$ref": "#/components/schemas/components·schemas·tag·properties·name"
          }
        },
        "xml": {
          "name": "Tag"
        }
      },
      "components·schemas·tag·properties·id": {
        "type": "integer",
        "format": "int64"
      },
      "components·schemas·tag·properties·name": {
        "type": "string"
      },
      "Pet": {
        "type": "object",
        "required": [
          "name",
          "photoUrls"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/components·schemas·pet·properties·id"
          },
          "category": {
            "$ref": "#/components/schemas/Category"
          },
          "name": {
            "$ref": "#/components/schemas/components·schemas·pet·properties·name"
          },
          "photoUrls": {
            "$ref": "#/components/schemas/components·schemas·pet·properties·photourls"
          },
          "tags": {
            "$ref": "#/components/schemas/components·schemas·pet·properties·tags"
          },
          "status": {
            "$ref": "#/components/schemas/components·schemas·pet·properties·status"
          }
        },
        "xml": {
          "name": "Pet"
        }
      },
      "components·schemas·pet·properties·id": {
        "type": "integer",
        "format": "int64"
      },
      "components·schemas·pet·properties·name": {
        "type": "string",
        "example": "doggie"
      },
      "components·schemas·pet·properties·photourls": {
        "type": "array",
        "xml": {
          "name": "photoUrl",
          "wrapped": true
        },
        "items": {
          "$ref": "#/components/schemas/components·schemas·pet·properties·photourls·items"
        }
      },
      "components·schemas·pet·properties·photourls·items": {
        "type": "string"
      },
      "components·schemas·pet·properties·tags": {
        "type": "array",
        "xml": {
          "name": "tag",
          "wrapped": true
        },
        "items": {
          "$ref": "#/components/schemas/Tag"
        }
      },
      "components·schemas·pet·properties·status": {
        "type": "string",
        "description": "pet status in the store",
        "enum": [
          "available",
          "pending",
          "sold"
        ]
      },
      "ApiResponse": {
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/components·schemas·apiresponse·properties·code"
          },
          "type": {
            "$ref": "#/components/schemas/components·schemas·apiresponse·properties·type"
          },
          "message": {
            "$ref": "#/components/schemas/components·schemas·apiresponse·properties·message"
          }
        }
      },
      "components·schemas·apiresponse·properties·code": {
        "type": "integer",
        "format": "int32"
      },
      "components·schemas·apiresponse·properties·type": {
        "type": "string"
      },
      "components·schemas·apiresponse·properties·message": {
        "type": "string"
      }
    },
    "headers": {
      "paths·user-login·get·responses·200·headers·x-rate-limit": {
        "description": "calls per hour allowed by the user",
        "schema": {
          "$ref": "#/components/schemas/paths·user-login·get·responses·200·headers·x-rate-limit·schema"
        }
      },
      "paths·user-login·get·responses·200·headers·x-expires-after": {
        "description": "date in UTC when token expires",
        "schema": {
          "$ref": "#/components/schemas/paths·user-login·get·responses·200·headers·x-expires-after·schema"
        }
      }
    },
    "securitySchemes": {
      "petstore_auth": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
            "scopes": {
              "write:pets": "modify pets in your account",
              "read:pets": "read your pets"
            }
          }
        }
      },
      "api_key": {
        "type": "apiKey",
        "name": "api_key",
        "in": "header"
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  },
  "servers": [
    {
      "url": "http://petstore.swagger.io/v2"
    }
  ]
}